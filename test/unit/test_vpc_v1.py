# -*- coding: utf-8 -*-
# (C) Copyright IBM Corp. 2020.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from datetime import datetime, timezone
from ibm_cloud_sdk_core.authenticators.no_auth_authenticator import NoAuthAuthenticator
import base64
import inspect
import json
import pytest
import re
import requests
import responses
from ibm_vpc.vpc_v1 import *

version = 'testString'
generation = 2

service = VpcV1(authenticator=NoAuthAuthenticator(), version=version)

base_url = 'https://us-south.iaas.cloud.ibm.com/v1'
service.set_service_url(base_url)

##############################################################################
# Start of Service: FloatingIPs
##############################################################################
# region


#-----------------------------------------------------------------------------
# Test Class for list_floating_ips
#-----------------------------------------------------------------------------
class TestListFloatingIps():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_floating_ips()
    #--------------------------------------------------------
    @responses.activate
    def test_list_floating_ips_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?limit=20"}, "floating_ips": [{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'

        # Invoke method
        response = service.list_floating_ips(
            start=start,
            limit=limit,
            resource_group_id=resource_group_id,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string

    #--------------------------------------------------------
    # test_list_floating_ips_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_floating_ips_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?limit=20"}, "floating_ips": [{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_floating_ips()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_floating_ips_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_floating_ips_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?limit=20"}, "floating_ips": [{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_floating_ips(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_floating_ip
#-----------------------------------------------------------------------------
class TestCreateFloatingIp():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_floating_ip()
    #--------------------------------------------------------
    @responses.activate
    def test_create_floating_ip_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips')
        mock_response = '{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a FloatingIPPrototypeFloatingIPByZone model
        floating_ip_prototype_model = {}
        floating_ip_prototype_model['name'] = 'my-floating-ip'
        floating_ip_prototype_model[
            'resource_group'] = resource_group_identity_model
        floating_ip_prototype_model['zone'] = zone_identity_model

        # Set up parameter values
        floating_ip_prototype = floating_ip_prototype_model

        # Invoke method
        response = service.create_floating_ip(floating_ip_prototype, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == floating_ip_prototype

    #--------------------------------------------------------
    # test_create_floating_ip_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_floating_ip_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips')
        mock_response = '{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a FloatingIPPrototypeFloatingIPByZone model
        floating_ip_prototype_model = {}
        floating_ip_prototype_model['name'] = 'my-floating-ip'
        floating_ip_prototype_model[
            'resource_group'] = resource_group_identity_model
        floating_ip_prototype_model['zone'] = zone_identity_model

        # Set up parameter values
        floating_ip_prototype = floating_ip_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "floating_ip_prototype": floating_ip_prototype,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_floating_ip(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_floating_ip
#-----------------------------------------------------------------------------
class TestDeleteFloatingIp():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_floating_ip()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_floating_ip_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_floating_ip(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_floating_ip_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_floating_ip_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_floating_ip(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_floating_ip
#-----------------------------------------------------------------------------
class TestGetFloatingIp():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_floating_ip()
    #--------------------------------------------------------
    @responses.activate
    def test_get_floating_ip_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips/testString')
        mock_response = '{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_floating_ip(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_floating_ip_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_floating_ip_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips/testString')
        mock_response = '{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_floating_ip(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_floating_ip
#-----------------------------------------------------------------------------
class TestUpdateFloatingIp():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_floating_ip()
    #--------------------------------------------------------
    @responses.activate
    def test_update_floating_ip_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips/testString')
        mock_response = '{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a NetworkInterfaceIdentityById model
        network_interface_identity_model = {}
        network_interface_identity_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'

        # Set up parameter values
        id = 'testString'
        name = 'my-floating-ip'
        target = network_interface_identity_model

        # Invoke method
        response = service.update_floating_ip(id,
                                              name=name,
                                              target=target,
                                              headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['name'] == 'my-floating-ip'
        assert req_body['target'] == network_interface_identity_model

    #--------------------------------------------------------
    # test_update_floating_ip_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_floating_ip_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips/testString')
        mock_response = '{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a NetworkInterfaceIdentityById model
        network_interface_identity_model = {}
        network_interface_identity_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'

        # Set up parameter values
        id = 'testString'
        name = 'my-floating-ip'
        target = network_interface_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_floating_ip(**req_copy)


# endregion
##############################################################################
# End of Service: FloatingIPs
##############################################################################

##############################################################################
# Start of Service: FlowLogCollectorsBeta
##############################################################################
# region


#-----------------------------------------------------------------------------
# Test Class for list_flow_log_collectors
#-----------------------------------------------------------------------------
class TestListFlowLogCollectors():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_flow_log_collectors()
    #--------------------------------------------------------
    @responses.activate
    def test_list_flow_log_collectors_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?limit=20"}, "flow_log_collectors": [{"active": true, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "lifecycle_state": "stable", "name": "my-flow-log-collector", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'
        name = 'testString'
        vpc_id = 'testString'
        vpc_crn = 'testString'
        vpc_name = 'testString'
        target_id = 'testString'
        target_resource_type = 'vpc'

        # Invoke method
        response = service.list_flow_log_collectors(
            start=start,
            limit=limit,
            resource_group_id=resource_group_id,
            name=name,
            vpc_id=vpc_id,
            vpc_crn=vpc_crn,
            vpc_name=vpc_name,
            target_id=target_id,
            target_resource_type=target_resource_type,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string
        assert 'name={}'.format(name) in query_string
        assert 'vpc.id={}'.format(vpc_id) in query_string
        assert 'vpc.crn={}'.format(vpc_crn) in query_string
        assert 'vpc.name={}'.format(vpc_name) in query_string
        assert 'target.id={}'.format(target_id) in query_string
        assert 'target.resource_type={}'.format(
            target_resource_type) in query_string

    #--------------------------------------------------------
    # test_list_flow_log_collectors_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_flow_log_collectors_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?limit=20"}, "flow_log_collectors": [{"active": true, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "lifecycle_state": "stable", "name": "my-flow-log-collector", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_flow_log_collectors()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_flow_log_collectors_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_flow_log_collectors_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?limit=20"}, "flow_log_collectors": [{"active": true, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "lifecycle_state": "stable", "name": "my-flow-log-collector", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_flow_log_collectors(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_flow_log_collector
#-----------------------------------------------------------------------------
class TestCreateFlowLogCollector():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_flow_log_collector()
    #--------------------------------------------------------
    @responses.activate
    def test_create_flow_log_collector_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors')
        mock_response = '{"active": true, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "lifecycle_state": "stable", "name": "my-flow-log-collector", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a CloudObjectStorageBucketIdentityByName model
        cloud_object_storage_bucket_identity_model = {}
        cloud_object_storage_bucket_identity_model[
            'name'] = 'bucket-27200-lwx4cfvcue'

        # Construct a dict representation of a FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById model
        flow_log_collector_prototype_target_model = {}
        flow_log_collector_prototype_target_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        storage_bucket = cloud_object_storage_bucket_identity_model
        target = flow_log_collector_prototype_target_model
        active = False
        name = 'my-flow-log-collector'
        resource_group = resource_group_identity_model

        # Invoke method
        response = service.create_flow_log_collector(
            storage_bucket,
            target,
            active=active,
            name=name,
            resource_group=resource_group,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body[
            'storage_bucket'] == cloud_object_storage_bucket_identity_model
        assert req_body['target'] == flow_log_collector_prototype_target_model
        assert req_body['active'] == False
        assert req_body['name'] == 'my-flow-log-collector'
        assert req_body['resource_group'] == resource_group_identity_model

    #--------------------------------------------------------
    # test_create_flow_log_collector_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_flow_log_collector_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors')
        mock_response = '{"active": true, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "lifecycle_state": "stable", "name": "my-flow-log-collector", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a CloudObjectStorageBucketIdentityByName model
        cloud_object_storage_bucket_identity_model = {}
        cloud_object_storage_bucket_identity_model[
            'name'] = 'bucket-27200-lwx4cfvcue'

        # Construct a dict representation of a FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById model
        flow_log_collector_prototype_target_model = {}
        flow_log_collector_prototype_target_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        storage_bucket = cloud_object_storage_bucket_identity_model
        target = flow_log_collector_prototype_target_model
        active = False
        name = 'my-flow-log-collector'
        resource_group = resource_group_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "storage_bucket": storage_bucket,
            "target": target,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_flow_log_collector(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_flow_log_collector
#-----------------------------------------------------------------------------
class TestDeleteFlowLogCollector():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_flow_log_collector()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_flow_log_collector_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_flow_log_collector(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_flow_log_collector_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_flow_log_collector_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_flow_log_collector(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_flow_log_collector
#-----------------------------------------------------------------------------
class TestGetFlowLogCollector():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_flow_log_collector()
    #--------------------------------------------------------
    @responses.activate
    def test_get_flow_log_collector_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors/testString')
        mock_response = '{"active": true, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "lifecycle_state": "stable", "name": "my-flow-log-collector", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_flow_log_collector(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_flow_log_collector_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_flow_log_collector_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors/testString')
        mock_response = '{"active": true, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "lifecycle_state": "stable", "name": "my-flow-log-collector", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_flow_log_collector(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_flow_log_collector
#-----------------------------------------------------------------------------
class TestUpdateFlowLogCollector():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_flow_log_collector()
    #--------------------------------------------------------
    @responses.activate
    def test_update_flow_log_collector_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors/testString')
        mock_response = '{"active": true, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "lifecycle_state": "stable", "name": "my-flow-log-collector", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        active = True
        name = 'my-flow-log-collector'

        # Invoke method
        response = service.update_flow_log_collector(id,
                                                     active=active,
                                                     name=name,
                                                     headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['active'] == True
        assert req_body['name'] == 'my-flow-log-collector'

    #--------------------------------------------------------
    # test_update_flow_log_collector_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_flow_log_collector_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors/testString')
        mock_response = '{"active": true, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "lifecycle_state": "stable", "name": "my-flow-log-collector", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        active = True
        name = 'my-flow-log-collector'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_flow_log_collector(**req_copy)


# endregion
##############################################################################
# End of Service: FlowLogCollectorsBeta
##############################################################################

##############################################################################
# Start of Service: Geography
##############################################################################
# region


#-----------------------------------------------------------------------------
# Test Class for list_regions
#-----------------------------------------------------------------------------
class TestListRegions():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_regions()
    #--------------------------------------------------------
    @responses.activate
    def test_list_regions_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/regions')
        mock_response = '{"regions": [{"endpoint": "endpoint", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south", "status": "available"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_regions()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_regions_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_regions_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/regions')
        mock_response = '{"regions": [{"endpoint": "endpoint", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south", "status": "available"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_regions(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_region
#-----------------------------------------------------------------------------
class TestGetRegion():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_region()
    #--------------------------------------------------------
    @responses.activate
    def test_get_region_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/regions/testString')
        mock_response = '{"endpoint": "endpoint", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south", "status": "available"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        name = 'testString'

        # Invoke method
        response = service.get_region(name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_region_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_region_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/regions/testString')
        mock_response = '{"endpoint": "endpoint", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south", "status": "available"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "name": name,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_region(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_region_zones
#-----------------------------------------------------------------------------
class TestListRegionZones():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_region_zones()
    #--------------------------------------------------------
    @responses.activate
    def test_list_region_zones_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/regions/testString/zones')
        mock_response = '{"zones": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1", "region": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south"}, "status": "available"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        region_name = 'testString'

        # Invoke method
        response = service.list_region_zones(region_name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_region_zones_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_region_zones_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/regions/testString/zones')
        mock_response = '{"zones": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1", "region": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south"}, "status": "available"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        region_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "region_name": region_name,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_region_zones(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_region_zone
#-----------------------------------------------------------------------------
class TestGetRegionZone():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_region_zone()
    #--------------------------------------------------------
    @responses.activate
    def test_get_region_zone_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/regions/testString/zones/testString')
        mock_response = '{"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1", "region": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south"}, "status": "available"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        region_name = 'testString'
        zone_name = 'testString'

        # Invoke method
        response = service.get_region_zone(region_name, zone_name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_region_zone_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_region_zone_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/regions/testString/zones/testString')
        mock_response = '{"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1", "region": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south"}, "status": "available"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        region_name = 'testString'
        zone_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "region_name": region_name,
            "zone_name": zone_name,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_region_zone(**req_copy)


# endregion
##############################################################################
# End of Service: Geography
##############################################################################

##############################################################################
# Start of Service: Images
##############################################################################
# region


#-----------------------------------------------------------------------------
# Test Class for list_images
#-----------------------------------------------------------------------------
class TestListImages():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_images()
    #--------------------------------------------------------
    @responses.activate
    def test_list_images_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/images')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?limit=20"}, "images": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "file": {"size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 24, "name": "my-image", "operating_system": {"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "visibility": "private"}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'
        name = 'testString'
        visibility = 'private'

        # Invoke method
        response = service.list_images(start=start,
                                       limit=limit,
                                       resource_group_id=resource_group_id,
                                       name=name,
                                       visibility=visibility,
                                       headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string
        assert 'name={}'.format(name) in query_string
        assert 'visibility={}'.format(visibility) in query_string

    #--------------------------------------------------------
    # test_list_images_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_images_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/images')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?limit=20"}, "images": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "file": {"size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 24, "name": "my-image", "operating_system": {"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "visibility": "private"}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_images()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_images_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_images_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/images')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?limit=20"}, "images": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "file": {"size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 24, "name": "my-image", "operating_system": {"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "visibility": "private"}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_images(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_image
#-----------------------------------------------------------------------------
class TestCreateImage():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_image()
    #--------------------------------------------------------
    @responses.activate
    def test_create_image_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/images')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "file": {"size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 24, "name": "my-image", "operating_system": {"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "visibility": "private"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ImageFilePrototype model
        image_file_prototype_model = {}
        image_file_prototype_model[
            'href'] = 'cos://us-south/custom-image-vpc-bucket/customImage-0.vhd'

        # Construct a dict representation of a OperatingSystemIdentityByName model
        operating_system_identity_model = {}
        operating_system_identity_model['name'] = 'ubuntu-16-amd64'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a ImagePrototypeImageByFile model
        image_prototype_model = {}
        image_prototype_model['name'] = 'my-image'
        image_prototype_model['resource_group'] = resource_group_identity_model
        image_prototype_model['file'] = image_file_prototype_model
        image_prototype_model[
            'operating_system'] = operating_system_identity_model

        # Set up parameter values
        image_prototype = image_prototype_model

        # Invoke method
        response = service.create_image(image_prototype, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == image_prototype

    #--------------------------------------------------------
    # test_create_image_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_image_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/images')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "file": {"size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 24, "name": "my-image", "operating_system": {"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "visibility": "private"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ImageFilePrototype model
        image_file_prototype_model = {}
        image_file_prototype_model[
            'href'] = 'cos://us-south/custom-image-vpc-bucket/customImage-0.vhd'

        # Construct a dict representation of a OperatingSystemIdentityByName model
        operating_system_identity_model = {}
        operating_system_identity_model['name'] = 'ubuntu-16-amd64'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a ImagePrototypeImageByFile model
        image_prototype_model = {}
        image_prototype_model['name'] = 'my-image'
        image_prototype_model['resource_group'] = resource_group_identity_model
        image_prototype_model['file'] = image_file_prototype_model
        image_prototype_model[
            'operating_system'] = operating_system_identity_model

        # Set up parameter values
        image_prototype = image_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "image_prototype": image_prototype,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_image(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_image
#-----------------------------------------------------------------------------
class TestDeleteImage():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_image()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_image_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/images/testString')
        responses.add(responses.DELETE, url, status=202)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_image(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 202

    #--------------------------------------------------------
    # test_delete_image_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_image_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/images/testString')
        responses.add(responses.DELETE, url, status=202)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_image(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_image
#-----------------------------------------------------------------------------
class TestGetImage():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_image()
    #--------------------------------------------------------
    @responses.activate
    def test_get_image_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/images/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "file": {"size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 24, "name": "my-image", "operating_system": {"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "visibility": "private"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_image(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_image_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_image_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/images/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "file": {"size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 24, "name": "my-image", "operating_system": {"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "visibility": "private"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_image(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_image
#-----------------------------------------------------------------------------
class TestUpdateImage():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_image()
    #--------------------------------------------------------
    @responses.activate
    def test_update_image_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/images/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "file": {"size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 24, "name": "my-image", "operating_system": {"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "visibility": "private"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-image'

        # Invoke method
        response = service.update_image(id, name=name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['name'] == 'my-image'

    #--------------------------------------------------------
    # test_update_image_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_image_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/images/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "file": {"size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 24, "name": "my-image", "operating_system": {"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "visibility": "private"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-image'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_image(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_operating_systems
#-----------------------------------------------------------------------------
class TestListOperatingSystems():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_operating_systems()
    #--------------------------------------------------------
    @responses.activate
    def test_list_operating_systems_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/operating_systems')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "operating_systems": [{"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1

        # Invoke method
        response = service.list_operating_systems(start=start,
                                                  limit=limit,
                                                  headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string

    #--------------------------------------------------------
    # test_list_operating_systems_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_operating_systems_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/operating_systems')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "operating_systems": [{"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_operating_systems()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_operating_systems_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_operating_systems_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/operating_systems')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "operating_systems": [{"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_operating_systems(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_operating_system
#-----------------------------------------------------------------------------
class TestGetOperatingSystem():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_operating_system()
    #--------------------------------------------------------
    @responses.activate
    def test_get_operating_system_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/operating_systems/testString')
        mock_response = '{"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        name = 'testString'

        # Invoke method
        response = service.get_operating_system(name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_operating_system_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_operating_system_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/operating_systems/testString')
        mock_response = '{"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "name": name,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_operating_system(**req_copy)


# endregion
##############################################################################
# End of Service: Images
##############################################################################

##############################################################################
# Start of Service: Instances
##############################################################################
# region


#-----------------------------------------------------------------------------
# Test Class for list_instance_profiles
#-----------------------------------------------------------------------------
class TestListInstanceProfiles():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_instance_profiles()
    #--------------------------------------------------------
    @responses.activate
    def test_list_instance_profiles_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/instance/profiles')
        mock_response = '{"profiles": [{"bandwidth": {"type": "fixed", "value": 20000}, "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "memory": {"type": "fixed", "value": 16}, "name": "bc1-4x16", "os_architecture": {"default": "default", "type": "enum", "values": ["amd64"]}, "port_speed": {"type": "fixed", "value": 1000}, "vcpu_architecture": {"default": "default", "type": "fixed", "value": "amd64"}, "vcpu_count": {"type": "fixed", "value": 16}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_instance_profiles()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_instance_profiles_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_instance_profiles_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/instance/profiles')
        mock_response = '{"profiles": [{"bandwidth": {"type": "fixed", "value": 20000}, "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "memory": {"type": "fixed", "value": 16}, "name": "bc1-4x16", "os_architecture": {"default": "default", "type": "enum", "values": ["amd64"]}, "port_speed": {"type": "fixed", "value": 1000}, "vcpu_architecture": {"default": "default", "type": "fixed", "value": "amd64"}, "vcpu_count": {"type": "fixed", "value": 16}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_instance_profiles(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_instance_profile
#-----------------------------------------------------------------------------
class TestGetInstanceProfile():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_instance_profile()
    #--------------------------------------------------------
    @responses.activate
    def test_get_instance_profile_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/instance/profiles/testString')
        mock_response = '{"bandwidth": {"type": "fixed", "value": 20000}, "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "memory": {"type": "fixed", "value": 16}, "name": "bc1-4x16", "os_architecture": {"default": "default", "type": "enum", "values": ["amd64"]}, "port_speed": {"type": "fixed", "value": 1000}, "vcpu_architecture": {"default": "default", "type": "fixed", "value": "amd64"}, "vcpu_count": {"type": "fixed", "value": 16}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        name = 'testString'

        # Invoke method
        response = service.get_instance_profile(name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_instance_profile_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_instance_profile_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/instance/profiles/testString')
        mock_response = '{"bandwidth": {"type": "fixed", "value": 20000}, "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "memory": {"type": "fixed", "value": 16}, "name": "bc1-4x16", "os_architecture": {"default": "default", "type": "enum", "values": ["amd64"]}, "port_speed": {"type": "fixed", "value": 1000}, "vcpu_architecture": {"default": "default", "type": "fixed", "value": "amd64"}, "vcpu_count": {"type": "fixed", "value": 16}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "name": name,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_instance_profile(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_instances
#-----------------------------------------------------------------------------
class TestListInstances():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_instances()
    #--------------------------------------------------------
    @responses.activate
    def test_list_instances_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/instances')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?limit=20"}, "instances": [{"bandwidth": 1000, "boot_volume_attachment": {"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'
        name = 'testString'
        vpc_id = 'testString'
        vpc_crn = 'testString'
        vpc_name = 'testString'

        # Invoke method
        response = service.list_instances(start=start,
                                          limit=limit,
                                          resource_group_id=resource_group_id,
                                          name=name,
                                          vpc_id=vpc_id,
                                          vpc_crn=vpc_crn,
                                          vpc_name=vpc_name,
                                          headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string
        assert 'name={}'.format(name) in query_string
        assert 'vpc.id={}'.format(vpc_id) in query_string
        assert 'vpc.crn={}'.format(vpc_crn) in query_string
        assert 'vpc.name={}'.format(vpc_name) in query_string

    #--------------------------------------------------------
    # test_list_instances_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_instances_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/instances')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?limit=20"}, "instances": [{"bandwidth": 1000, "boot_volume_attachment": {"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_instances()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_instances_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_instances_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/instances')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?limit=20"}, "instances": [{"bandwidth": 1000, "boot_volume_attachment": {"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_instances(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_instance
#-----------------------------------------------------------------------------
class TestCreateInstance():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_instance()
    #--------------------------------------------------------
    @responses.activate
    def test_create_instance_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/instances')
        mock_response = '{"bandwidth": 1000, "boot_volume_attachment": {"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VolumeProfileIdentityByName model
        volume_profile_identity_model = {}
        volume_profile_identity_model['name'] = 'general-purpose'

        # Construct a dict representation of a SecurityGroupIdentityById model
        security_group_identity_model = {}
        security_group_identity_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById model
        volume_attachment_prototype_instance_context_volume_model = {}
        volume_attachment_prototype_instance_context_volume_model[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a dict representation of a VolumePrototypeInstanceByImageContext model
        volume_prototype_instance_by_image_context_model = {}
        volume_prototype_instance_by_image_context_model['capacity'] = 100
        volume_prototype_instance_by_image_context_model['iops'] = 10000
        volume_prototype_instance_by_image_context_model['name'] = 'my-volume'
        volume_prototype_instance_by_image_context_model[
            'profile'] = volume_profile_identity_model

        # Construct a dict representation of a ImageIdentityById model
        image_identity_model = {}
        image_identity_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        # Construct a dict representation of a InstanceProfileIdentityByName model
        instance_profile_identity_model = {}
        instance_profile_identity_model['name'] = 'bc1-4x16'

        # Construct a dict representation of a KeyIdentityById model
        key_identity_model = {}
        key_identity_model['id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        # Construct a dict representation of a NetworkInterfacePrototype model
        network_interface_prototype_model = {}
        network_interface_prototype_model['name'] = 'my-network-interface'
        network_interface_prototype_model['primary_ipv4_address'] = '10.0.0.5'
        network_interface_prototype_model['security_groups'] = [
            security_group_identity_model
        ]
        network_interface_prototype_model['subnet'] = subnet_identity_model

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a VolumeAttachmentPrototypeInstanceByImageContext model
        volume_attachment_prototype_instance_by_image_context_model = {}
        volume_attachment_prototype_instance_by_image_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_by_image_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_by_image_context_model[
            'volume'] = volume_prototype_instance_by_image_context_model

        # Construct a dict representation of a VolumeAttachmentPrototypeInstanceContext model
        volume_attachment_prototype_instance_context_model = {}
        volume_attachment_prototype_instance_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_context_model[
            'volume'] = volume_attachment_prototype_instance_context_volume_model

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a InstancePrototypeInstanceByImage model
        instance_prototype_model = {}
        instance_prototype_model['keys'] = [key_identity_model]
        instance_prototype_model['name'] = 'my-instance'
        instance_prototype_model['network_interfaces'] = [
            network_interface_prototype_model
        ]
        instance_prototype_model['profile'] = instance_profile_identity_model
        instance_prototype_model[
            'resource_group'] = resource_group_identity_model
        instance_prototype_model['user_data'] = 'testString'
        instance_prototype_model['volume_attachments'] = [
            volume_attachment_prototype_instance_context_model
        ]
        instance_prototype_model['vpc'] = vpc_identity_model
        instance_prototype_model[
            'boot_volume_attachment'] = volume_attachment_prototype_instance_by_image_context_model
        instance_prototype_model['image'] = image_identity_model
        instance_prototype_model[
            'primary_network_interface'] = network_interface_prototype_model
        instance_prototype_model['zone'] = zone_identity_model

        # Set up parameter values
        instance_prototype = instance_prototype_model

        # Invoke method
        response = service.create_instance(instance_prototype, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == instance_prototype

    #--------------------------------------------------------
    # test_create_instance_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_instance_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/instances')
        mock_response = '{"bandwidth": 1000, "boot_volume_attachment": {"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VolumeProfileIdentityByName model
        volume_profile_identity_model = {}
        volume_profile_identity_model['name'] = 'general-purpose'

        # Construct a dict representation of a SecurityGroupIdentityById model
        security_group_identity_model = {}
        security_group_identity_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById model
        volume_attachment_prototype_instance_context_volume_model = {}
        volume_attachment_prototype_instance_context_volume_model[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a dict representation of a VolumePrototypeInstanceByImageContext model
        volume_prototype_instance_by_image_context_model = {}
        volume_prototype_instance_by_image_context_model['capacity'] = 100
        volume_prototype_instance_by_image_context_model['iops'] = 10000
        volume_prototype_instance_by_image_context_model['name'] = 'my-volume'
        volume_prototype_instance_by_image_context_model[
            'profile'] = volume_profile_identity_model

        # Construct a dict representation of a ImageIdentityById model
        image_identity_model = {}
        image_identity_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        # Construct a dict representation of a InstanceProfileIdentityByName model
        instance_profile_identity_model = {}
        instance_profile_identity_model['name'] = 'bc1-4x16'

        # Construct a dict representation of a KeyIdentityById model
        key_identity_model = {}
        key_identity_model['id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        # Construct a dict representation of a NetworkInterfacePrototype model
        network_interface_prototype_model = {}
        network_interface_prototype_model['name'] = 'my-network-interface'
        network_interface_prototype_model['primary_ipv4_address'] = '10.0.0.5'
        network_interface_prototype_model['security_groups'] = [
            security_group_identity_model
        ]
        network_interface_prototype_model['subnet'] = subnet_identity_model

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a VolumeAttachmentPrototypeInstanceByImageContext model
        volume_attachment_prototype_instance_by_image_context_model = {}
        volume_attachment_prototype_instance_by_image_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_by_image_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_by_image_context_model[
            'volume'] = volume_prototype_instance_by_image_context_model

        # Construct a dict representation of a VolumeAttachmentPrototypeInstanceContext model
        volume_attachment_prototype_instance_context_model = {}
        volume_attachment_prototype_instance_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_context_model[
            'volume'] = volume_attachment_prototype_instance_context_volume_model

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a InstancePrototypeInstanceByImage model
        instance_prototype_model = {}
        instance_prototype_model['keys'] = [key_identity_model]
        instance_prototype_model['name'] = 'my-instance'
        instance_prototype_model['network_interfaces'] = [
            network_interface_prototype_model
        ]
        instance_prototype_model['profile'] = instance_profile_identity_model
        instance_prototype_model[
            'resource_group'] = resource_group_identity_model
        instance_prototype_model['user_data'] = 'testString'
        instance_prototype_model['volume_attachments'] = [
            volume_attachment_prototype_instance_context_model
        ]
        instance_prototype_model['vpc'] = vpc_identity_model
        instance_prototype_model[
            'boot_volume_attachment'] = volume_attachment_prototype_instance_by_image_context_model
        instance_prototype_model['image'] = image_identity_model
        instance_prototype_model[
            'primary_network_interface'] = network_interface_prototype_model
        instance_prototype_model['zone'] = zone_identity_model

        # Set up parameter values
        instance_prototype = instance_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_prototype": instance_prototype,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_instance(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_instance
#-----------------------------------------------------------------------------
class TestDeleteInstance():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_instance()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_instance_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/instances/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_instance(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_instance_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_instance_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/instances/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_instance(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_instance
#-----------------------------------------------------------------------------
class TestGetInstance():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_instance()
    #--------------------------------------------------------
    @responses.activate
    def test_get_instance_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/instances/testString')
        mock_response = '{"bandwidth": 1000, "boot_volume_attachment": {"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_instance(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_instance_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_instance_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/instances/testString')
        mock_response = '{"bandwidth": 1000, "boot_volume_attachment": {"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_instance(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_instance
#-----------------------------------------------------------------------------
class TestUpdateInstance():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_instance()
    #--------------------------------------------------------
    @responses.activate
    def test_update_instance_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/instances/testString')
        mock_response = '{"bandwidth": 1000, "boot_volume_attachment": {"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-instance'

        # Invoke method
        response = service.update_instance(id, name=name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['name'] == 'my-instance'

    #--------------------------------------------------------
    # test_update_instance_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_instance_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/instances/testString')
        mock_response = '{"bandwidth": 1000, "boot_volume_attachment": {"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-instance'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_instance(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_instance_initialization
#-----------------------------------------------------------------------------
class TestGetInstanceInitialization():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_instance_initialization()
    #--------------------------------------------------------
    @responses.activate
    def test_get_instance_initialization_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/initialization')
        mock_response = '{"keys": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-key"}], "password": {"encrypted_password": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "encryption_key": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-key"}}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_instance_initialization(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_instance_initialization_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_instance_initialization_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/initialization')
        mock_response = '{"keys": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-key"}], "password": {"encrypted_password": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "encryption_key": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-key"}}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_instance_initialization(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_instance_action
#-----------------------------------------------------------------------------
class TestCreateInstanceAction():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_instance_action()
    #--------------------------------------------------------
    @responses.activate
    def test_create_instance_action_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/instances/testString/actions')
        mock_response = '{"completed_at": "2019-01-01T12:00:00", "created_at": "2019-01-01T12:00:00", "force": false, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/actions/109a1b6e-1242-4de1-be44-38705e9474ed", "id": "109a1b6e-1242-4de1-be44-38705e9474ed", "started_at": "2019-01-01T12:00:00", "status": "completed", "type": "reboot"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Set up parameter values
        instance_id = 'testString'
        type = 'reboot'
        force = True

        # Invoke method
        response = service.create_instance_action(instance_id,
                                                  type,
                                                  force=force,
                                                  headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['type'] == 'reboot'
        assert req_body['force'] == True

    #--------------------------------------------------------
    # test_create_instance_action_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_instance_action_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/instances/testString/actions')
        mock_response = '{"completed_at": "2019-01-01T12:00:00", "created_at": "2019-01-01T12:00:00", "force": false, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/actions/109a1b6e-1242-4de1-be44-38705e9474ed", "id": "109a1b6e-1242-4de1-be44-38705e9474ed", "started_at": "2019-01-01T12:00:00", "status": "completed", "type": "reboot"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Set up parameter values
        instance_id = 'testString'
        type = 'reboot'
        force = True

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "type": type,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_instance_action(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_instance_network_interfaces
#-----------------------------------------------------------------------------
class TestListInstanceNetworkInterfaces():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_instance_network_interfaces()
    #--------------------------------------------------------
    @responses.activate
    def test_list_instance_network_interfaces_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/network_interfaces')
        mock_response = '{"network_interfaces": [{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'

        # Invoke method
        response = service.list_instance_network_interfaces(instance_id,
                                                            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_instance_network_interfaces_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_instance_network_interfaces_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/network_interfaces')
        mock_response = '{"network_interfaces": [{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_instance_network_interfaces(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_instance_network_interface
#-----------------------------------------------------------------------------
class TestCreateInstanceNetworkInterface():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_instance_network_interface()
    #--------------------------------------------------------
    @responses.activate
    def test_create_instance_network_interface_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/network_interfaces')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a SecurityGroupIdentityById model
        security_group_identity_model = {}
        security_group_identity_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Set up parameter values
        instance_id = 'testString'
        subnet = subnet_identity_model
        name = 'my-network-interface'
        primary_ipv4_address = '10.0.0.5'
        security_groups = [security_group_identity_model]

        # Invoke method
        response = service.create_instance_network_interface(
            instance_id,
            subnet,
            name=name,
            primary_ipv4_address=primary_ipv4_address,
            security_groups=security_groups,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['subnet'] == subnet_identity_model
        assert req_body['name'] == 'my-network-interface'
        assert req_body['primary_ipv4_address'] == '10.0.0.5'
        assert req_body['security_groups'] == [security_group_identity_model]

    #--------------------------------------------------------
    # test_create_instance_network_interface_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_instance_network_interface_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/network_interfaces')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a SecurityGroupIdentityById model
        security_group_identity_model = {}
        security_group_identity_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Set up parameter values
        instance_id = 'testString'
        subnet = subnet_identity_model
        name = 'my-network-interface'
        primary_ipv4_address = '10.0.0.5'
        security_groups = [security_group_identity_model]

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "subnet": subnet,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_instance_network_interface(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_instance_network_interface
#-----------------------------------------------------------------------------
class TestDeleteInstanceNetworkInterface():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_instance_network_interface()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_instance_network_interface_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/network_interfaces/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_instance_network_interface(instance_id,
                                                             id,
                                                             headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_instance_network_interface_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_instance_network_interface_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/network_interfaces/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_instance_network_interface(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_instance_network_interface
#-----------------------------------------------------------------------------
class TestGetInstanceNetworkInterface():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_instance_network_interface()
    #--------------------------------------------------------
    @responses.activate
    def test_get_instance_network_interface_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/network_interfaces/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_instance_network_interface(instance_id,
                                                          id,
                                                          headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_instance_network_interface_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_instance_network_interface_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/network_interfaces/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_instance_network_interface(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_instance_network_interface
#-----------------------------------------------------------------------------
class TestUpdateInstanceNetworkInterface():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_instance_network_interface()
    #--------------------------------------------------------
    @responses.activate
    def test_update_instance_network_interface_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/network_interfaces/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'
        name = 'my-network-interface'

        # Invoke method
        response = service.update_instance_network_interface(instance_id,
                                                             id,
                                                             name=name,
                                                             headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['name'] == 'my-network-interface'

    #--------------------------------------------------------
    # test_update_instance_network_interface_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_instance_network_interface_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/network_interfaces/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'
        name = 'my-network-interface'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_instance_network_interface(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_instance_network_interface_floating_ips
#-----------------------------------------------------------------------------
class TestListInstanceNetworkInterfaceFloatingIps():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_instance_network_interface_floating_ips()
    #--------------------------------------------------------
    @responses.activate
    def test_list_instance_network_interface_floating_ips_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instances/testString/network_interfaces/testString/floating_ips')
        mock_response = '{"floating_ips": [{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        network_interface_id = 'testString'

        # Invoke method
        response = service.list_instance_network_interface_floating_ips(
            instance_id, network_interface_id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_instance_network_interface_floating_ips_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_instance_network_interface_floating_ips_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instances/testString/network_interfaces/testString/floating_ips')
        mock_response = '{"floating_ips": [{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        network_interface_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "network_interface_id": network_interface_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_instance_network_interface_floating_ips(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for remove_instance_network_interface_floating_ip
#-----------------------------------------------------------------------------
class TestRemoveInstanceNetworkInterfaceFloatingIp():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # remove_instance_network_interface_floating_ip()
    #--------------------------------------------------------
    @responses.activate
    def test_remove_instance_network_interface_floating_ip_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instances/testString/network_interfaces/testString/floating_ips/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_id = 'testString'
        network_interface_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.remove_instance_network_interface_floating_ip(
            instance_id, network_interface_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_remove_instance_network_interface_floating_ip_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_remove_instance_network_interface_floating_ip_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instances/testString/network_interfaces/testString/floating_ips/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_id = 'testString'
        network_interface_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "network_interface_id": network_interface_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.remove_instance_network_interface_floating_ip(
                    **req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_instance_network_interface_floating_ip
#-----------------------------------------------------------------------------
class TestGetInstanceNetworkInterfaceFloatingIp():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_instance_network_interface_floating_ip()
    #--------------------------------------------------------
    @responses.activate
    def test_get_instance_network_interface_floating_ip_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instances/testString/network_interfaces/testString/floating_ips/testString'
        )
        mock_response = '{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        network_interface_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_instance_network_interface_floating_ip(
            instance_id, network_interface_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_instance_network_interface_floating_ip_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_instance_network_interface_floating_ip_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instances/testString/network_interfaces/testString/floating_ips/testString'
        )
        mock_response = '{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        network_interface_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "network_interface_id": network_interface_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_instance_network_interface_floating_ip(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for add_instance_network_interface_floating_ip
#-----------------------------------------------------------------------------
class TestAddInstanceNetworkInterfaceFloatingIp():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # add_instance_network_interface_floating_ip()
    #--------------------------------------------------------
    @responses.activate
    def test_add_instance_network_interface_floating_ip_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instances/testString/network_interfaces/testString/floating_ips/testString'
        )
        mock_response = '{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Set up parameter values
        instance_id = 'testString'
        network_interface_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.add_instance_network_interface_floating_ip(
            instance_id, network_interface_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201

    #--------------------------------------------------------
    # test_add_instance_network_interface_floating_ip_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_add_instance_network_interface_floating_ip_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instances/testString/network_interfaces/testString/floating_ips/testString'
        )
        mock_response = '{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Set up parameter values
        instance_id = 'testString'
        network_interface_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "network_interface_id": network_interface_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.add_instance_network_interface_floating_ip(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_instance_volume_attachments
#-----------------------------------------------------------------------------
class TestListInstanceVolumeAttachments():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_instance_volume_attachments()
    #--------------------------------------------------------
    @responses.activate
    def test_list_instance_volume_attachments_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/volume_attachments')
        mock_response = '{"volume_attachments": [{"created_at": "2019-01-01T12:00:00", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'

        # Invoke method
        response = service.list_instance_volume_attachments(instance_id,
                                                            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_instance_volume_attachments_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_instance_volume_attachments_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/volume_attachments')
        mock_response = '{"volume_attachments": [{"created_at": "2019-01-01T12:00:00", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_instance_volume_attachments(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_instance_volume_attachment
#-----------------------------------------------------------------------------
class TestCreateInstanceVolumeAttachment():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_instance_volume_attachment()
    #--------------------------------------------------------
    @responses.activate
    def test_create_instance_volume_attachment_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/volume_attachments')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VolumeIdentityById model
        volume_identity_model = {}
        volume_identity_model['id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Set up parameter values
        instance_id = 'testString'
        volume = volume_identity_model
        delete_volume_on_instance_delete = True
        name = 'my-volume-attachment'

        # Invoke method
        response = service.create_instance_volume_attachment(
            instance_id,
            volume,
            delete_volume_on_instance_delete=delete_volume_on_instance_delete,
            name=name,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['volume'] == volume_identity_model
        assert req_body['delete_volume_on_instance_delete'] == True
        assert req_body['name'] == 'my-volume-attachment'

    #--------------------------------------------------------
    # test_create_instance_volume_attachment_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_instance_volume_attachment_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/volume_attachments')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VolumeIdentityById model
        volume_identity_model = {}
        volume_identity_model['id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Set up parameter values
        instance_id = 'testString'
        volume = volume_identity_model
        delete_volume_on_instance_delete = True
        name = 'my-volume-attachment'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "volume": volume,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_instance_volume_attachment(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_instance_volume_attachment
#-----------------------------------------------------------------------------
class TestDeleteInstanceVolumeAttachment():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_instance_volume_attachment()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_instance_volume_attachment_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/volume_attachments/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_instance_volume_attachment(instance_id,
                                                             id,
                                                             headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_instance_volume_attachment_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_instance_volume_attachment_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/volume_attachments/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_instance_volume_attachment(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_instance_volume_attachment
#-----------------------------------------------------------------------------
class TestGetInstanceVolumeAttachment():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_instance_volume_attachment()
    #--------------------------------------------------------
    @responses.activate
    def test_get_instance_volume_attachment_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/volume_attachments/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_instance_volume_attachment(instance_id,
                                                          id,
                                                          headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_instance_volume_attachment_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_instance_volume_attachment_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/volume_attachments/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_instance_volume_attachment(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_instance_volume_attachment
#-----------------------------------------------------------------------------
class TestUpdateInstanceVolumeAttachment():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_instance_volume_attachment()
    #--------------------------------------------------------
    @responses.activate
    def test_update_instance_volume_attachment_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/volume_attachments/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'
        delete_volume_on_instance_delete = True
        name = 'my-volume-attachment'

        # Invoke method
        response = service.update_instance_volume_attachment(
            instance_id,
            id,
            delete_volume_on_instance_delete=delete_volume_on_instance_delete,
            name=name,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['delete_volume_on_instance_delete'] == True
        assert req_body['name'] == 'my-volume-attachment'

    #--------------------------------------------------------
    # test_update_instance_volume_attachment_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_instance_volume_attachment_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/volume_attachments/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'
        delete_volume_on_instance_delete = True
        name = 'my-volume-attachment'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_instance_volume_attachment(**req_copy)


# endregion
##############################################################################
# End of Service: Instances
##############################################################################

##############################################################################
# Start of Service: LoadBalancers
##############################################################################
# region


#-----------------------------------------------------------------------------
# Test Class for list_load_balancers
#-----------------------------------------------------------------------------
class TestListLoadBalancers():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_load_balancers()
    #--------------------------------------------------------
    @responses.activate
    def test_list_load_balancers_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers')
        mock_response = '{"load_balancers": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer", "operating_status": "offline", "pools": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_load_balancers()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_load_balancers_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_load_balancers_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers')
        mock_response = '{"load_balancers": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer", "operating_status": "offline", "pools": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_load_balancers(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_load_balancer
#-----------------------------------------------------------------------------
class TestCreateLoadBalancer():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_load_balancer()
    #--------------------------------------------------------
    @responses.activate
    def test_create_load_balancer_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer", "operating_status": "offline", "pools": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a LoadBalancerPoolIdentityByName model
        load_balancer_pool_identity_by_name_model = {}
        load_balancer_pool_identity_by_name_model[
            'name'] = 'my-load-balancer-pool'

        # Construct a dict representation of a LoadBalancerListenerPrototypeLoadBalancerContext model
        load_balancer_listener_prototype_load_balancer_context_model = {}
        load_balancer_listener_prototype_load_balancer_context_model[
            'connection_limit'] = 2000
        load_balancer_listener_prototype_load_balancer_context_model[
            'default_pool'] = load_balancer_pool_identity_by_name_model
        load_balancer_listener_prototype_load_balancer_context_model[
            'port'] = 443
        load_balancer_listener_prototype_load_balancer_context_model[
            'protocol'] = 'http'

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeIP model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'address'] = '192.168.3.4'

        # Construct a dict representation of a LoadBalancerPoolHealthMonitorPrototype model
        load_balancer_pool_health_monitor_prototype_model = {}
        load_balancer_pool_health_monitor_prototype_model['delay'] = 5
        load_balancer_pool_health_monitor_prototype_model['max_retries'] = 2
        load_balancer_pool_health_monitor_prototype_model['port'] = 22
        load_balancer_pool_health_monitor_prototype_model['timeout'] = 2
        load_balancer_pool_health_monitor_prototype_model['type'] = 'http'
        load_balancer_pool_health_monitor_prototype_model['url_path'] = '/'

        # Construct a dict representation of a LoadBalancerPoolMemberPrototype model
        load_balancer_pool_member_prototype_model = {}
        load_balancer_pool_member_prototype_model['port'] = 80
        load_balancer_pool_member_prototype_model[
            'target'] = load_balancer_pool_member_target_prototype_model
        load_balancer_pool_member_prototype_model['weight'] = 50

        # Construct a dict representation of a LoadBalancerPoolSessionPersistencePrototype model
        load_balancer_pool_session_persistence_prototype_model = {}
        load_balancer_pool_session_persistence_prototype_model[
            'type'] = 'source_ip'

        # Construct a dict representation of a LoadBalancerPoolPrototype model
        load_balancer_pool_prototype_model = {}
        load_balancer_pool_prototype_model['algorithm'] = 'least_connections'
        load_balancer_pool_prototype_model[
            'health_monitor'] = load_balancer_pool_health_monitor_prototype_model
        load_balancer_pool_prototype_model['members'] = [
            load_balancer_pool_member_prototype_model
        ]
        load_balancer_pool_prototype_model['name'] = 'my-load-balancer-pool'
        load_balancer_pool_prototype_model['protocol'] = 'http'
        load_balancer_pool_prototype_model[
            'session_persistence'] = load_balancer_pool_session_persistence_prototype_model

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        is_public = True
        subnets = [subnet_identity_model]
        listeners = [
            load_balancer_listener_prototype_load_balancer_context_model
        ]
        name = 'my-load-balancer'
        pools = [load_balancer_pool_prototype_model]
        resource_group = resource_group_identity_model

        # Invoke method
        response = service.create_load_balancer(is_public,
                                                subnets,
                                                listeners=listeners,
                                                name=name,
                                                pools=pools,
                                                resource_group=resource_group,
                                                headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['is_public'] == True
        assert req_body['subnets'] == [subnet_identity_model]
        assert req_body['listeners'] == [
            load_balancer_listener_prototype_load_balancer_context_model
        ]
        assert req_body['name'] == 'my-load-balancer'
        assert req_body['pools'] == [load_balancer_pool_prototype_model]
        assert req_body['resource_group'] == resource_group_identity_model

    #--------------------------------------------------------
    # test_create_load_balancer_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_load_balancer_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer", "operating_status": "offline", "pools": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a LoadBalancerPoolIdentityByName model
        load_balancer_pool_identity_by_name_model = {}
        load_balancer_pool_identity_by_name_model[
            'name'] = 'my-load-balancer-pool'

        # Construct a dict representation of a LoadBalancerListenerPrototypeLoadBalancerContext model
        load_balancer_listener_prototype_load_balancer_context_model = {}
        load_balancer_listener_prototype_load_balancer_context_model[
            'connection_limit'] = 2000
        load_balancer_listener_prototype_load_balancer_context_model[
            'default_pool'] = load_balancer_pool_identity_by_name_model
        load_balancer_listener_prototype_load_balancer_context_model[
            'port'] = 443
        load_balancer_listener_prototype_load_balancer_context_model[
            'protocol'] = 'http'

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeIP model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'address'] = '192.168.3.4'

        # Construct a dict representation of a LoadBalancerPoolHealthMonitorPrototype model
        load_balancer_pool_health_monitor_prototype_model = {}
        load_balancer_pool_health_monitor_prototype_model['delay'] = 5
        load_balancer_pool_health_monitor_prototype_model['max_retries'] = 2
        load_balancer_pool_health_monitor_prototype_model['port'] = 22
        load_balancer_pool_health_monitor_prototype_model['timeout'] = 2
        load_balancer_pool_health_monitor_prototype_model['type'] = 'http'
        load_balancer_pool_health_monitor_prototype_model['url_path'] = '/'

        # Construct a dict representation of a LoadBalancerPoolMemberPrototype model
        load_balancer_pool_member_prototype_model = {}
        load_balancer_pool_member_prototype_model['port'] = 80
        load_balancer_pool_member_prototype_model[
            'target'] = load_balancer_pool_member_target_prototype_model
        load_balancer_pool_member_prototype_model['weight'] = 50

        # Construct a dict representation of a LoadBalancerPoolSessionPersistencePrototype model
        load_balancer_pool_session_persistence_prototype_model = {}
        load_balancer_pool_session_persistence_prototype_model[
            'type'] = 'source_ip'

        # Construct a dict representation of a LoadBalancerPoolPrototype model
        load_balancer_pool_prototype_model = {}
        load_balancer_pool_prototype_model['algorithm'] = 'least_connections'
        load_balancer_pool_prototype_model[
            'health_monitor'] = load_balancer_pool_health_monitor_prototype_model
        load_balancer_pool_prototype_model['members'] = [
            load_balancer_pool_member_prototype_model
        ]
        load_balancer_pool_prototype_model['name'] = 'my-load-balancer-pool'
        load_balancer_pool_prototype_model['protocol'] = 'http'
        load_balancer_pool_prototype_model[
            'session_persistence'] = load_balancer_pool_session_persistence_prototype_model

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        is_public = True
        subnets = [subnet_identity_model]
        listeners = [
            load_balancer_listener_prototype_load_balancer_context_model
        ]
        name = 'my-load-balancer'
        pools = [load_balancer_pool_prototype_model]
        resource_group = resource_group_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "is_public": is_public,
            "subnets": subnets,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_load_balancer(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_load_balancer
#-----------------------------------------------------------------------------
class TestDeleteLoadBalancer():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_load_balancer()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_load_balancer_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_load_balancer(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_load_balancer_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_load_balancer_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_load_balancer(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_load_balancer
#-----------------------------------------------------------------------------
class TestGetLoadBalancer():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_load_balancer()
    #--------------------------------------------------------
    @responses.activate
    def test_get_load_balancer_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer", "operating_status": "offline", "pools": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_load_balancer(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_load_balancer_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_load_balancer_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer", "operating_status": "offline", "pools": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_load_balancer(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_load_balancer
#-----------------------------------------------------------------------------
class TestUpdateLoadBalancer():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_load_balancer()
    #--------------------------------------------------------
    @responses.activate
    def test_update_load_balancer_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer", "operating_status": "offline", "pools": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-load-balancer'

        # Invoke method
        response = service.update_load_balancer(id, name=name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['name'] == 'my-load-balancer'

    #--------------------------------------------------------
    # test_update_load_balancer_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_load_balancer_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer", "operating_status": "offline", "pools": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-load-balancer'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_load_balancer(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_load_balancer_statistics
#-----------------------------------------------------------------------------
class TestGetLoadBalancerStatistics():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_load_balancer_statistics()
    #--------------------------------------------------------
    @responses.activate
    def test_get_load_balancer_statistics_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/statistics')
        mock_response = '{"active_connections": 797, "connection_rate": 91.121, "data_processed_this_month": 10093173145, "throughput": 167.278}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_load_balancer_statistics(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_load_balancer_statistics_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_load_balancer_statistics_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/statistics')
        mock_response = '{"active_connections": 797, "connection_rate": 91.121, "data_processed_this_month": 10093173145, "throughput": 167.278}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_load_balancer_statistics(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_load_balancer_listeners
#-----------------------------------------------------------------------------
class TestListLoadBalancerListeners():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_load_balancer_listeners()
    #--------------------------------------------------------
    @responses.activate
    def test_list_load_balancer_listeners_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/listeners')
        mock_response = '{"listeners": [{"certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00", "default_pool": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'

        # Invoke method
        response = service.list_load_balancer_listeners(load_balancer_id,
                                                        headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_load_balancer_listeners_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_load_balancer_listeners_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/listeners')
        mock_response = '{"listeners": [{"certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00", "default_pool": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_load_balancer_listeners(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_load_balancer_listener
#-----------------------------------------------------------------------------
class TestCreateLoadBalancerListener():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_load_balancer_listener()
    #--------------------------------------------------------
    @responses.activate
    def test_create_load_balancer_listener_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/listeners')
        mock_response = '{"certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00", "default_pool": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a CertificateInstanceIdentityByCRN model
        certificate_instance_identity_model = {}
        certificate_instance_identity_model[
            'crn'] = 'crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758'

        # Construct a dict representation of a LoadBalancerPoolIdentityById model
        load_balancer_pool_identity_model = {}
        load_balancer_pool_identity_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a dict representation of a LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
        load_balancer_listener_policy_prototype_target_model = {}
        load_balancer_listener_policy_prototype_target_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a dict representation of a LoadBalancerListenerPolicyRulePrototype model
        load_balancer_listener_policy_rule_prototype_model = {}
        load_balancer_listener_policy_rule_prototype_model[
            'condition'] = 'contains'
        load_balancer_listener_policy_rule_prototype_model[
            'field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_prototype_model['type'] = 'header'
        load_balancer_listener_policy_rule_prototype_model[
            'value'] = 'testString'

        # Construct a dict representation of a LoadBalancerListenerPolicyPrototype model
        load_balancer_listener_policy_prototype_model = {}
        load_balancer_listener_policy_prototype_model['action'] = 'forward'
        load_balancer_listener_policy_prototype_model['name'] = 'my-policy'
        load_balancer_listener_policy_prototype_model['priority'] = 5
        load_balancer_listener_policy_prototype_model['rules'] = [
            load_balancer_listener_policy_rule_prototype_model
        ]
        load_balancer_listener_policy_prototype_model[
            'target'] = load_balancer_listener_policy_prototype_target_model

        # Set up parameter values
        load_balancer_id = 'testString'
        port = 443
        protocol = 'http'
        certificate_instance = certificate_instance_identity_model
        connection_limit = 2000
        default_pool = load_balancer_pool_identity_model
        policies = [load_balancer_listener_policy_prototype_model]

        # Invoke method
        response = service.create_load_balancer_listener(
            load_balancer_id,
            port,
            protocol,
            certificate_instance=certificate_instance,
            connection_limit=connection_limit,
            default_pool=default_pool,
            policies=policies,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['port'] == 443
        assert req_body['protocol'] == 'http'
        assert req_body[
            'certificate_instance'] == certificate_instance_identity_model
        assert req_body['connection_limit'] == 2000
        assert req_body['default_pool'] == load_balancer_pool_identity_model
        assert req_body['policies'] == [
            load_balancer_listener_policy_prototype_model
        ]

    #--------------------------------------------------------
    # test_create_load_balancer_listener_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_load_balancer_listener_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/listeners')
        mock_response = '{"certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00", "default_pool": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a CertificateInstanceIdentityByCRN model
        certificate_instance_identity_model = {}
        certificate_instance_identity_model[
            'crn'] = 'crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758'

        # Construct a dict representation of a LoadBalancerPoolIdentityById model
        load_balancer_pool_identity_model = {}
        load_balancer_pool_identity_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a dict representation of a LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
        load_balancer_listener_policy_prototype_target_model = {}
        load_balancer_listener_policy_prototype_target_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a dict representation of a LoadBalancerListenerPolicyRulePrototype model
        load_balancer_listener_policy_rule_prototype_model = {}
        load_balancer_listener_policy_rule_prototype_model[
            'condition'] = 'contains'
        load_balancer_listener_policy_rule_prototype_model[
            'field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_prototype_model['type'] = 'header'
        load_balancer_listener_policy_rule_prototype_model[
            'value'] = 'testString'

        # Construct a dict representation of a LoadBalancerListenerPolicyPrototype model
        load_balancer_listener_policy_prototype_model = {}
        load_balancer_listener_policy_prototype_model['action'] = 'forward'
        load_balancer_listener_policy_prototype_model['name'] = 'my-policy'
        load_balancer_listener_policy_prototype_model['priority'] = 5
        load_balancer_listener_policy_prototype_model['rules'] = [
            load_balancer_listener_policy_rule_prototype_model
        ]
        load_balancer_listener_policy_prototype_model[
            'target'] = load_balancer_listener_policy_prototype_target_model

        # Set up parameter values
        load_balancer_id = 'testString'
        port = 443
        protocol = 'http'
        certificate_instance = certificate_instance_identity_model
        connection_limit = 2000
        default_pool = load_balancer_pool_identity_model
        policies = [load_balancer_listener_policy_prototype_model]

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "port": port,
            "protocol": protocol,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_load_balancer_listener(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_load_balancer_listener
#-----------------------------------------------------------------------------
class TestDeleteLoadBalancerListener():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_load_balancer_listener()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_load_balancer_listener_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/listeners/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_load_balancer_listener(load_balancer_id,
                                                         id,
                                                         headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_load_balancer_listener_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_load_balancer_listener_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/listeners/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_load_balancer_listener(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_load_balancer_listener
#-----------------------------------------------------------------------------
class TestGetLoadBalancerListener():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_load_balancer_listener()
    #--------------------------------------------------------
    @responses.activate
    def test_get_load_balancer_listener_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/listeners/testString')
        mock_response = '{"certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00", "default_pool": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_load_balancer_listener(load_balancer_id,
                                                      id,
                                                      headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_load_balancer_listener_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_load_balancer_listener_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/listeners/testString')
        mock_response = '{"certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00", "default_pool": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_load_balancer_listener(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_load_balancer_listener
#-----------------------------------------------------------------------------
class TestUpdateLoadBalancerListener():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_load_balancer_listener()
    #--------------------------------------------------------
    @responses.activate
    def test_update_load_balancer_listener_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/listeners/testString')
        mock_response = '{"certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00", "default_pool": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a CertificateInstanceIdentityByCRN model
        certificate_instance_identity_model = {}
        certificate_instance_identity_model[
            'crn'] = 'crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758'

        # Construct a dict representation of a LoadBalancerPoolIdentityById model
        load_balancer_pool_identity_model = {}
        load_balancer_pool_identity_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'
        certificate_instance = certificate_instance_identity_model
        connection_limit = 2000
        default_pool = load_balancer_pool_identity_model
        port = 443
        protocol = 'http'

        # Invoke method
        response = service.update_load_balancer_listener(
            load_balancer_id,
            id,
            certificate_instance=certificate_instance,
            connection_limit=connection_limit,
            default_pool=default_pool,
            port=port,
            protocol=protocol,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body[
            'certificate_instance'] == certificate_instance_identity_model
        assert req_body['connection_limit'] == 2000
        assert req_body['default_pool'] == load_balancer_pool_identity_model
        assert req_body['port'] == 443
        assert req_body['protocol'] == 'http'

    #--------------------------------------------------------
    # test_update_load_balancer_listener_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_load_balancer_listener_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/listeners/testString')
        mock_response = '{"certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00", "default_pool": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a CertificateInstanceIdentityByCRN model
        certificate_instance_identity_model = {}
        certificate_instance_identity_model[
            'crn'] = 'crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758'

        # Construct a dict representation of a LoadBalancerPoolIdentityById model
        load_balancer_pool_identity_model = {}
        load_balancer_pool_identity_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'
        certificate_instance = certificate_instance_identity_model
        connection_limit = 2000
        default_pool = load_balancer_pool_identity_model
        port = 443
        protocol = 'http'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_load_balancer_listener(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_load_balancer_listener_policies
#-----------------------------------------------------------------------------
class TestListLoadBalancerListenerPolicies():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_load_balancer_listener_policies()
    #--------------------------------------------------------
    @responses.activate
    def test_list_load_balancer_listener_policies_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies')
        mock_response = '{"policies": [{"action": "forward", "created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'

        # Invoke method
        response = service.list_load_balancer_listener_policies(
            load_balancer_id, listener_id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_load_balancer_listener_policies_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_load_balancer_listener_policies_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies')
        mock_response = '{"policies": [{"action": "forward", "created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "listener_id": listener_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_load_balancer_listener_policies(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_load_balancer_listener_policy
#-----------------------------------------------------------------------------
class TestCreateLoadBalancerListenerPolicy():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_load_balancer_listener_policy()
    #--------------------------------------------------------
    @responses.activate
    def test_create_load_balancer_listener_policy_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies')
        mock_response = '{"action": "forward", "created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a LoadBalancerListenerPolicyRulePrototype model
        load_balancer_listener_policy_rule_prototype_model = {}
        load_balancer_listener_policy_rule_prototype_model[
            'condition'] = 'contains'
        load_balancer_listener_policy_rule_prototype_model[
            'field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_prototype_model['type'] = 'header'
        load_balancer_listener_policy_rule_prototype_model[
            'value'] = 'testString'

        # Construct a dict representation of a LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
        load_balancer_listener_policy_prototype_target_model = {}
        load_balancer_listener_policy_prototype_target_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        action = 'forward'
        priority = 5
        name = 'my-policy'
        rules = [load_balancer_listener_policy_rule_prototype_model]
        target = load_balancer_listener_policy_prototype_target_model

        # Invoke method
        response = service.create_load_balancer_listener_policy(
            load_balancer_id,
            listener_id,
            action,
            priority,
            name=name,
            rules=rules,
            target=target,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['action'] == 'forward'
        assert req_body['priority'] == 5
        assert req_body['name'] == 'my-policy'
        assert req_body['rules'] == [
            load_balancer_listener_policy_rule_prototype_model
        ]
        assert req_body[
            'target'] == load_balancer_listener_policy_prototype_target_model

    #--------------------------------------------------------
    # test_create_load_balancer_listener_policy_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_load_balancer_listener_policy_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies')
        mock_response = '{"action": "forward", "created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a LoadBalancerListenerPolicyRulePrototype model
        load_balancer_listener_policy_rule_prototype_model = {}
        load_balancer_listener_policy_rule_prototype_model[
            'condition'] = 'contains'
        load_balancer_listener_policy_rule_prototype_model[
            'field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_prototype_model['type'] = 'header'
        load_balancer_listener_policy_rule_prototype_model[
            'value'] = 'testString'

        # Construct a dict representation of a LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
        load_balancer_listener_policy_prototype_target_model = {}
        load_balancer_listener_policy_prototype_target_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        action = 'forward'
        priority = 5
        name = 'my-policy'
        rules = [load_balancer_listener_policy_rule_prototype_model]
        target = load_balancer_listener_policy_prototype_target_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "listener_id": listener_id,
            "action": action,
            "priority": priority,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_load_balancer_listener_policy(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_load_balancer_listener_policy
#-----------------------------------------------------------------------------
class TestDeleteLoadBalancerListenerPolicy():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_load_balancer_listener_policy()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_load_balancer_listener_policy_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_load_balancer_listener_policy(
            load_balancer_id, listener_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_load_balancer_listener_policy_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_load_balancer_listener_policy_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "listener_id": listener_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_load_balancer_listener_policy(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_load_balancer_listener_policy
#-----------------------------------------------------------------------------
class TestGetLoadBalancerListenerPolicy():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_load_balancer_listener_policy()
    #--------------------------------------------------------
    @responses.activate
    def test_get_load_balancer_listener_policy_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString'
        )
        mock_response = '{"action": "forward", "created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_load_balancer_listener_policy(load_balancer_id,
                                                             listener_id,
                                                             id,
                                                             headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_load_balancer_listener_policy_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_load_balancer_listener_policy_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString'
        )
        mock_response = '{"action": "forward", "created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "listener_id": listener_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_load_balancer_listener_policy(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_load_balancer_listener_policy
#-----------------------------------------------------------------------------
class TestUpdateLoadBalancerListenerPolicy():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_load_balancer_listener_policy()
    #--------------------------------------------------------
    @responses.activate
    def test_update_load_balancer_listener_policy_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString'
        )
        mock_response = '{"action": "forward", "created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
        load_balancer_listener_policy_patch_target_model = {}
        load_balancer_listener_policy_patch_target_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        id = 'testString'
        name = 'my-policy'
        priority = 5
        target = load_balancer_listener_policy_patch_target_model

        # Invoke method
        response = service.update_load_balancer_listener_policy(
            load_balancer_id,
            listener_id,
            id,
            name=name,
            priority=priority,
            target=target,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['name'] == 'my-policy'
        assert req_body['priority'] == 5
        assert req_body[
            'target'] == load_balancer_listener_policy_patch_target_model

    #--------------------------------------------------------
    # test_update_load_balancer_listener_policy_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_load_balancer_listener_policy_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString'
        )
        mock_response = '{"action": "forward", "created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
        load_balancer_listener_policy_patch_target_model = {}
        load_balancer_listener_policy_patch_target_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        id = 'testString'
        name = 'my-policy'
        priority = 5
        target = load_balancer_listener_policy_patch_target_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "listener_id": listener_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_load_balancer_listener_policy(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_load_balancer_listener_policy_rules
#-----------------------------------------------------------------------------
class TestListLoadBalancerListenerPolicyRules():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_load_balancer_listener_policy_rules()
    #--------------------------------------------------------
    @responses.activate
    def test_list_load_balancer_listener_policy_rules_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules'
        )
        mock_response = '{"rules": [{"condition": "contains", "created_at": "2019-01-01T12:00:00", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "value"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'

        # Invoke method
        response = service.list_load_balancer_listener_policy_rules(
            load_balancer_id, listener_id, policy_id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_load_balancer_listener_policy_rules_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_load_balancer_listener_policy_rules_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules'
        )
        mock_response = '{"rules": [{"condition": "contains", "created_at": "2019-01-01T12:00:00", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "value"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "listener_id": listener_id,
            "policy_id": policy_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_load_balancer_listener_policy_rules(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_load_balancer_listener_policy_rule
#-----------------------------------------------------------------------------
class TestCreateLoadBalancerListenerPolicyRule():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_load_balancer_listener_policy_rule()
    #--------------------------------------------------------
    @responses.activate
    def test_create_load_balancer_listener_policy_rule_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules'
        )
        mock_response = '{"condition": "contains", "created_at": "2019-01-01T12:00:00", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "value"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'
        condition = 'contains'
        type = 'header'
        value = 'testString'
        field = 'MY-APP-HEADER'

        # Invoke method
        response = service.create_load_balancer_listener_policy_rule(
            load_balancer_id,
            listener_id,
            policy_id,
            condition,
            type,
            value,
            field=field,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['condition'] == 'contains'
        assert req_body['type'] == 'header'
        assert req_body['value'] == 'testString'
        assert req_body['field'] == 'MY-APP-HEADER'

    #--------------------------------------------------------
    # test_create_load_balancer_listener_policy_rule_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_load_balancer_listener_policy_rule_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules'
        )
        mock_response = '{"condition": "contains", "created_at": "2019-01-01T12:00:00", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "value"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'
        condition = 'contains'
        type = 'header'
        value = 'testString'
        field = 'MY-APP-HEADER'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "listener_id": listener_id,
            "policy_id": policy_id,
            "condition": condition,
            "type": type,
            "value": value,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_load_balancer_listener_policy_rule(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_load_balancer_listener_policy_rule
#-----------------------------------------------------------------------------
class TestDeleteLoadBalancerListenerPolicyRule():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_load_balancer_listener_policy_rule()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_load_balancer_listener_policy_rule_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_load_balancer_listener_policy_rule(
            load_balancer_id, listener_id, policy_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_load_balancer_listener_policy_rule_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_load_balancer_listener_policy_rule_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "listener_id": listener_id,
            "policy_id": policy_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_load_balancer_listener_policy_rule(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_load_balancer_listener_policy_rule
#-----------------------------------------------------------------------------
class TestGetLoadBalancerListenerPolicyRule():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_load_balancer_listener_policy_rule()
    #--------------------------------------------------------
    @responses.activate
    def test_get_load_balancer_listener_policy_rule_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules/testString'
        )
        mock_response = '{"condition": "contains", "created_at": "2019-01-01T12:00:00", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_load_balancer_listener_policy_rule(
            load_balancer_id, listener_id, policy_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_load_balancer_listener_policy_rule_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_load_balancer_listener_policy_rule_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules/testString'
        )
        mock_response = '{"condition": "contains", "created_at": "2019-01-01T12:00:00", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "value"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "listener_id": listener_id,
            "policy_id": policy_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_load_balancer_listener_policy_rule(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_load_balancer_listener_policy_rule
#-----------------------------------------------------------------------------
class TestUpdateLoadBalancerListenerPolicyRule():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_load_balancer_listener_policy_rule()
    #--------------------------------------------------------
    @responses.activate
    def test_update_load_balancer_listener_policy_rule_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules/testString'
        )
        mock_response = '{"condition": "contains", "created_at": "2019-01-01T12:00:00", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "value"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'
        id = 'testString'
        condition = 'contains'
        field = 'MY-APP-HEADER'
        type = 'header'
        value = 'testString'

        # Invoke method
        response = service.update_load_balancer_listener_policy_rule(
            load_balancer_id,
            listener_id,
            policy_id,
            id,
            condition=condition,
            field=field,
            type=type,
            value=value,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['condition'] == 'contains'
        assert req_body['field'] == 'MY-APP-HEADER'
        assert req_body['type'] == 'header'
        assert req_body['value'] == 'testString'

    #--------------------------------------------------------
    # test_update_load_balancer_listener_policy_rule_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_load_balancer_listener_policy_rule_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules/testString'
        )
        mock_response = '{"condition": "contains", "created_at": "2019-01-01T12:00:00", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "value"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'
        id = 'testString'
        condition = 'contains'
        field = 'MY-APP-HEADER'
        type = 'header'
        value = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "listener_id": listener_id,
            "policy_id": policy_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_load_balancer_listener_policy_rule(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_load_balancer_pools
#-----------------------------------------------------------------------------
class TestListLoadBalancerPools():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_load_balancer_pools()
    #--------------------------------------------------------
    @responses.activate
    def test_list_load_balancer_pools_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString/pools')
        mock_response = '{"pools": [{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "members": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'

        # Invoke method
        response = service.list_load_balancer_pools(load_balancer_id,
                                                    headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_load_balancer_pools_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_load_balancer_pools_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString/pools')
        mock_response = '{"pools": [{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "members": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_load_balancer_pools(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_load_balancer_pool
#-----------------------------------------------------------------------------
class TestCreateLoadBalancerPool():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_load_balancer_pool()
    #--------------------------------------------------------
    @responses.activate
    def test_create_load_balancer_pool_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString/pools')
        mock_response = '{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "members": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a LoadBalancerPoolHealthMonitorPrototype model
        load_balancer_pool_health_monitor_prototype_model = {}
        load_balancer_pool_health_monitor_prototype_model['delay'] = 5
        load_balancer_pool_health_monitor_prototype_model['max_retries'] = 2
        load_balancer_pool_health_monitor_prototype_model['port'] = 22
        load_balancer_pool_health_monitor_prototype_model['timeout'] = 2
        load_balancer_pool_health_monitor_prototype_model['type'] = 'http'
        load_balancer_pool_health_monitor_prototype_model['url_path'] = '/'

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeIP model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'address'] = '192.168.3.4'

        # Construct a dict representation of a LoadBalancerPoolMemberPrototype model
        load_balancer_pool_member_prototype_model = {}
        load_balancer_pool_member_prototype_model['port'] = 80
        load_balancer_pool_member_prototype_model[
            'target'] = load_balancer_pool_member_target_prototype_model
        load_balancer_pool_member_prototype_model['weight'] = 50

        # Construct a dict representation of a LoadBalancerPoolSessionPersistencePrototype model
        load_balancer_pool_session_persistence_prototype_model = {}
        load_balancer_pool_session_persistence_prototype_model[
            'type'] = 'source_ip'

        # Set up parameter values
        load_balancer_id = 'testString'
        algorithm = 'least_connections'
        health_monitor = load_balancer_pool_health_monitor_prototype_model
        protocol = 'http'
        members = [load_balancer_pool_member_prototype_model]
        name = 'my-load-balancer-pool'
        session_persistence = load_balancer_pool_session_persistence_prototype_model

        # Invoke method
        response = service.create_load_balancer_pool(
            load_balancer_id,
            algorithm,
            health_monitor,
            protocol,
            members=members,
            name=name,
            session_persistence=session_persistence,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['algorithm'] == 'least_connections'
        assert req_body[
            'health_monitor'] == load_balancer_pool_health_monitor_prototype_model
        assert req_body['protocol'] == 'http'
        assert req_body['members'] == [
            load_balancer_pool_member_prototype_model
        ]
        assert req_body['name'] == 'my-load-balancer-pool'
        assert req_body[
            'session_persistence'] == load_balancer_pool_session_persistence_prototype_model

    #--------------------------------------------------------
    # test_create_load_balancer_pool_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_load_balancer_pool_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString/pools')
        mock_response = '{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "members": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a LoadBalancerPoolHealthMonitorPrototype model
        load_balancer_pool_health_monitor_prototype_model = {}
        load_balancer_pool_health_monitor_prototype_model['delay'] = 5
        load_balancer_pool_health_monitor_prototype_model['max_retries'] = 2
        load_balancer_pool_health_monitor_prototype_model['port'] = 22
        load_balancer_pool_health_monitor_prototype_model['timeout'] = 2
        load_balancer_pool_health_monitor_prototype_model['type'] = 'http'
        load_balancer_pool_health_monitor_prototype_model['url_path'] = '/'

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeIP model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'address'] = '192.168.3.4'

        # Construct a dict representation of a LoadBalancerPoolMemberPrototype model
        load_balancer_pool_member_prototype_model = {}
        load_balancer_pool_member_prototype_model['port'] = 80
        load_balancer_pool_member_prototype_model[
            'target'] = load_balancer_pool_member_target_prototype_model
        load_balancer_pool_member_prototype_model['weight'] = 50

        # Construct a dict representation of a LoadBalancerPoolSessionPersistencePrototype model
        load_balancer_pool_session_persistence_prototype_model = {}
        load_balancer_pool_session_persistence_prototype_model[
            'type'] = 'source_ip'

        # Set up parameter values
        load_balancer_id = 'testString'
        algorithm = 'least_connections'
        health_monitor = load_balancer_pool_health_monitor_prototype_model
        protocol = 'http'
        members = [load_balancer_pool_member_prototype_model]
        name = 'my-load-balancer-pool'
        session_persistence = load_balancer_pool_session_persistence_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "algorithm": algorithm,
            "health_monitor": health_monitor,
            "protocol": protocol,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_load_balancer_pool(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_load_balancer_pool
#-----------------------------------------------------------------------------
class TestDeleteLoadBalancerPool():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_load_balancer_pool()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_load_balancer_pool_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/pools/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_load_balancer_pool(load_balancer_id,
                                                     id,
                                                     headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_load_balancer_pool_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_load_balancer_pool_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/pools/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_load_balancer_pool(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_load_balancer_pool
#-----------------------------------------------------------------------------
class TestGetLoadBalancerPool():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_load_balancer_pool()
    #--------------------------------------------------------
    @responses.activate
    def test_get_load_balancer_pool_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/pools/testString')
        mock_response = '{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "members": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_load_balancer_pool(load_balancer_id,
                                                  id,
                                                  headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_load_balancer_pool_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_load_balancer_pool_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/pools/testString')
        mock_response = '{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "members": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_load_balancer_pool(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_load_balancer_pool
#-----------------------------------------------------------------------------
class TestUpdateLoadBalancerPool():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_load_balancer_pool()
    #--------------------------------------------------------
    @responses.activate
    def test_update_load_balancer_pool_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/pools/testString')
        mock_response = '{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "members": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a LoadBalancerPoolHealthMonitorPatch model
        load_balancer_pool_health_monitor_patch_model = {}
        load_balancer_pool_health_monitor_patch_model['delay'] = 5
        load_balancer_pool_health_monitor_patch_model['max_retries'] = 2
        load_balancer_pool_health_monitor_patch_model['port'] = 22
        load_balancer_pool_health_monitor_patch_model['timeout'] = 2
        load_balancer_pool_health_monitor_patch_model['type'] = 'http'
        load_balancer_pool_health_monitor_patch_model['url_path'] = '/'

        # Construct a dict representation of a LoadBalancerPoolSessionPersistencePatch model
        load_balancer_pool_session_persistence_patch_model = {}
        load_balancer_pool_session_persistence_patch_model['type'] = 'source_ip'

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'
        algorithm = 'least_connections'
        health_monitor = load_balancer_pool_health_monitor_patch_model
        name = 'my-load-balancer-pool'
        protocol = 'http'
        session_persistence = load_balancer_pool_session_persistence_patch_model

        # Invoke method
        response = service.update_load_balancer_pool(
            load_balancer_id,
            id,
            algorithm=algorithm,
            health_monitor=health_monitor,
            name=name,
            protocol=protocol,
            session_persistence=session_persistence,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['algorithm'] == 'least_connections'
        assert req_body[
            'health_monitor'] == load_balancer_pool_health_monitor_patch_model
        assert req_body['name'] == 'my-load-balancer-pool'
        assert req_body['protocol'] == 'http'
        assert req_body[
            'session_persistence'] == load_balancer_pool_session_persistence_patch_model

    #--------------------------------------------------------
    # test_update_load_balancer_pool_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_load_balancer_pool_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/pools/testString')
        mock_response = '{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "members": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a LoadBalancerPoolHealthMonitorPatch model
        load_balancer_pool_health_monitor_patch_model = {}
        load_balancer_pool_health_monitor_patch_model['delay'] = 5
        load_balancer_pool_health_monitor_patch_model['max_retries'] = 2
        load_balancer_pool_health_monitor_patch_model['port'] = 22
        load_balancer_pool_health_monitor_patch_model['timeout'] = 2
        load_balancer_pool_health_monitor_patch_model['type'] = 'http'
        load_balancer_pool_health_monitor_patch_model['url_path'] = '/'

        # Construct a dict representation of a LoadBalancerPoolSessionPersistencePatch model
        load_balancer_pool_session_persistence_patch_model = {}
        load_balancer_pool_session_persistence_patch_model['type'] = 'source_ip'

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'
        algorithm = 'least_connections'
        health_monitor = load_balancer_pool_health_monitor_patch_model
        name = 'my-load-balancer-pool'
        protocol = 'http'
        session_persistence = load_balancer_pool_session_persistence_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_load_balancer_pool(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_load_balancer_pool_members
#-----------------------------------------------------------------------------
class TestListLoadBalancerPoolMembers():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_load_balancer_pool_members()
    #--------------------------------------------------------
    @responses.activate
    def test_list_load_balancer_pool_members_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/pools/testString/members')
        mock_response = '{"members": [{"created_at": "2019-01-01T12:00:00", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"address": "192.168.3.4"}, "weight": 50}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'

        # Invoke method
        response = service.list_load_balancer_pool_members(load_balancer_id,
                                                           pool_id,
                                                           headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_load_balancer_pool_members_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_load_balancer_pool_members_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/pools/testString/members')
        mock_response = '{"members": [{"created_at": "2019-01-01T12:00:00", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"address": "192.168.3.4"}, "weight": 50}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "pool_id": pool_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_load_balancer_pool_members(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_load_balancer_pool_member
#-----------------------------------------------------------------------------
class TestCreateLoadBalancerPoolMember():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_load_balancer_pool_member()
    #--------------------------------------------------------
    @responses.activate
    def test_create_load_balancer_pool_member_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/pools/testString/members')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"address": "192.168.3.4"}, "weight": 50}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeIP model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'address'] = '192.168.3.4'

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        port = 80
        target = load_balancer_pool_member_target_prototype_model
        weight = 50

        # Invoke method
        response = service.create_load_balancer_pool_member(load_balancer_id,
                                                            pool_id,
                                                            port,
                                                            target,
                                                            weight=weight,
                                                            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['port'] == 80
        assert req_body[
            'target'] == load_balancer_pool_member_target_prototype_model
        assert req_body['weight'] == 50

    #--------------------------------------------------------
    # test_create_load_balancer_pool_member_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_load_balancer_pool_member_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/pools/testString/members')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"address": "192.168.3.4"}, "weight": 50}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeIP model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'address'] = '192.168.3.4'

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        port = 80
        target = load_balancer_pool_member_target_prototype_model
        weight = 50

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "pool_id": pool_id,
            "port": port,
            "target": target,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_load_balancer_pool_member(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for replace_load_balancer_pool_members
#-----------------------------------------------------------------------------
class TestReplaceLoadBalancerPoolMembers():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # replace_load_balancer_pool_members()
    #--------------------------------------------------------
    @responses.activate
    def test_replace_load_balancer_pool_members_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/pools/testString/members')
        mock_response = '{"members": [{"created_at": "2019-01-01T12:00:00", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"address": "192.168.3.4"}, "weight": 50}]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=202)

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeIP model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'address'] = '192.168.3.4'

        # Construct a dict representation of a LoadBalancerPoolMemberPrototype model
        load_balancer_pool_member_prototype_model = {}
        load_balancer_pool_member_prototype_model['port'] = 80
        load_balancer_pool_member_prototype_model[
            'target'] = load_balancer_pool_member_target_prototype_model
        load_balancer_pool_member_prototype_model['weight'] = 50

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        members = [load_balancer_pool_member_prototype_model]

        # Invoke method
        response = service.replace_load_balancer_pool_members(load_balancer_id,
                                                              pool_id,
                                                              members,
                                                              headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 202
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['members'] == [
            load_balancer_pool_member_prototype_model
        ]

    #--------------------------------------------------------
    # test_replace_load_balancer_pool_members_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_replace_load_balancer_pool_members_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/pools/testString/members')
        mock_response = '{"members": [{"created_at": "2019-01-01T12:00:00", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"address": "192.168.3.4"}, "weight": 50}]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=202)

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeIP model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'address'] = '192.168.3.4'

        # Construct a dict representation of a LoadBalancerPoolMemberPrototype model
        load_balancer_pool_member_prototype_model = {}
        load_balancer_pool_member_prototype_model['port'] = 80
        load_balancer_pool_member_prototype_model[
            'target'] = load_balancer_pool_member_target_prototype_model
        load_balancer_pool_member_prototype_model['weight'] = 50

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        members = [load_balancer_pool_member_prototype_model]

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "pool_id": pool_id,
            "members": members,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.replace_load_balancer_pool_members(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_load_balancer_pool_member
#-----------------------------------------------------------------------------
class TestDeleteLoadBalancerPoolMember():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_load_balancer_pool_member()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_load_balancer_pool_member_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/pools/testString/members/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_load_balancer_pool_member(load_balancer_id,
                                                            pool_id,
                                                            id,
                                                            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_load_balancer_pool_member_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_load_balancer_pool_member_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/pools/testString/members/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "pool_id": pool_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_load_balancer_pool_member(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_load_balancer_pool_member
#-----------------------------------------------------------------------------
class TestGetLoadBalancerPoolMember():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_load_balancer_pool_member()
    #--------------------------------------------------------
    @responses.activate
    def test_get_load_balancer_pool_member_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/pools/testString/members/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"address": "192.168.3.4"}, "weight": 50}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_load_balancer_pool_member(load_balancer_id,
                                                         pool_id,
                                                         id,
                                                         headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_load_balancer_pool_member_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_load_balancer_pool_member_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/pools/testString/members/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"address": "192.168.3.4"}, "weight": 50}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "pool_id": pool_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_load_balancer_pool_member(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_load_balancer_pool_member
#-----------------------------------------------------------------------------
class TestUpdateLoadBalancerPoolMember():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_load_balancer_pool_member()
    #--------------------------------------------------------
    @responses.activate
    def test_update_load_balancer_pool_member_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/pools/testString/members/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"address": "192.168.3.4"}, "weight": 50}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeIP model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'address'] = '192.168.3.4'

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        id = 'testString'
        port = 80
        target = load_balancer_pool_member_target_prototype_model
        weight = 50

        # Invoke method
        response = service.update_load_balancer_pool_member(load_balancer_id,
                                                            pool_id,
                                                            id,
                                                            port=port,
                                                            target=target,
                                                            weight=weight,
                                                            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['port'] == 80
        assert req_body[
            'target'] == load_balancer_pool_member_target_prototype_model
        assert req_body['weight'] == 50

    #--------------------------------------------------------
    # test_update_load_balancer_pool_member_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_load_balancer_pool_member_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/pools/testString/members/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"address": "192.168.3.4"}, "weight": 50}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeIP model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'address'] = '192.168.3.4'

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        id = 'testString'
        port = 80
        target = load_balancer_pool_member_target_prototype_model
        weight = 50

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "pool_id": pool_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_load_balancer_pool_member(**req_copy)


# endregion
##############################################################################
# End of Service: LoadBalancers
##############################################################################

##############################################################################
# Start of Service: NetworkACLs
##############################################################################
# region


#-----------------------------------------------------------------------------
# Test Class for list_network_acls
#-----------------------------------------------------------------------------
class TestListNetworkAcls():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_network_acls()
    #--------------------------------------------------------
    @responses.activate
    def test_list_network_acls_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?limit=20"}, "limit": 20, "network_acls": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'

        # Invoke method
        response = service.list_network_acls(
            start=start,
            limit=limit,
            resource_group_id=resource_group_id,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string

    #--------------------------------------------------------
    # test_list_network_acls_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_network_acls_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?limit=20"}, "limit": 20, "network_acls": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_network_acls()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_network_acls_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_network_acls_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?limit=20"}, "limit": 20, "network_acls": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_network_acls(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_network_acl
#-----------------------------------------------------------------------------
class TestCreateNetworkAcl():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_network_acl()
    #--------------------------------------------------------
    @responses.activate
    def test_create_network_acl_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a NetworkACLRuleReference model
        network_acl_rule_reference_model = {}
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a dict representation of a NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll model
        network_acl_rule_prototype_network_acl_context_model = {}
        network_acl_rule_prototype_network_acl_context_model['action'] = 'allow'
        network_acl_rule_prototype_network_acl_context_model[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_prototype_network_acl_context_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_prototype_network_acl_context_model[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_prototype_network_acl_context_model[
            'direction'] = 'inbound'
        network_acl_rule_prototype_network_acl_context_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_network_acl_context_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_network_acl_context_model[
            'ip_version'] = 'ipv4'
        network_acl_rule_prototype_network_acl_context_model[
            'name'] = 'my-rule-2'
        network_acl_rule_prototype_network_acl_context_model['protocol'] = 'all'
        network_acl_rule_prototype_network_acl_context_model[
            'source'] = '192.168.3.0/24'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a NetworkACLPrototypeNetworkACLByRules model
        network_acl_prototype_model = {}
        network_acl_prototype_model['name'] = 'my-network-acl'
        network_acl_prototype_model[
            'resource_group'] = resource_group_identity_model
        network_acl_prototype_model['vpc'] = vpc_identity_model
        network_acl_prototype_model['rules'] = [
            network_acl_rule_prototype_network_acl_context_model
        ]

        # Set up parameter values
        network_acl_prototype = network_acl_prototype_model

        # Invoke method
        response = service.create_network_acl(
            network_acl_prototype=network_acl_prototype, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == network_acl_prototype

    #--------------------------------------------------------
    # test_create_network_acl_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_create_network_acl_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Invoke method
        response = service.create_network_acl()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201

    #--------------------------------------------------------
    # test_create_network_acl_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_network_acl_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_network_acl(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_network_acl
#-----------------------------------------------------------------------------
class TestDeleteNetworkAcl():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_network_acl()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_network_acl_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_network_acl(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_network_acl_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_network_acl_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_network_acl(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_network_acl
#-----------------------------------------------------------------------------
class TestGetNetworkAcl():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_network_acl()
    #--------------------------------------------------------
    @responses.activate
    def test_get_network_acl_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_network_acl(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_network_acl_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_network_acl_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_network_acl(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_network_acl
#-----------------------------------------------------------------------------
class TestUpdateNetworkAcl():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_network_acl()
    #--------------------------------------------------------
    @responses.activate
    def test_update_network_acl_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-network-acl'

        # Invoke method
        response = service.update_network_acl(id, name=name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['name'] == 'my-network-acl'

    #--------------------------------------------------------
    # test_update_network_acl_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_network_acl_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-network-acl'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_network_acl(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_network_acl_rules
#-----------------------------------------------------------------------------
class TestListNetworkAclRules():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_network_acl_rules()
    #--------------------------------------------------------
    @responses.activate
    def test_list_network_acl_rules_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString/rules')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        network_acl_id = 'testString'
        start = 'testString'
        limit = 1
        direction = 'inbound'

        # Invoke method
        response = service.list_network_acl_rules(network_acl_id,
                                                  start=start,
                                                  limit=limit,
                                                  direction=direction,
                                                  headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'direction={}'.format(direction) in query_string

    #--------------------------------------------------------
    # test_list_network_acl_rules_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_network_acl_rules_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString/rules')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        network_acl_id = 'testString'

        # Invoke method
        response = service.list_network_acl_rules(network_acl_id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_network_acl_rules_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_network_acl_rules_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString/rules')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        network_acl_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "network_acl_id": network_acl_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_network_acl_rules(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_network_acl_rule
#-----------------------------------------------------------------------------
class TestCreateNetworkAclRule():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_network_acl_rule()
    #--------------------------------------------------------
    @responses.activate
    def test_create_network_acl_rule_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString/rules')
        mock_response = '{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a NetworkACLRuleReference model
        network_acl_rule_reference_model = {}
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a dict representation of a NetworkACLRulePrototypeNetworkACLRuleProtocolICMP model
        network_acl_rule_prototype_model = {}
        network_acl_rule_prototype_model['action'] = 'allow'
        network_acl_rule_prototype_model[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_prototype_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_prototype_model['destination'] = '192.168.3.0/24'
        network_acl_rule_prototype_model['direction'] = 'inbound'
        network_acl_rule_prototype_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_model['ip_version'] = 'ipv4'
        network_acl_rule_prototype_model['name'] = 'my-rule-2'
        network_acl_rule_prototype_model['protocol'] = 'icmp'
        network_acl_rule_prototype_model['source'] = '192.168.3.0/24'
        network_acl_rule_prototype_model['code'] = 0
        network_acl_rule_prototype_model['type'] = 8

        # Set up parameter values
        network_acl_id = 'testString'
        network_acl_rule_prototype = network_acl_rule_prototype_model

        # Invoke method
        response = service.create_network_acl_rule(network_acl_id,
                                                   network_acl_rule_prototype,
                                                   headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == network_acl_rule_prototype

    #--------------------------------------------------------
    # test_create_network_acl_rule_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_network_acl_rule_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString/rules')
        mock_response = '{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a NetworkACLRuleReference model
        network_acl_rule_reference_model = {}
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a dict representation of a NetworkACLRulePrototypeNetworkACLRuleProtocolICMP model
        network_acl_rule_prototype_model = {}
        network_acl_rule_prototype_model['action'] = 'allow'
        network_acl_rule_prototype_model[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_prototype_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_prototype_model['destination'] = '192.168.3.0/24'
        network_acl_rule_prototype_model['direction'] = 'inbound'
        network_acl_rule_prototype_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_model['ip_version'] = 'ipv4'
        network_acl_rule_prototype_model['name'] = 'my-rule-2'
        network_acl_rule_prototype_model['protocol'] = 'icmp'
        network_acl_rule_prototype_model['source'] = '192.168.3.0/24'
        network_acl_rule_prototype_model['code'] = 0
        network_acl_rule_prototype_model['type'] = 8

        # Set up parameter values
        network_acl_id = 'testString'
        network_acl_rule_prototype = network_acl_rule_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "network_acl_id": network_acl_id,
            "network_acl_rule_prototype": network_acl_rule_prototype,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_network_acl_rule(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_network_acl_rule
#-----------------------------------------------------------------------------
class TestDeleteNetworkAclRule():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_network_acl_rule()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_network_acl_rule_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/network_acls/testString/rules/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        network_acl_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_network_acl_rule(network_acl_id,
                                                   id,
                                                   headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_network_acl_rule_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_network_acl_rule_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/network_acls/testString/rules/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        network_acl_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "network_acl_id": network_acl_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_network_acl_rule(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_network_acl_rule
#-----------------------------------------------------------------------------
class TestGetNetworkAclRule():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_network_acl_rule()
    #--------------------------------------------------------
    @responses.activate
    def test_get_network_acl_rule_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/network_acls/testString/rules/testString')
        mock_response = '{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        network_acl_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_network_acl_rule(network_acl_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_network_acl_rule_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_network_acl_rule_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/network_acls/testString/rules/testString')
        mock_response = '{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        network_acl_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "network_acl_id": network_acl_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_network_acl_rule(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_network_acl_rule
#-----------------------------------------------------------------------------
class TestUpdateNetworkAclRule():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_network_acl_rule()
    #--------------------------------------------------------
    @responses.activate
    def test_update_network_acl_rule_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/network_acls/testString/rules/testString')
        mock_response = '{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a NetworkACLRulePatchBeforeNetworkACLRuleIdentityById model
        network_acl_rule_patch_before_model = {}
        network_acl_rule_patch_before_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'

        # Set up parameter values
        network_acl_id = 'testString'
        id = 'testString'
        action = 'allow'
        before = network_acl_rule_patch_before_model
        code = 0
        destination = '192.168.3.2/32'
        destination_port_max = 22
        destination_port_min = 22
        direction = 'inbound'
        name = 'my-rule-2'
        source = '192.168.3.2/32'
        source_port_max = 65535
        source_port_min = 49152
        type = 8

        # Invoke method
        response = service.update_network_acl_rule(
            network_acl_id,
            id,
            action=action,
            before=before,
            code=code,
            destination=destination,
            destination_port_max=destination_port_max,
            destination_port_min=destination_port_min,
            direction=direction,
            name=name,
            source=source,
            source_port_max=source_port_max,
            source_port_min=source_port_min,
            type=type,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['action'] == 'allow'
        assert req_body['before'] == network_acl_rule_patch_before_model
        assert req_body['code'] == 0
        assert req_body['destination'] == '192.168.3.2/32'
        assert req_body['destination_port_max'] == 22
        assert req_body['destination_port_min'] == 22
        assert req_body['direction'] == 'inbound'
        assert req_body['name'] == 'my-rule-2'
        assert req_body['source'] == '192.168.3.2/32'
        assert req_body['source_port_max'] == 65535
        assert req_body['source_port_min'] == 49152
        assert req_body['type'] == 8

    #--------------------------------------------------------
    # test_update_network_acl_rule_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_network_acl_rule_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/network_acls/testString/rules/testString')
        mock_response = '{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a NetworkACLRulePatchBeforeNetworkACLRuleIdentityById model
        network_acl_rule_patch_before_model = {}
        network_acl_rule_patch_before_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'

        # Set up parameter values
        network_acl_id = 'testString'
        id = 'testString'
        action = 'allow'
        before = network_acl_rule_patch_before_model
        code = 0
        destination = '192.168.3.2/32'
        destination_port_max = 22
        destination_port_min = 22
        direction = 'inbound'
        name = 'my-rule-2'
        source = '192.168.3.2/32'
        source_port_max = 65535
        source_port_min = 49152
        type = 8

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "network_acl_id": network_acl_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_network_acl_rule(**req_copy)


# endregion
##############################################################################
# End of Service: NetworkACLs
##############################################################################

##############################################################################
# Start of Service: PublicGateways
##############################################################################
# region


#-----------------------------------------------------------------------------
# Test Class for list_public_gateways
#-----------------------------------------------------------------------------
class TestListPublicGateways():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_public_gateways()
    #--------------------------------------------------------
    @responses.activate
    def test_list_public_gateways_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "public_gateways": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'

        # Invoke method
        response = service.list_public_gateways(
            start=start,
            limit=limit,
            resource_group_id=resource_group_id,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string

    #--------------------------------------------------------
    # test_list_public_gateways_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_public_gateways_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "public_gateways": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_public_gateways()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_public_gateways_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_public_gateways_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "public_gateways": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_public_gateways(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_public_gateway
#-----------------------------------------------------------------------------
class TestCreatePublicGateway():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_public_gateway()
    #--------------------------------------------------------
    @responses.activate
    def test_create_public_gateway_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById model
        public_gateway_prototype_floating_ip_model = {}
        public_gateway_prototype_floating_ip_model[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        vpc = vpc_identity_model
        zone = zone_identity_model
        floating_ip = public_gateway_prototype_floating_ip_model
        name = 'my-public-gateway'
        resource_group = resource_group_identity_model

        # Invoke method
        response = service.create_public_gateway(vpc,
                                                 zone,
                                                 floating_ip=floating_ip,
                                                 name=name,
                                                 resource_group=resource_group,
                                                 headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['vpc'] == vpc_identity_model
        assert req_body['zone'] == zone_identity_model
        assert req_body[
            'floating_ip'] == public_gateway_prototype_floating_ip_model
        assert req_body['name'] == 'my-public-gateway'
        assert req_body['resource_group'] == resource_group_identity_model

    #--------------------------------------------------------
    # test_create_public_gateway_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_public_gateway_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById model
        public_gateway_prototype_floating_ip_model = {}
        public_gateway_prototype_floating_ip_model[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        vpc = vpc_identity_model
        zone = zone_identity_model
        floating_ip = public_gateway_prototype_floating_ip_model
        name = 'my-public-gateway'
        resource_group = resource_group_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc": vpc,
            "zone": zone,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_public_gateway(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_public_gateway
#-----------------------------------------------------------------------------
class TestDeletePublicGateway():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_public_gateway()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_public_gateway_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_public_gateway(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_public_gateway_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_public_gateway_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_public_gateway(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_public_gateway
#-----------------------------------------------------------------------------
class TestGetPublicGateway():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_public_gateway()
    #--------------------------------------------------------
    @responses.activate
    def test_get_public_gateway_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_public_gateway(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_public_gateway_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_public_gateway_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_public_gateway(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_public_gateway
#-----------------------------------------------------------------------------
class TestUpdatePublicGateway():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_public_gateway()
    #--------------------------------------------------------
    @responses.activate
    def test_update_public_gateway_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-public-gateway'

        # Invoke method
        response = service.update_public_gateway(id, name=name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['name'] == 'my-public-gateway'

    #--------------------------------------------------------
    # test_update_public_gateway_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_public_gateway_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-public-gateway'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_public_gateway(**req_copy)


# endregion
##############################################################################
# End of Service: PublicGateways
##############################################################################

##############################################################################
# Start of Service: SSHKeys
##############################################################################
# region


#-----------------------------------------------------------------------------
# Test Class for list_keys
#-----------------------------------------------------------------------------
class TestListKeys():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_keys()
    #--------------------------------------------------------
    @responses.activate
    def test_list_keys_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/keys')
        mock_response = '{"keys": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "type": "rsa"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        resource_group_id = 'testString'

        # Invoke method
        response = service.list_keys(resource_group_id=resource_group_id,
                                     headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'resource_group.id={}'.format(resource_group_id) in query_string

    #--------------------------------------------------------
    # test_list_keys_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_keys_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/keys')
        mock_response = '{"keys": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "type": "rsa"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_keys()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_keys_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_keys_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/keys')
        mock_response = '{"keys": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "type": "rsa"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_keys(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_key
#-----------------------------------------------------------------------------
class TestCreateKey():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_key()
    #--------------------------------------------------------
    @responses.activate
    def test_create_key_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/keys')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "type": "rsa"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        public_key = 'AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En'
        name = 'my-key'
        resource_group = resource_group_identity_model
        type = 'rsa'

        # Invoke method
        response = service.create_key(public_key,
                                      name=name,
                                      resource_group=resource_group,
                                      type=type,
                                      headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body[
            'public_key'] == 'AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En'
        assert req_body['name'] == 'my-key'
        assert req_body['resource_group'] == resource_group_identity_model
        assert req_body['type'] == 'rsa'

    #--------------------------------------------------------
    # test_create_key_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_key_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/keys')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "type": "rsa"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        public_key = 'AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En'
        name = 'my-key'
        resource_group = resource_group_identity_model
        type = 'rsa'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "public_key": public_key,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_key(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_key
#-----------------------------------------------------------------------------
class TestDeleteKey():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_key()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_key_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/keys/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_key(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_key_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_key_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/keys/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_key(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_key
#-----------------------------------------------------------------------------
class TestGetKey():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_key()
    #--------------------------------------------------------
    @responses.activate
    def test_get_key_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/keys/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "type": "rsa"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_key(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_key_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_key_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/keys/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "type": "rsa"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_key(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_key
#-----------------------------------------------------------------------------
class TestUpdateKey():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_key()
    #--------------------------------------------------------
    @responses.activate
    def test_update_key_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/keys/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "type": "rsa"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-key'

        # Invoke method
        response = service.update_key(id, name=name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['name'] == 'my-key'

    #--------------------------------------------------------
    # test_update_key_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_key_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/keys/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "type": "rsa"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-key'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_key(**req_copy)


# endregion
##############################################################################
# End of Service: SSHKeys
##############################################################################

##############################################################################
# Start of Service: SecurityGroups
##############################################################################
# region


#-----------------------------------------------------------------------------
# Test Class for list_security_groups
#-----------------------------------------------------------------------------
class TestListSecurityGroups():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_security_groups()
    #--------------------------------------------------------
    @responses.activate
    def test_list_security_groups_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "security_groups": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'
        vpc_id = 'testString'
        vpc_crn = 'testString'
        vpc_name = 'testString'

        # Invoke method
        response = service.list_security_groups(
            start=start,
            limit=limit,
            resource_group_id=resource_group_id,
            vpc_id=vpc_id,
            vpc_crn=vpc_crn,
            vpc_name=vpc_name,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string
        assert 'vpc.id={}'.format(vpc_id) in query_string
        assert 'vpc.crn={}'.format(vpc_crn) in query_string
        assert 'vpc.name={}'.format(vpc_name) in query_string

    #--------------------------------------------------------
    # test_list_security_groups_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_security_groups_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "security_groups": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_security_groups()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_security_groups_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_security_groups_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "security_groups": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_security_groups(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_security_group
#-----------------------------------------------------------------------------
class TestCreateSecurityGroup():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_security_group()
    #--------------------------------------------------------
    @responses.activate
    def test_create_security_group_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP model
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_model = {}
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_model[
            'address'] = '192.168.3.4'

        # Construct a dict representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP model
        security_group_rule_prototype_model = {}
        security_group_rule_prototype_model['direction'] = 'inbound'
        security_group_rule_prototype_model['ip_version'] = 'ipv4'
        security_group_rule_prototype_model['protocol'] = 'icmp'
        security_group_rule_prototype_model[
            'remote'] = security_group_rule_prototype_security_group_rule_protocol_icmp_remote_model
        security_group_rule_prototype_model['code'] = 0
        security_group_rule_prototype_model['type'] = 8

        # Set up parameter values
        vpc = vpc_identity_model
        name = 'my-security-group'
        resource_group = resource_group_identity_model
        rules = [security_group_rule_prototype_model]

        # Invoke method
        response = service.create_security_group(vpc,
                                                 name=name,
                                                 resource_group=resource_group,
                                                 rules=rules,
                                                 headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['vpc'] == vpc_identity_model
        assert req_body['name'] == 'my-security-group'
        assert req_body['resource_group'] == resource_group_identity_model
        assert req_body['rules'] == [security_group_rule_prototype_model]

    #--------------------------------------------------------
    # test_create_security_group_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_security_group_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP model
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_model = {}
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_model[
            'address'] = '192.168.3.4'

        # Construct a dict representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP model
        security_group_rule_prototype_model = {}
        security_group_rule_prototype_model['direction'] = 'inbound'
        security_group_rule_prototype_model['ip_version'] = 'ipv4'
        security_group_rule_prototype_model['protocol'] = 'icmp'
        security_group_rule_prototype_model[
            'remote'] = security_group_rule_prototype_security_group_rule_protocol_icmp_remote_model
        security_group_rule_prototype_model['code'] = 0
        security_group_rule_prototype_model['type'] = 8

        # Set up parameter values
        vpc = vpc_identity_model
        name = 'my-security-group'
        resource_group = resource_group_identity_model
        rules = [security_group_rule_prototype_model]

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc": vpc,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_security_group(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_security_group
#-----------------------------------------------------------------------------
class TestDeleteSecurityGroup():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_security_group()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_security_group_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_security_group(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_security_group_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_security_group_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_security_group(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_security_group
#-----------------------------------------------------------------------------
class TestGetSecurityGroup():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_security_group()
    #--------------------------------------------------------
    @responses.activate
    def test_get_security_group_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_security_group(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_security_group_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_security_group_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_security_group(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_security_group
#-----------------------------------------------------------------------------
class TestUpdateSecurityGroup():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_security_group()
    #--------------------------------------------------------
    @responses.activate
    def test_update_security_group_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-security-group'

        # Invoke method
        response = service.update_security_group(id, name=name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['name'] == 'my-security-group'

    #--------------------------------------------------------
    # test_update_security_group_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_security_group_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-security-group'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_security_group(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_security_group_network_interfaces
#-----------------------------------------------------------------------------
class TestListSecurityGroupNetworkInterfaces():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_security_group_network_interfaces()
    #--------------------------------------------------------
    @responses.activate
    def test_list_security_group_network_interfaces_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/security_groups/testString/network_interfaces')
        mock_response = '{"network_interfaces": [{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        security_group_id = 'testString'

        # Invoke method
        response = service.list_security_group_network_interfaces(
            security_group_id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_security_group_network_interfaces_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_security_group_network_interfaces_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/security_groups/testString/network_interfaces')
        mock_response = '{"network_interfaces": [{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        security_group_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "security_group_id": security_group_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_security_group_network_interfaces(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for remove_security_group_network_interface
#-----------------------------------------------------------------------------
class TestRemoveSecurityGroupNetworkInterface():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # remove_security_group_network_interface()
    #--------------------------------------------------------
    @responses.activate
    def test_remove_security_group_network_interface_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/security_groups/testString/network_interfaces/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.remove_security_group_network_interface(
            security_group_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_remove_security_group_network_interface_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_remove_security_group_network_interface_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/security_groups/testString/network_interfaces/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "security_group_id": security_group_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.remove_security_group_network_interface(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_security_group_network_interface
#-----------------------------------------------------------------------------
class TestGetSecurityGroupNetworkInterface():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_security_group_network_interface()
    #--------------------------------------------------------
    @responses.activate
    def test_get_security_group_network_interface_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/security_groups/testString/network_interfaces/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_security_group_network_interface(
            security_group_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_security_group_network_interface_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_security_group_network_interface_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/security_groups/testString/network_interfaces/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "security_group_id": security_group_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_security_group_network_interface(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for add_security_group_network_interface
#-----------------------------------------------------------------------------
class TestAddSecurityGroupNetworkInterface():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # add_security_group_network_interface()
    #--------------------------------------------------------
    @responses.activate
    def test_add_security_group_network_interface_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/security_groups/testString/network_interfaces/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.add_security_group_network_interface(
            security_group_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201

    #--------------------------------------------------------
    # test_add_security_group_network_interface_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_add_security_group_network_interface_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/security_groups/testString/network_interfaces/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "security_group_id": security_group_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.add_security_group_network_interface(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_security_group_rules
#-----------------------------------------------------------------------------
class TestListSecurityGroupRules():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_security_group_rules()
    #--------------------------------------------------------
    @responses.activate
    def test_list_security_group_rules_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/security_groups/testString/rules')
        mock_response = '{"rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        security_group_id = 'testString'

        # Invoke method
        response = service.list_security_group_rules(security_group_id,
                                                     headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_security_group_rules_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_security_group_rules_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/security_groups/testString/rules')
        mock_response = '{"rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        security_group_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "security_group_id": security_group_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_security_group_rules(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_security_group_rule
#-----------------------------------------------------------------------------
class TestCreateSecurityGroupRule():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_security_group_rule()
    #--------------------------------------------------------
    @responses.activate
    def test_create_security_group_rule_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/security_groups/testString/rules')
        mock_response = '{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP model
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_model = {}
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_model[
            'address'] = '192.168.3.4'

        # Construct a dict representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP model
        security_group_rule_prototype_model = {}
        security_group_rule_prototype_model['direction'] = 'inbound'
        security_group_rule_prototype_model['ip_version'] = 'ipv4'
        security_group_rule_prototype_model['protocol'] = 'icmp'
        security_group_rule_prototype_model[
            'remote'] = security_group_rule_prototype_security_group_rule_protocol_icmp_remote_model
        security_group_rule_prototype_model['code'] = 0
        security_group_rule_prototype_model['type'] = 8

        # Set up parameter values
        security_group_id = 'testString'
        security_group_rule_prototype = security_group_rule_prototype_model

        # Invoke method
        response = service.create_security_group_rule(
            security_group_id, security_group_rule_prototype, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == security_group_rule_prototype

    #--------------------------------------------------------
    # test_create_security_group_rule_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_security_group_rule_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/security_groups/testString/rules')
        mock_response = '{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP model
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_model = {}
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_model[
            'address'] = '192.168.3.4'

        # Construct a dict representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP model
        security_group_rule_prototype_model = {}
        security_group_rule_prototype_model['direction'] = 'inbound'
        security_group_rule_prototype_model['ip_version'] = 'ipv4'
        security_group_rule_prototype_model['protocol'] = 'icmp'
        security_group_rule_prototype_model[
            'remote'] = security_group_rule_prototype_security_group_rule_protocol_icmp_remote_model
        security_group_rule_prototype_model['code'] = 0
        security_group_rule_prototype_model['type'] = 8

        # Set up parameter values
        security_group_id = 'testString'
        security_group_rule_prototype = security_group_rule_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "security_group_id": security_group_id,
            "security_group_rule_prototype": security_group_rule_prototype,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_security_group_rule(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_security_group_rule
#-----------------------------------------------------------------------------
class TestDeleteSecurityGroupRule():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_security_group_rule()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_security_group_rule_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/security_groups/testString/rules/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_security_group_rule(security_group_id,
                                                      id,
                                                      headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_security_group_rule_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_security_group_rule_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/security_groups/testString/rules/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "security_group_id": security_group_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_security_group_rule(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_security_group_rule
#-----------------------------------------------------------------------------
class TestGetSecurityGroupRule():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_security_group_rule()
    #--------------------------------------------------------
    @responses.activate
    def test_get_security_group_rule_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/security_groups/testString/rules/testString')
        mock_response = '{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_security_group_rule(security_group_id,
                                                   id,
                                                   headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_security_group_rule_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_security_group_rule_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/security_groups/testString/rules/testString')
        mock_response = '{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "security_group_id": security_group_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_security_group_rule(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_security_group_rule
#-----------------------------------------------------------------------------
class TestUpdateSecurityGroupRule():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_security_group_rule()
    #--------------------------------------------------------
    @responses.activate
    def test_update_security_group_rule_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/security_groups/testString/rules/testString')
        mock_response = '{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a SecurityGroupRulePatchRemoteIP model
        security_group_rule_patch_remote_model = {}
        security_group_rule_patch_remote_model['address'] = '192.168.3.4'

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'
        code = 0
        direction = 'inbound'
        ip_version = 'ipv4'
        port_max = 22
        port_min = 22
        remote = security_group_rule_patch_remote_model
        type = 8

        # Invoke method
        response = service.update_security_group_rule(security_group_id,
                                                      id,
                                                      code=code,
                                                      direction=direction,
                                                      ip_version=ip_version,
                                                      port_max=port_max,
                                                      port_min=port_min,
                                                      remote=remote,
                                                      type=type,
                                                      headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['code'] == 0
        assert req_body['direction'] == 'inbound'
        assert req_body['ip_version'] == 'ipv4'
        assert req_body['port_max'] == 22
        assert req_body['port_min'] == 22
        assert req_body['remote'] == security_group_rule_patch_remote_model
        assert req_body['type'] == 8

    #--------------------------------------------------------
    # test_update_security_group_rule_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_security_group_rule_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/security_groups/testString/rules/testString')
        mock_response = '{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a SecurityGroupRulePatchRemoteIP model
        security_group_rule_patch_remote_model = {}
        security_group_rule_patch_remote_model['address'] = '192.168.3.4'

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'
        code = 0
        direction = 'inbound'
        ip_version = 'ipv4'
        port_max = 22
        port_min = 22
        remote = security_group_rule_patch_remote_model
        type = 8

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "security_group_id": security_group_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_security_group_rule(**req_copy)


# endregion
##############################################################################
# End of Service: SecurityGroups
##############################################################################

##############################################################################
# Start of Service: Subnets
##############################################################################
# region


#-----------------------------------------------------------------------------
# Test Class for list_subnets
#-----------------------------------------------------------------------------
class TestListSubnets():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_subnets()
    #--------------------------------------------------------
    @responses.activate
    def test_list_subnets_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "subnets": [{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ip_version": "both", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'

        # Invoke method
        response = service.list_subnets(start=start,
                                        limit=limit,
                                        resource_group_id=resource_group_id,
                                        headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string

    #--------------------------------------------------------
    # test_list_subnets_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_subnets_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "subnets": [{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ip_version": "both", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_subnets()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_subnets_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_subnets_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "subnets": [{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ip_version": "both", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_subnets(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_subnet
#-----------------------------------------------------------------------------
class TestCreateSubnet():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_subnet()
    #--------------------------------------------------------
    @responses.activate
    def test_create_subnet_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets')
        mock_response = '{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ip_version": "both", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a NetworkACLIdentityById model
        network_acl_identity_model = {}
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Construct a dict representation of a PublicGatewayIdentityById model
        public_gateway_identity_model = {}
        public_gateway_identity_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a SubnetPrototypeSubnetByTotalCount model
        subnet_prototype_model = {}
        subnet_prototype_model['ip_version'] = 'both'
        subnet_prototype_model['name'] = 'my-subnet'
        subnet_prototype_model['network_acl'] = network_acl_identity_model
        subnet_prototype_model['public_gateway'] = public_gateway_identity_model
        subnet_prototype_model['resource_group'] = resource_group_identity_model
        subnet_prototype_model['vpc'] = vpc_identity_model
        subnet_prototype_model['total_ipv4_address_count'] = 256
        subnet_prototype_model['zone'] = zone_identity_model

        # Set up parameter values
        subnet_prototype = subnet_prototype_model

        # Invoke method
        response = service.create_subnet(subnet_prototype, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == subnet_prototype

    #--------------------------------------------------------
    # test_create_subnet_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_subnet_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets')
        mock_response = '{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ip_version": "both", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a NetworkACLIdentityById model
        network_acl_identity_model = {}
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Construct a dict representation of a PublicGatewayIdentityById model
        public_gateway_identity_model = {}
        public_gateway_identity_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a SubnetPrototypeSubnetByTotalCount model
        subnet_prototype_model = {}
        subnet_prototype_model['ip_version'] = 'both'
        subnet_prototype_model['name'] = 'my-subnet'
        subnet_prototype_model['network_acl'] = network_acl_identity_model
        subnet_prototype_model['public_gateway'] = public_gateway_identity_model
        subnet_prototype_model['resource_group'] = resource_group_identity_model
        subnet_prototype_model['vpc'] = vpc_identity_model
        subnet_prototype_model['total_ipv4_address_count'] = 256
        subnet_prototype_model['zone'] = zone_identity_model

        # Set up parameter values
        subnet_prototype = subnet_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "subnet_prototype": subnet_prototype,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_subnet(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_subnet
#-----------------------------------------------------------------------------
class TestDeleteSubnet():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_subnet()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_subnet_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_subnet(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_subnet_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_subnet_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_subnet(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_subnet
#-----------------------------------------------------------------------------
class TestGetSubnet():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_subnet()
    #--------------------------------------------------------
    @responses.activate
    def test_get_subnet_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString')
        mock_response = '{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ip_version": "both", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_subnet(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_subnet_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_subnet_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString')
        mock_response = '{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ip_version": "both", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_subnet(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_subnet
#-----------------------------------------------------------------------------
class TestUpdateSubnet():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_subnet()
    #--------------------------------------------------------
    @responses.activate
    def test_update_subnet_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString')
        mock_response = '{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ip_version": "both", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a NetworkACLIdentityById model
        network_acl_identity_model = {}
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Construct a dict representation of a PublicGatewayIdentityById model
        public_gateway_identity_model = {}
        public_gateway_identity_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Set up parameter values
        id = 'testString'
        name = 'my-subnet'
        network_acl = network_acl_identity_model
        public_gateway = public_gateway_identity_model

        # Invoke method
        response = service.update_subnet(id,
                                         name=name,
                                         network_acl=network_acl,
                                         public_gateway=public_gateway,
                                         headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['name'] == 'my-subnet'
        assert req_body['network_acl'] == network_acl_identity_model
        assert req_body['public_gateway'] == public_gateway_identity_model

    #--------------------------------------------------------
    # test_update_subnet_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_subnet_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString')
        mock_response = '{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ip_version": "both", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a NetworkACLIdentityById model
        network_acl_identity_model = {}
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Construct a dict representation of a PublicGatewayIdentityById model
        public_gateway_identity_model = {}
        public_gateway_identity_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Set up parameter values
        id = 'testString'
        name = 'my-subnet'
        network_acl = network_acl_identity_model
        public_gateway = public_gateway_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_subnet(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_subnet_network_acl
#-----------------------------------------------------------------------------
class TestGetSubnetNetworkAcl():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_subnet_network_acl()
    #--------------------------------------------------------
    @responses.activate
    def test_get_subnet_network_acl_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString/network_acl')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_subnet_network_acl(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_subnet_network_acl_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_subnet_network_acl_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString/network_acl')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_subnet_network_acl(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for replace_subnet_network_acl
#-----------------------------------------------------------------------------
class TestReplaceSubnetNetworkAcl():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # replace_subnet_network_acl()
    #--------------------------------------------------------
    @responses.activate
    def test_replace_subnet_network_acl_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString/network_acl')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a NetworkACLIdentityById model
        network_acl_identity_model = {}
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Set up parameter values
        id = 'testString'
        network_acl_identity = network_acl_identity_model

        # Invoke method
        response = service.replace_subnet_network_acl(id,
                                                      network_acl_identity,
                                                      headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == network_acl_identity

    #--------------------------------------------------------
    # test_replace_subnet_network_acl_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_replace_subnet_network_acl_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString/network_acl')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a NetworkACLIdentityById model
        network_acl_identity_model = {}
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Set up parameter values
        id = 'testString'
        network_acl_identity = network_acl_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "network_acl_identity": network_acl_identity,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.replace_subnet_network_acl(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for unset_subnet_public_gateway
#-----------------------------------------------------------------------------
class TestUnsetSubnetPublicGateway():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # unset_subnet_public_gateway()
    #--------------------------------------------------------
    @responses.activate
    def test_unset_subnet_public_gateway_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/subnets/testString/public_gateway')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.unset_subnet_public_gateway(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_unset_subnet_public_gateway_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_unset_subnet_public_gateway_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/subnets/testString/public_gateway')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.unset_subnet_public_gateway(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_subnet_public_gateway
#-----------------------------------------------------------------------------
class TestGetSubnetPublicGateway():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_subnet_public_gateway()
    #--------------------------------------------------------
    @responses.activate
    def test_get_subnet_public_gateway_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/subnets/testString/public_gateway')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_subnet_public_gateway(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_subnet_public_gateway_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_subnet_public_gateway_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/subnets/testString/public_gateway')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_subnet_public_gateway(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for set_subnet_public_gateway
#-----------------------------------------------------------------------------
class TestSetSubnetPublicGateway():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # set_subnet_public_gateway()
    #--------------------------------------------------------
    @responses.activate
    def test_set_subnet_public_gateway_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/subnets/testString/public_gateway')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a PublicGatewayIdentityById model
        public_gateway_identity_model = {}
        public_gateway_identity_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Set up parameter values
        id = 'testString'
        public_gateway_identity = public_gateway_identity_model

        # Invoke method
        response = service.set_subnet_public_gateway(id,
                                                     public_gateway_identity,
                                                     headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == public_gateway_identity

    #--------------------------------------------------------
    # test_set_subnet_public_gateway_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_set_subnet_public_gateway_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/subnets/testString/public_gateway')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a PublicGatewayIdentityById model
        public_gateway_identity_model = {}
        public_gateway_identity_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Set up parameter values
        id = 'testString'
        public_gateway_identity = public_gateway_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "public_gateway_identity": public_gateway_identity,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.set_subnet_public_gateway(**req_copy)


# endregion
##############################################################################
# End of Service: Subnets
##############################################################################

##############################################################################
# Start of Service: VPCs
##############################################################################
# region


#-----------------------------------------------------------------------------
# Test Class for list_vpcs
#-----------------------------------------------------------------------------
class TestListVpcs():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_vpcs()
    #--------------------------------------------------------
    @responses.activate
    def test_list_vpcs_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "vpcs": [{"classic_access": false, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'
        classic_access = True

        # Invoke method
        response = service.list_vpcs(start=start,
                                     limit=limit,
                                     resource_group_id=resource_group_id,
                                     classic_access=classic_access,
                                     headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string
        assert 'classic_access={}'.format(
            'true' if classic_access else 'false') in query_string

    #--------------------------------------------------------
    # test_list_vpcs_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_vpcs_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "vpcs": [{"classic_access": false, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_vpcs()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_vpcs_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_vpcs_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "vpcs": [{"classic_access": false, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_vpcs(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_vpc
#-----------------------------------------------------------------------------
class TestCreateVpc():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_vpc()
    #--------------------------------------------------------
    @responses.activate
    def test_create_vpc_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs')
        mock_response = '{"classic_access": false, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        address_prefix_management = 'manual'
        classic_access = False
        name = 'my-vpc'
        resource_group = resource_group_identity_model

        # Invoke method
        response = service.create_vpc(
            address_prefix_management=address_prefix_management,
            classic_access=classic_access,
            name=name,
            resource_group=resource_group,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['address_prefix_management'] == 'manual'
        assert req_body['classic_access'] == False
        assert req_body['name'] == 'my-vpc'
        assert req_body['resource_group'] == resource_group_identity_model

    #--------------------------------------------------------
    # test_create_vpc_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_create_vpc_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs')
        mock_response = '{"classic_access": false, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Invoke method
        response = service.create_vpc()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201

    #--------------------------------------------------------
    # test_create_vpc_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_vpc_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs')
        mock_response = '{"classic_access": false, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_vpc(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_vpc
#-----------------------------------------------------------------------------
class TestDeleteVpc():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_vpc()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_vpc_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_vpc(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_vpc_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_vpc_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_vpc(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_vpc
#-----------------------------------------------------------------------------
class TestGetVpc():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_vpc()
    #--------------------------------------------------------
    @responses.activate
    def test_get_vpc_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString')
        mock_response = '{"classic_access": false, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_vpc(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_vpc_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_vpc_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString')
        mock_response = '{"classic_access": false, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_vpc(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_vpc
#-----------------------------------------------------------------------------
class TestUpdateVpc():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_vpc()
    #--------------------------------------------------------
    @responses.activate
    def test_update_vpc_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString')
        mock_response = '{"classic_access": false, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-vpc'

        # Invoke method
        response = service.update_vpc(id, name=name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['name'] == 'my-vpc'

    #--------------------------------------------------------
    # test_update_vpc_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_vpc_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString')
        mock_response = '{"classic_access": false, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-vpc'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_vpc(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_vpc_default_network_acl
#-----------------------------------------------------------------------------
class TestGetVpcDefaultNetworkAcl():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_vpc_default_network_acl()
    #--------------------------------------------------------
    @responses.activate
    def test_get_vpc_default_network_acl_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/default_network_acl')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "mnemonic-ersatz-eatery-malaise", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_vpc_default_network_acl(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_vpc_default_network_acl_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_vpc_default_network_acl_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/default_network_acl')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "mnemonic-ersatz-eatery-malaise", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_vpc_default_network_acl(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_vpc_default_security_group
#-----------------------------------------------------------------------------
class TestGetVpcDefaultSecurityGroup():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_vpc_default_security_group()
    #--------------------------------------------------------
    @responses.activate
    def test_get_vpc_default_security_group_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/default_security_group')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "observant-chip-emphatic-engraver", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_vpc_default_security_group(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_vpc_default_security_group_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_vpc_default_security_group_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/default_security_group')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "observant-chip-emphatic-engraver", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "udp", "remote": {"anyKey": "anyValue"}, "port_max": 22, "port_min": 22}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_vpc_default_security_group(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_vpc_address_prefixes
#-----------------------------------------------------------------------------
class TestListVpcAddressPrefixes():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_vpc_address_prefixes()
    #--------------------------------------------------------
    @responses.activate
    def test_list_vpc_address_prefixes_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/address_prefixes')
        mock_response = '{"address_prefixes": [{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": false, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'

        # Invoke method
        response = service.list_vpc_address_prefixes(vpc_id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_vpc_address_prefixes_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_vpc_address_prefixes_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/address_prefixes')
        mock_response = '{"address_prefixes": [{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": false, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_vpc_address_prefixes(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_vpc_address_prefix
#-----------------------------------------------------------------------------
class TestCreateVpcAddressPrefix():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_vpc_address_prefix()
    #--------------------------------------------------------
    @responses.activate
    def test_create_vpc_address_prefix_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/address_prefixes')
        mock_response = '{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": false, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Set up parameter values
        vpc_id = 'testString'
        cidr = '10.0.0.0/24'
        zone = zone_identity_model
        is_default = True
        name = 'my-address-prefix-2'

        # Invoke method
        response = service.create_vpc_address_prefix(vpc_id,
                                                     cidr,
                                                     zone,
                                                     is_default=is_default,
                                                     name=name,
                                                     headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['cidr'] == '10.0.0.0/24'
        assert req_body['zone'] == zone_identity_model
        assert req_body['is_default'] == True
        assert req_body['name'] == 'my-address-prefix-2'

    #--------------------------------------------------------
    # test_create_vpc_address_prefix_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_vpc_address_prefix_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/address_prefixes')
        mock_response = '{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": false, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Set up parameter values
        vpc_id = 'testString'
        cidr = '10.0.0.0/24'
        zone = zone_identity_model
        is_default = True
        name = 'my-address-prefix-2'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
            "cidr": cidr,
            "zone": zone,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_vpc_address_prefix(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_vpc_address_prefix
#-----------------------------------------------------------------------------
class TestDeleteVpcAddressPrefix():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_vpc_address_prefix()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_vpc_address_prefix_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpcs/testString/address_prefixes/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_vpc_address_prefix(vpc_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_vpc_address_prefix_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_vpc_address_prefix_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpcs/testString/address_prefixes/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_vpc_address_prefix(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_vpc_address_prefix
#-----------------------------------------------------------------------------
class TestGetVpcAddressPrefix():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_vpc_address_prefix()
    #--------------------------------------------------------
    @responses.activate
    def test_get_vpc_address_prefix_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpcs/testString/address_prefixes/testString')
        mock_response = '{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": false, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_vpc_address_prefix(vpc_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_vpc_address_prefix_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_vpc_address_prefix_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpcs/testString/address_prefixes/testString')
        mock_response = '{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": false, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_vpc_address_prefix(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_vpc_address_prefix
#-----------------------------------------------------------------------------
class TestUpdateVpcAddressPrefix():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_vpc_address_prefix()
    #--------------------------------------------------------
    @responses.activate
    def test_update_vpc_address_prefix_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpcs/testString/address_prefixes/testString')
        mock_response = '{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": false, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'
        is_default = False
        name = 'my-address-prefix-2'

        # Invoke method
        response = service.update_vpc_address_prefix(vpc_id,
                                                     id,
                                                     is_default=is_default,
                                                     name=name,
                                                     headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['is_default'] == False
        assert req_body['name'] == 'my-address-prefix-2'

    #--------------------------------------------------------
    # test_update_vpc_address_prefix_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_vpc_address_prefix_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpcs/testString/address_prefixes/testString')
        mock_response = '{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": false, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'
        is_default = False
        name = 'my-address-prefix-2'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_vpc_address_prefix(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_vpc_routes
#-----------------------------------------------------------------------------
class TestListVpcRoutes():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_vpc_routes()
    #--------------------------------------------------------
    @responses.activate
    def test_list_vpc_routes_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString/routes')
        mock_response = '{"routes": [{"created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'
        zone_name = 'testString'

        # Invoke method
        response = service.list_vpc_routes(vpc_id,
                                           zone_name=zone_name,
                                           headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'zone.name={}'.format(zone_name) in query_string

    #--------------------------------------------------------
    # test_list_vpc_routes_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_vpc_routes_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString/routes')
        mock_response = '{"routes": [{"created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'

        # Invoke method
        response = service.list_vpc_routes(vpc_id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_vpc_routes_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_vpc_routes_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString/routes')
        mock_response = '{"routes": [{"created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_vpc_routes(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_vpc_route
#-----------------------------------------------------------------------------
class TestCreateVpcRoute():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_vpc_route()
    #--------------------------------------------------------
    @responses.activate
    def test_create_vpc_route_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString/routes')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a RouteNextHopPrototypeRouteNextHopIP model
        route_next_hop_prototype_model = {}
        route_next_hop_prototype_model['address'] = '192.168.3.4'

        # Set up parameter values
        vpc_id = 'testString'
        destination = '192.168.3.0/24'
        zone = zone_identity_model
        name = 'my-route-2'
        next_hop = route_next_hop_prototype_model

        # Invoke method
        response = service.create_vpc_route(vpc_id,
                                            destination,
                                            zone,
                                            name=name,
                                            next_hop=next_hop,
                                            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['destination'] == '192.168.3.0/24'
        assert req_body['zone'] == zone_identity_model
        assert req_body['name'] == 'my-route-2'
        assert req_body['next_hop'] == route_next_hop_prototype_model

    #--------------------------------------------------------
    # test_create_vpc_route_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_vpc_route_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString/routes')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a RouteNextHopPrototypeRouteNextHopIP model
        route_next_hop_prototype_model = {}
        route_next_hop_prototype_model['address'] = '192.168.3.4'

        # Set up parameter values
        vpc_id = 'testString'
        destination = '192.168.3.0/24'
        zone = zone_identity_model
        name = 'my-route-2'
        next_hop = route_next_hop_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
            "destination": destination,
            "zone": zone,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_vpc_route(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_vpc_route
#-----------------------------------------------------------------------------
class TestDeleteVpcRoute():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_vpc_route()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_vpc_route_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/routes/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_vpc_route(vpc_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_vpc_route_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_vpc_route_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/routes/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_vpc_route(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_vpc_route
#-----------------------------------------------------------------------------
class TestGetVpcRoute():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_vpc_route()
    #--------------------------------------------------------
    @responses.activate
    def test_get_vpc_route_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/routes/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_vpc_route(vpc_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_vpc_route_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_vpc_route_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/routes/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_vpc_route(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_vpc_route
#-----------------------------------------------------------------------------
class TestUpdateVpcRoute():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_vpc_route()
    #--------------------------------------------------------
    @responses.activate
    def test_update_vpc_route_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/routes/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'
        name = 'my-route-2'

        # Invoke method
        response = service.update_vpc_route(vpc_id, id, name=name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['name'] == 'my-route-2'

    #--------------------------------------------------------
    # test_update_vpc_route_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_vpc_route_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/routes/testString')
        mock_response = '{"created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'
        name = 'my-route-2'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_vpc_route(**req_copy)


# endregion
##############################################################################
# End of Service: VPCs
##############################################################################

##############################################################################
# Start of Service: VPN
##############################################################################
# region


#-----------------------------------------------------------------------------
# Test Class for list_ike_policies
#-----------------------------------------------------------------------------
class TestListIkePolicies():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_ike_policies()
    #--------------------------------------------------------
    @responses.activate
    def test_list_ike_policies_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?limit=20"}, "ike_policies": [{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1

        # Invoke method
        response = service.list_ike_policies(start=start,
                                             limit=limit,
                                             headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string

    #--------------------------------------------------------
    # test_list_ike_policies_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_ike_policies_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?limit=20"}, "ike_policies": [{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_ike_policies()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_ike_policies_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_ike_policies_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?limit=20"}, "ike_policies": [{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_ike_policies(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_ike_policy
#-----------------------------------------------------------------------------
class TestCreateIkePolicy():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_ike_policy()
    #--------------------------------------------------------
    @responses.activate
    def test_create_ike_policy_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies')
        mock_response = '{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        authentication_algorithm = 'md5'
        dh_group = 2
        encryption_algorithm = 'triple_des'
        ike_version = 1
        key_lifetime = 28800
        name = 'my-ike-policy'
        resource_group = resource_group_identity_model

        # Invoke method
        response = service.create_ike_policy(authentication_algorithm,
                                             dh_group,
                                             encryption_algorithm,
                                             ike_version,
                                             key_lifetime=key_lifetime,
                                             name=name,
                                             resource_group=resource_group,
                                             headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['authentication_algorithm'] == 'md5'
        assert req_body['dh_group'] == 2
        assert req_body['encryption_algorithm'] == 'triple_des'
        assert req_body['ike_version'] == 1
        assert req_body['key_lifetime'] == 28800
        assert req_body['name'] == 'my-ike-policy'
        assert req_body['resource_group'] == resource_group_identity_model

    #--------------------------------------------------------
    # test_create_ike_policy_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_ike_policy_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies')
        mock_response = '{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        authentication_algorithm = 'md5'
        dh_group = 2
        encryption_algorithm = 'triple_des'
        ike_version = 1
        key_lifetime = 28800
        name = 'my-ike-policy'
        resource_group = resource_group_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "authentication_algorithm": authentication_algorithm,
            "dh_group": dh_group,
            "encryption_algorithm": encryption_algorithm,
            "ike_version": ike_version,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_ike_policy(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_ike_policy
#-----------------------------------------------------------------------------
class TestDeleteIkePolicy():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_ike_policy()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_ike_policy_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_ike_policy(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_ike_policy_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_ike_policy_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_ike_policy(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_ike_policy
#-----------------------------------------------------------------------------
class TestGetIkePolicy():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_ike_policy()
    #--------------------------------------------------------
    @responses.activate
    def test_get_ike_policy_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies/testString')
        mock_response = '{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_ike_policy(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_ike_policy_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_ike_policy_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies/testString')
        mock_response = '{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_ike_policy(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_ike_policy
#-----------------------------------------------------------------------------
class TestUpdateIkePolicy():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_ike_policy()
    #--------------------------------------------------------
    @responses.activate
    def test_update_ike_policy_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies/testString')
        mock_response = '{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        authentication_algorithm = 'md5'
        dh_group = 2
        encryption_algorithm = 'triple_des'
        ike_version = 1
        key_lifetime = 28800
        name = 'my-ike-policy'

        # Invoke method
        response = service.update_ike_policy(
            id,
            authentication_algorithm=authentication_algorithm,
            dh_group=dh_group,
            encryption_algorithm=encryption_algorithm,
            ike_version=ike_version,
            key_lifetime=key_lifetime,
            name=name,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['authentication_algorithm'] == 'md5'
        assert req_body['dh_group'] == 2
        assert req_body['encryption_algorithm'] == 'triple_des'
        assert req_body['ike_version'] == 1
        assert req_body['key_lifetime'] == 28800
        assert req_body['name'] == 'my-ike-policy'

    #--------------------------------------------------------
    # test_update_ike_policy_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_ike_policy_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies/testString')
        mock_response = '{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        authentication_algorithm = 'md5'
        dh_group = 2
        encryption_algorithm = 'triple_des'
        ike_version = 1
        key_lifetime = 28800
        name = 'my-ike-policy'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_ike_policy(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_ike_policy_connections
#-----------------------------------------------------------------------------
class TestListIkePolicyConnections():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_ike_policy_connections()
    #--------------------------------------------------------
    @responses.activate
    def test_list_ike_policy_connections_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/ike_policies/testString/connections')
        mock_response = '{"connections": [{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.list_ike_policy_connections(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_ike_policy_connections_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_ike_policy_connections_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/ike_policies/testString/connections')
        mock_response = '{"connections": [{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_ike_policy_connections(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_ipsec_policies
#-----------------------------------------------------------------------------
class TestListIpsecPolicies():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_ipsec_policies()
    #--------------------------------------------------------
    @responses.activate
    def test_list_ipsec_policies_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?limit=20"}, "ipsec_policies": [{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "transform_protocol": "esp"}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1

        # Invoke method
        response = service.list_ipsec_policies(start=start,
                                               limit=limit,
                                               headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string

    #--------------------------------------------------------
    # test_list_ipsec_policies_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_ipsec_policies_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?limit=20"}, "ipsec_policies": [{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "transform_protocol": "esp"}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_ipsec_policies()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_ipsec_policies_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_ipsec_policies_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?limit=20"}, "ipsec_policies": [{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "transform_protocol": "esp"}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_ipsec_policies(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_ipsec_policy
#-----------------------------------------------------------------------------
class TestCreateIpsecPolicy():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_ipsec_policy()
    #--------------------------------------------------------
    @responses.activate
    def test_create_ipsec_policy_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies')
        mock_response = '{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "transform_protocol": "esp"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        authentication_algorithm = 'md5'
        encryption_algorithm = 'triple_des'
        pfs = 'disabled'
        key_lifetime = 3600
        name = 'my-ipsec-policy'
        resource_group = resource_group_identity_model

        # Invoke method
        response = service.create_ipsec_policy(authentication_algorithm,
                                               encryption_algorithm,
                                               pfs,
                                               key_lifetime=key_lifetime,
                                               name=name,
                                               resource_group=resource_group,
                                               headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['authentication_algorithm'] == 'md5'
        assert req_body['encryption_algorithm'] == 'triple_des'
        assert req_body['pfs'] == 'disabled'
        assert req_body['key_lifetime'] == 3600
        assert req_body['name'] == 'my-ipsec-policy'
        assert req_body['resource_group'] == resource_group_identity_model

    #--------------------------------------------------------
    # test_create_ipsec_policy_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_ipsec_policy_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies')
        mock_response = '{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "transform_protocol": "esp"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        authentication_algorithm = 'md5'
        encryption_algorithm = 'triple_des'
        pfs = 'disabled'
        key_lifetime = 3600
        name = 'my-ipsec-policy'
        resource_group = resource_group_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "authentication_algorithm": authentication_algorithm,
            "encryption_algorithm": encryption_algorithm,
            "pfs": pfs,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_ipsec_policy(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_ipsec_policy
#-----------------------------------------------------------------------------
class TestDeleteIpsecPolicy():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_ipsec_policy()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_ipsec_policy_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_ipsec_policy(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_ipsec_policy_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_ipsec_policy_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_ipsec_policy(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_ipsec_policy
#-----------------------------------------------------------------------------
class TestGetIpsecPolicy():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_ipsec_policy()
    #--------------------------------------------------------
    @responses.activate
    def test_get_ipsec_policy_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies/testString')
        mock_response = '{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "transform_protocol": "esp"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_ipsec_policy(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_ipsec_policy_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_ipsec_policy_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies/testString')
        mock_response = '{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "transform_protocol": "esp"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_ipsec_policy(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_ipsec_policy
#-----------------------------------------------------------------------------
class TestUpdateIpsecPolicy():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_ipsec_policy()
    #--------------------------------------------------------
    @responses.activate
    def test_update_ipsec_policy_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies/testString')
        mock_response = '{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "transform_protocol": "esp"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        authentication_algorithm = 'md5'
        encryption_algorithm = 'triple_des'
        key_lifetime = 3600
        name = 'my-ipsec-policy'
        pfs = 'disabled'

        # Invoke method
        response = service.update_ipsec_policy(
            id,
            authentication_algorithm=authentication_algorithm,
            encryption_algorithm=encryption_algorithm,
            key_lifetime=key_lifetime,
            name=name,
            pfs=pfs,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['authentication_algorithm'] == 'md5'
        assert req_body['encryption_algorithm'] == 'triple_des'
        assert req_body['key_lifetime'] == 3600
        assert req_body['name'] == 'my-ipsec-policy'
        assert req_body['pfs'] == 'disabled'

    #--------------------------------------------------------
    # test_update_ipsec_policy_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_ipsec_policy_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies/testString')
        mock_response = '{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "transform_protocol": "esp"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        authentication_algorithm = 'md5'
        encryption_algorithm = 'triple_des'
        key_lifetime = 3600
        name = 'my-ipsec-policy'
        pfs = 'disabled'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_ipsec_policy(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_ipsec_policy_connections
#-----------------------------------------------------------------------------
class TestListIpsecPolicyConnections():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_ipsec_policy_connections()
    #--------------------------------------------------------
    @responses.activate
    def test_list_ipsec_policy_connections_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/ipsec_policies/testString/connections')
        mock_response = '{"connections": [{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.list_ipsec_policy_connections(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_ipsec_policy_connections_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_ipsec_policy_connections_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/ipsec_policies/testString/connections')
        mock_response = '{"connections": [{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_ipsec_policy_connections(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_vpn_gateways
#-----------------------------------------------------------------------------
class TestListVpnGateways():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_vpn_gateways()
    #--------------------------------------------------------
    @responses.activate
    def test_list_vpn_gateways_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132, "vpn_gateways": [{"connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "public_ip": {"address": "192.168.3.4"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'

        # Invoke method
        response = service.list_vpn_gateways(
            start=start,
            limit=limit,
            resource_group_id=resource_group_id,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string

    #--------------------------------------------------------
    # test_list_vpn_gateways_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_vpn_gateways_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132, "vpn_gateways": [{"connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "public_ip": {"address": "192.168.3.4"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_vpn_gateways()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_vpn_gateways_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_vpn_gateways_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132, "vpn_gateways": [{"connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "public_ip": {"address": "192.168.3.4"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_vpn_gateways(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_vpn_gateway
#-----------------------------------------------------------------------------
class TestCreateVpnGateway():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_vpn_gateway()
    #--------------------------------------------------------
    @responses.activate
    def test_create_vpn_gateway_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways')
        mock_response = '{"connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "public_ip": {"address": "192.168.3.4"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        subnet = subnet_identity_model
        name = 'my-vpn-gateway'
        resource_group = resource_group_identity_model

        # Invoke method
        response = service.create_vpn_gateway(subnet,
                                              name=name,
                                              resource_group=resource_group,
                                              headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['subnet'] == subnet_identity_model
        assert req_body['name'] == 'my-vpn-gateway'
        assert req_body['resource_group'] == resource_group_identity_model

    #--------------------------------------------------------
    # test_create_vpn_gateway_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_vpn_gateway_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways')
        mock_response = '{"connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "public_ip": {"address": "192.168.3.4"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        subnet = subnet_identity_model
        name = 'my-vpn-gateway'
        resource_group = resource_group_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "subnet": subnet,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_vpn_gateway(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_vpn_gateway
#-----------------------------------------------------------------------------
class TestDeleteVpnGateway():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_vpn_gateway()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_vpn_gateway_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways/testString')
        responses.add(responses.DELETE, url, status=202)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_vpn_gateway(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 202

    #--------------------------------------------------------
    # test_delete_vpn_gateway_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_vpn_gateway_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways/testString')
        responses.add(responses.DELETE, url, status=202)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_vpn_gateway(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_vpn_gateway
#-----------------------------------------------------------------------------
class TestGetVpnGateway():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_vpn_gateway()
    #--------------------------------------------------------
    @responses.activate
    def test_get_vpn_gateway_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways/testString')
        mock_response = '{"connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "public_ip": {"address": "192.168.3.4"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_vpn_gateway(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_vpn_gateway_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_vpn_gateway_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways/testString')
        mock_response = '{"connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "public_ip": {"address": "192.168.3.4"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_vpn_gateway(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_vpn_gateway
#-----------------------------------------------------------------------------
class TestUpdateVpnGateway():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_vpn_gateway()
    #--------------------------------------------------------
    @responses.activate
    def test_update_vpn_gateway_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways/testString')
        mock_response = '{"connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "public_ip": {"address": "192.168.3.4"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-vpn-gateway'

        # Invoke method
        response = service.update_vpn_gateway(id, name=name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['name'] == 'my-vpn-gateway'

    #--------------------------------------------------------
    # test_update_vpn_gateway_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_vpn_gateway_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways/testString')
        mock_response = '{"connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "public_ip": {"address": "192.168.3.4"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-vpn-gateway'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_vpn_gateway(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_vpn_gateway_connections
#-----------------------------------------------------------------------------
class TestListVpnGatewayConnections():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_vpn_gateway_connections()
    #--------------------------------------------------------
    @responses.activate
    def test_list_vpn_gateway_connections_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpn_gateways/testString/connections')
        mock_response = '{"connections": [{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        status = 'testString'

        # Invoke method
        response = service.list_vpn_gateway_connections(vpn_gateway_id,
                                                        status=status,
                                                        headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'status={}'.format(status) in query_string

    #--------------------------------------------------------
    # test_list_vpn_gateway_connections_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_vpn_gateway_connections_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpn_gateways/testString/connections')
        mock_response = '{"connections": [{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpn_gateway_id = 'testString'

        # Invoke method
        response = service.list_vpn_gateway_connections(vpn_gateway_id,
                                                        headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_vpn_gateway_connections_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_vpn_gateway_connections_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpn_gateways/testString/connections')
        mock_response = '{"connections": [{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpn_gateway_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_vpn_gateway_connections(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_vpn_gateway_connection
#-----------------------------------------------------------------------------
class TestCreateVpnGatewayConnection():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_vpn_gateway_connection()
    #--------------------------------------------------------
    @responses.activate
    def test_create_vpn_gateway_connection_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpn_gateways/testString/connections')
        mock_response = '{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VPNGatewayConnectionDPDPrototype model
        vpn_gateway_connection_dpd_prototype_model = {}
        vpn_gateway_connection_dpd_prototype_model['action'] = 'restart'
        vpn_gateway_connection_dpd_prototype_model['interval'] = 30
        vpn_gateway_connection_dpd_prototype_model['timeout'] = 120

        # Construct a dict representation of a IKEPolicyIdentityById model
        ike_policy_identity_model = {}
        ike_policy_identity_model['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a dict representation of a IPsecPolicyIdentityById model
        i_psec_policy_identity_model = {}
        i_psec_policy_identity_model[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Set up parameter values
        vpn_gateway_id = 'testString'
        peer_address = '169.21.50.5'
        psk = 'lkj14b1oi0alcniejkso'
        admin_state_up = True
        dead_peer_detection = vpn_gateway_connection_dpd_prototype_model
        ike_policy = ike_policy_identity_model
        ipsec_policy = i_psec_policy_identity_model
        local_cidrs = ['192.168.1.0/24']
        name = 'my-vpn-connection'
        peer_cidrs = ['10.45.1.0/24']

        # Invoke method
        response = service.create_vpn_gateway_connection(
            vpn_gateway_id,
            peer_address,
            psk,
            admin_state_up=admin_state_up,
            dead_peer_detection=dead_peer_detection,
            ike_policy=ike_policy,
            ipsec_policy=ipsec_policy,
            local_cidrs=local_cidrs,
            name=name,
            peer_cidrs=peer_cidrs,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['peer_address'] == '169.21.50.5'
        assert req_body['psk'] == 'lkj14b1oi0alcniejkso'
        assert req_body['admin_state_up'] == True
        assert req_body[
            'dead_peer_detection'] == vpn_gateway_connection_dpd_prototype_model
        assert req_body['ike_policy'] == ike_policy_identity_model
        assert req_body['ipsec_policy'] == i_psec_policy_identity_model
        assert req_body['local_cidrs'] == ['192.168.1.0/24']
        assert req_body['name'] == 'my-vpn-connection'
        assert req_body['peer_cidrs'] == ['10.45.1.0/24']

    #--------------------------------------------------------
    # test_create_vpn_gateway_connection_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_vpn_gateway_connection_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpn_gateways/testString/connections')
        mock_response = '{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VPNGatewayConnectionDPDPrototype model
        vpn_gateway_connection_dpd_prototype_model = {}
        vpn_gateway_connection_dpd_prototype_model['action'] = 'restart'
        vpn_gateway_connection_dpd_prototype_model['interval'] = 30
        vpn_gateway_connection_dpd_prototype_model['timeout'] = 120

        # Construct a dict representation of a IKEPolicyIdentityById model
        ike_policy_identity_model = {}
        ike_policy_identity_model['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a dict representation of a IPsecPolicyIdentityById model
        i_psec_policy_identity_model = {}
        i_psec_policy_identity_model[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Set up parameter values
        vpn_gateway_id = 'testString'
        peer_address = '169.21.50.5'
        psk = 'lkj14b1oi0alcniejkso'
        admin_state_up = True
        dead_peer_detection = vpn_gateway_connection_dpd_prototype_model
        ike_policy = ike_policy_identity_model
        ipsec_policy = i_psec_policy_identity_model
        local_cidrs = ['192.168.1.0/24']
        name = 'my-vpn-connection'
        peer_cidrs = ['10.45.1.0/24']

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "peer_address": peer_address,
            "psk": psk,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_vpn_gateway_connection(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_vpn_gateway_connection
#-----------------------------------------------------------------------------
class TestDeleteVpnGatewayConnection():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_vpn_gateway_connection()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_vpn_gateway_connection_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpn_gateways/testString/connections/testString')
        responses.add(responses.DELETE, url, status=202)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_vpn_gateway_connection(vpn_gateway_id,
                                                         id,
                                                         headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 202

    #--------------------------------------------------------
    # test_delete_vpn_gateway_connection_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_vpn_gateway_connection_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpn_gateways/testString/connections/testString')
        responses.add(responses.DELETE, url, status=202)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_vpn_gateway_connection(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_vpn_gateway_connection
#-----------------------------------------------------------------------------
class TestGetVpnGatewayConnection():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_vpn_gateway_connection()
    #--------------------------------------------------------
    @responses.activate
    def test_get_vpn_gateway_connection_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpn_gateways/testString/connections/testString')
        mock_response = '{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_vpn_gateway_connection(vpn_gateway_id,
                                                      id,
                                                      headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_vpn_gateway_connection_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_vpn_gateway_connection_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpn_gateways/testString/connections/testString')
        mock_response = '{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_vpn_gateway_connection(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_vpn_gateway_connection
#-----------------------------------------------------------------------------
class TestUpdateVpnGatewayConnection():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_vpn_gateway_connection()
    #--------------------------------------------------------
    @responses.activate
    def test_update_vpn_gateway_connection_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpn_gateways/testString/connections/testString')
        mock_response = '{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VPNGatewayConnectionDPDPrototype model
        vpn_gateway_connection_dpd_prototype_model = {}
        vpn_gateway_connection_dpd_prototype_model['action'] = 'restart'
        vpn_gateway_connection_dpd_prototype_model['interval'] = 30
        vpn_gateway_connection_dpd_prototype_model['timeout'] = 120

        # Construct a dict representation of a IKEPolicyIdentityById model
        ike_policy_identity_model = {}
        ike_policy_identity_model['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a dict representation of a IPsecPolicyIdentityById model
        i_psec_policy_identity_model = {}
        i_psec_policy_identity_model[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        admin_state_up = True
        dead_peer_detection = vpn_gateway_connection_dpd_prototype_model
        ike_policy = ike_policy_identity_model
        ipsec_policy = i_psec_policy_identity_model
        name = 'my-vpn-connection'
        peer_address = '169.21.50.5'
        psk = 'lkj14b1oi0alcniejkso'

        # Invoke method
        response = service.update_vpn_gateway_connection(
            vpn_gateway_id,
            id,
            admin_state_up=admin_state_up,
            dead_peer_detection=dead_peer_detection,
            ike_policy=ike_policy,
            ipsec_policy=ipsec_policy,
            name=name,
            peer_address=peer_address,
            psk=psk,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['admin_state_up'] == True
        assert req_body[
            'dead_peer_detection'] == vpn_gateway_connection_dpd_prototype_model
        assert req_body['ike_policy'] == ike_policy_identity_model
        assert req_body['ipsec_policy'] == i_psec_policy_identity_model
        assert req_body['name'] == 'my-vpn-connection'
        assert req_body['peer_address'] == '169.21.50.5'
        assert req_body['psk'] == 'lkj14b1oi0alcniejkso'

    #--------------------------------------------------------
    # test_update_vpn_gateway_connection_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_vpn_gateway_connection_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpn_gateways/testString/connections/testString')
        mock_response = '{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VPNGatewayConnectionDPDPrototype model
        vpn_gateway_connection_dpd_prototype_model = {}
        vpn_gateway_connection_dpd_prototype_model['action'] = 'restart'
        vpn_gateway_connection_dpd_prototype_model['interval'] = 30
        vpn_gateway_connection_dpd_prototype_model['timeout'] = 120

        # Construct a dict representation of a IKEPolicyIdentityById model
        ike_policy_identity_model = {}
        ike_policy_identity_model['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a dict representation of a IPsecPolicyIdentityById model
        i_psec_policy_identity_model = {}
        i_psec_policy_identity_model[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        admin_state_up = True
        dead_peer_detection = vpn_gateway_connection_dpd_prototype_model
        ike_policy = ike_policy_identity_model
        ipsec_policy = i_psec_policy_identity_model
        name = 'my-vpn-connection'
        peer_address = '169.21.50.5'
        psk = 'lkj14b1oi0alcniejkso'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_vpn_gateway_connection(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_vpn_gateway_connection_local_cidrs
#-----------------------------------------------------------------------------
class TestListVpnGatewayConnectionLocalCidrs():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_vpn_gateway_connection_local_cidrs()
    #--------------------------------------------------------
    @responses.activate
    def test_list_vpn_gateway_connection_local_cidrs_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/local_cidrs')
        mock_response = '{"local_cidrs": ["192.168.1.0/24"]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.list_vpn_gateway_connection_local_cidrs(
            vpn_gateway_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_vpn_gateway_connection_local_cidrs_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_vpn_gateway_connection_local_cidrs_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/local_cidrs')
        mock_response = '{"local_cidrs": ["192.168.1.0/24"]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_vpn_gateway_connection_local_cidrs(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for remove_vpn_gateway_connection_local_cidr
#-----------------------------------------------------------------------------
class TestRemoveVpnGatewayConnectionLocalCidr():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # remove_vpn_gateway_connection_local_cidr()
    #--------------------------------------------------------
    @responses.activate
    def test_remove_vpn_gateway_connection_local_cidr_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Invoke method
        response = service.remove_vpn_gateway_connection_local_cidr(
            vpn_gateway_id, id, cidr_prefix, prefix_length, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_remove_vpn_gateway_connection_local_cidr_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_remove_vpn_gateway_connection_local_cidr_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
            "cidr_prefix": cidr_prefix,
            "prefix_length": prefix_length,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.remove_vpn_gateway_connection_local_cidr(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for check_vpn_gateway_connection_local_cidr
#-----------------------------------------------------------------------------
class TestCheckVpnGatewayConnectionLocalCidr():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # check_vpn_gateway_connection_local_cidr()
    #--------------------------------------------------------
    @responses.activate
    def test_check_vpn_gateway_connection_local_cidr_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString'
        )
        responses.add(responses.GET, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Invoke method
        response = service.check_vpn_gateway_connection_local_cidr(
            vpn_gateway_id, id, cidr_prefix, prefix_length, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_check_vpn_gateway_connection_local_cidr_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_check_vpn_gateway_connection_local_cidr_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString'
        )
        responses.add(responses.GET, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
            "cidr_prefix": cidr_prefix,
            "prefix_length": prefix_length,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.check_vpn_gateway_connection_local_cidr(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for add_vpn_gateway_connection_local_cidr
#-----------------------------------------------------------------------------
class TestAddVpnGatewayConnectionLocalCidr():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # add_vpn_gateway_connection_local_cidr()
    #--------------------------------------------------------
    @responses.activate
    def test_add_vpn_gateway_connection_local_cidr_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString'
        )
        responses.add(responses.PUT, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Invoke method
        response = service.add_vpn_gateway_connection_local_cidr(vpn_gateway_id,
                                                                 id,
                                                                 cidr_prefix,
                                                                 prefix_length,
                                                                 headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_add_vpn_gateway_connection_local_cidr_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_add_vpn_gateway_connection_local_cidr_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString'
        )
        responses.add(responses.PUT, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
            "cidr_prefix": cidr_prefix,
            "prefix_length": prefix_length,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.add_vpn_gateway_connection_local_cidr(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_vpn_gateway_connection_peer_cidrs
#-----------------------------------------------------------------------------
class TestListVpnGatewayConnectionPeerCidrs():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_vpn_gateway_connection_peer_cidrs()
    #--------------------------------------------------------
    @responses.activate
    def test_list_vpn_gateway_connection_peer_cidrs_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/peer_cidrs')
        mock_response = '{"peer_cidrs": ["10.45.1.0/24"]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.list_vpn_gateway_connection_peer_cidrs(
            vpn_gateway_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_vpn_gateway_connection_peer_cidrs_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_vpn_gateway_connection_peer_cidrs_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/peer_cidrs')
        mock_response = '{"peer_cidrs": ["10.45.1.0/24"]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_vpn_gateway_connection_peer_cidrs(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for remove_vpn_gateway_connection_peer_cidr
#-----------------------------------------------------------------------------
class TestRemoveVpnGatewayConnectionPeerCidr():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # remove_vpn_gateway_connection_peer_cidr()
    #--------------------------------------------------------
    @responses.activate
    def test_remove_vpn_gateway_connection_peer_cidr_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Invoke method
        response = service.remove_vpn_gateway_connection_peer_cidr(
            vpn_gateway_id, id, cidr_prefix, prefix_length, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_remove_vpn_gateway_connection_peer_cidr_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_remove_vpn_gateway_connection_peer_cidr_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
            "cidr_prefix": cidr_prefix,
            "prefix_length": prefix_length,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.remove_vpn_gateway_connection_peer_cidr(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for check_vpn_gateway_connection_peer_cidr
#-----------------------------------------------------------------------------
class TestCheckVpnGatewayConnectionPeerCidr():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # check_vpn_gateway_connection_peer_cidr()
    #--------------------------------------------------------
    @responses.activate
    def test_check_vpn_gateway_connection_peer_cidr_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString'
        )
        responses.add(responses.GET, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Invoke method
        response = service.check_vpn_gateway_connection_peer_cidr(
            vpn_gateway_id, id, cidr_prefix, prefix_length, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_check_vpn_gateway_connection_peer_cidr_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_check_vpn_gateway_connection_peer_cidr_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString'
        )
        responses.add(responses.GET, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
            "cidr_prefix": cidr_prefix,
            "prefix_length": prefix_length,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.check_vpn_gateway_connection_peer_cidr(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for add_vpn_gateway_connection_peer_cidr
#-----------------------------------------------------------------------------
class TestAddVpnGatewayConnectionPeerCidr():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # add_vpn_gateway_connection_peer_cidr()
    #--------------------------------------------------------
    @responses.activate
    def test_add_vpn_gateway_connection_peer_cidr_all_params(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString'
        )
        responses.add(responses.PUT, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Invoke method
        response = service.add_vpn_gateway_connection_peer_cidr(vpn_gateway_id,
                                                                id,
                                                                cidr_prefix,
                                                                prefix_length,
                                                                headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_add_vpn_gateway_connection_peer_cidr_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_add_vpn_gateway_connection_peer_cidr_value_error(self):
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString'
        )
        responses.add(responses.PUT, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
            "cidr_prefix": cidr_prefix,
            "prefix_length": prefix_length,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.add_vpn_gateway_connection_peer_cidr(**req_copy)


# endregion
##############################################################################
# End of Service: VPN
##############################################################################

##############################################################################
# Start of Service: Volumes
##############################################################################
# region


#-----------------------------------------------------------------------------
# Test Class for list_volume_profiles
#-----------------------------------------------------------------------------
class TestListVolumeProfiles():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_volume_profiles()
    #--------------------------------------------------------
    @responses.activate
    def test_list_volume_profiles_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/volume/profiles')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "profiles": [{"family": "tiered", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}], "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1

        # Invoke method
        response = service.list_volume_profiles(start=start,
                                                limit=limit,
                                                headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string

    #--------------------------------------------------------
    # test_list_volume_profiles_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_volume_profiles_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/volume/profiles')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "profiles": [{"family": "tiered", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}], "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_volume_profiles()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_volume_profiles_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_volume_profiles_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/volume/profiles')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "profiles": [{"family": "tiered", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}], "total_count": 132}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_volume_profiles(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_volume_profile
#-----------------------------------------------------------------------------
class TestGetVolumeProfile():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_volume_profile()
    #--------------------------------------------------------
    @responses.activate
    def test_get_volume_profile_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/volume/profiles/testString')
        mock_response = '{"family": "tiered", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        name = 'testString'

        # Invoke method
        response = service.get_volume_profile(name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_volume_profile_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_volume_profile_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/volume/profiles/testString')
        mock_response = '{"family": "tiered", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "name": name,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_volume_profile(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for list_volumes
#-----------------------------------------------------------------------------
class TestListVolumes():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # list_volumes()
    #--------------------------------------------------------
    @responses.activate
    def test_list_volumes_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "volumes": [{"capacity": 100, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "volume_attachments": [{"delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        name = 'testString'
        zone_name = 'testString'

        # Invoke method
        response = service.list_volumes(start=start,
                                        limit=limit,
                                        name=name,
                                        zone_name=zone_name,
                                        headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = requests.utils.unquote(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'name={}'.format(name) in query_string
        assert 'zone.name={}'.format(zone_name) in query_string

    #--------------------------------------------------------
    # test_list_volumes_required_params()
    #--------------------------------------------------------
    @responses.activate
    def test_list_volumes_required_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "volumes": [{"capacity": 100, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "volume_attachments": [{"delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_volumes()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_list_volumes_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_list_volumes_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "volumes": [{"capacity": 100, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "volume_attachments": [{"delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_volumes(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for create_volume
#-----------------------------------------------------------------------------
class TestCreateVolume():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # create_volume()
    #--------------------------------------------------------
    @responses.activate
    def test_create_volume_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes')
        mock_response = '{"capacity": 100, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "volume_attachments": [{"delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a VolumeProfileIdentityByName model
        volume_profile_identity_model = {}
        volume_profile_identity_model['name'] = 'general-purpose'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a VolumePrototypeVolumeByCapacity model
        volume_prototype_model = {}
        volume_prototype_model['iops'] = 10000
        volume_prototype_model['name'] = 'my-volume'
        volume_prototype_model['profile'] = volume_profile_identity_model
        volume_prototype_model['resource_group'] = resource_group_identity_model
        volume_prototype_model['zone'] = zone_identity_model
        volume_prototype_model['capacity'] = 100

        # Set up parameter values
        volume_prototype = volume_prototype_model

        # Invoke method
        response = service.create_volume(volume_prototype, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == volume_prototype

    #--------------------------------------------------------
    # test_create_volume_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_create_volume_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes')
        mock_response = '{"capacity": 100, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "volume_attachments": [{"delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a VolumeProfileIdentityByName model
        volume_profile_identity_model = {}
        volume_profile_identity_model['name'] = 'general-purpose'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a VolumePrototypeVolumeByCapacity model
        volume_prototype_model = {}
        volume_prototype_model['iops'] = 10000
        volume_prototype_model['name'] = 'my-volume'
        volume_prototype_model['profile'] = volume_profile_identity_model
        volume_prototype_model['resource_group'] = resource_group_identity_model
        volume_prototype_model['zone'] = zone_identity_model
        volume_prototype_model['capacity'] = 100

        # Set up parameter values
        volume_prototype = volume_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "volume_prototype": volume_prototype,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_volume(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for delete_volume
#-----------------------------------------------------------------------------
class TestDeleteVolume():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # delete_volume()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_volume_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_volume(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    #--------------------------------------------------------
    # test_delete_volume_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_delete_volume_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_volume(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for get_volume
#-----------------------------------------------------------------------------
class TestGetVolume():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # get_volume()
    #--------------------------------------------------------
    @responses.activate
    def test_get_volume_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes/testString')
        mock_response = '{"capacity": 100, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "volume_attachments": [{"delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_volume(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    #--------------------------------------------------------
    # test_get_volume_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_get_volume_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes/testString')
        mock_response = '{"capacity": 100, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "volume_attachments": [{"delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_volume(**req_copy)


#-----------------------------------------------------------------------------
# Test Class for update_volume
#-----------------------------------------------------------------------------
class TestUpdateVolume():

    # Preprocess the request URL to ensure the mock response will be found.
    def preprocess_url(self, request_url: str):
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    #--------------------------------------------------------
    # update_volume()
    #--------------------------------------------------------
    @responses.activate
    def test_update_volume_all_params(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes/testString')
        mock_response = '{"capacity": 100, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "volume_attachments": [{"delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-volume'

        # Invoke method
        response = service.update_volume(id, name=name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['name'] == 'my-volume'

    #--------------------------------------------------------
    # test_update_volume_value_error()
    #--------------------------------------------------------
    @responses.activate
    def test_update_volume_value_error(self):
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes/testString')
        mock_response = '{"capacity": 100, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "volume_attachments": [{"delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'
        name = 'my-volume'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_volume(**req_copy)


# endregion
##############################################################################
# End of Service: Volumes
##############################################################################


##############################################################################
# Start of Model Tests
##############################################################################
# region
#-----------------------------------------------------------------------------
# Test Class for AddressPrefix
#-----------------------------------------------------------------------------
class TestAddressPrefix():

    #--------------------------------------------------------
    # Test serialization/deserialization for AddressPrefix
    #--------------------------------------------------------
    def test_address_prefix_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        zone_reference_model = {}  # ZoneReference
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model['name'] = 'us-south-1'

        # Construct a json representation of a AddressPrefix model
        address_prefix_model_json = {}
        address_prefix_model_json['cidr'] = '192.168.3.0/24'
        address_prefix_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        address_prefix_model_json['has_subnets'] = True
        address_prefix_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531'
        address_prefix_model_json['id'] = '1a15dca5-7e33-45e1-b7c5-bc690e569531'
        address_prefix_model_json['is_default'] = False
        address_prefix_model_json['name'] = 'my-address-prefix-2'
        address_prefix_model_json['zone'] = zone_reference_model

        # Construct a model instance of AddressPrefix by calling from_dict on the json representation
        address_prefix_model = AddressPrefix.from_dict(
            address_prefix_model_json)
        assert address_prefix_model != False

        # Construct a model instance of AddressPrefix by calling from_dict on the json representation
        address_prefix_model_dict = AddressPrefix.from_dict(
            address_prefix_model_json).__dict__
        address_prefix_model2 = AddressPrefix(**address_prefix_model_dict)

        # Verify the model instances are equivalent
        assert address_prefix_model == address_prefix_model2

        # Convert model instance back to dict and verify no loss of data
        address_prefix_model_json2 = address_prefix_model.to_dict()
        assert address_prefix_model_json2 == address_prefix_model_json


#-----------------------------------------------------------------------------
# Test Class for AddressPrefixCollection
#-----------------------------------------------------------------------------
class TestAddressPrefixCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for AddressPrefixCollection
    #--------------------------------------------------------
    def test_address_prefix_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        zone_reference_model = {}  # ZoneReference
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model['name'] = 'us-south-1'

        address_prefix_model = {}  # AddressPrefix
        address_prefix_model['cidr'] = '192.168.3.0/24'
        address_prefix_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        address_prefix_model['has_subnets'] = True
        address_prefix_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531'
        address_prefix_model['id'] = '1a15dca5-7e33-45e1-b7c5-bc690e569531'
        address_prefix_model['is_default'] = False
        address_prefix_model['name'] = 'my-address-prefix-2'
        address_prefix_model['zone'] = zone_reference_model

        # Construct a json representation of a AddressPrefixCollection model
        address_prefix_collection_model_json = {}
        address_prefix_collection_model_json['address_prefixes'] = [
            address_prefix_model
        ]

        # Construct a model instance of AddressPrefixCollection by calling from_dict on the json representation
        address_prefix_collection_model = AddressPrefixCollection.from_dict(
            address_prefix_collection_model_json)
        assert address_prefix_collection_model != False

        # Construct a model instance of AddressPrefixCollection by calling from_dict on the json representation
        address_prefix_collection_model_dict = AddressPrefixCollection.from_dict(
            address_prefix_collection_model_json).__dict__
        address_prefix_collection_model2 = AddressPrefixCollection(
            **address_prefix_collection_model_dict)

        # Verify the model instances are equivalent
        assert address_prefix_collection_model == address_prefix_collection_model2

        # Convert model instance back to dict and verify no loss of data
        address_prefix_collection_model_json2 = address_prefix_collection_model.to_dict(
        )
        assert address_prefix_collection_model_json2 == address_prefix_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for CertificateInstanceReference
#-----------------------------------------------------------------------------
class TestCertificateInstanceReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for CertificateInstanceReference
    #--------------------------------------------------------
    def test_certificate_instance_reference_serialization(self):

        # Construct a json representation of a CertificateInstanceReference model
        certificate_instance_reference_model_json = {}
        certificate_instance_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758'

        # Construct a model instance of CertificateInstanceReference by calling from_dict on the json representation
        certificate_instance_reference_model = CertificateInstanceReference.from_dict(
            certificate_instance_reference_model_json)
        assert certificate_instance_reference_model != False

        # Construct a model instance of CertificateInstanceReference by calling from_dict on the json representation
        certificate_instance_reference_model_dict = CertificateInstanceReference.from_dict(
            certificate_instance_reference_model_json).__dict__
        certificate_instance_reference_model2 = CertificateInstanceReference(
            **certificate_instance_reference_model_dict)

        # Verify the model instances are equivalent
        assert certificate_instance_reference_model == certificate_instance_reference_model2

        # Convert model instance back to dict and verify no loss of data
        certificate_instance_reference_model_json2 = certificate_instance_reference_model.to_dict(
        )
        assert certificate_instance_reference_model_json2 == certificate_instance_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for CloudObjectStorageBucketReference
#-----------------------------------------------------------------------------
class TestCloudObjectStorageBucketReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for CloudObjectStorageBucketReference
    #--------------------------------------------------------
    def test_cloud_object_storage_bucket_reference_serialization(self):

        # Construct a json representation of a CloudObjectStorageBucketReference model
        cloud_object_storage_bucket_reference_model_json = {}
        cloud_object_storage_bucket_reference_model_json[
            'name'] = 'bucket-27200-lwx4cfvcue'

        # Construct a model instance of CloudObjectStorageBucketReference by calling from_dict on the json representation
        cloud_object_storage_bucket_reference_model = CloudObjectStorageBucketReference.from_dict(
            cloud_object_storage_bucket_reference_model_json)
        assert cloud_object_storage_bucket_reference_model != False

        # Construct a model instance of CloudObjectStorageBucketReference by calling from_dict on the json representation
        cloud_object_storage_bucket_reference_model_dict = CloudObjectStorageBucketReference.from_dict(
            cloud_object_storage_bucket_reference_model_json).__dict__
        cloud_object_storage_bucket_reference_model2 = CloudObjectStorageBucketReference(
            **cloud_object_storage_bucket_reference_model_dict)

        # Verify the model instances are equivalent
        assert cloud_object_storage_bucket_reference_model == cloud_object_storage_bucket_reference_model2

        # Convert model instance back to dict and verify no loss of data
        cloud_object_storage_bucket_reference_model_json2 = cloud_object_storage_bucket_reference_model.to_dict(
        )
        assert cloud_object_storage_bucket_reference_model_json2 == cloud_object_storage_bucket_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for DefaultNetworkACL
#-----------------------------------------------------------------------------
class TestDefaultNetworkACL():

    #--------------------------------------------------------
    # Test serialization/deserialization for DefaultNetworkACL
    #--------------------------------------------------------
    def test_default_network_acl_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        network_acl_rule_item_model = {}  # NetworkACLRuleItem
        network_acl_rule_item_model['action'] = 'allow'
        network_acl_rule_item_model['before'] = network_acl_rule_reference_model
        network_acl_rule_item_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_item_model['destination'] = '192.168.3.0/24'
        network_acl_rule_item_model['direction'] = 'inbound'
        network_acl_rule_item_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_model['ip_version'] = 'ipv4'
        network_acl_rule_item_model['name'] = 'my-rule-2'
        network_acl_rule_item_model['protocol'] = 'udp'
        network_acl_rule_item_model['source'] = '192.168.3.0/24'
        network_acl_rule_item_model['destination_port_max'] = 22
        network_acl_rule_item_model['destination_port_min'] = 22
        network_acl_rule_item_model['source_port_max'] = 65535
        network_acl_rule_item_model['source_port_min'] = 49152

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        # Construct a json representation of a DefaultNetworkACL model
        default_network_acl_model_json = {}
        default_network_acl_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        default_network_acl_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        default_network_acl_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        default_network_acl_model_json[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        default_network_acl_model_json[
            'name'] = 'mnemonic-ersatz-eatery-malaise'
        default_network_acl_model_json[
            'resource_group'] = resource_group_reference_model
        default_network_acl_model_json['rules'] = [network_acl_rule_item_model]
        default_network_acl_model_json['subnets'] = [subnet_reference_model]
        default_network_acl_model_json['vpc'] = vpc_reference_model

        # Construct a model instance of DefaultNetworkACL by calling from_dict on the json representation
        default_network_acl_model = DefaultNetworkACL.from_dict(
            default_network_acl_model_json)
        assert default_network_acl_model != False

        # Construct a model instance of DefaultNetworkACL by calling from_dict on the json representation
        default_network_acl_model_dict = DefaultNetworkACL.from_dict(
            default_network_acl_model_json).__dict__
        default_network_acl_model2 = DefaultNetworkACL(
            **default_network_acl_model_dict)

        # Verify the model instances are equivalent
        assert default_network_acl_model == default_network_acl_model2

        # Convert model instance back to dict and verify no loss of data
        default_network_acl_model_json2 = default_network_acl_model.to_dict()
        assert default_network_acl_model_json2 == default_network_acl_model_json


#-----------------------------------------------------------------------------
# Test Class for DefaultSecurityGroup
#-----------------------------------------------------------------------------
class TestDefaultSecurityGroup():

    #--------------------------------------------------------
    # Test serialization/deserialization for DefaultSecurityGroup
    #--------------------------------------------------------
    def test_default_security_group_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        security_group_rule_model = {}  # SecurityGroupRule
        security_group_rule_model['direction'] = 'inbound'
        security_group_rule_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_model['id'] = '6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_model['ip_version'] = 'ipv4'
        security_group_rule_model['protocol'] = 'udp'
        security_group_rule_model['remote'] = {'foo': 'bar'}
        security_group_rule_model['port_max'] = 22
        security_group_rule_model['port_min'] = 22

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        # Construct a json representation of a DefaultSecurityGroup model
        default_security_group_model_json = {}
        default_security_group_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        default_security_group_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        default_security_group_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        default_security_group_model_json[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        default_security_group_model_json[
            'name'] = 'observant-chip-emphatic-engraver'
        default_security_group_model_json[
            'resource_group'] = resource_group_reference_model
        default_security_group_model_json['rules'] = [security_group_rule_model]
        default_security_group_model_json['vpc'] = vpc_reference_model

        # Construct a model instance of DefaultSecurityGroup by calling from_dict on the json representation
        default_security_group_model = DefaultSecurityGroup.from_dict(
            default_security_group_model_json)
        assert default_security_group_model != False

        # Construct a model instance of DefaultSecurityGroup by calling from_dict on the json representation
        default_security_group_model_dict = DefaultSecurityGroup.from_dict(
            default_security_group_model_json).__dict__
        default_security_group_model2 = DefaultSecurityGroup(
            **default_security_group_model_dict)

        # Verify the model instances are equivalent
        assert default_security_group_model == default_security_group_model2

        # Convert model instance back to dict and verify no loss of data
        default_security_group_model_json2 = default_security_group_model.to_dict(
        )
        assert default_security_group_model_json2 == default_security_group_model_json


#-----------------------------------------------------------------------------
# Test Class for FloatingIP
#-----------------------------------------------------------------------------
class TestFloatingIP():

    #--------------------------------------------------------
    # Test serialization/deserialization for FloatingIP
    #--------------------------------------------------------
    def test_floating_ip_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        floating_ip_target_model = {}  # FloatingIPTarget
        floating_ip_target_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        floating_ip_target_model['id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        floating_ip_target_model['name'] = 'my-network-interface'
        floating_ip_target_model['primary_ipv4_address'] = '192.168.3.4'
        floating_ip_target_model['resource_type'] = 'network_interface'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model['name'] = 'us-south-1'

        # Construct a json representation of a FloatingIP model
        floating_ip_model_json = {}
        floating_ip_model_json['address'] = '203.0.113.1'
        floating_ip_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        floating_ip_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_model_json['id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_model_json['name'] = 'my-floating-ip'
        floating_ip_model_json[
            'resource_group'] = resource_group_reference_model
        floating_ip_model_json['status'] = 'available'
        floating_ip_model_json['target'] = floating_ip_target_model
        floating_ip_model_json['zone'] = zone_reference_model

        # Construct a model instance of FloatingIP by calling from_dict on the json representation
        floating_ip_model = FloatingIP.from_dict(floating_ip_model_json)
        assert floating_ip_model != False

        # Construct a model instance of FloatingIP by calling from_dict on the json representation
        floating_ip_model_dict = FloatingIP.from_dict(
            floating_ip_model_json).__dict__
        floating_ip_model2 = FloatingIP(**floating_ip_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_model == floating_ip_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_model_json2 = floating_ip_model.to_dict()
        assert floating_ip_model_json2 == floating_ip_model_json


#-----------------------------------------------------------------------------
# Test Class for FloatingIPCollection
#-----------------------------------------------------------------------------
class TestFloatingIPCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for FloatingIPCollection
    #--------------------------------------------------------
    def test_floating_ip_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        floating_ip_target_model = {}  # FloatingIPTarget
        floating_ip_target_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        floating_ip_target_model['id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        floating_ip_target_model['name'] = 'my-network-interface'
        floating_ip_target_model['primary_ipv4_address'] = '192.168.3.4'
        floating_ip_target_model['resource_type'] = 'network_interface'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model['name'] = 'us-south-1'

        floating_ip_model = {}  # FloatingIP
        floating_ip_model['address'] = '203.0.113.1'
        floating_ip_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        floating_ip_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_model['id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_model['name'] = 'my-floating-ip'
        floating_ip_model['resource_group'] = resource_group_reference_model
        floating_ip_model['status'] = 'available'
        floating_ip_model['target'] = floating_ip_target_model
        floating_ip_model['zone'] = zone_reference_model

        floating_ip_collection_first_model = {}  # FloatingIPCollectionFirst
        floating_ip_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips?limit=20'

        floating_ip_collection_next_model = {}  # FloatingIPCollectionNext
        floating_ip_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a json representation of a FloatingIPCollection model
        floating_ip_collection_model_json = {}
        floating_ip_collection_model_json[
            'first'] = floating_ip_collection_first_model
        floating_ip_collection_model_json['floating_ips'] = [floating_ip_model]
        floating_ip_collection_model_json['limit'] = 20
        floating_ip_collection_model_json[
            'next'] = floating_ip_collection_next_model
        floating_ip_collection_model_json['total_count'] = 132

        # Construct a model instance of FloatingIPCollection by calling from_dict on the json representation
        floating_ip_collection_model = FloatingIPCollection.from_dict(
            floating_ip_collection_model_json)
        assert floating_ip_collection_model != False

        # Construct a model instance of FloatingIPCollection by calling from_dict on the json representation
        floating_ip_collection_model_dict = FloatingIPCollection.from_dict(
            floating_ip_collection_model_json).__dict__
        floating_ip_collection_model2 = FloatingIPCollection(
            **floating_ip_collection_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_collection_model == floating_ip_collection_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_collection_model_json2 = floating_ip_collection_model.to_dict(
        )
        assert floating_ip_collection_model_json2 == floating_ip_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for FloatingIPCollectionFirst
#-----------------------------------------------------------------------------
class TestFloatingIPCollectionFirst():

    #--------------------------------------------------------
    # Test serialization/deserialization for FloatingIPCollectionFirst
    #--------------------------------------------------------
    def test_floating_ip_collection_first_serialization(self):

        # Construct a json representation of a FloatingIPCollectionFirst model
        floating_ip_collection_first_model_json = {}
        floating_ip_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips?limit=20'

        # Construct a model instance of FloatingIPCollectionFirst by calling from_dict on the json representation
        floating_ip_collection_first_model = FloatingIPCollectionFirst.from_dict(
            floating_ip_collection_first_model_json)
        assert floating_ip_collection_first_model != False

        # Construct a model instance of FloatingIPCollectionFirst by calling from_dict on the json representation
        floating_ip_collection_first_model_dict = FloatingIPCollectionFirst.from_dict(
            floating_ip_collection_first_model_json).__dict__
        floating_ip_collection_first_model2 = FloatingIPCollectionFirst(
            **floating_ip_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_collection_first_model == floating_ip_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_collection_first_model_json2 = floating_ip_collection_first_model.to_dict(
        )
        assert floating_ip_collection_first_model_json2 == floating_ip_collection_first_model_json


#-----------------------------------------------------------------------------
# Test Class for FloatingIPCollectionNext
#-----------------------------------------------------------------------------
class TestFloatingIPCollectionNext():

    #--------------------------------------------------------
    # Test serialization/deserialization for FloatingIPCollectionNext
    #--------------------------------------------------------
    def test_floating_ip_collection_next_serialization(self):

        # Construct a json representation of a FloatingIPCollectionNext model
        floating_ip_collection_next_model_json = {}
        floating_ip_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of FloatingIPCollectionNext by calling from_dict on the json representation
        floating_ip_collection_next_model = FloatingIPCollectionNext.from_dict(
            floating_ip_collection_next_model_json)
        assert floating_ip_collection_next_model != False

        # Construct a model instance of FloatingIPCollectionNext by calling from_dict on the json representation
        floating_ip_collection_next_model_dict = FloatingIPCollectionNext.from_dict(
            floating_ip_collection_next_model_json).__dict__
        floating_ip_collection_next_model2 = FloatingIPCollectionNext(
            **floating_ip_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_collection_next_model == floating_ip_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_collection_next_model_json2 = floating_ip_collection_next_model.to_dict(
        )
        assert floating_ip_collection_next_model_json2 == floating_ip_collection_next_model_json


#-----------------------------------------------------------------------------
# Test Class for FloatingIPReference
#-----------------------------------------------------------------------------
class TestFloatingIPReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for FloatingIPReference
    #--------------------------------------------------------
    def test_floating_ip_reference_serialization(self):

        # Construct a json representation of a FloatingIPReference model
        floating_ip_reference_model_json = {}
        floating_ip_reference_model_json['address'] = '203.0.113.1'
        floating_ip_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model_json[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model_json['name'] = 'my-floating-ip'

        # Construct a model instance of FloatingIPReference by calling from_dict on the json representation
        floating_ip_reference_model = FloatingIPReference.from_dict(
            floating_ip_reference_model_json)
        assert floating_ip_reference_model != False

        # Construct a model instance of FloatingIPReference by calling from_dict on the json representation
        floating_ip_reference_model_dict = FloatingIPReference.from_dict(
            floating_ip_reference_model_json).__dict__
        floating_ip_reference_model2 = FloatingIPReference(
            **floating_ip_reference_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_reference_model == floating_ip_reference_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_reference_model_json2 = floating_ip_reference_model.to_dict(
        )
        assert floating_ip_reference_model_json2 == floating_ip_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for FloatingIPUnpaginatedCollection
#-----------------------------------------------------------------------------
class TestFloatingIPUnpaginatedCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for FloatingIPUnpaginatedCollection
    #--------------------------------------------------------
    def test_floating_ip_unpaginated_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        floating_ip_target_model = {}  # FloatingIPTarget
        floating_ip_target_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        floating_ip_target_model['id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        floating_ip_target_model['name'] = 'my-network-interface'
        floating_ip_target_model['primary_ipv4_address'] = '192.168.3.4'
        floating_ip_target_model['resource_type'] = 'network_interface'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model['name'] = 'us-south-1'

        floating_ip_model = {}  # FloatingIP
        floating_ip_model['address'] = '203.0.113.1'
        floating_ip_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        floating_ip_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_model['id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_model['name'] = 'my-floating-ip'
        floating_ip_model['resource_group'] = resource_group_reference_model
        floating_ip_model['status'] = 'available'
        floating_ip_model['target'] = floating_ip_target_model
        floating_ip_model['zone'] = zone_reference_model

        # Construct a json representation of a FloatingIPUnpaginatedCollection model
        floating_ip_unpaginated_collection_model_json = {}
        floating_ip_unpaginated_collection_model_json['floating_ips'] = [
            floating_ip_model
        ]

        # Construct a model instance of FloatingIPUnpaginatedCollection by calling from_dict on the json representation
        floating_ip_unpaginated_collection_model = FloatingIPUnpaginatedCollection.from_dict(
            floating_ip_unpaginated_collection_model_json)
        assert floating_ip_unpaginated_collection_model != False

        # Construct a model instance of FloatingIPUnpaginatedCollection by calling from_dict on the json representation
        floating_ip_unpaginated_collection_model_dict = FloatingIPUnpaginatedCollection.from_dict(
            floating_ip_unpaginated_collection_model_json).__dict__
        floating_ip_unpaginated_collection_model2 = FloatingIPUnpaginatedCollection(
            **floating_ip_unpaginated_collection_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_unpaginated_collection_model == floating_ip_unpaginated_collection_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_unpaginated_collection_model_json2 = floating_ip_unpaginated_collection_model.to_dict(
        )
        assert floating_ip_unpaginated_collection_model_json2 == floating_ip_unpaginated_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollector
#-----------------------------------------------------------------------------
class TestFlowLogCollector():

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollector
    #--------------------------------------------------------
    def test_flow_log_collector_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        cloud_object_storage_bucket_reference_model = {
        }  # CloudObjectStorageBucketReference
        cloud_object_storage_bucket_reference_model[
            'name'] = 'bucket-27200-lwx4cfvcue'

        flow_log_collector_target_model = {}  # FlowLogCollectorTarget
        flow_log_collector_target_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        flow_log_collector_target_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        flow_log_collector_target_model['name'] = 'my-network-interface'
        flow_log_collector_target_model['resource_type'] = 'network_interface'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        # Construct a json representation of a FlowLogCollector model
        flow_log_collector_model_json = {}
        flow_log_collector_model_json['active'] = True
        flow_log_collector_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        flow_log_collector_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689'
        flow_log_collector_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689'
        flow_log_collector_model_json[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        flow_log_collector_model_json['lifecycle_state'] = 'stable'
        flow_log_collector_model_json['name'] = 'my-flow-log-collector'
        flow_log_collector_model_json[
            'resource_group'] = resource_group_reference_model
        flow_log_collector_model_json[
            'storage_bucket'] = cloud_object_storage_bucket_reference_model
        flow_log_collector_model_json[
            'target'] = flow_log_collector_target_model
        flow_log_collector_model_json['vpc'] = vpc_reference_model

        # Construct a model instance of FlowLogCollector by calling from_dict on the json representation
        flow_log_collector_model = FlowLogCollector.from_dict(
            flow_log_collector_model_json)
        assert flow_log_collector_model != False

        # Construct a model instance of FlowLogCollector by calling from_dict on the json representation
        flow_log_collector_model_dict = FlowLogCollector.from_dict(
            flow_log_collector_model_json).__dict__
        flow_log_collector_model2 = FlowLogCollector(
            **flow_log_collector_model_dict)

        # Verify the model instances are equivalent
        assert flow_log_collector_model == flow_log_collector_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_model_json2 = flow_log_collector_model.to_dict()
        assert flow_log_collector_model_json2 == flow_log_collector_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollectorCollection
#-----------------------------------------------------------------------------
class TestFlowLogCollectorCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollectorCollection
    #--------------------------------------------------------
    def test_flow_log_collector_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        cloud_object_storage_bucket_reference_model = {
        }  # CloudObjectStorageBucketReference
        cloud_object_storage_bucket_reference_model[
            'name'] = 'bucket-27200-lwx4cfvcue'

        flow_log_collector_target_model = {}  # FlowLogCollectorTarget
        flow_log_collector_target_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        flow_log_collector_target_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        flow_log_collector_target_model['name'] = 'my-network-interface'
        flow_log_collector_target_model['resource_type'] = 'network_interface'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        flow_log_collector_model = {}  # FlowLogCollector
        flow_log_collector_model['active'] = True
        flow_log_collector_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        flow_log_collector_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689'
        flow_log_collector_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689'
        flow_log_collector_model['id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        flow_log_collector_model['lifecycle_state'] = 'stable'
        flow_log_collector_model['name'] = 'my-flow-log-collector'
        flow_log_collector_model[
            'resource_group'] = resource_group_reference_model
        flow_log_collector_model[
            'storage_bucket'] = cloud_object_storage_bucket_reference_model
        flow_log_collector_model['target'] = flow_log_collector_target_model
        flow_log_collector_model['vpc'] = vpc_reference_model

        flow_log_collector_collection_first_model = {
        }  # FlowLogCollectorCollectionFirst
        flow_log_collector_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?limit=20'

        flow_log_collector_collection_next_model = {
        }  # FlowLogCollectorCollectionNext
        flow_log_collector_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a json representation of a FlowLogCollectorCollection model
        flow_log_collector_collection_model_json = {}
        flow_log_collector_collection_model_json[
            'first'] = flow_log_collector_collection_first_model
        flow_log_collector_collection_model_json['flow_log_collectors'] = [
            flow_log_collector_model
        ]
        flow_log_collector_collection_model_json['limit'] = 20
        flow_log_collector_collection_model_json[
            'next'] = flow_log_collector_collection_next_model
        flow_log_collector_collection_model_json['total_count'] = 132

        # Construct a model instance of FlowLogCollectorCollection by calling from_dict on the json representation
        flow_log_collector_collection_model = FlowLogCollectorCollection.from_dict(
            flow_log_collector_collection_model_json)
        assert flow_log_collector_collection_model != False

        # Construct a model instance of FlowLogCollectorCollection by calling from_dict on the json representation
        flow_log_collector_collection_model_dict = FlowLogCollectorCollection.from_dict(
            flow_log_collector_collection_model_json).__dict__
        flow_log_collector_collection_model2 = FlowLogCollectorCollection(
            **flow_log_collector_collection_model_dict)

        # Verify the model instances are equivalent
        assert flow_log_collector_collection_model == flow_log_collector_collection_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_collection_model_json2 = flow_log_collector_collection_model.to_dict(
        )
        assert flow_log_collector_collection_model_json2 == flow_log_collector_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollectorCollectionFirst
#-----------------------------------------------------------------------------
class TestFlowLogCollectorCollectionFirst():

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollectorCollectionFirst
    #--------------------------------------------------------
    def test_flow_log_collector_collection_first_serialization(self):

        # Construct a json representation of a FlowLogCollectorCollectionFirst model
        flow_log_collector_collection_first_model_json = {}
        flow_log_collector_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?limit=20'

        # Construct a model instance of FlowLogCollectorCollectionFirst by calling from_dict on the json representation
        flow_log_collector_collection_first_model = FlowLogCollectorCollectionFirst.from_dict(
            flow_log_collector_collection_first_model_json)
        assert flow_log_collector_collection_first_model != False

        # Construct a model instance of FlowLogCollectorCollectionFirst by calling from_dict on the json representation
        flow_log_collector_collection_first_model_dict = FlowLogCollectorCollectionFirst.from_dict(
            flow_log_collector_collection_first_model_json).__dict__
        flow_log_collector_collection_first_model2 = FlowLogCollectorCollectionFirst(
            **flow_log_collector_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert flow_log_collector_collection_first_model == flow_log_collector_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_collection_first_model_json2 = flow_log_collector_collection_first_model.to_dict(
        )
        assert flow_log_collector_collection_first_model_json2 == flow_log_collector_collection_first_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollectorCollectionNext
#-----------------------------------------------------------------------------
class TestFlowLogCollectorCollectionNext():

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollectorCollectionNext
    #--------------------------------------------------------
    def test_flow_log_collector_collection_next_serialization(self):

        # Construct a json representation of a FlowLogCollectorCollectionNext model
        flow_log_collector_collection_next_model_json = {}
        flow_log_collector_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of FlowLogCollectorCollectionNext by calling from_dict on the json representation
        flow_log_collector_collection_next_model = FlowLogCollectorCollectionNext.from_dict(
            flow_log_collector_collection_next_model_json)
        assert flow_log_collector_collection_next_model != False

        # Construct a model instance of FlowLogCollectorCollectionNext by calling from_dict on the json representation
        flow_log_collector_collection_next_model_dict = FlowLogCollectorCollectionNext.from_dict(
            flow_log_collector_collection_next_model_json).__dict__
        flow_log_collector_collection_next_model2 = FlowLogCollectorCollectionNext(
            **flow_log_collector_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert flow_log_collector_collection_next_model == flow_log_collector_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_collection_next_model_json2 = flow_log_collector_collection_next_model.to_dict(
        )
        assert flow_log_collector_collection_next_model_json2 == flow_log_collector_collection_next_model_json


#-----------------------------------------------------------------------------
# Test Class for IKEPolicy
#-----------------------------------------------------------------------------
class TestIKEPolicy():

    #--------------------------------------------------------
    # Test serialization/deserialization for IKEPolicy
    #--------------------------------------------------------
    def test_ike_policy_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        vpn_gateway_connection_reference_model = {
        }  # VPNGatewayConnectionReference
        vpn_gateway_connection_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b'
        vpn_gateway_connection_reference_model[
            'id'] = 'a10a5771-dc23-442c-8460-c3601d8542f7'
        vpn_gateway_connection_reference_model['name'] = 'my-vpn-connection'

        # Construct a json representation of a IKEPolicy model
        ike_policy_model_json = {}
        ike_policy_model_json['authentication_algorithm'] = 'md5'
        ike_policy_model_json['connections'] = [
            vpn_gateway_connection_reference_model
        ]
        ike_policy_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        ike_policy_model_json['dh_group'] = 2
        ike_policy_model_json['encryption_algorithm'] = 'triple_des'
        ike_policy_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b'
        ike_policy_model_json['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'
        ike_policy_model_json['ike_version'] = 1
        ike_policy_model_json['key_lifetime'] = 28800
        ike_policy_model_json['name'] = 'my-ike-policy'
        ike_policy_model_json['negotiation_mode'] = 'main'
        ike_policy_model_json['resource_group'] = resource_group_reference_model

        # Construct a model instance of IKEPolicy by calling from_dict on the json representation
        ike_policy_model = IKEPolicy.from_dict(ike_policy_model_json)
        assert ike_policy_model != False

        # Construct a model instance of IKEPolicy by calling from_dict on the json representation
        ike_policy_model_dict = IKEPolicy.from_dict(
            ike_policy_model_json).__dict__
        ike_policy_model2 = IKEPolicy(**ike_policy_model_dict)

        # Verify the model instances are equivalent
        assert ike_policy_model == ike_policy_model2

        # Convert model instance back to dict and verify no loss of data
        ike_policy_model_json2 = ike_policy_model.to_dict()
        assert ike_policy_model_json2 == ike_policy_model_json


#-----------------------------------------------------------------------------
# Test Class for IKEPolicyCollection
#-----------------------------------------------------------------------------
class TestIKEPolicyCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for IKEPolicyCollection
    #--------------------------------------------------------
    def test_ike_policy_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        vpn_gateway_connection_reference_model = {
        }  # VPNGatewayConnectionReference
        vpn_gateway_connection_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b'
        vpn_gateway_connection_reference_model[
            'id'] = 'a10a5771-dc23-442c-8460-c3601d8542f7'
        vpn_gateway_connection_reference_model['name'] = 'my-vpn-connection'

        ike_policy_model = {}  # IKEPolicy
        ike_policy_model['authentication_algorithm'] = 'md5'
        ike_policy_model['connections'] = [
            vpn_gateway_connection_reference_model
        ]
        ike_policy_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        ike_policy_model['dh_group'] = 2
        ike_policy_model['encryption_algorithm'] = 'triple_des'
        ike_policy_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b'
        ike_policy_model['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'
        ike_policy_model['ike_version'] = 1
        ike_policy_model['key_lifetime'] = 28800
        ike_policy_model['name'] = 'my-ike-policy'
        ike_policy_model['negotiation_mode'] = 'main'
        ike_policy_model['resource_group'] = resource_group_reference_model

        ike_policy_collection_first_model = {}  # IKEPolicyCollectionFirst
        ike_policy_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ike_policies?limit=20'

        ike_policy_collection_next_model = {}  # IKEPolicyCollectionNext
        ike_policy_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ike_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20'

        # Construct a json representation of a IKEPolicyCollection model
        ike_policy_collection_model_json = {}
        ike_policy_collection_model_json[
            'first'] = ike_policy_collection_first_model
        ike_policy_collection_model_json['ike_policies'] = [ike_policy_model]
        ike_policy_collection_model_json['limit'] = 20
        ike_policy_collection_model_json[
            'next'] = ike_policy_collection_next_model
        ike_policy_collection_model_json['total_count'] = 132

        # Construct a model instance of IKEPolicyCollection by calling from_dict on the json representation
        ike_policy_collection_model = IKEPolicyCollection.from_dict(
            ike_policy_collection_model_json)
        assert ike_policy_collection_model != False

        # Construct a model instance of IKEPolicyCollection by calling from_dict on the json representation
        ike_policy_collection_model_dict = IKEPolicyCollection.from_dict(
            ike_policy_collection_model_json).__dict__
        ike_policy_collection_model2 = IKEPolicyCollection(
            **ike_policy_collection_model_dict)

        # Verify the model instances are equivalent
        assert ike_policy_collection_model == ike_policy_collection_model2

        # Convert model instance back to dict and verify no loss of data
        ike_policy_collection_model_json2 = ike_policy_collection_model.to_dict(
        )
        assert ike_policy_collection_model_json2 == ike_policy_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for IKEPolicyCollectionFirst
#-----------------------------------------------------------------------------
class TestIKEPolicyCollectionFirst():

    #--------------------------------------------------------
    # Test serialization/deserialization for IKEPolicyCollectionFirst
    #--------------------------------------------------------
    def test_ike_policy_collection_first_serialization(self):

        # Construct a json representation of a IKEPolicyCollectionFirst model
        ike_policy_collection_first_model_json = {}
        ike_policy_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ike_policies?limit=20'

        # Construct a model instance of IKEPolicyCollectionFirst by calling from_dict on the json representation
        ike_policy_collection_first_model = IKEPolicyCollectionFirst.from_dict(
            ike_policy_collection_first_model_json)
        assert ike_policy_collection_first_model != False

        # Construct a model instance of IKEPolicyCollectionFirst by calling from_dict on the json representation
        ike_policy_collection_first_model_dict = IKEPolicyCollectionFirst.from_dict(
            ike_policy_collection_first_model_json).__dict__
        ike_policy_collection_first_model2 = IKEPolicyCollectionFirst(
            **ike_policy_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert ike_policy_collection_first_model == ike_policy_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        ike_policy_collection_first_model_json2 = ike_policy_collection_first_model.to_dict(
        )
        assert ike_policy_collection_first_model_json2 == ike_policy_collection_first_model_json


#-----------------------------------------------------------------------------
# Test Class for IKEPolicyCollectionNext
#-----------------------------------------------------------------------------
class TestIKEPolicyCollectionNext():

    #--------------------------------------------------------
    # Test serialization/deserialization for IKEPolicyCollectionNext
    #--------------------------------------------------------
    def test_ike_policy_collection_next_serialization(self):

        # Construct a json representation of a IKEPolicyCollectionNext model
        ike_policy_collection_next_model_json = {}
        ike_policy_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ike_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20'

        # Construct a model instance of IKEPolicyCollectionNext by calling from_dict on the json representation
        ike_policy_collection_next_model = IKEPolicyCollectionNext.from_dict(
            ike_policy_collection_next_model_json)
        assert ike_policy_collection_next_model != False

        # Construct a model instance of IKEPolicyCollectionNext by calling from_dict on the json representation
        ike_policy_collection_next_model_dict = IKEPolicyCollectionNext.from_dict(
            ike_policy_collection_next_model_json).__dict__
        ike_policy_collection_next_model2 = IKEPolicyCollectionNext(
            **ike_policy_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert ike_policy_collection_next_model == ike_policy_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        ike_policy_collection_next_model_json2 = ike_policy_collection_next_model.to_dict(
        )
        assert ike_policy_collection_next_model_json2 == ike_policy_collection_next_model_json


#-----------------------------------------------------------------------------
# Test Class for IP
#-----------------------------------------------------------------------------
class TestIP():

    #--------------------------------------------------------
    # Test serialization/deserialization for IP
    #--------------------------------------------------------
    def test_ip_serialization(self):

        # Construct a json representation of a IP model
        ip_model_json = {}
        ip_model_json['address'] = '192.168.3.4'

        # Construct a model instance of IP by calling from_dict on the json representation
        ip_model = IP.from_dict(ip_model_json)
        assert ip_model != False

        # Construct a model instance of IP by calling from_dict on the json representation
        ip_model_dict = IP.from_dict(ip_model_json).__dict__
        ip_model2 = IP(**ip_model_dict)

        # Verify the model instances are equivalent
        assert ip_model == ip_model2

        # Convert model instance back to dict and verify no loss of data
        ip_model_json2 = ip_model.to_dict()
        assert ip_model_json2 == ip_model_json


#-----------------------------------------------------------------------------
# Test Class for IPsecPolicy
#-----------------------------------------------------------------------------
class TestIPsecPolicy():

    #--------------------------------------------------------
    # Test serialization/deserialization for IPsecPolicy
    #--------------------------------------------------------
    def test_i_psec_policy_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        vpn_gateway_connection_reference_model = {
        }  # VPNGatewayConnectionReference
        vpn_gateway_connection_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b'
        vpn_gateway_connection_reference_model[
            'id'] = 'a10a5771-dc23-442c-8460-c3601d8542f7'
        vpn_gateway_connection_reference_model['name'] = 'my-vpn-connection'

        # Construct a json representation of a IPsecPolicy model
        i_psec_policy_model_json = {}
        i_psec_policy_model_json['authentication_algorithm'] = 'md5'
        i_psec_policy_model_json['connections'] = [
            vpn_gateway_connection_reference_model
        ]
        i_psec_policy_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        i_psec_policy_model_json['encapsulation_mode'] = 'tunnel'
        i_psec_policy_model_json['encryption_algorithm'] = 'triple_des'
        i_psec_policy_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b'
        i_psec_policy_model_json['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'
        i_psec_policy_model_json['key_lifetime'] = 3600
        i_psec_policy_model_json['name'] = 'my-ipsec-policy'
        i_psec_policy_model_json['pfs'] = 'disabled'
        i_psec_policy_model_json[
            'resource_group'] = resource_group_reference_model
        i_psec_policy_model_json['transform_protocol'] = 'esp'

        # Construct a model instance of IPsecPolicy by calling from_dict on the json representation
        i_psec_policy_model = IPsecPolicy.from_dict(i_psec_policy_model_json)
        assert i_psec_policy_model != False

        # Construct a model instance of IPsecPolicy by calling from_dict on the json representation
        i_psec_policy_model_dict = IPsecPolicy.from_dict(
            i_psec_policy_model_json).__dict__
        i_psec_policy_model2 = IPsecPolicy(**i_psec_policy_model_dict)

        # Verify the model instances are equivalent
        assert i_psec_policy_model == i_psec_policy_model2

        # Convert model instance back to dict and verify no loss of data
        i_psec_policy_model_json2 = i_psec_policy_model.to_dict()
        assert i_psec_policy_model_json2 == i_psec_policy_model_json


#-----------------------------------------------------------------------------
# Test Class for IPsecPolicyCollection
#-----------------------------------------------------------------------------
class TestIPsecPolicyCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for IPsecPolicyCollection
    #--------------------------------------------------------
    def test_i_psec_policy_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        vpn_gateway_connection_reference_model = {
        }  # VPNGatewayConnectionReference
        vpn_gateway_connection_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b'
        vpn_gateway_connection_reference_model[
            'id'] = 'a10a5771-dc23-442c-8460-c3601d8542f7'
        vpn_gateway_connection_reference_model['name'] = 'my-vpn-connection'

        i_psec_policy_model = {}  # IPsecPolicy
        i_psec_policy_model['authentication_algorithm'] = 'md5'
        i_psec_policy_model['connections'] = [
            vpn_gateway_connection_reference_model
        ]
        i_psec_policy_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        i_psec_policy_model['encapsulation_mode'] = 'tunnel'
        i_psec_policy_model['encryption_algorithm'] = 'triple_des'
        i_psec_policy_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b'
        i_psec_policy_model['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'
        i_psec_policy_model['key_lifetime'] = 3600
        i_psec_policy_model['name'] = 'my-ipsec-policy'
        i_psec_policy_model['pfs'] = 'disabled'
        i_psec_policy_model['resource_group'] = resource_group_reference_model
        i_psec_policy_model['transform_protocol'] = 'esp'

        i_psec_policy_collection_first_model = {}  # IPsecPolicyCollectionFirst
        i_psec_policy_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?limit=20'

        i_psec_policy_collection_next_model = {}  # IPsecPolicyCollectionNext
        i_psec_policy_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20'

        # Construct a json representation of a IPsecPolicyCollection model
        i_psec_policy_collection_model_json = {}
        i_psec_policy_collection_model_json[
            'first'] = i_psec_policy_collection_first_model
        i_psec_policy_collection_model_json['ipsec_policies'] = [
            i_psec_policy_model
        ]
        i_psec_policy_collection_model_json['limit'] = 20
        i_psec_policy_collection_model_json[
            'next'] = i_psec_policy_collection_next_model
        i_psec_policy_collection_model_json['total_count'] = 132

        # Construct a model instance of IPsecPolicyCollection by calling from_dict on the json representation
        i_psec_policy_collection_model = IPsecPolicyCollection.from_dict(
            i_psec_policy_collection_model_json)
        assert i_psec_policy_collection_model != False

        # Construct a model instance of IPsecPolicyCollection by calling from_dict on the json representation
        i_psec_policy_collection_model_dict = IPsecPolicyCollection.from_dict(
            i_psec_policy_collection_model_json).__dict__
        i_psec_policy_collection_model2 = IPsecPolicyCollection(
            **i_psec_policy_collection_model_dict)

        # Verify the model instances are equivalent
        assert i_psec_policy_collection_model == i_psec_policy_collection_model2

        # Convert model instance back to dict and verify no loss of data
        i_psec_policy_collection_model_json2 = i_psec_policy_collection_model.to_dict(
        )
        assert i_psec_policy_collection_model_json2 == i_psec_policy_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for IPsecPolicyCollectionFirst
#-----------------------------------------------------------------------------
class TestIPsecPolicyCollectionFirst():

    #--------------------------------------------------------
    # Test serialization/deserialization for IPsecPolicyCollectionFirst
    #--------------------------------------------------------
    def test_i_psec_policy_collection_first_serialization(self):

        # Construct a json representation of a IPsecPolicyCollectionFirst model
        i_psec_policy_collection_first_model_json = {}
        i_psec_policy_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?limit=20'

        # Construct a model instance of IPsecPolicyCollectionFirst by calling from_dict on the json representation
        i_psec_policy_collection_first_model = IPsecPolicyCollectionFirst.from_dict(
            i_psec_policy_collection_first_model_json)
        assert i_psec_policy_collection_first_model != False

        # Construct a model instance of IPsecPolicyCollectionFirst by calling from_dict on the json representation
        i_psec_policy_collection_first_model_dict = IPsecPolicyCollectionFirst.from_dict(
            i_psec_policy_collection_first_model_json).__dict__
        i_psec_policy_collection_first_model2 = IPsecPolicyCollectionFirst(
            **i_psec_policy_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert i_psec_policy_collection_first_model == i_psec_policy_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        i_psec_policy_collection_first_model_json2 = i_psec_policy_collection_first_model.to_dict(
        )
        assert i_psec_policy_collection_first_model_json2 == i_psec_policy_collection_first_model_json


#-----------------------------------------------------------------------------
# Test Class for IPsecPolicyCollectionNext
#-----------------------------------------------------------------------------
class TestIPsecPolicyCollectionNext():

    #--------------------------------------------------------
    # Test serialization/deserialization for IPsecPolicyCollectionNext
    #--------------------------------------------------------
    def test_i_psec_policy_collection_next_serialization(self):

        # Construct a json representation of a IPsecPolicyCollectionNext model
        i_psec_policy_collection_next_model_json = {}
        i_psec_policy_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20'

        # Construct a model instance of IPsecPolicyCollectionNext by calling from_dict on the json representation
        i_psec_policy_collection_next_model = IPsecPolicyCollectionNext.from_dict(
            i_psec_policy_collection_next_model_json)
        assert i_psec_policy_collection_next_model != False

        # Construct a model instance of IPsecPolicyCollectionNext by calling from_dict on the json representation
        i_psec_policy_collection_next_model_dict = IPsecPolicyCollectionNext.from_dict(
            i_psec_policy_collection_next_model_json).__dict__
        i_psec_policy_collection_next_model2 = IPsecPolicyCollectionNext(
            **i_psec_policy_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert i_psec_policy_collection_next_model == i_psec_policy_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        i_psec_policy_collection_next_model_json2 = i_psec_policy_collection_next_model.to_dict(
        )
        assert i_psec_policy_collection_next_model_json2 == i_psec_policy_collection_next_model_json


#-----------------------------------------------------------------------------
# Test Class for Image
#-----------------------------------------------------------------------------
class TestImage():

    #--------------------------------------------------------
    # Test serialization/deserialization for Image
    #--------------------------------------------------------
    def test_image_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        image_file_model = {}  # ImageFile
        image_file_model['size'] = 1

        operating_system_model = {}  # OperatingSystem
        operating_system_model['architecture'] = 'amd64'
        operating_system_model['display_name'] = 'Ubuntu Server 16.04 LTS amd64'
        operating_system_model['family'] = 'Ubuntu Server'
        operating_system_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64'
        operating_system_model['name'] = 'ubuntu-16-amd64'
        operating_system_model['vendor'] = 'Canonical'
        operating_system_model['version'] = '16.04 LTS'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        # Construct a json representation of a Image model
        image_model_json = {}
        image_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        image_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_model_json['file'] = image_file_model
        image_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_model_json['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_model_json['minimum_provisioned_size'] = 38
        image_model_json['name'] = 'my-image'
        image_model_json['operating_system'] = operating_system_model
        image_model_json['resource_group'] = resource_group_reference_model
        image_model_json['status'] = 'available'
        image_model_json['visibility'] = 'private'

        # Construct a model instance of Image by calling from_dict on the json representation
        image_model = Image.from_dict(image_model_json)
        assert image_model != False

        # Construct a model instance of Image by calling from_dict on the json representation
        image_model_dict = Image.from_dict(image_model_json).__dict__
        image_model2 = Image(**image_model_dict)

        # Verify the model instances are equivalent
        assert image_model == image_model2

        # Convert model instance back to dict and verify no loss of data
        image_model_json2 = image_model.to_dict()
        assert image_model_json2 == image_model_json


#-----------------------------------------------------------------------------
# Test Class for ImageCollection
#-----------------------------------------------------------------------------
class TestImageCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for ImageCollection
    #--------------------------------------------------------
    def test_image_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        image_file_model = {}  # ImageFile
        image_file_model['size'] = 1

        operating_system_model = {}  # OperatingSystem
        operating_system_model['architecture'] = 'amd64'
        operating_system_model['display_name'] = 'Ubuntu Server 16.04 LTS amd64'
        operating_system_model['family'] = 'Ubuntu Server'
        operating_system_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64'
        operating_system_model['name'] = 'ubuntu-16-amd64'
        operating_system_model['vendor'] = 'Canonical'
        operating_system_model['version'] = '16.04 LTS'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        image_model = {}  # Image
        image_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        image_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_model['file'] = image_file_model
        image_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_model['minimum_provisioned_size'] = 38
        image_model['name'] = 'my-image'
        image_model['operating_system'] = operating_system_model
        image_model['resource_group'] = resource_group_reference_model
        image_model['status'] = 'available'
        image_model['visibility'] = 'private'

        image_collection_first_model = {}  # ImageCollectionFirst
        image_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images?limit=20'

        image_collection_next_model = {}  # ImageCollectionNext
        image_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a json representation of a ImageCollection model
        image_collection_model_json = {}
        image_collection_model_json['first'] = image_collection_first_model
        image_collection_model_json['images'] = [image_model]
        image_collection_model_json['limit'] = 20
        image_collection_model_json['next'] = image_collection_next_model

        # Construct a model instance of ImageCollection by calling from_dict on the json representation
        image_collection_model = ImageCollection.from_dict(
            image_collection_model_json)
        assert image_collection_model != False

        # Construct a model instance of ImageCollection by calling from_dict on the json representation
        image_collection_model_dict = ImageCollection.from_dict(
            image_collection_model_json).__dict__
        image_collection_model2 = ImageCollection(**image_collection_model_dict)

        # Verify the model instances are equivalent
        assert image_collection_model == image_collection_model2

        # Convert model instance back to dict and verify no loss of data
        image_collection_model_json2 = image_collection_model.to_dict()
        assert image_collection_model_json2 == image_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for ImageCollectionFirst
#-----------------------------------------------------------------------------
class TestImageCollectionFirst():

    #--------------------------------------------------------
    # Test serialization/deserialization for ImageCollectionFirst
    #--------------------------------------------------------
    def test_image_collection_first_serialization(self):

        # Construct a json representation of a ImageCollectionFirst model
        image_collection_first_model_json = {}
        image_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images?limit=20'

        # Construct a model instance of ImageCollectionFirst by calling from_dict on the json representation
        image_collection_first_model = ImageCollectionFirst.from_dict(
            image_collection_first_model_json)
        assert image_collection_first_model != False

        # Construct a model instance of ImageCollectionFirst by calling from_dict on the json representation
        image_collection_first_model_dict = ImageCollectionFirst.from_dict(
            image_collection_first_model_json).__dict__
        image_collection_first_model2 = ImageCollectionFirst(
            **image_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert image_collection_first_model == image_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        image_collection_first_model_json2 = image_collection_first_model.to_dict(
        )
        assert image_collection_first_model_json2 == image_collection_first_model_json


#-----------------------------------------------------------------------------
# Test Class for ImageCollectionNext
#-----------------------------------------------------------------------------
class TestImageCollectionNext():

    #--------------------------------------------------------
    # Test serialization/deserialization for ImageCollectionNext
    #--------------------------------------------------------
    def test_image_collection_next_serialization(self):

        # Construct a json representation of a ImageCollectionNext model
        image_collection_next_model_json = {}
        image_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of ImageCollectionNext by calling from_dict on the json representation
        image_collection_next_model = ImageCollectionNext.from_dict(
            image_collection_next_model_json)
        assert image_collection_next_model != False

        # Construct a model instance of ImageCollectionNext by calling from_dict on the json representation
        image_collection_next_model_dict = ImageCollectionNext.from_dict(
            image_collection_next_model_json).__dict__
        image_collection_next_model2 = ImageCollectionNext(
            **image_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert image_collection_next_model == image_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        image_collection_next_model_json2 = image_collection_next_model.to_dict(
        )
        assert image_collection_next_model_json2 == image_collection_next_model_json


#-----------------------------------------------------------------------------
# Test Class for ImageFile
#-----------------------------------------------------------------------------
class TestImageFile():

    #--------------------------------------------------------
    # Test serialization/deserialization for ImageFile
    #--------------------------------------------------------
    def test_image_file_serialization(self):

        # Construct a json representation of a ImageFile model
        image_file_model_json = {}
        image_file_model_json['size'] = 1

        # Construct a model instance of ImageFile by calling from_dict on the json representation
        image_file_model = ImageFile.from_dict(image_file_model_json)
        assert image_file_model != False

        # Construct a model instance of ImageFile by calling from_dict on the json representation
        image_file_model_dict = ImageFile.from_dict(
            image_file_model_json).__dict__
        image_file_model2 = ImageFile(**image_file_model_dict)

        # Verify the model instances are equivalent
        assert image_file_model == image_file_model2

        # Convert model instance back to dict and verify no loss of data
        image_file_model_json2 = image_file_model.to_dict()
        assert image_file_model_json2 == image_file_model_json


#-----------------------------------------------------------------------------
# Test Class for ImageFilePrototype
#-----------------------------------------------------------------------------
class TestImageFilePrototype():

    #--------------------------------------------------------
    # Test serialization/deserialization for ImageFilePrototype
    #--------------------------------------------------------
    def test_image_file_prototype_serialization(self):

        # Construct a json representation of a ImageFilePrototype model
        image_file_prototype_model_json = {}
        image_file_prototype_model_json[
            'href'] = 'cos://us-south/custom-image-vpc-bucket/customImage-0.vhd'

        # Construct a model instance of ImageFilePrototype by calling from_dict on the json representation
        image_file_prototype_model = ImageFilePrototype.from_dict(
            image_file_prototype_model_json)
        assert image_file_prototype_model != False

        # Construct a model instance of ImageFilePrototype by calling from_dict on the json representation
        image_file_prototype_model_dict = ImageFilePrototype.from_dict(
            image_file_prototype_model_json).__dict__
        image_file_prototype_model2 = ImageFilePrototype(
            **image_file_prototype_model_dict)

        # Verify the model instances are equivalent
        assert image_file_prototype_model == image_file_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        image_file_prototype_model_json2 = image_file_prototype_model.to_dict()
        assert image_file_prototype_model_json2 == image_file_prototype_model_json


#-----------------------------------------------------------------------------
# Test Class for ImageReference
#-----------------------------------------------------------------------------
class TestImageReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for ImageReference
    #--------------------------------------------------------
    def test_image_reference_serialization(self):

        # Construct a json representation of a ImageReference model
        image_reference_model_json = {}
        image_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_reference_model_json[
            'id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_reference_model_json['name'] = 'my-image'

        # Construct a model instance of ImageReference by calling from_dict on the json representation
        image_reference_model = ImageReference.from_dict(
            image_reference_model_json)
        assert image_reference_model != False

        # Construct a model instance of ImageReference by calling from_dict on the json representation
        image_reference_model_dict = ImageReference.from_dict(
            image_reference_model_json).__dict__
        image_reference_model2 = ImageReference(**image_reference_model_dict)

        # Verify the model instances are equivalent
        assert image_reference_model == image_reference_model2

        # Convert model instance back to dict and verify no loss of data
        image_reference_model_json2 = image_reference_model.to_dict()
        assert image_reference_model_json2 == image_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for Instance
#-----------------------------------------------------------------------------
class TestInstance():

    #--------------------------------------------------------
    # Test serialization/deserialization for Instance
    #--------------------------------------------------------
    def test_instance_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        volume_attachment_device_model = {}  # VolumeAttachmentDevice
        volume_attachment_device_model[
            'id'] = '80b3e36e-41f4-40e9-bd56-beae81792a68'

        volume_reference_model = {}  # VolumeReference
        volume_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model['id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model['name'] = 'my-volume'

        image_reference_model = {}  # ImageReference
        image_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_reference_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_reference_model['name'] = 'my-image'

        instance_gpu_model = {}  # InstanceGPU
        instance_gpu_model['count'] = 1
        instance_gpu_model['manufacturer'] = 'nvidia'
        instance_gpu_model['memory'] = 1
        instance_gpu_model['model'] = 'Tesla V100'

        instance_profile_reference_model = {}  # InstanceProfileReference
        instance_profile_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16'
        instance_profile_reference_model['name'] = 'bc1-4x16'

        instance_vcpu_model = {}  # InstanceVCPU
        instance_vcpu_model['architecture'] = 'amd64'
        instance_vcpu_model['count'] = 4

        network_interface_instance_context_reference_model = {
        }  # NetworkInterfaceInstanceContextReference
        network_interface_instance_context_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_instance_context_reference_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_instance_context_reference_model[
            'name'] = 'my-network-interface'
        network_interface_instance_context_reference_model[
            'primary_ipv4_address'] = '192.168.3.4'
        network_interface_instance_context_reference_model[
            'resource_type'] = 'network_interface'
        network_interface_instance_context_reference_model[
            'subnet'] = subnet_reference_model

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        volume_attachment_reference_instance_context_model = {
        }  # VolumeAttachmentReferenceInstanceContext
        volume_attachment_reference_instance_context_model[
            'device'] = volume_attachment_device_model
        volume_attachment_reference_instance_context_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_instance_context_model[
            'id'] = '82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_instance_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_reference_instance_context_model[
            'volume'] = volume_reference_model

        zone_reference_model = {}  # ZoneReference
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model['name'] = 'us-south-1'

        # Construct a json representation of a Instance model
        instance_model_json = {}
        instance_model_json['bandwidth'] = 1000
        instance_model_json[
            'boot_volume_attachment'] = volume_attachment_reference_instance_context_model
        instance_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        instance_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_model_json['gpu'] = instance_gpu_model
        instance_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_model_json['id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_model_json['image'] = image_reference_model
        instance_model_json['memory'] = 8
        instance_model_json['name'] = 'my-instance'
        instance_model_json['network_interfaces'] = [
            network_interface_instance_context_reference_model
        ]
        instance_model_json[
            'primary_network_interface'] = network_interface_instance_context_reference_model
        instance_model_json['profile'] = instance_profile_reference_model
        instance_model_json['resource_group'] = resource_group_reference_model
        instance_model_json['status'] = 'failed'
        instance_model_json['vcpu'] = instance_vcpu_model
        instance_model_json['volume_attachments'] = [
            volume_attachment_reference_instance_context_model
        ]
        instance_model_json['vpc'] = vpc_reference_model
        instance_model_json['zone'] = zone_reference_model

        # Construct a model instance of Instance by calling from_dict on the json representation
        instance_model = Instance.from_dict(instance_model_json)
        assert instance_model != False

        # Construct a model instance of Instance by calling from_dict on the json representation
        instance_model_dict = Instance.from_dict(instance_model_json).__dict__
        instance_model2 = Instance(**instance_model_dict)

        # Verify the model instances are equivalent
        assert instance_model == instance_model2

        # Convert model instance back to dict and verify no loss of data
        instance_model_json2 = instance_model.to_dict()
        assert instance_model_json2 == instance_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceAction
#-----------------------------------------------------------------------------
class TestInstanceAction():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceAction
    #--------------------------------------------------------
    def test_instance_action_serialization(self):

        # Construct a json representation of a InstanceAction model
        instance_action_model_json = {}
        instance_action_model_json[
            'completed_at'] = '2020-01-28T18:40:40.123456Z'
        instance_action_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        instance_action_model_json['force'] = True
        instance_action_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/actions/109a1b6e-1242-4de1-be44-38705e9474ed'
        instance_action_model_json[
            'id'] = '109a1b6e-1242-4de1-be44-38705e9474ed'
        instance_action_model_json['started_at'] = '2020-01-28T18:40:40.123456Z'
        instance_action_model_json['status'] = 'completed'
        instance_action_model_json['type'] = 'reboot'

        # Construct a model instance of InstanceAction by calling from_dict on the json representation
        instance_action_model = InstanceAction.from_dict(
            instance_action_model_json)
        assert instance_action_model != False

        # Construct a model instance of InstanceAction by calling from_dict on the json representation
        instance_action_model_dict = InstanceAction.from_dict(
            instance_action_model_json).__dict__
        instance_action_model2 = InstanceAction(**instance_action_model_dict)

        # Verify the model instances are equivalent
        assert instance_action_model == instance_action_model2

        # Convert model instance back to dict and verify no loss of data
        instance_action_model_json2 = instance_action_model.to_dict()
        assert instance_action_model_json2 == instance_action_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceCollection
#-----------------------------------------------------------------------------
class TestInstanceCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceCollection
    #--------------------------------------------------------
    def test_instance_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        volume_attachment_device_model = {}  # VolumeAttachmentDevice
        volume_attachment_device_model[
            'id'] = '80b3e36e-41f4-40e9-bd56-beae81792a68'

        volume_reference_model = {}  # VolumeReference
        volume_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model['id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model['name'] = 'my-volume'

        image_reference_model = {}  # ImageReference
        image_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_reference_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_reference_model['name'] = 'my-image'

        instance_gpu_model = {}  # InstanceGPU
        instance_gpu_model['count'] = 1
        instance_gpu_model['manufacturer'] = 'nvidia'
        instance_gpu_model['memory'] = 1
        instance_gpu_model['model'] = 'Tesla V100'

        instance_profile_reference_model = {}  # InstanceProfileReference
        instance_profile_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16'
        instance_profile_reference_model['name'] = 'bc1-4x16'

        instance_vcpu_model = {}  # InstanceVCPU
        instance_vcpu_model['architecture'] = 'amd64'
        instance_vcpu_model['count'] = 4

        network_interface_instance_context_reference_model = {
        }  # NetworkInterfaceInstanceContextReference
        network_interface_instance_context_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_instance_context_reference_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_instance_context_reference_model[
            'name'] = 'my-network-interface'
        network_interface_instance_context_reference_model[
            'primary_ipv4_address'] = '192.168.3.4'
        network_interface_instance_context_reference_model[
            'resource_type'] = 'network_interface'
        network_interface_instance_context_reference_model[
            'subnet'] = subnet_reference_model

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        volume_attachment_reference_instance_context_model = {
        }  # VolumeAttachmentReferenceInstanceContext
        volume_attachment_reference_instance_context_model[
            'device'] = volume_attachment_device_model
        volume_attachment_reference_instance_context_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_instance_context_model[
            'id'] = '82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_instance_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_reference_instance_context_model[
            'volume'] = volume_reference_model

        zone_reference_model = {}  # ZoneReference
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model['name'] = 'us-south-1'

        instance_model = {}  # Instance
        instance_model['bandwidth'] = 1000
        instance_model[
            'boot_volume_attachment'] = volume_attachment_reference_instance_context_model
        instance_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        instance_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_model['gpu'] = instance_gpu_model
        instance_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_model['id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_model['image'] = image_reference_model
        instance_model['memory'] = 8
        instance_model['name'] = 'my-instance'
        instance_model['network_interfaces'] = [
            network_interface_instance_context_reference_model
        ]
        instance_model[
            'primary_network_interface'] = network_interface_instance_context_reference_model
        instance_model['profile'] = instance_profile_reference_model
        instance_model['resource_group'] = resource_group_reference_model
        instance_model['status'] = 'failed'
        instance_model['vcpu'] = instance_vcpu_model
        instance_model['volume_attachments'] = [
            volume_attachment_reference_instance_context_model
        ]
        instance_model['vpc'] = vpc_reference_model
        instance_model['zone'] = zone_reference_model

        instance_collection_first_model = {}  # InstanceCollectionFirst
        instance_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances?limit=20'

        instance_collection_next_model = {}  # InstanceCollectionNext
        instance_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a json representation of a InstanceCollection model
        instance_collection_model_json = {}
        instance_collection_model_json[
            'first'] = instance_collection_first_model
        instance_collection_model_json['instances'] = [instance_model]
        instance_collection_model_json['limit'] = 20
        instance_collection_model_json['next'] = instance_collection_next_model
        instance_collection_model_json['total_count'] = 132

        # Construct a model instance of InstanceCollection by calling from_dict on the json representation
        instance_collection_model = InstanceCollection.from_dict(
            instance_collection_model_json)
        assert instance_collection_model != False

        # Construct a model instance of InstanceCollection by calling from_dict on the json representation
        instance_collection_model_dict = InstanceCollection.from_dict(
            instance_collection_model_json).__dict__
        instance_collection_model2 = InstanceCollection(
            **instance_collection_model_dict)

        # Verify the model instances are equivalent
        assert instance_collection_model == instance_collection_model2

        # Convert model instance back to dict and verify no loss of data
        instance_collection_model_json2 = instance_collection_model.to_dict()
        assert instance_collection_model_json2 == instance_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceCollectionFirst
#-----------------------------------------------------------------------------
class TestInstanceCollectionFirst():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceCollectionFirst
    #--------------------------------------------------------
    def test_instance_collection_first_serialization(self):

        # Construct a json representation of a InstanceCollectionFirst model
        instance_collection_first_model_json = {}
        instance_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances?limit=20'

        # Construct a model instance of InstanceCollectionFirst by calling from_dict on the json representation
        instance_collection_first_model = InstanceCollectionFirst.from_dict(
            instance_collection_first_model_json)
        assert instance_collection_first_model != False

        # Construct a model instance of InstanceCollectionFirst by calling from_dict on the json representation
        instance_collection_first_model_dict = InstanceCollectionFirst.from_dict(
            instance_collection_first_model_json).__dict__
        instance_collection_first_model2 = InstanceCollectionFirst(
            **instance_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert instance_collection_first_model == instance_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        instance_collection_first_model_json2 = instance_collection_first_model.to_dict(
        )
        assert instance_collection_first_model_json2 == instance_collection_first_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceCollectionNext
#-----------------------------------------------------------------------------
class TestInstanceCollectionNext():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceCollectionNext
    #--------------------------------------------------------
    def test_instance_collection_next_serialization(self):

        # Construct a json representation of a InstanceCollectionNext model
        instance_collection_next_model_json = {}
        instance_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of InstanceCollectionNext by calling from_dict on the json representation
        instance_collection_next_model = InstanceCollectionNext.from_dict(
            instance_collection_next_model_json)
        assert instance_collection_next_model != False

        # Construct a model instance of InstanceCollectionNext by calling from_dict on the json representation
        instance_collection_next_model_dict = InstanceCollectionNext.from_dict(
            instance_collection_next_model_json).__dict__
        instance_collection_next_model2 = InstanceCollectionNext(
            **instance_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert instance_collection_next_model == instance_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        instance_collection_next_model_json2 = instance_collection_next_model.to_dict(
        )
        assert instance_collection_next_model_json2 == instance_collection_next_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceGPU
#-----------------------------------------------------------------------------
class TestInstanceGPU():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceGPU
    #--------------------------------------------------------
    def test_instance_gpu_serialization(self):

        # Construct a json representation of a InstanceGPU model
        instance_gpu_model_json = {}
        instance_gpu_model_json['count'] = 1
        instance_gpu_model_json['manufacturer'] = 'nvidia'
        instance_gpu_model_json['memory'] = 1
        instance_gpu_model_json['model'] = 'Tesla V100'

        # Construct a model instance of InstanceGPU by calling from_dict on the json representation
        instance_gpu_model = InstanceGPU.from_dict(instance_gpu_model_json)
        assert instance_gpu_model != False

        # Construct a model instance of InstanceGPU by calling from_dict on the json representation
        instance_gpu_model_dict = InstanceGPU.from_dict(
            instance_gpu_model_json).__dict__
        instance_gpu_model2 = InstanceGPU(**instance_gpu_model_dict)

        # Verify the model instances are equivalent
        assert instance_gpu_model == instance_gpu_model2

        # Convert model instance back to dict and verify no loss of data
        instance_gpu_model_json2 = instance_gpu_model.to_dict()
        assert instance_gpu_model_json2 == instance_gpu_model_json


# #-----------------------------------------------------------------------------
# # Test Class for InstanceInitialization
# #-----------------------------------------------------------------------------
# class TestInstanceInitialization():

#     #--------------------------------------------------------
#     # Test serialization/deserialization for InstanceInitialization
#     #--------------------------------------------------------
#     def test_instance_initialization_serialization(self):

#         # Construct dict forms of any model objects needed in order to build this model.

#         key_reference_instance_initialization_context_model = {
#         }  # KeyReferenceInstanceInitializationContext
#         key_reference_instance_initialization_context_model[
#             'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803'
#         key_reference_instance_initialization_context_model[
#             'fingerprint'] = 'SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY'
#         key_reference_instance_initialization_context_model[
#             'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803'
#         key_reference_instance_initialization_context_model[
#             'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'
#         key_reference_instance_initialization_context_model['name'] = 'my-key'

#         instance_initialization_password_model = {
#         }  # InstanceInitializationPassword
#         instance_initialization_password_model[
#             'encrypted_password'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
#         instance_initialization_password_model[
#             'encryption_key'] = key_reference_instance_initialization_context_model

#         # Construct a json representation of a InstanceInitialization model
#         instance_initialization_model_json = {}
#         instance_initialization_model_json['keys'] = [
#             key_reference_instance_initialization_context_model
#         ]
#         instance_initialization_model_json[
#             'password'] = instance_initialization_password_model

#         # Construct a model instance of InstanceInitialization by calling from_dict on the json representation
#         instance_initialization_model = InstanceInitialization.from_dict(
#             instance_initialization_model_json)
#         assert instance_initialization_model != False

#         # Construct a model instance of InstanceInitialization by calling from_dict on the json representation
#         instance_initialization_model_dict = InstanceInitialization.from_dict(
#             instance_initialization_model_json).__dict__
#         instance_initialization_model2 = InstanceInitialization(
#             **instance_initialization_model_dict)

#         # Verify the model instances are equivalent
#         assert instance_initialization_model == instance_initialization_model2

#         # Convert model instance back to dict and verify no loss of data
#         instance_initialization_model_json2 = instance_initialization_model.to_dict(
#         )
#         assert instance_initialization_model_json2 == instance_initialization_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceInitializationPassword
#-----------------------------------------------------------------------------
class TestInstanceInitializationPassword():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceInitializationPassword
    #--------------------------------------------------------
    def test_instance_initialization_password_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        key_reference_instance_initialization_context_model = {
        }  # KeyReferenceInstanceInitializationContext
        key_reference_instance_initialization_context_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_reference_instance_initialization_context_model[
            'fingerprint'] = 'SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY'
        key_reference_instance_initialization_context_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_reference_instance_initialization_context_model[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_reference_instance_initialization_context_model['name'] = 'my-key'

        # Construct a json representation of a InstanceInitializationPassword model
        instance_initialization_password_model_json = {}
        instance_initialization_password_model_json[
            'encrypted_password'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        instance_initialization_password_model_json[
            'encryption_key'] = key_reference_instance_initialization_context_model

        # Construct a model instance of InstanceInitializationPassword by calling from_dict on the json representation
        instance_initialization_password_model = InstanceInitializationPassword.from_dict(
            instance_initialization_password_model_json)
        assert instance_initialization_password_model != False

        # Construct a model instance of InstanceInitializationPassword by calling from_dict on the json representation
        instance_initialization_password_model_dict = InstanceInitializationPassword.from_dict(
            instance_initialization_password_model_json).__dict__
        instance_initialization_password_model2 = InstanceInitializationPassword(
            **instance_initialization_password_model_dict)

        # Verify the model instances are equivalent
        assert instance_initialization_password_model == instance_initialization_password_model2

        # Convert model instance back to dict and verify no loss of data
        instance_initialization_password_model_json2 = instance_initialization_password_model.to_dict(
        )
        assert instance_initialization_password_model_json2 == instance_initialization_password_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfile
#-----------------------------------------------------------------------------
class TestInstanceProfile():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfile
    #--------------------------------------------------------
    def test_instance_profile_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        instance_profile_bandwidth_model = {}  # InstanceProfileBandwidth
        instance_profile_bandwidth_model['type'] = 'fixed'
        instance_profile_bandwidth_model['value'] = 20000

        instance_profile_memory_model = {}  # InstanceProfileMemory
        instance_profile_memory_model['type'] = 'fixed'
        instance_profile_memory_model['value'] = 16

        instance_profile_os_architecture_model = {
        }  # InstanceProfileOSArchitecture
        instance_profile_os_architecture_model['default'] = 'testString'
        instance_profile_os_architecture_model['type'] = 'enum'
        instance_profile_os_architecture_model['values'] = ['amd64']

        instance_profile_port_speed_model = {}  # InstanceProfilePortSpeed
        instance_profile_port_speed_model['type'] = 'fixed'
        instance_profile_port_speed_model['value'] = 1000

        instance_profile_vcpu_model = {}  # InstanceProfileVCPU
        instance_profile_vcpu_model['type'] = 'fixed'
        instance_profile_vcpu_model['value'] = 16

        instance_profile_vcpu_architecture_model = {
        }  # InstanceProfileVCPUArchitecture
        instance_profile_vcpu_architecture_model['default'] = 'testString'
        instance_profile_vcpu_architecture_model['type'] = 'fixed'
        instance_profile_vcpu_architecture_model['value'] = 'amd64'

        # Construct a json representation of a InstanceProfile model
        instance_profile_model_json = {}
        instance_profile_model_json[
            'bandwidth'] = instance_profile_bandwidth_model
        instance_profile_model_json['family'] = 'balanced'
        instance_profile_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16'
        instance_profile_model_json['memory'] = instance_profile_memory_model
        instance_profile_model_json['name'] = 'bc1-4x16'
        instance_profile_model_json[
            'os_architecture'] = instance_profile_os_architecture_model
        instance_profile_model_json[
            'port_speed'] = instance_profile_port_speed_model
        instance_profile_model_json[
            'vcpu_architecture'] = instance_profile_vcpu_architecture_model
        instance_profile_model_json['vcpu_count'] = instance_profile_vcpu_model

        # Construct a model instance of InstanceProfile by calling from_dict on the json representation
        instance_profile_model = InstanceProfile.from_dict(
            instance_profile_model_json)
        assert instance_profile_model != False

        # Construct a model instance of InstanceProfile by calling from_dict on the json representation
        instance_profile_model_dict = InstanceProfile.from_dict(
            instance_profile_model_json).__dict__
        instance_profile_model2 = InstanceProfile(**instance_profile_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_model == instance_profile_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_model_json2 = instance_profile_model.to_dict()
        assert instance_profile_model_json2 == instance_profile_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfileCollection
#-----------------------------------------------------------------------------
class TestInstanceProfileCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfileCollection
    #--------------------------------------------------------
    def test_instance_profile_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        instance_profile_bandwidth_model = {}  # InstanceProfileBandwidth
        instance_profile_bandwidth_model['type'] = 'fixed'
        instance_profile_bandwidth_model['value'] = 20000

        instance_profile_memory_model = {}  # InstanceProfileMemory
        instance_profile_memory_model['type'] = 'fixed'
        instance_profile_memory_model['value'] = 16

        instance_profile_os_architecture_model = {
        }  # InstanceProfileOSArchitecture
        instance_profile_os_architecture_model['default'] = 'testString'
        instance_profile_os_architecture_model['type'] = 'enum'
        instance_profile_os_architecture_model['values'] = ['amd64']

        instance_profile_port_speed_model = {}  # InstanceProfilePortSpeed
        instance_profile_port_speed_model['type'] = 'fixed'
        instance_profile_port_speed_model['value'] = 1000

        instance_profile_vcpu_model = {}  # InstanceProfileVCPU
        instance_profile_vcpu_model['type'] = 'fixed'
        instance_profile_vcpu_model['value'] = 16

        instance_profile_vcpu_architecture_model = {
        }  # InstanceProfileVCPUArchitecture
        instance_profile_vcpu_architecture_model['default'] = 'testString'
        instance_profile_vcpu_architecture_model['type'] = 'fixed'
        instance_profile_vcpu_architecture_model['value'] = 'amd64'

        instance_profile_model = {}  # InstanceProfile
        instance_profile_model['bandwidth'] = instance_profile_bandwidth_model
        instance_profile_model['family'] = 'balanced'
        instance_profile_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16'
        instance_profile_model['memory'] = instance_profile_memory_model
        instance_profile_model['name'] = 'bc1-4x16'
        instance_profile_model[
            'os_architecture'] = instance_profile_os_architecture_model
        instance_profile_model['port_speed'] = instance_profile_port_speed_model
        instance_profile_model[
            'vcpu_architecture'] = instance_profile_vcpu_architecture_model
        instance_profile_model['vcpu_count'] = instance_profile_vcpu_model

        # Construct a json representation of a InstanceProfileCollection model
        instance_profile_collection_model_json = {}
        instance_profile_collection_model_json['profiles'] = [
            instance_profile_model
        ]

        # Construct a model instance of InstanceProfileCollection by calling from_dict on the json representation
        instance_profile_collection_model = InstanceProfileCollection.from_dict(
            instance_profile_collection_model_json)
        assert instance_profile_collection_model != False

        # Construct a model instance of InstanceProfileCollection by calling from_dict on the json representation
        instance_profile_collection_model_dict = InstanceProfileCollection.from_dict(
            instance_profile_collection_model_json).__dict__
        instance_profile_collection_model2 = InstanceProfileCollection(
            **instance_profile_collection_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_collection_model == instance_profile_collection_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_collection_model_json2 = instance_profile_collection_model.to_dict(
        )
        assert instance_profile_collection_model_json2 == instance_profile_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfileOSArchitecture
#-----------------------------------------------------------------------------
class TestInstanceProfileOSArchitecture():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfileOSArchitecture
    #--------------------------------------------------------
    def test_instance_profile_os_architecture_serialization(self):

        # Construct a json representation of a InstanceProfileOSArchitecture model
        instance_profile_os_architecture_model_json = {}
        instance_profile_os_architecture_model_json['default'] = 'testString'
        instance_profile_os_architecture_model_json['type'] = 'enum'
        instance_profile_os_architecture_model_json['values'] = ['amd64']

        # Construct a model instance of InstanceProfileOSArchitecture by calling from_dict on the json representation
        instance_profile_os_architecture_model = InstanceProfileOSArchitecture.from_dict(
            instance_profile_os_architecture_model_json)
        assert instance_profile_os_architecture_model != False

        # Construct a model instance of InstanceProfileOSArchitecture by calling from_dict on the json representation
        instance_profile_os_architecture_model_dict = InstanceProfileOSArchitecture.from_dict(
            instance_profile_os_architecture_model_json).__dict__
        instance_profile_os_architecture_model2 = InstanceProfileOSArchitecture(
            **instance_profile_os_architecture_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_os_architecture_model == instance_profile_os_architecture_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_os_architecture_model_json2 = instance_profile_os_architecture_model.to_dict(
        )
        assert instance_profile_os_architecture_model_json2 == instance_profile_os_architecture_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfileReference
#-----------------------------------------------------------------------------
class TestInstanceProfileReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfileReference
    #--------------------------------------------------------
    def test_instance_profile_reference_serialization(self):

        # Construct a json representation of a InstanceProfileReference model
        instance_profile_reference_model_json = {}
        instance_profile_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16'
        instance_profile_reference_model_json['name'] = 'bc1-4x16'

        # Construct a model instance of InstanceProfileReference by calling from_dict on the json representation
        instance_profile_reference_model = InstanceProfileReference.from_dict(
            instance_profile_reference_model_json)
        assert instance_profile_reference_model != False

        # Construct a model instance of InstanceProfileReference by calling from_dict on the json representation
        instance_profile_reference_model_dict = InstanceProfileReference.from_dict(
            instance_profile_reference_model_json).__dict__
        instance_profile_reference_model2 = InstanceProfileReference(
            **instance_profile_reference_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_reference_model == instance_profile_reference_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_reference_model_json2 = instance_profile_reference_model.to_dict(
        )
        assert instance_profile_reference_model_json2 == instance_profile_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfileVCPUArchitecture
#-----------------------------------------------------------------------------
class TestInstanceProfileVCPUArchitecture():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfileVCPUArchitecture
    #--------------------------------------------------------
    def test_instance_profile_vcpu_architecture_serialization(self):

        # Construct a json representation of a InstanceProfileVCPUArchitecture model
        instance_profile_vcpu_architecture_model_json = {}
        instance_profile_vcpu_architecture_model_json['default'] = 'testString'
        instance_profile_vcpu_architecture_model_json['type'] = 'fixed'
        instance_profile_vcpu_architecture_model_json['value'] = 'amd64'

        # Construct a model instance of InstanceProfileVCPUArchitecture by calling from_dict on the json representation
        instance_profile_vcpu_architecture_model = InstanceProfileVCPUArchitecture.from_dict(
            instance_profile_vcpu_architecture_model_json)
        assert instance_profile_vcpu_architecture_model != False

        # Construct a model instance of InstanceProfileVCPUArchitecture by calling from_dict on the json representation
        instance_profile_vcpu_architecture_model_dict = InstanceProfileVCPUArchitecture.from_dict(
            instance_profile_vcpu_architecture_model_json).__dict__
        instance_profile_vcpu_architecture_model2 = InstanceProfileVCPUArchitecture(
            **instance_profile_vcpu_architecture_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_vcpu_architecture_model == instance_profile_vcpu_architecture_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_vcpu_architecture_model_json2 = instance_profile_vcpu_architecture_model.to_dict(
        )
        assert instance_profile_vcpu_architecture_model_json2 == instance_profile_vcpu_architecture_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceReference
#-----------------------------------------------------------------------------
class TestInstanceReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceReference
    #--------------------------------------------------------
    def test_instance_reference_serialization(self):

        # Construct a json representation of a InstanceReference model
        instance_reference_model_json = {}
        instance_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model_json[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model_json['name'] = 'my-instance'

        # Construct a model instance of InstanceReference by calling from_dict on the json representation
        instance_reference_model = InstanceReference.from_dict(
            instance_reference_model_json)
        assert instance_reference_model != False

        # Construct a model instance of InstanceReference by calling from_dict on the json representation
        instance_reference_model_dict = InstanceReference.from_dict(
            instance_reference_model_json).__dict__
        instance_reference_model2 = InstanceReference(
            **instance_reference_model_dict)

        # Verify the model instances are equivalent
        assert instance_reference_model == instance_reference_model2

        # Convert model instance back to dict and verify no loss of data
        instance_reference_model_json2 = instance_reference_model.to_dict()
        assert instance_reference_model_json2 == instance_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceVCPU
#-----------------------------------------------------------------------------
class TestInstanceVCPU():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceVCPU
    #--------------------------------------------------------
    def test_instance_vcpu_serialization(self):

        # Construct a json representation of a InstanceVCPU model
        instance_vcpu_model_json = {}
        instance_vcpu_model_json['architecture'] = 'amd64'
        instance_vcpu_model_json['count'] = 4

        # Construct a model instance of InstanceVCPU by calling from_dict on the json representation
        instance_vcpu_model = InstanceVCPU.from_dict(instance_vcpu_model_json)
        assert instance_vcpu_model != False

        # Construct a model instance of InstanceVCPU by calling from_dict on the json representation
        instance_vcpu_model_dict = InstanceVCPU.from_dict(
            instance_vcpu_model_json).__dict__
        instance_vcpu_model2 = InstanceVCPU(**instance_vcpu_model_dict)

        # Verify the model instances are equivalent
        assert instance_vcpu_model == instance_vcpu_model2

        # Convert model instance back to dict and verify no loss of data
        instance_vcpu_model_json2 = instance_vcpu_model.to_dict()
        assert instance_vcpu_model_json2 == instance_vcpu_model_json


#-----------------------------------------------------------------------------
# Test Class for Key
#-----------------------------------------------------------------------------
class TestKey():

    #--------------------------------------------------------
    # Test serialization/deserialization for Key
    #--------------------------------------------------------
    def test_key_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        # Construct a json representation of a Key model
        key_model_json = {}
        key_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        key_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_model_json[
            'fingerprint'] = 'SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY'
        key_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_model_json['id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_model_json['length'] = 2048
        key_model_json['name'] = 'my-key'
        key_model_json[
            'public_key'] = 'AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En'
        key_model_json['resource_group'] = resource_group_reference_model
        key_model_json['type'] = 'rsa'

        # Construct a model instance of Key by calling from_dict on the json representation
        key_model = Key.from_dict(key_model_json)
        assert key_model != False

        # Construct a model instance of Key by calling from_dict on the json representation
        key_model_dict = Key.from_dict(key_model_json).__dict__
        key_model2 = Key(**key_model_dict)

        # Verify the model instances are equivalent
        assert key_model == key_model2

        # Convert model instance back to dict and verify no loss of data
        key_model_json2 = key_model.to_dict()
        assert key_model_json2 == key_model_json


#-----------------------------------------------------------------------------
# Test Class for KeyCollection
#-----------------------------------------------------------------------------
class TestKeyCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for KeyCollection
    #--------------------------------------------------------
    def test_key_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        key_model = {}  # Key
        key_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        key_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_model[
            'fingerprint'] = 'SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY'
        key_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_model['id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_model['length'] = 2048
        key_model['name'] = 'my-key'
        key_model[
            'public_key'] = 'AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En'
        key_model['resource_group'] = resource_group_reference_model
        key_model['type'] = 'rsa'

        # Construct a json representation of a KeyCollection model
        key_collection_model_json = {}
        key_collection_model_json['keys'] = [key_model]

        # Construct a model instance of KeyCollection by calling from_dict on the json representation
        key_collection_model = KeyCollection.from_dict(
            key_collection_model_json)
        assert key_collection_model != False

        # Construct a model instance of KeyCollection by calling from_dict on the json representation
        key_collection_model_dict = KeyCollection.from_dict(
            key_collection_model_json).__dict__
        key_collection_model2 = KeyCollection(**key_collection_model_dict)

        # Verify the model instances are equivalent
        assert key_collection_model == key_collection_model2

        # Convert model instance back to dict and verify no loss of data
        key_collection_model_json2 = key_collection_model.to_dict()
        assert key_collection_model_json2 == key_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancer
#-----------------------------------------------------------------------------
class TestLoadBalancer():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancer
    #--------------------------------------------------------
    def test_load_balancer_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        ip_model = {}  # IP
        ip_model['address'] = '192.168.3.4'

        load_balancer_listener_reference_model = {
        }  # LoadBalancerListenerReference
        load_balancer_listener_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        load_balancer_pool_reference_model = {}  # LoadBalancerPoolReference
        load_balancer_pool_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model['name'] = 'my-load-balancer-pool'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        # Construct a json representation of a LoadBalancer model
        load_balancer_model_json = {}
        load_balancer_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727'
        load_balancer_model_json[
            'hostname'] = 'myloadbalancer-123456-us-south-1.lb.bluemix.net'
        load_balancer_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727'
        load_balancer_model_json['id'] = 'dd754295-e9e0-4c9d-bf6c-58fbc59e5727'
        load_balancer_model_json['is_public'] = True
        load_balancer_model_json['listeners'] = [
            load_balancer_listener_reference_model
        ]
        load_balancer_model_json['name'] = 'my-load-balancer'
        load_balancer_model_json['operating_status'] = 'offline'
        load_balancer_model_json['pools'] = [load_balancer_pool_reference_model]
        load_balancer_model_json['private_ips'] = [ip_model]
        load_balancer_model_json['provisioning_status'] = 'active'
        load_balancer_model_json['public_ips'] = [ip_model]
        load_balancer_model_json[
            'resource_group'] = resource_group_reference_model
        load_balancer_model_json['subnets'] = [subnet_reference_model]

        # Construct a model instance of LoadBalancer by calling from_dict on the json representation
        load_balancer_model = LoadBalancer.from_dict(load_balancer_model_json)
        assert load_balancer_model != False

        # Construct a model instance of LoadBalancer by calling from_dict on the json representation
        load_balancer_model_dict = LoadBalancer.from_dict(
            load_balancer_model_json).__dict__
        load_balancer_model2 = LoadBalancer(**load_balancer_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_model == load_balancer_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_model_json2 = load_balancer_model.to_dict()
        assert load_balancer_model_json2 == load_balancer_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerCollection
#-----------------------------------------------------------------------------
class TestLoadBalancerCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerCollection
    #--------------------------------------------------------
    def test_load_balancer_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        ip_model = {}  # IP
        ip_model['address'] = '192.168.3.4'

        load_balancer_listener_reference_model = {
        }  # LoadBalancerListenerReference
        load_balancer_listener_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        load_balancer_pool_reference_model = {}  # LoadBalancerPoolReference
        load_balancer_pool_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model['name'] = 'my-load-balancer-pool'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        load_balancer_model = {}  # LoadBalancer
        load_balancer_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727'
        load_balancer_model[
            'hostname'] = 'myloadbalancer-123456-us-south-1.lb.bluemix.net'
        load_balancer_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727'
        load_balancer_model['id'] = 'dd754295-e9e0-4c9d-bf6c-58fbc59e5727'
        load_balancer_model['is_public'] = True
        load_balancer_model['listeners'] = [
            load_balancer_listener_reference_model
        ]
        load_balancer_model['name'] = 'my-load-balancer'
        load_balancer_model['operating_status'] = 'offline'
        load_balancer_model['pools'] = [load_balancer_pool_reference_model]
        load_balancer_model['private_ips'] = [ip_model]
        load_balancer_model['provisioning_status'] = 'active'
        load_balancer_model['public_ips'] = [ip_model]
        load_balancer_model['resource_group'] = resource_group_reference_model
        load_balancer_model['subnets'] = [subnet_reference_model]

        # Construct a json representation of a LoadBalancerCollection model
        load_balancer_collection_model_json = {}
        load_balancer_collection_model_json['load_balancers'] = [
            load_balancer_model
        ]

        # Construct a model instance of LoadBalancerCollection by calling from_dict on the json representation
        load_balancer_collection_model = LoadBalancerCollection.from_dict(
            load_balancer_collection_model_json)
        assert load_balancer_collection_model != False

        # Construct a model instance of LoadBalancerCollection by calling from_dict on the json representation
        load_balancer_collection_model_dict = LoadBalancerCollection.from_dict(
            load_balancer_collection_model_json).__dict__
        load_balancer_collection_model2 = LoadBalancerCollection(
            **load_balancer_collection_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_collection_model == load_balancer_collection_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_collection_model_json2 = load_balancer_collection_model.to_dict(
        )
        assert load_balancer_collection_model_json2 == load_balancer_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListener
#-----------------------------------------------------------------------------
class TestLoadBalancerListener():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListener
    #--------------------------------------------------------
    def test_load_balancer_listener_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        certificate_instance_reference_model = {
        }  # CertificateInstanceReference
        certificate_instance_reference_model[
            'crn'] = 'crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758'

        load_balancer_listener_policy_reference_model = {
        }  # LoadBalancerListenerPolicyReference
        load_balancer_listener_policy_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278'
        load_balancer_listener_policy_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        load_balancer_pool_reference_model = {}  # LoadBalancerPoolReference
        load_balancer_pool_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model['name'] = 'my-load-balancer-pool'

        # Construct a json representation of a LoadBalancerListener model
        load_balancer_listener_model_json = {}
        load_balancer_listener_model_json[
            'certificate_instance'] = certificate_instance_reference_model
        load_balancer_listener_model_json['connection_limit'] = 2000
        load_balancer_listener_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_listener_model_json[
            'default_pool'] = load_balancer_pool_reference_model
        load_balancer_listener_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_model_json['policies'] = [
            load_balancer_listener_policy_reference_model
        ]
        load_balancer_listener_model_json['port'] = 443
        load_balancer_listener_model_json['protocol'] = 'http'
        load_balancer_listener_model_json['provisioning_status'] = 'active'

        # Construct a model instance of LoadBalancerListener by calling from_dict on the json representation
        load_balancer_listener_model = LoadBalancerListener.from_dict(
            load_balancer_listener_model_json)
        assert load_balancer_listener_model != False

        # Construct a model instance of LoadBalancerListener by calling from_dict on the json representation
        load_balancer_listener_model_dict = LoadBalancerListener.from_dict(
            load_balancer_listener_model_json).__dict__
        load_balancer_listener_model2 = LoadBalancerListener(
            **load_balancer_listener_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_model == load_balancer_listener_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_model_json2 = load_balancer_listener_model.to_dict(
        )
        assert load_balancer_listener_model_json2 == load_balancer_listener_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerCollection
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerCollection
    #--------------------------------------------------------
    def test_load_balancer_listener_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        certificate_instance_reference_model = {
        }  # CertificateInstanceReference
        certificate_instance_reference_model[
            'crn'] = 'crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758'

        load_balancer_listener_policy_reference_model = {
        }  # LoadBalancerListenerPolicyReference
        load_balancer_listener_policy_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278'
        load_balancer_listener_policy_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        load_balancer_pool_reference_model = {}  # LoadBalancerPoolReference
        load_balancer_pool_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model['name'] = 'my-load-balancer-pool'

        load_balancer_listener_model = {}  # LoadBalancerListener
        load_balancer_listener_model[
            'certificate_instance'] = certificate_instance_reference_model
        load_balancer_listener_model['connection_limit'] = 2000
        load_balancer_listener_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_listener_model[
            'default_pool'] = load_balancer_pool_reference_model
        load_balancer_listener_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_model['policies'] = [
            load_balancer_listener_policy_reference_model
        ]
        load_balancer_listener_model['port'] = 443
        load_balancer_listener_model['protocol'] = 'http'
        load_balancer_listener_model['provisioning_status'] = 'active'

        # Construct a json representation of a LoadBalancerListenerCollection model
        load_balancer_listener_collection_model_json = {}
        load_balancer_listener_collection_model_json['listeners'] = [
            load_balancer_listener_model
        ]

        # Construct a model instance of LoadBalancerListenerCollection by calling from_dict on the json representation
        load_balancer_listener_collection_model = LoadBalancerListenerCollection.from_dict(
            load_balancer_listener_collection_model_json)
        assert load_balancer_listener_collection_model != False

        # Construct a model instance of LoadBalancerListenerCollection by calling from_dict on the json representation
        load_balancer_listener_collection_model_dict = LoadBalancerListenerCollection.from_dict(
            load_balancer_listener_collection_model_json).__dict__
        load_balancer_listener_collection_model2 = LoadBalancerListenerCollection(
            **load_balancer_listener_collection_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_collection_model == load_balancer_listener_collection_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_collection_model_json2 = load_balancer_listener_collection_model.to_dict(
        )
        assert load_balancer_listener_collection_model_json2 == load_balancer_listener_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerPolicy
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerPolicy():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerPolicy
    #--------------------------------------------------------
    def test_load_balancer_listener_policy_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_listener_policy_rule_reference_model = {
        }  # LoadBalancerListenerPolicyRuleReference
        load_balancer_listener_policy_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762'
        load_balancer_listener_policy_rule_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        load_balancer_listener_policy_target_reference_model = {
        }  # LoadBalancerListenerPolicyTargetReference
        load_balancer_listener_policy_target_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_target_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_target_reference_model[
            'name'] = 'my-load-balancer-pool'

        # Construct a json representation of a LoadBalancerListenerPolicy model
        load_balancer_listener_policy_model_json = {}
        load_balancer_listener_policy_model_json['action'] = 'forward'
        load_balancer_listener_policy_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_listener_policy_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278'
        load_balancer_listener_policy_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_model_json['name'] = 'my-policy'
        load_balancer_listener_policy_model_json['priority'] = 5
        load_balancer_listener_policy_model_json[
            'provisioning_status'] = 'active'
        load_balancer_listener_policy_model_json['rules'] = [
            load_balancer_listener_policy_rule_reference_model
        ]
        load_balancer_listener_policy_model_json[
            'target'] = load_balancer_listener_policy_target_reference_model

        # Construct a model instance of LoadBalancerListenerPolicy by calling from_dict on the json representation
        load_balancer_listener_policy_model = LoadBalancerListenerPolicy.from_dict(
            load_balancer_listener_policy_model_json)
        assert load_balancer_listener_policy_model != False

        # Construct a model instance of LoadBalancerListenerPolicy by calling from_dict on the json representation
        load_balancer_listener_policy_model_dict = LoadBalancerListenerPolicy.from_dict(
            load_balancer_listener_policy_model_json).__dict__
        load_balancer_listener_policy_model2 = LoadBalancerListenerPolicy(
            **load_balancer_listener_policy_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_model == load_balancer_listener_policy_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_model_json2 = load_balancer_listener_policy_model.to_dict(
        )
        assert load_balancer_listener_policy_model_json2 == load_balancer_listener_policy_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerPolicyCollection
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerPolicyCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerPolicyCollection
    #--------------------------------------------------------
    def test_load_balancer_listener_policy_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_listener_policy_rule_reference_model = {
        }  # LoadBalancerListenerPolicyRuleReference
        load_balancer_listener_policy_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762'
        load_balancer_listener_policy_rule_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        load_balancer_listener_policy_target_reference_model = {
        }  # LoadBalancerListenerPolicyTargetReference
        load_balancer_listener_policy_target_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_target_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_target_reference_model[
            'name'] = 'my-load-balancer-pool'

        load_balancer_listener_policy_model = {}  # LoadBalancerListenerPolicy
        load_balancer_listener_policy_model['action'] = 'forward'
        load_balancer_listener_policy_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_listener_policy_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278'
        load_balancer_listener_policy_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_model['name'] = 'my-policy'
        load_balancer_listener_policy_model['priority'] = 5
        load_balancer_listener_policy_model['provisioning_status'] = 'active'
        load_balancer_listener_policy_model['rules'] = [
            load_balancer_listener_policy_rule_reference_model
        ]
        load_balancer_listener_policy_model[
            'target'] = load_balancer_listener_policy_target_reference_model

        # Construct a json representation of a LoadBalancerListenerPolicyCollection model
        load_balancer_listener_policy_collection_model_json = {}
        load_balancer_listener_policy_collection_model_json['policies'] = [
            load_balancer_listener_policy_model
        ]

        # Construct a model instance of LoadBalancerListenerPolicyCollection by calling from_dict on the json representation
        load_balancer_listener_policy_collection_model = LoadBalancerListenerPolicyCollection.from_dict(
            load_balancer_listener_policy_collection_model_json)
        assert load_balancer_listener_policy_collection_model != False

        # Construct a model instance of LoadBalancerListenerPolicyCollection by calling from_dict on the json representation
        load_balancer_listener_policy_collection_model_dict = LoadBalancerListenerPolicyCollection.from_dict(
            load_balancer_listener_policy_collection_model_json).__dict__
        load_balancer_listener_policy_collection_model2 = LoadBalancerListenerPolicyCollection(
            **load_balancer_listener_policy_collection_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_collection_model == load_balancer_listener_policy_collection_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_collection_model_json2 = load_balancer_listener_policy_collection_model.to_dict(
        )
        assert load_balancer_listener_policy_collection_model_json2 == load_balancer_listener_policy_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerPolicyPrototype
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerPolicyPrototype():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerPolicyPrototype
    #--------------------------------------------------------
    def test_load_balancer_listener_policy_prototype_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_listener_policy_prototype_target_model = {
        }  # LoadBalancerListenerPolicyPrototypeTarget
        load_balancer_listener_policy_prototype_target_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        load_balancer_listener_policy_rule_prototype_model = {
        }  # LoadBalancerListenerPolicyRulePrototype
        load_balancer_listener_policy_rule_prototype_model[
            'condition'] = 'contains'
        load_balancer_listener_policy_rule_prototype_model[
            'field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_prototype_model['type'] = 'header'
        load_balancer_listener_policy_rule_prototype_model[
            'value'] = 'testString'

        # Construct a json representation of a LoadBalancerListenerPolicyPrototype model
        load_balancer_listener_policy_prototype_model_json = {}
        load_balancer_listener_policy_prototype_model_json['action'] = 'forward'
        load_balancer_listener_policy_prototype_model_json['name'] = 'my-policy'
        load_balancer_listener_policy_prototype_model_json['priority'] = 5
        load_balancer_listener_policy_prototype_model_json['rules'] = [
            load_balancer_listener_policy_rule_prototype_model
        ]
        load_balancer_listener_policy_prototype_model_json[
            'target'] = load_balancer_listener_policy_prototype_target_model

        # Construct a model instance of LoadBalancerListenerPolicyPrototype by calling from_dict on the json representation
        load_balancer_listener_policy_prototype_model = LoadBalancerListenerPolicyPrototype.from_dict(
            load_balancer_listener_policy_prototype_model_json)
        assert load_balancer_listener_policy_prototype_model != False

        # Construct a model instance of LoadBalancerListenerPolicyPrototype by calling from_dict on the json representation
        load_balancer_listener_policy_prototype_model_dict = LoadBalancerListenerPolicyPrototype.from_dict(
            load_balancer_listener_policy_prototype_model_json).__dict__
        load_balancer_listener_policy_prototype_model2 = LoadBalancerListenerPolicyPrototype(
            **load_balancer_listener_policy_prototype_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_prototype_model == load_balancer_listener_policy_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_prototype_model_json2 = load_balancer_listener_policy_prototype_model.to_dict(
        )
        assert load_balancer_listener_policy_prototype_model_json2 == load_balancer_listener_policy_prototype_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerPolicyReference
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerPolicyReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerPolicyReference
    #--------------------------------------------------------
    def test_load_balancer_listener_policy_reference_serialization(self):

        # Construct a json representation of a LoadBalancerListenerPolicyReference model
        load_balancer_listener_policy_reference_model_json = {}
        load_balancer_listener_policy_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278'
        load_balancer_listener_policy_reference_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a model instance of LoadBalancerListenerPolicyReference by calling from_dict on the json representation
        load_balancer_listener_policy_reference_model = LoadBalancerListenerPolicyReference.from_dict(
            load_balancer_listener_policy_reference_model_json)
        assert load_balancer_listener_policy_reference_model != False

        # Construct a model instance of LoadBalancerListenerPolicyReference by calling from_dict on the json representation
        load_balancer_listener_policy_reference_model_dict = LoadBalancerListenerPolicyReference.from_dict(
            load_balancer_listener_policy_reference_model_json).__dict__
        load_balancer_listener_policy_reference_model2 = LoadBalancerListenerPolicyReference(
            **load_balancer_listener_policy_reference_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_reference_model == load_balancer_listener_policy_reference_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_reference_model_json2 = load_balancer_listener_policy_reference_model.to_dict(
        )
        assert load_balancer_listener_policy_reference_model_json2 == load_balancer_listener_policy_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerPolicyRule
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerPolicyRule():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerPolicyRule
    #--------------------------------------------------------
    def test_load_balancer_listener_policy_rule_serialization(self):

        # Construct a json representation of a LoadBalancerListenerPolicyRule model
        load_balancer_listener_policy_rule_model_json = {}
        load_balancer_listener_policy_rule_model_json['condition'] = 'contains'
        load_balancer_listener_policy_rule_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_listener_policy_rule_model_json['field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762'
        load_balancer_listener_policy_rule_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_rule_model_json[
            'provisioning_status'] = 'active'
        load_balancer_listener_policy_rule_model_json['type'] = 'header'
        load_balancer_listener_policy_rule_model_json['value'] = 'testString'

        # Construct a model instance of LoadBalancerListenerPolicyRule by calling from_dict on the json representation
        load_balancer_listener_policy_rule_model = LoadBalancerListenerPolicyRule.from_dict(
            load_balancer_listener_policy_rule_model_json)
        assert load_balancer_listener_policy_rule_model != False

        # Construct a model instance of LoadBalancerListenerPolicyRule by calling from_dict on the json representation
        load_balancer_listener_policy_rule_model_dict = LoadBalancerListenerPolicyRule.from_dict(
            load_balancer_listener_policy_rule_model_json).__dict__
        load_balancer_listener_policy_rule_model2 = LoadBalancerListenerPolicyRule(
            **load_balancer_listener_policy_rule_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_rule_model == load_balancer_listener_policy_rule_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_rule_model_json2 = load_balancer_listener_policy_rule_model.to_dict(
        )
        assert load_balancer_listener_policy_rule_model_json2 == load_balancer_listener_policy_rule_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerPolicyRuleCollection
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerPolicyRuleCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerPolicyRuleCollection
    #--------------------------------------------------------
    def test_load_balancer_listener_policy_rule_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_listener_policy_rule_model = {
        }  # LoadBalancerListenerPolicyRule
        load_balancer_listener_policy_rule_model['condition'] = 'contains'
        load_balancer_listener_policy_rule_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_listener_policy_rule_model['field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762'
        load_balancer_listener_policy_rule_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_rule_model[
            'provisioning_status'] = 'active'
        load_balancer_listener_policy_rule_model['type'] = 'header'
        load_balancer_listener_policy_rule_model['value'] = 'testString'

        # Construct a json representation of a LoadBalancerListenerPolicyRuleCollection model
        load_balancer_listener_policy_rule_collection_model_json = {}
        load_balancer_listener_policy_rule_collection_model_json['rules'] = [
            load_balancer_listener_policy_rule_model
        ]

        # Construct a model instance of LoadBalancerListenerPolicyRuleCollection by calling from_dict on the json representation
        load_balancer_listener_policy_rule_collection_model = LoadBalancerListenerPolicyRuleCollection.from_dict(
            load_balancer_listener_policy_rule_collection_model_json)
        assert load_balancer_listener_policy_rule_collection_model != False

        # Construct a model instance of LoadBalancerListenerPolicyRuleCollection by calling from_dict on the json representation
        load_balancer_listener_policy_rule_collection_model_dict = LoadBalancerListenerPolicyRuleCollection.from_dict(
            load_balancer_listener_policy_rule_collection_model_json).__dict__
        load_balancer_listener_policy_rule_collection_model2 = LoadBalancerListenerPolicyRuleCollection(
            **load_balancer_listener_policy_rule_collection_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_rule_collection_model == load_balancer_listener_policy_rule_collection_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_rule_collection_model_json2 = load_balancer_listener_policy_rule_collection_model.to_dict(
        )
        assert load_balancer_listener_policy_rule_collection_model_json2 == load_balancer_listener_policy_rule_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerPolicyRulePrototype
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerPolicyRulePrototype():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerPolicyRulePrototype
    #--------------------------------------------------------
    def test_load_balancer_listener_policy_rule_prototype_serialization(self):

        # Construct a json representation of a LoadBalancerListenerPolicyRulePrototype model
        load_balancer_listener_policy_rule_prototype_model_json = {}
        load_balancer_listener_policy_rule_prototype_model_json[
            'condition'] = 'contains'
        load_balancer_listener_policy_rule_prototype_model_json[
            'field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_prototype_model_json[
            'type'] = 'header'
        load_balancer_listener_policy_rule_prototype_model_json[
            'value'] = 'testString'

        # Construct a model instance of LoadBalancerListenerPolicyRulePrototype by calling from_dict on the json representation
        load_balancer_listener_policy_rule_prototype_model = LoadBalancerListenerPolicyRulePrototype.from_dict(
            load_balancer_listener_policy_rule_prototype_model_json)
        assert load_balancer_listener_policy_rule_prototype_model != False

        # Construct a model instance of LoadBalancerListenerPolicyRulePrototype by calling from_dict on the json representation
        load_balancer_listener_policy_rule_prototype_model_dict = LoadBalancerListenerPolicyRulePrototype.from_dict(
            load_balancer_listener_policy_rule_prototype_model_json).__dict__
        load_balancer_listener_policy_rule_prototype_model2 = LoadBalancerListenerPolicyRulePrototype(
            **load_balancer_listener_policy_rule_prototype_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_rule_prototype_model == load_balancer_listener_policy_rule_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_rule_prototype_model_json2 = load_balancer_listener_policy_rule_prototype_model.to_dict(
        )
        assert load_balancer_listener_policy_rule_prototype_model_json2 == load_balancer_listener_policy_rule_prototype_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerPolicyRuleReference
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerPolicyRuleReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerPolicyRuleReference
    #--------------------------------------------------------
    def test_load_balancer_listener_policy_rule_reference_serialization(self):

        # Construct a json representation of a LoadBalancerListenerPolicyRuleReference model
        load_balancer_listener_policy_rule_reference_model_json = {}
        load_balancer_listener_policy_rule_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762'
        load_balancer_listener_policy_rule_reference_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a model instance of LoadBalancerListenerPolicyRuleReference by calling from_dict on the json representation
        load_balancer_listener_policy_rule_reference_model = LoadBalancerListenerPolicyRuleReference.from_dict(
            load_balancer_listener_policy_rule_reference_model_json)
        assert load_balancer_listener_policy_rule_reference_model != False

        # Construct a model instance of LoadBalancerListenerPolicyRuleReference by calling from_dict on the json representation
        load_balancer_listener_policy_rule_reference_model_dict = LoadBalancerListenerPolicyRuleReference.from_dict(
            load_balancer_listener_policy_rule_reference_model_json).__dict__
        load_balancer_listener_policy_rule_reference_model2 = LoadBalancerListenerPolicyRuleReference(
            **load_balancer_listener_policy_rule_reference_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_rule_reference_model == load_balancer_listener_policy_rule_reference_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_rule_reference_model_json2 = load_balancer_listener_policy_rule_reference_model.to_dict(
        )
        assert load_balancer_listener_policy_rule_reference_model_json2 == load_balancer_listener_policy_rule_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerPrototypeLoadBalancerContext
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerPrototypeLoadBalancerContext():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerPrototypeLoadBalancerContext
    #--------------------------------------------------------
    def test_load_balancer_listener_prototype_load_balancer_context_serialization(
            self):

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_pool_identity_by_name_model = {
        }  # LoadBalancerPoolIdentityByName
        load_balancer_pool_identity_by_name_model[
            'name'] = 'my-load-balancer-pool'

        # Construct a json representation of a LoadBalancerListenerPrototypeLoadBalancerContext model
        load_balancer_listener_prototype_load_balancer_context_model_json = {}
        load_balancer_listener_prototype_load_balancer_context_model_json[
            'connection_limit'] = 2000
        load_balancer_listener_prototype_load_balancer_context_model_json[
            'default_pool'] = load_balancer_pool_identity_by_name_model
        load_balancer_listener_prototype_load_balancer_context_model_json[
            'port'] = 443
        load_balancer_listener_prototype_load_balancer_context_model_json[
            'protocol'] = 'http'

        # Construct a model instance of LoadBalancerListenerPrototypeLoadBalancerContext by calling from_dict on the json representation
        load_balancer_listener_prototype_load_balancer_context_model = LoadBalancerListenerPrototypeLoadBalancerContext.from_dict(
            load_balancer_listener_prototype_load_balancer_context_model_json)
        assert load_balancer_listener_prototype_load_balancer_context_model != False

        # Construct a model instance of LoadBalancerListenerPrototypeLoadBalancerContext by calling from_dict on the json representation
        load_balancer_listener_prototype_load_balancer_context_model_dict = LoadBalancerListenerPrototypeLoadBalancerContext.from_dict(
            load_balancer_listener_prototype_load_balancer_context_model_json
        ).__dict__
        load_balancer_listener_prototype_load_balancer_context_model2 = LoadBalancerListenerPrototypeLoadBalancerContext(
            **load_balancer_listener_prototype_load_balancer_context_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_prototype_load_balancer_context_model == load_balancer_listener_prototype_load_balancer_context_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_prototype_load_balancer_context_model_json2 = load_balancer_listener_prototype_load_balancer_context_model.to_dict(
        )
        assert load_balancer_listener_prototype_load_balancer_context_model_json2 == load_balancer_listener_prototype_load_balancer_context_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerReference
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerReference
    #--------------------------------------------------------
    def test_load_balancer_listener_reference_serialization(self):

        # Construct a json representation of a LoadBalancerListenerReference model
        load_balancer_listener_reference_model_json = {}
        load_balancer_listener_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_reference_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a model instance of LoadBalancerListenerReference by calling from_dict on the json representation
        load_balancer_listener_reference_model = LoadBalancerListenerReference.from_dict(
            load_balancer_listener_reference_model_json)
        assert load_balancer_listener_reference_model != False

        # Construct a model instance of LoadBalancerListenerReference by calling from_dict on the json representation
        load_balancer_listener_reference_model_dict = LoadBalancerListenerReference.from_dict(
            load_balancer_listener_reference_model_json).__dict__
        load_balancer_listener_reference_model2 = LoadBalancerListenerReference(
            **load_balancer_listener_reference_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_reference_model == load_balancer_listener_reference_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_reference_model_json2 = load_balancer_listener_reference_model.to_dict(
        )
        assert load_balancer_listener_reference_model_json2 == load_balancer_listener_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPool
#-----------------------------------------------------------------------------
class TestLoadBalancerPool():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPool
    #--------------------------------------------------------
    def test_load_balancer_pool_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_pool_health_monitor_model = {
        }  # LoadBalancerPoolHealthMonitor
        load_balancer_pool_health_monitor_model['delay'] = 5
        load_balancer_pool_health_monitor_model['max_retries'] = 2
        load_balancer_pool_health_monitor_model['port'] = 22
        load_balancer_pool_health_monitor_model['timeout'] = 2
        load_balancer_pool_health_monitor_model['type'] = 'http'
        load_balancer_pool_health_monitor_model['url_path'] = '/'

        load_balancer_pool_member_reference_model = {
        }  # LoadBalancerPoolMemberReference
        load_balancer_pool_member_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_member_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        load_balancer_pool_session_persistence_model = {
        }  # LoadBalancerPoolSessionPersistence
        load_balancer_pool_session_persistence_model['type'] = 'source_ip'

        # Construct a json representation of a LoadBalancerPool model
        load_balancer_pool_model_json = {}
        load_balancer_pool_model_json['algorithm'] = 'least_connections'
        load_balancer_pool_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_pool_model_json[
            'health_monitor'] = load_balancer_pool_health_monitor_model
        load_balancer_pool_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_model_json['members'] = [
            load_balancer_pool_member_reference_model
        ]
        load_balancer_pool_model_json['name'] = 'my-load-balancer-pool'
        load_balancer_pool_model_json['protocol'] = 'http'
        load_balancer_pool_model_json['provisioning_status'] = 'active'
        load_balancer_pool_model_json[
            'session_persistence'] = load_balancer_pool_session_persistence_model

        # Construct a model instance of LoadBalancerPool by calling from_dict on the json representation
        load_balancer_pool_model = LoadBalancerPool.from_dict(
            load_balancer_pool_model_json)
        assert load_balancer_pool_model != False

        # Construct a model instance of LoadBalancerPool by calling from_dict on the json representation
        load_balancer_pool_model_dict = LoadBalancerPool.from_dict(
            load_balancer_pool_model_json).__dict__
        load_balancer_pool_model2 = LoadBalancerPool(
            **load_balancer_pool_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_model == load_balancer_pool_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_model_json2 = load_balancer_pool_model.to_dict()
        assert load_balancer_pool_model_json2 == load_balancer_pool_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPoolCollection
#-----------------------------------------------------------------------------
class TestLoadBalancerPoolCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPoolCollection
    #--------------------------------------------------------
    def test_load_balancer_pool_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_pool_health_monitor_model = {
        }  # LoadBalancerPoolHealthMonitor
        load_balancer_pool_health_monitor_model['delay'] = 5
        load_balancer_pool_health_monitor_model['max_retries'] = 2
        load_balancer_pool_health_monitor_model['port'] = 22
        load_balancer_pool_health_monitor_model['timeout'] = 2
        load_balancer_pool_health_monitor_model['type'] = 'http'
        load_balancer_pool_health_monitor_model['url_path'] = '/'

        load_balancer_pool_member_reference_model = {
        }  # LoadBalancerPoolMemberReference
        load_balancer_pool_member_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_member_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        load_balancer_pool_session_persistence_model = {
        }  # LoadBalancerPoolSessionPersistence
        load_balancer_pool_session_persistence_model['type'] = 'source_ip'

        load_balancer_pool_model = {}  # LoadBalancerPool
        load_balancer_pool_model['algorithm'] = 'least_connections'
        load_balancer_pool_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_pool_model[
            'health_monitor'] = load_balancer_pool_health_monitor_model
        load_balancer_pool_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_model['id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_model['members'] = [
            load_balancer_pool_member_reference_model
        ]
        load_balancer_pool_model['name'] = 'my-load-balancer-pool'
        load_balancer_pool_model['protocol'] = 'http'
        load_balancer_pool_model['provisioning_status'] = 'active'
        load_balancer_pool_model[
            'session_persistence'] = load_balancer_pool_session_persistence_model

        # Construct a json representation of a LoadBalancerPoolCollection model
        load_balancer_pool_collection_model_json = {}
        load_balancer_pool_collection_model_json['pools'] = [
            load_balancer_pool_model
        ]

        # Construct a model instance of LoadBalancerPoolCollection by calling from_dict on the json representation
        load_balancer_pool_collection_model = LoadBalancerPoolCollection.from_dict(
            load_balancer_pool_collection_model_json)
        assert load_balancer_pool_collection_model != False

        # Construct a model instance of LoadBalancerPoolCollection by calling from_dict on the json representation
        load_balancer_pool_collection_model_dict = LoadBalancerPoolCollection.from_dict(
            load_balancer_pool_collection_model_json).__dict__
        load_balancer_pool_collection_model2 = LoadBalancerPoolCollection(
            **load_balancer_pool_collection_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_collection_model == load_balancer_pool_collection_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_collection_model_json2 = load_balancer_pool_collection_model.to_dict(
        )
        assert load_balancer_pool_collection_model_json2 == load_balancer_pool_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPoolHealthMonitor
#-----------------------------------------------------------------------------
class TestLoadBalancerPoolHealthMonitor():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPoolHealthMonitor
    #--------------------------------------------------------
    def test_load_balancer_pool_health_monitor_serialization(self):

        # Construct a json representation of a LoadBalancerPoolHealthMonitor model
        load_balancer_pool_health_monitor_model_json = {}
        load_balancer_pool_health_monitor_model_json['delay'] = 5
        load_balancer_pool_health_monitor_model_json['max_retries'] = 2
        load_balancer_pool_health_monitor_model_json['port'] = 22
        load_balancer_pool_health_monitor_model_json['timeout'] = 2
        load_balancer_pool_health_monitor_model_json['type'] = 'http'
        load_balancer_pool_health_monitor_model_json['url_path'] = '/'

        # Construct a model instance of LoadBalancerPoolHealthMonitor by calling from_dict on the json representation
        load_balancer_pool_health_monitor_model = LoadBalancerPoolHealthMonitor.from_dict(
            load_balancer_pool_health_monitor_model_json)
        assert load_balancer_pool_health_monitor_model != False

        # Construct a model instance of LoadBalancerPoolHealthMonitor by calling from_dict on the json representation
        load_balancer_pool_health_monitor_model_dict = LoadBalancerPoolHealthMonitor.from_dict(
            load_balancer_pool_health_monitor_model_json).__dict__
        load_balancer_pool_health_monitor_model2 = LoadBalancerPoolHealthMonitor(
            **load_balancer_pool_health_monitor_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_health_monitor_model == load_balancer_pool_health_monitor_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_health_monitor_model_json2 = load_balancer_pool_health_monitor_model.to_dict(
        )
        assert load_balancer_pool_health_monitor_model_json2 == load_balancer_pool_health_monitor_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPoolHealthMonitorPatch
#-----------------------------------------------------------------------------
class TestLoadBalancerPoolHealthMonitorPatch():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPoolHealthMonitorPatch
    #--------------------------------------------------------
    def test_load_balancer_pool_health_monitor_patch_serialization(self):

        # Construct a json representation of a LoadBalancerPoolHealthMonitorPatch model
        load_balancer_pool_health_monitor_patch_model_json = {}
        load_balancer_pool_health_monitor_patch_model_json['delay'] = 5
        load_balancer_pool_health_monitor_patch_model_json['max_retries'] = 2
        load_balancer_pool_health_monitor_patch_model_json['port'] = 22
        load_balancer_pool_health_monitor_patch_model_json['timeout'] = 2
        load_balancer_pool_health_monitor_patch_model_json['type'] = 'http'
        load_balancer_pool_health_monitor_patch_model_json['url_path'] = '/'

        # Construct a model instance of LoadBalancerPoolHealthMonitorPatch by calling from_dict on the json representation
        load_balancer_pool_health_monitor_patch_model = LoadBalancerPoolHealthMonitorPatch.from_dict(
            load_balancer_pool_health_monitor_patch_model_json)
        assert load_balancer_pool_health_monitor_patch_model != False

        # Construct a model instance of LoadBalancerPoolHealthMonitorPatch by calling from_dict on the json representation
        load_balancer_pool_health_monitor_patch_model_dict = LoadBalancerPoolHealthMonitorPatch.from_dict(
            load_balancer_pool_health_monitor_patch_model_json).__dict__
        load_balancer_pool_health_monitor_patch_model2 = LoadBalancerPoolHealthMonitorPatch(
            **load_balancer_pool_health_monitor_patch_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_health_monitor_patch_model == load_balancer_pool_health_monitor_patch_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_health_monitor_patch_model_json2 = load_balancer_pool_health_monitor_patch_model.to_dict(
        )
        assert load_balancer_pool_health_monitor_patch_model_json2 == load_balancer_pool_health_monitor_patch_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPoolHealthMonitorPrototype
#-----------------------------------------------------------------------------
class TestLoadBalancerPoolHealthMonitorPrototype():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPoolHealthMonitorPrototype
    #--------------------------------------------------------
    def test_load_balancer_pool_health_monitor_prototype_serialization(self):

        # Construct a json representation of a LoadBalancerPoolHealthMonitorPrototype model
        load_balancer_pool_health_monitor_prototype_model_json = {}
        load_balancer_pool_health_monitor_prototype_model_json['delay'] = 5
        load_balancer_pool_health_monitor_prototype_model_json[
            'max_retries'] = 2
        load_balancer_pool_health_monitor_prototype_model_json['port'] = 22
        load_balancer_pool_health_monitor_prototype_model_json['timeout'] = 2
        load_balancer_pool_health_monitor_prototype_model_json['type'] = 'http'
        load_balancer_pool_health_monitor_prototype_model_json['url_path'] = '/'

        # Construct a model instance of LoadBalancerPoolHealthMonitorPrototype by calling from_dict on the json representation
        load_balancer_pool_health_monitor_prototype_model = LoadBalancerPoolHealthMonitorPrototype.from_dict(
            load_balancer_pool_health_monitor_prototype_model_json)
        assert load_balancer_pool_health_monitor_prototype_model != False

        # Construct a model instance of LoadBalancerPoolHealthMonitorPrototype by calling from_dict on the json representation
        load_balancer_pool_health_monitor_prototype_model_dict = LoadBalancerPoolHealthMonitorPrototype.from_dict(
            load_balancer_pool_health_monitor_prototype_model_json).__dict__
        load_balancer_pool_health_monitor_prototype_model2 = LoadBalancerPoolHealthMonitorPrototype(
            **load_balancer_pool_health_monitor_prototype_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_health_monitor_prototype_model == load_balancer_pool_health_monitor_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_health_monitor_prototype_model_json2 = load_balancer_pool_health_monitor_prototype_model.to_dict(
        )
        assert load_balancer_pool_health_monitor_prototype_model_json2 == load_balancer_pool_health_monitor_prototype_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPoolIdentityByName
#-----------------------------------------------------------------------------
class TestLoadBalancerPoolIdentityByName():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPoolIdentityByName
    #--------------------------------------------------------
    def test_load_balancer_pool_identity_by_name_serialization(self):

        # Construct a json representation of a LoadBalancerPoolIdentityByName model
        load_balancer_pool_identity_by_name_model_json = {}
        load_balancer_pool_identity_by_name_model_json[
            'name'] = 'my-load-balancer-pool'

        # Construct a model instance of LoadBalancerPoolIdentityByName by calling from_dict on the json representation
        load_balancer_pool_identity_by_name_model = LoadBalancerPoolIdentityByName.from_dict(
            load_balancer_pool_identity_by_name_model_json)
        assert load_balancer_pool_identity_by_name_model != False

        # Construct a model instance of LoadBalancerPoolIdentityByName by calling from_dict on the json representation
        load_balancer_pool_identity_by_name_model_dict = LoadBalancerPoolIdentityByName.from_dict(
            load_balancer_pool_identity_by_name_model_json).__dict__
        load_balancer_pool_identity_by_name_model2 = LoadBalancerPoolIdentityByName(
            **load_balancer_pool_identity_by_name_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_identity_by_name_model == load_balancer_pool_identity_by_name_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_identity_by_name_model_json2 = load_balancer_pool_identity_by_name_model.to_dict(
        )
        assert load_balancer_pool_identity_by_name_model_json2 == load_balancer_pool_identity_by_name_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPoolMember
#-----------------------------------------------------------------------------
class TestLoadBalancerPoolMember():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPoolMember
    #--------------------------------------------------------
    def test_load_balancer_pool_member_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_pool_member_target_model = {
        }  # LoadBalancerPoolMemberTarget
        load_balancer_pool_member_target_model['address'] = '192.168.3.4'

        # Construct a json representation of a LoadBalancerPoolMember model
        load_balancer_pool_member_model_json = {}
        load_balancer_pool_member_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_pool_member_model_json['health'] = 'faulted'
        load_balancer_pool_member_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_member_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_member_model_json['port'] = 80
        load_balancer_pool_member_model_json['provisioning_status'] = 'active'
        load_balancer_pool_member_model_json[
            'target'] = load_balancer_pool_member_target_model
        load_balancer_pool_member_model_json['weight'] = 50

        # Construct a model instance of LoadBalancerPoolMember by calling from_dict on the json representation
        load_balancer_pool_member_model = LoadBalancerPoolMember.from_dict(
            load_balancer_pool_member_model_json)
        assert load_balancer_pool_member_model != False

        # Construct a model instance of LoadBalancerPoolMember by calling from_dict on the json representation
        load_balancer_pool_member_model_dict = LoadBalancerPoolMember.from_dict(
            load_balancer_pool_member_model_json).__dict__
        load_balancer_pool_member_model2 = LoadBalancerPoolMember(
            **load_balancer_pool_member_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_member_model == load_balancer_pool_member_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_member_model_json2 = load_balancer_pool_member_model.to_dict(
        )
        assert load_balancer_pool_member_model_json2 == load_balancer_pool_member_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPoolMemberCollection
#-----------------------------------------------------------------------------
class TestLoadBalancerPoolMemberCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPoolMemberCollection
    #--------------------------------------------------------
    def test_load_balancer_pool_member_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_pool_member_target_model = {
        }  # LoadBalancerPoolMemberTarget
        load_balancer_pool_member_target_model['address'] = '192.168.3.4'

        load_balancer_pool_member_model = {}  # LoadBalancerPoolMember
        load_balancer_pool_member_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_pool_member_model['health'] = 'faulted'
        load_balancer_pool_member_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_member_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_member_model['port'] = 80
        load_balancer_pool_member_model['provisioning_status'] = 'active'
        load_balancer_pool_member_model[
            'target'] = load_balancer_pool_member_target_model
        load_balancer_pool_member_model['weight'] = 50

        # Construct a json representation of a LoadBalancerPoolMemberCollection model
        load_balancer_pool_member_collection_model_json = {}
        load_balancer_pool_member_collection_model_json['members'] = [
            load_balancer_pool_member_model
        ]

        # Construct a model instance of LoadBalancerPoolMemberCollection by calling from_dict on the json representation
        load_balancer_pool_member_collection_model = LoadBalancerPoolMemberCollection.from_dict(
            load_balancer_pool_member_collection_model_json)
        assert load_balancer_pool_member_collection_model != False

        # Construct a model instance of LoadBalancerPoolMemberCollection by calling from_dict on the json representation
        load_balancer_pool_member_collection_model_dict = LoadBalancerPoolMemberCollection.from_dict(
            load_balancer_pool_member_collection_model_json).__dict__
        load_balancer_pool_member_collection_model2 = LoadBalancerPoolMemberCollection(
            **load_balancer_pool_member_collection_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_member_collection_model == load_balancer_pool_member_collection_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_member_collection_model_json2 = load_balancer_pool_member_collection_model.to_dict(
        )
        assert load_balancer_pool_member_collection_model_json2 == load_balancer_pool_member_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPoolMemberPrototype
#-----------------------------------------------------------------------------
class TestLoadBalancerPoolMemberPrototype():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPoolMemberPrototype
    #--------------------------------------------------------
    def test_load_balancer_pool_member_prototype_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_pool_member_target_prototype_model = {
        }  # LoadBalancerPoolMemberTargetPrototype
        load_balancer_pool_member_target_prototype_model[
            'address'] = '192.168.3.4'

        # Construct a json representation of a LoadBalancerPoolMemberPrototype model
        load_balancer_pool_member_prototype_model_json = {}
        load_balancer_pool_member_prototype_model_json['port'] = 80
        load_balancer_pool_member_prototype_model_json[
            'target'] = load_balancer_pool_member_target_prototype_model
        load_balancer_pool_member_prototype_model_json['weight'] = 50

        # Construct a model instance of LoadBalancerPoolMemberPrototype by calling from_dict on the json representation
        load_balancer_pool_member_prototype_model = LoadBalancerPoolMemberPrototype.from_dict(
            load_balancer_pool_member_prototype_model_json)
        assert load_balancer_pool_member_prototype_model != False

        # Construct a model instance of LoadBalancerPoolMemberPrototype by calling from_dict on the json representation
        load_balancer_pool_member_prototype_model_dict = LoadBalancerPoolMemberPrototype.from_dict(
            load_balancer_pool_member_prototype_model_json).__dict__
        load_balancer_pool_member_prototype_model2 = LoadBalancerPoolMemberPrototype(
            **load_balancer_pool_member_prototype_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_member_prototype_model == load_balancer_pool_member_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_member_prototype_model_json2 = load_balancer_pool_member_prototype_model.to_dict(
        )
        assert load_balancer_pool_member_prototype_model_json2 == load_balancer_pool_member_prototype_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPoolMemberReference
#-----------------------------------------------------------------------------
class TestLoadBalancerPoolMemberReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPoolMemberReference
    #--------------------------------------------------------
    def test_load_balancer_pool_member_reference_serialization(self):

        # Construct a json representation of a LoadBalancerPoolMemberReference model
        load_balancer_pool_member_reference_model_json = {}
        load_balancer_pool_member_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_member_reference_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a model instance of LoadBalancerPoolMemberReference by calling from_dict on the json representation
        load_balancer_pool_member_reference_model = LoadBalancerPoolMemberReference.from_dict(
            load_balancer_pool_member_reference_model_json)
        assert load_balancer_pool_member_reference_model != False

        # Construct a model instance of LoadBalancerPoolMemberReference by calling from_dict on the json representation
        load_balancer_pool_member_reference_model_dict = LoadBalancerPoolMemberReference.from_dict(
            load_balancer_pool_member_reference_model_json).__dict__
        load_balancer_pool_member_reference_model2 = LoadBalancerPoolMemberReference(
            **load_balancer_pool_member_reference_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_member_reference_model == load_balancer_pool_member_reference_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_member_reference_model_json2 = load_balancer_pool_member_reference_model.to_dict(
        )
        assert load_balancer_pool_member_reference_model_json2 == load_balancer_pool_member_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPoolPrototype
#-----------------------------------------------------------------------------
class TestLoadBalancerPoolPrototype():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPoolPrototype
    #--------------------------------------------------------
    def test_load_balancer_pool_prototype_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_pool_member_target_prototype_model = {
        }  # LoadBalancerPoolMemberTargetPrototype
        load_balancer_pool_member_target_prototype_model[
            'address'] = '192.168.3.4'

        load_balancer_pool_health_monitor_prototype_model = {
        }  # LoadBalancerPoolHealthMonitorPrototype
        load_balancer_pool_health_monitor_prototype_model['delay'] = 5
        load_balancer_pool_health_monitor_prototype_model['max_retries'] = 2
        load_balancer_pool_health_monitor_prototype_model['port'] = 22
        load_balancer_pool_health_monitor_prototype_model['timeout'] = 2
        load_balancer_pool_health_monitor_prototype_model['type'] = 'http'
        load_balancer_pool_health_monitor_prototype_model['url_path'] = '/'

        load_balancer_pool_member_prototype_model = {
        }  # LoadBalancerPoolMemberPrototype
        load_balancer_pool_member_prototype_model['port'] = 80
        load_balancer_pool_member_prototype_model[
            'target'] = load_balancer_pool_member_target_prototype_model
        load_balancer_pool_member_prototype_model['weight'] = 50

        load_balancer_pool_session_persistence_prototype_model = {
        }  # LoadBalancerPoolSessionPersistencePrototype
        load_balancer_pool_session_persistence_prototype_model[
            'type'] = 'source_ip'

        # Construct a json representation of a LoadBalancerPoolPrototype model
        load_balancer_pool_prototype_model_json = {}
        load_balancer_pool_prototype_model_json[
            'algorithm'] = 'least_connections'
        load_balancer_pool_prototype_model_json[
            'health_monitor'] = load_balancer_pool_health_monitor_prototype_model
        load_balancer_pool_prototype_model_json['members'] = [
            load_balancer_pool_member_prototype_model
        ]
        load_balancer_pool_prototype_model_json[
            'name'] = 'my-load-balancer-pool'
        load_balancer_pool_prototype_model_json['protocol'] = 'http'
        load_balancer_pool_prototype_model_json[
            'session_persistence'] = load_balancer_pool_session_persistence_prototype_model

        # Construct a model instance of LoadBalancerPoolPrototype by calling from_dict on the json representation
        load_balancer_pool_prototype_model = LoadBalancerPoolPrototype.from_dict(
            load_balancer_pool_prototype_model_json)
        assert load_balancer_pool_prototype_model != False

        # Construct a model instance of LoadBalancerPoolPrototype by calling from_dict on the json representation
        load_balancer_pool_prototype_model_dict = LoadBalancerPoolPrototype.from_dict(
            load_balancer_pool_prototype_model_json).__dict__
        load_balancer_pool_prototype_model2 = LoadBalancerPoolPrototype(
            **load_balancer_pool_prototype_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_prototype_model == load_balancer_pool_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_prototype_model_json2 = load_balancer_pool_prototype_model.to_dict(
        )
        assert load_balancer_pool_prototype_model_json2 == load_balancer_pool_prototype_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPoolReference
#-----------------------------------------------------------------------------
class TestLoadBalancerPoolReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPoolReference
    #--------------------------------------------------------
    def test_load_balancer_pool_reference_serialization(self):

        # Construct a json representation of a LoadBalancerPoolReference model
        load_balancer_pool_reference_model_json = {}
        load_balancer_pool_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model_json[
            'name'] = 'my-load-balancer-pool'

        # Construct a model instance of LoadBalancerPoolReference by calling from_dict on the json representation
        load_balancer_pool_reference_model = LoadBalancerPoolReference.from_dict(
            load_balancer_pool_reference_model_json)
        assert load_balancer_pool_reference_model != False

        # Construct a model instance of LoadBalancerPoolReference by calling from_dict on the json representation
        load_balancer_pool_reference_model_dict = LoadBalancerPoolReference.from_dict(
            load_balancer_pool_reference_model_json).__dict__
        load_balancer_pool_reference_model2 = LoadBalancerPoolReference(
            **load_balancer_pool_reference_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_reference_model == load_balancer_pool_reference_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_reference_model_json2 = load_balancer_pool_reference_model.to_dict(
        )
        assert load_balancer_pool_reference_model_json2 == load_balancer_pool_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPoolSessionPersistence
#-----------------------------------------------------------------------------
class TestLoadBalancerPoolSessionPersistence():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPoolSessionPersistence
    #--------------------------------------------------------
    def test_load_balancer_pool_session_persistence_serialization(self):

        # Construct a json representation of a LoadBalancerPoolSessionPersistence model
        load_balancer_pool_session_persistence_model_json = {}
        load_balancer_pool_session_persistence_model_json['type'] = 'source_ip'

        # Construct a model instance of LoadBalancerPoolSessionPersistence by calling from_dict on the json representation
        load_balancer_pool_session_persistence_model = LoadBalancerPoolSessionPersistence.from_dict(
            load_balancer_pool_session_persistence_model_json)
        assert load_balancer_pool_session_persistence_model != False

        # Construct a model instance of LoadBalancerPoolSessionPersistence by calling from_dict on the json representation
        load_balancer_pool_session_persistence_model_dict = LoadBalancerPoolSessionPersistence.from_dict(
            load_balancer_pool_session_persistence_model_json).__dict__
        load_balancer_pool_session_persistence_model2 = LoadBalancerPoolSessionPersistence(
            **load_balancer_pool_session_persistence_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_session_persistence_model == load_balancer_pool_session_persistence_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_session_persistence_model_json2 = load_balancer_pool_session_persistence_model.to_dict(
        )
        assert load_balancer_pool_session_persistence_model_json2 == load_balancer_pool_session_persistence_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPoolSessionPersistencePatch
#-----------------------------------------------------------------------------
class TestLoadBalancerPoolSessionPersistencePatch():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPoolSessionPersistencePatch
    #--------------------------------------------------------
    def test_load_balancer_pool_session_persistence_patch_serialization(self):

        # Construct a json representation of a LoadBalancerPoolSessionPersistencePatch model
        load_balancer_pool_session_persistence_patch_model_json = {}
        load_balancer_pool_session_persistence_patch_model_json[
            'type'] = 'source_ip'

        # Construct a model instance of LoadBalancerPoolSessionPersistencePatch by calling from_dict on the json representation
        load_balancer_pool_session_persistence_patch_model = LoadBalancerPoolSessionPersistencePatch.from_dict(
            load_balancer_pool_session_persistence_patch_model_json)
        assert load_balancer_pool_session_persistence_patch_model != False

        # Construct a model instance of LoadBalancerPoolSessionPersistencePatch by calling from_dict on the json representation
        load_balancer_pool_session_persistence_patch_model_dict = LoadBalancerPoolSessionPersistencePatch.from_dict(
            load_balancer_pool_session_persistence_patch_model_json).__dict__
        load_balancer_pool_session_persistence_patch_model2 = LoadBalancerPoolSessionPersistencePatch(
            **load_balancer_pool_session_persistence_patch_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_session_persistence_patch_model == load_balancer_pool_session_persistence_patch_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_session_persistence_patch_model_json2 = load_balancer_pool_session_persistence_patch_model.to_dict(
        )
        assert load_balancer_pool_session_persistence_patch_model_json2 == load_balancer_pool_session_persistence_patch_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPoolSessionPersistencePrototype
#-----------------------------------------------------------------------------
class TestLoadBalancerPoolSessionPersistencePrototype():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPoolSessionPersistencePrototype
    #--------------------------------------------------------
    def test_load_balancer_pool_session_persistence_prototype_serialization(
            self):

        # Construct a json representation of a LoadBalancerPoolSessionPersistencePrototype model
        load_balancer_pool_session_persistence_prototype_model_json = {}
        load_balancer_pool_session_persistence_prototype_model_json[
            'type'] = 'source_ip'

        # Construct a model instance of LoadBalancerPoolSessionPersistencePrototype by calling from_dict on the json representation
        load_balancer_pool_session_persistence_prototype_model = LoadBalancerPoolSessionPersistencePrototype.from_dict(
            load_balancer_pool_session_persistence_prototype_model_json)
        assert load_balancer_pool_session_persistence_prototype_model != False

        # Construct a model instance of LoadBalancerPoolSessionPersistencePrototype by calling from_dict on the json representation
        load_balancer_pool_session_persistence_prototype_model_dict = LoadBalancerPoolSessionPersistencePrototype.from_dict(
            load_balancer_pool_session_persistence_prototype_model_json
        ).__dict__
        load_balancer_pool_session_persistence_prototype_model2 = LoadBalancerPoolSessionPersistencePrototype(
            **load_balancer_pool_session_persistence_prototype_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_session_persistence_prototype_model == load_balancer_pool_session_persistence_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_session_persistence_prototype_model_json2 = load_balancer_pool_session_persistence_prototype_model.to_dict(
        )
        assert load_balancer_pool_session_persistence_prototype_model_json2 == load_balancer_pool_session_persistence_prototype_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerStatistics
#-----------------------------------------------------------------------------
class TestLoadBalancerStatistics():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerStatistics
    #--------------------------------------------------------
    def test_load_balancer_statistics_serialization(self):

        # Construct a json representation of a LoadBalancerStatistics model
        load_balancer_statistics_model_json = {}
        load_balancer_statistics_model_json['active_connections'] = 797
        load_balancer_statistics_model_json['connection_rate'] = 91.121
        load_balancer_statistics_model_json[
            'data_processed_this_month'] = 10093173145
        load_balancer_statistics_model_json['throughput'] = 167.278

        # Construct a model instance of LoadBalancerStatistics by calling from_dict on the json representation
        load_balancer_statistics_model = LoadBalancerStatistics.from_dict(
            load_balancer_statistics_model_json)
        assert load_balancer_statistics_model != False

        # Construct a model instance of LoadBalancerStatistics by calling from_dict on the json representation
        load_balancer_statistics_model_dict = LoadBalancerStatistics.from_dict(
            load_balancer_statistics_model_json).__dict__
        load_balancer_statistics_model2 = LoadBalancerStatistics(
            **load_balancer_statistics_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_statistics_model == load_balancer_statistics_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_statistics_model_json2 = load_balancer_statistics_model.to_dict(
        )
        assert load_balancer_statistics_model_json2 == load_balancer_statistics_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACL
#-----------------------------------------------------------------------------
class TestNetworkACL():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACL
    #--------------------------------------------------------
    def test_network_acl_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        network_acl_rule_item_model = {}  # NetworkACLRuleItem
        network_acl_rule_item_model['action'] = 'allow'
        network_acl_rule_item_model['before'] = network_acl_rule_reference_model
        network_acl_rule_item_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_item_model['destination'] = '192.168.3.0/24'
        network_acl_rule_item_model['direction'] = 'inbound'
        network_acl_rule_item_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_model['ip_version'] = 'ipv4'
        network_acl_rule_item_model['name'] = 'my-rule-2'
        network_acl_rule_item_model['protocol'] = 'udp'
        network_acl_rule_item_model['source'] = '192.168.3.0/24'
        network_acl_rule_item_model['destination_port_max'] = 22
        network_acl_rule_item_model['destination_port_min'] = 22
        network_acl_rule_item_model['source_port_max'] = 65535
        network_acl_rule_item_model['source_port_min'] = 49152

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        # Construct a json representation of a NetworkACL model
        network_acl_model_json = {}
        network_acl_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_model_json['id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_model_json['name'] = 'my-network-acl'
        network_acl_model_json[
            'resource_group'] = resource_group_reference_model
        network_acl_model_json['rules'] = [network_acl_rule_item_model]
        network_acl_model_json['subnets'] = [subnet_reference_model]
        network_acl_model_json['vpc'] = vpc_reference_model

        # Construct a model instance of NetworkACL by calling from_dict on the json representation
        network_acl_model = NetworkACL.from_dict(network_acl_model_json)
        assert network_acl_model != False

        # Construct a model instance of NetworkACL by calling from_dict on the json representation
        network_acl_model_dict = NetworkACL.from_dict(
            network_acl_model_json).__dict__
        network_acl_model2 = NetworkACL(**network_acl_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_model == network_acl_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_model_json2 = network_acl_model.to_dict()
        assert network_acl_model_json2 == network_acl_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLCollection
#-----------------------------------------------------------------------------
class TestNetworkACLCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLCollection
    #--------------------------------------------------------
    def test_network_acl_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        network_acl_rule_item_model = {}  # NetworkACLRuleItem
        network_acl_rule_item_model['action'] = 'allow'
        network_acl_rule_item_model['before'] = network_acl_rule_reference_model
        network_acl_rule_item_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_item_model['destination'] = '192.168.3.0/24'
        network_acl_rule_item_model['direction'] = 'inbound'
        network_acl_rule_item_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_model['ip_version'] = 'ipv4'
        network_acl_rule_item_model['name'] = 'my-rule-2'
        network_acl_rule_item_model['protocol'] = 'udp'
        network_acl_rule_item_model['source'] = '192.168.3.0/24'
        network_acl_rule_item_model['destination_port_max'] = 22
        network_acl_rule_item_model['destination_port_min'] = 22
        network_acl_rule_item_model['source_port_max'] = 65535
        network_acl_rule_item_model['source_port_min'] = 49152

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        network_acl_model = {}  # NetworkACL
        network_acl_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_model['id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_model['name'] = 'my-network-acl'
        network_acl_model['resource_group'] = resource_group_reference_model
        network_acl_model['rules'] = [network_acl_rule_item_model]
        network_acl_model['subnets'] = [subnet_reference_model]
        network_acl_model['vpc'] = vpc_reference_model

        network_acl_collection_first_model = {}  # NetworkACLCollectionFirst
        network_acl_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls?limit=20'

        network_acl_collection_next_model = {}  # NetworkACLCollectionNext
        network_acl_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a json representation of a NetworkACLCollection model
        network_acl_collection_model_json = {}
        network_acl_collection_model_json[
            'first'] = network_acl_collection_first_model
        network_acl_collection_model_json['limit'] = 20
        network_acl_collection_model_json['network_acls'] = [network_acl_model]
        network_acl_collection_model_json[
            'next'] = network_acl_collection_next_model
        network_acl_collection_model_json['total_count'] = 132

        # Construct a model instance of NetworkACLCollection by calling from_dict on the json representation
        network_acl_collection_model = NetworkACLCollection.from_dict(
            network_acl_collection_model_json)
        assert network_acl_collection_model != False

        # Construct a model instance of NetworkACLCollection by calling from_dict on the json representation
        network_acl_collection_model_dict = NetworkACLCollection.from_dict(
            network_acl_collection_model_json).__dict__
        network_acl_collection_model2 = NetworkACLCollection(
            **network_acl_collection_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_collection_model == network_acl_collection_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_collection_model_json2 = network_acl_collection_model.to_dict(
        )
        assert network_acl_collection_model_json2 == network_acl_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLCollectionFirst
#-----------------------------------------------------------------------------
class TestNetworkACLCollectionFirst():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLCollectionFirst
    #--------------------------------------------------------
    def test_network_acl_collection_first_serialization(self):

        # Construct a json representation of a NetworkACLCollectionFirst model
        network_acl_collection_first_model_json = {}
        network_acl_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls?limit=20'

        # Construct a model instance of NetworkACLCollectionFirst by calling from_dict on the json representation
        network_acl_collection_first_model = NetworkACLCollectionFirst.from_dict(
            network_acl_collection_first_model_json)
        assert network_acl_collection_first_model != False

        # Construct a model instance of NetworkACLCollectionFirst by calling from_dict on the json representation
        network_acl_collection_first_model_dict = NetworkACLCollectionFirst.from_dict(
            network_acl_collection_first_model_json).__dict__
        network_acl_collection_first_model2 = NetworkACLCollectionFirst(
            **network_acl_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_collection_first_model == network_acl_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_collection_first_model_json2 = network_acl_collection_first_model.to_dict(
        )
        assert network_acl_collection_first_model_json2 == network_acl_collection_first_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLCollectionNext
#-----------------------------------------------------------------------------
class TestNetworkACLCollectionNext():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLCollectionNext
    #--------------------------------------------------------
    def test_network_acl_collection_next_serialization(self):

        # Construct a json representation of a NetworkACLCollectionNext model
        network_acl_collection_next_model_json = {}
        network_acl_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of NetworkACLCollectionNext by calling from_dict on the json representation
        network_acl_collection_next_model = NetworkACLCollectionNext.from_dict(
            network_acl_collection_next_model_json)
        assert network_acl_collection_next_model != False

        # Construct a model instance of NetworkACLCollectionNext by calling from_dict on the json representation
        network_acl_collection_next_model_dict = NetworkACLCollectionNext.from_dict(
            network_acl_collection_next_model_json).__dict__
        network_acl_collection_next_model2 = NetworkACLCollectionNext(
            **network_acl_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_collection_next_model == network_acl_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_collection_next_model_json2 = network_acl_collection_next_model.to_dict(
        )
        assert network_acl_collection_next_model_json2 == network_acl_collection_next_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLReference
#-----------------------------------------------------------------------------
class TestNetworkACLReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLReference
    #--------------------------------------------------------
    def test_network_acl_reference_serialization(self):

        # Construct a json representation of a NetworkACLReference model
        network_acl_reference_model_json = {}
        network_acl_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model_json[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model_json['name'] = 'my-network-acl'

        # Construct a model instance of NetworkACLReference by calling from_dict on the json representation
        network_acl_reference_model = NetworkACLReference.from_dict(
            network_acl_reference_model_json)
        assert network_acl_reference_model != False

        # Construct a model instance of NetworkACLReference by calling from_dict on the json representation
        network_acl_reference_model_dict = NetworkACLReference.from_dict(
            network_acl_reference_model_json).__dict__
        network_acl_reference_model2 = NetworkACLReference(
            **network_acl_reference_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_reference_model == network_acl_reference_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_reference_model_json2 = network_acl_reference_model.to_dict(
        )
        assert network_acl_reference_model_json2 == network_acl_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRuleCollection
#-----------------------------------------------------------------------------
class TestNetworkACLRuleCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRuleCollection
    #--------------------------------------------------------
    def test_network_acl_rule_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        network_acl_rule_collection_first_model = {
        }  # NetworkACLRuleCollectionFirst
        network_acl_rule_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?limit=20'

        network_acl_rule_collection_next_model = {
        }  # NetworkACLRuleCollectionNext
        network_acl_rule_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        network_acl_rule_item_model = {}  # NetworkACLRuleItem
        network_acl_rule_item_model['action'] = 'allow'
        network_acl_rule_item_model['before'] = network_acl_rule_reference_model
        network_acl_rule_item_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_item_model['destination'] = '192.168.3.0/24'
        network_acl_rule_item_model['direction'] = 'inbound'
        network_acl_rule_item_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_model['ip_version'] = 'ipv4'
        network_acl_rule_item_model['name'] = 'my-rule-2'
        network_acl_rule_item_model['protocol'] = 'udp'
        network_acl_rule_item_model['source'] = '192.168.3.0/24'
        network_acl_rule_item_model['destination_port_max'] = 22
        network_acl_rule_item_model['destination_port_min'] = 22
        network_acl_rule_item_model['source_port_max'] = 65535
        network_acl_rule_item_model['source_port_min'] = 49152

        # Construct a json representation of a NetworkACLRuleCollection model
        network_acl_rule_collection_model_json = {}
        network_acl_rule_collection_model_json[
            'first'] = network_acl_rule_collection_first_model
        network_acl_rule_collection_model_json['limit'] = 20
        network_acl_rule_collection_model_json[
            'next'] = network_acl_rule_collection_next_model
        network_acl_rule_collection_model_json['rules'] = [
            network_acl_rule_item_model
        ]
        network_acl_rule_collection_model_json['total_count'] = 132

        # Construct a model instance of NetworkACLRuleCollection by calling from_dict on the json representation
        network_acl_rule_collection_model = NetworkACLRuleCollection.from_dict(
            network_acl_rule_collection_model_json)
        assert network_acl_rule_collection_model != False

        # Construct a model instance of NetworkACLRuleCollection by calling from_dict on the json representation
        network_acl_rule_collection_model_dict = NetworkACLRuleCollection.from_dict(
            network_acl_rule_collection_model_json).__dict__
        network_acl_rule_collection_model2 = NetworkACLRuleCollection(
            **network_acl_rule_collection_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_collection_model == network_acl_rule_collection_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_collection_model_json2 = network_acl_rule_collection_model.to_dict(
        )
        assert network_acl_rule_collection_model_json2 == network_acl_rule_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRuleCollectionFirst
#-----------------------------------------------------------------------------
class TestNetworkACLRuleCollectionFirst():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRuleCollectionFirst
    #--------------------------------------------------------
    def test_network_acl_rule_collection_first_serialization(self):

        # Construct a json representation of a NetworkACLRuleCollectionFirst model
        network_acl_rule_collection_first_model_json = {}
        network_acl_rule_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?limit=20'

        # Construct a model instance of NetworkACLRuleCollectionFirst by calling from_dict on the json representation
        network_acl_rule_collection_first_model = NetworkACLRuleCollectionFirst.from_dict(
            network_acl_rule_collection_first_model_json)
        assert network_acl_rule_collection_first_model != False

        # Construct a model instance of NetworkACLRuleCollectionFirst by calling from_dict on the json representation
        network_acl_rule_collection_first_model_dict = NetworkACLRuleCollectionFirst.from_dict(
            network_acl_rule_collection_first_model_json).__dict__
        network_acl_rule_collection_first_model2 = NetworkACLRuleCollectionFirst(
            **network_acl_rule_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_collection_first_model == network_acl_rule_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_collection_first_model_json2 = network_acl_rule_collection_first_model.to_dict(
        )
        assert network_acl_rule_collection_first_model_json2 == network_acl_rule_collection_first_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRuleCollectionNext
#-----------------------------------------------------------------------------
class TestNetworkACLRuleCollectionNext():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRuleCollectionNext
    #--------------------------------------------------------
    def test_network_acl_rule_collection_next_serialization(self):

        # Construct a json representation of a NetworkACLRuleCollectionNext model
        network_acl_rule_collection_next_model_json = {}
        network_acl_rule_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of NetworkACLRuleCollectionNext by calling from_dict on the json representation
        network_acl_rule_collection_next_model = NetworkACLRuleCollectionNext.from_dict(
            network_acl_rule_collection_next_model_json)
        assert network_acl_rule_collection_next_model != False

        # Construct a model instance of NetworkACLRuleCollectionNext by calling from_dict on the json representation
        network_acl_rule_collection_next_model_dict = NetworkACLRuleCollectionNext.from_dict(
            network_acl_rule_collection_next_model_json).__dict__
        network_acl_rule_collection_next_model2 = NetworkACLRuleCollectionNext(
            **network_acl_rule_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_collection_next_model == network_acl_rule_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_collection_next_model_json2 = network_acl_rule_collection_next_model.to_dict(
        )
        assert network_acl_rule_collection_next_model_json2 == network_acl_rule_collection_next_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRuleReference
#-----------------------------------------------------------------------------
class TestNetworkACLRuleReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRuleReference
    #--------------------------------------------------------
    def test_network_acl_rule_reference_serialization(self):

        # Construct a json representation of a NetworkACLRuleReference model
        network_acl_rule_reference_model_json = {}
        network_acl_rule_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model_json['name'] = 'my-rule-1'

        # Construct a model instance of NetworkACLRuleReference by calling from_dict on the json representation
        network_acl_rule_reference_model = NetworkACLRuleReference.from_dict(
            network_acl_rule_reference_model_json)
        assert network_acl_rule_reference_model != False

        # Construct a model instance of NetworkACLRuleReference by calling from_dict on the json representation
        network_acl_rule_reference_model_dict = NetworkACLRuleReference.from_dict(
            network_acl_rule_reference_model_json).__dict__
        network_acl_rule_reference_model2 = NetworkACLRuleReference(
            **network_acl_rule_reference_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_reference_model == network_acl_rule_reference_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_reference_model_json2 = network_acl_rule_reference_model.to_dict(
        )
        assert network_acl_rule_reference_model_json2 == network_acl_rule_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkInterface
#-----------------------------------------------------------------------------
class TestNetworkInterface():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkInterface
    #--------------------------------------------------------
    def test_network_interface_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        floating_ip_reference_model = {}  # FloatingIPReference
        floating_ip_reference_model['address'] = '203.0.113.1'
        floating_ip_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model['name'] = 'my-floating-ip'

        security_group_reference_model = {}  # SecurityGroupReference
        security_group_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model['name'] = 'my-security-group'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        # Construct a json representation of a NetworkInterface model
        network_interface_model_json = {}
        network_interface_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_interface_model_json['floating_ips'] = [
            floating_ip_reference_model
        ]
        network_interface_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_model_json[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_model_json['name'] = 'my-network-interface'
        network_interface_model_json['port_speed'] = 1000
        network_interface_model_json['primary_ipv4_address'] = '192.168.3.4'
        network_interface_model_json['resource_type'] = 'network_interface'
        network_interface_model_json['security_groups'] = [
            security_group_reference_model
        ]
        network_interface_model_json['status'] = 'available'
        network_interface_model_json['subnet'] = subnet_reference_model
        network_interface_model_json['type'] = 'primary'

        # Construct a model instance of NetworkInterface by calling from_dict on the json representation
        network_interface_model = NetworkInterface.from_dict(
            network_interface_model_json)
        assert network_interface_model != False

        # Construct a model instance of NetworkInterface by calling from_dict on the json representation
        network_interface_model_dict = NetworkInterface.from_dict(
            network_interface_model_json).__dict__
        network_interface_model2 = NetworkInterface(
            **network_interface_model_dict)

        # Verify the model instances are equivalent
        assert network_interface_model == network_interface_model2

        # Convert model instance back to dict and verify no loss of data
        network_interface_model_json2 = network_interface_model.to_dict()
        assert network_interface_model_json2 == network_interface_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkInterfaceCollection
#-----------------------------------------------------------------------------
class TestNetworkInterfaceCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkInterfaceCollection
    #--------------------------------------------------------
    def test_network_interface_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        floating_ip_reference_model = {}  # FloatingIPReference
        floating_ip_reference_model['address'] = '203.0.113.1'
        floating_ip_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model['name'] = 'my-floating-ip'

        security_group_reference_model = {}  # SecurityGroupReference
        security_group_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model['name'] = 'my-security-group'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        network_interface_model = {}  # NetworkInterface
        network_interface_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        network_interface_model['floating_ips'] = [floating_ip_reference_model]
        network_interface_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_model['id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_model['name'] = 'my-network-interface'
        network_interface_model['port_speed'] = 1000
        network_interface_model['primary_ipv4_address'] = '192.168.3.4'
        network_interface_model['resource_type'] = 'network_interface'
        network_interface_model['security_groups'] = [
            security_group_reference_model
        ]
        network_interface_model['status'] = 'available'
        network_interface_model['subnet'] = subnet_reference_model
        network_interface_model['type'] = 'primary'

        # Construct a json representation of a NetworkInterfaceCollection model
        network_interface_collection_model_json = {}
        network_interface_collection_model_json['network_interfaces'] = [
            network_interface_model
        ]

        # Construct a model instance of NetworkInterfaceCollection by calling from_dict on the json representation
        network_interface_collection_model = NetworkInterfaceCollection.from_dict(
            network_interface_collection_model_json)
        assert network_interface_collection_model != False

        # Construct a model instance of NetworkInterfaceCollection by calling from_dict on the json representation
        network_interface_collection_model_dict = NetworkInterfaceCollection.from_dict(
            network_interface_collection_model_json).__dict__
        network_interface_collection_model2 = NetworkInterfaceCollection(
            **network_interface_collection_model_dict)

        # Verify the model instances are equivalent
        assert network_interface_collection_model == network_interface_collection_model2

        # Convert model instance back to dict and verify no loss of data
        network_interface_collection_model_json2 = network_interface_collection_model.to_dict(
        )
        assert network_interface_collection_model_json2 == network_interface_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkInterfaceInstanceContextReference
#-----------------------------------------------------------------------------
class TestNetworkInterfaceInstanceContextReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkInterfaceInstanceContextReference
    #--------------------------------------------------------
    def test_network_interface_instance_context_reference_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        # Construct a json representation of a NetworkInterfaceInstanceContextReference model
        network_interface_instance_context_reference_model_json = {}
        network_interface_instance_context_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_instance_context_reference_model_json[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_instance_context_reference_model_json[
            'name'] = 'my-network-interface'
        network_interface_instance_context_reference_model_json[
            'primary_ipv4_address'] = '192.168.3.4'
        network_interface_instance_context_reference_model_json[
            'resource_type'] = 'network_interface'
        network_interface_instance_context_reference_model_json[
            'subnet'] = subnet_reference_model

        # Construct a model instance of NetworkInterfaceInstanceContextReference by calling from_dict on the json representation
        network_interface_instance_context_reference_model = NetworkInterfaceInstanceContextReference.from_dict(
            network_interface_instance_context_reference_model_json)
        assert network_interface_instance_context_reference_model != False

        # Construct a model instance of NetworkInterfaceInstanceContextReference by calling from_dict on the json representation
        network_interface_instance_context_reference_model_dict = NetworkInterfaceInstanceContextReference.from_dict(
            network_interface_instance_context_reference_model_json).__dict__
        network_interface_instance_context_reference_model2 = NetworkInterfaceInstanceContextReference(
            **network_interface_instance_context_reference_model_dict)

        # Verify the model instances are equivalent
        assert network_interface_instance_context_reference_model == network_interface_instance_context_reference_model2

        # Convert model instance back to dict and verify no loss of data
        network_interface_instance_context_reference_model_json2 = network_interface_instance_context_reference_model.to_dict(
        )
        assert network_interface_instance_context_reference_model_json2 == network_interface_instance_context_reference_model_json


# #-----------------------------------------------------------------------------
# # Test Class for NetworkInterfacePrototype
# #-----------------------------------------------------------------------------
# class TestNetworkInterfacePrototype():

#     #--------------------------------------------------------
#     # Test serialization/deserialization for NetworkInterfacePrototype
#     #--------------------------------------------------------
#     def test_network_interface_prototype_serialization(self):

#         # Construct dict forms of any model objects needed in order to build this model.

#         security_group_identity_model = {}  # SecurityGroupIdentity
#         security_group_identity_model[
#             'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

#         subnet_identity_model = {}  # SubnetIdentity
#         subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

#         # Construct a json representation of a NetworkInterfacePrototype model
#         network_interface_prototype_model_json = {}
#         network_interface_prototype_model_json['name'] = 'my-network-interface'
#         network_interface_prototype_model_json[
#             'primary_ipv4_address'] = '10.0.0.5'
#         network_interface_prototype_model_json['security_groups'] = [
#             security_group_identity_model
#         ]
#         network_interface_prototype_model_json['subnet'] = subnet_identity_model

#         # Construct a model instance of NetworkInterfacePrototype by calling from_dict on the json representation
#         network_interface_prototype_model = NetworkInterfacePrototype.from_dict(
#             network_interface_prototype_model_json)
#         assert network_interface_prototype_model != False

#         # Construct a model instance of NetworkInterfacePrototype by calling from_dict on the json representation
#         network_interface_prototype_model_dict = NetworkInterfacePrototype.from_dict(
#             network_interface_prototype_model_json).__dict__
#         network_interface_prototype_model2 = NetworkInterfacePrototype(
#             **network_interface_prototype_model_dict)

#         # Verify the model instances are equivalent
#         assert network_interface_prototype_model == network_interface_prototype_model2

#         # Convert model instance back to dict and verify no loss of data
#         network_interface_prototype_model_json2 = network_interface_prototype_model.to_dict(
#         )
#         assert network_interface_prototype_model_json2 == network_interface_prototype_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkInterfaceReference
#-----------------------------------------------------------------------------
class TestNetworkInterfaceReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkInterfaceReference
    #--------------------------------------------------------
    def test_network_interface_reference_serialization(self):

        # Construct a json representation of a NetworkInterfaceReference model
        network_interface_reference_model_json = {}
        network_interface_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_reference_model_json[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_reference_model_json['name'] = 'my-network-interface'
        network_interface_reference_model_json[
            'primary_ipv4_address'] = '192.168.3.4'
        network_interface_reference_model_json[
            'resource_type'] = 'network_interface'

        # Construct a model instance of NetworkInterfaceReference by calling from_dict on the json representation
        network_interface_reference_model = NetworkInterfaceReference.from_dict(
            network_interface_reference_model_json)
        assert network_interface_reference_model != False

        # Construct a model instance of NetworkInterfaceReference by calling from_dict on the json representation
        network_interface_reference_model_dict = NetworkInterfaceReference.from_dict(
            network_interface_reference_model_json).__dict__
        network_interface_reference_model2 = NetworkInterfaceReference(
            **network_interface_reference_model_dict)

        # Verify the model instances are equivalent
        assert network_interface_reference_model == network_interface_reference_model2

        # Convert model instance back to dict and verify no loss of data
        network_interface_reference_model_json2 = network_interface_reference_model.to_dict(
        )
        assert network_interface_reference_model_json2 == network_interface_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for OperatingSystem
#-----------------------------------------------------------------------------
class TestOperatingSystem():

    #--------------------------------------------------------
    # Test serialization/deserialization for OperatingSystem
    #--------------------------------------------------------
    def test_operating_system_serialization(self):

        # Construct a json representation of a OperatingSystem model
        operating_system_model_json = {}
        operating_system_model_json['architecture'] = 'amd64'
        operating_system_model_json[
            'display_name'] = 'Ubuntu Server 16.04 LTS amd64'
        operating_system_model_json['family'] = 'Ubuntu Server'
        operating_system_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64'
        operating_system_model_json['name'] = 'ubuntu-16-amd64'
        operating_system_model_json['vendor'] = 'Canonical'
        operating_system_model_json['version'] = '16.04 LTS'

        # Construct a model instance of OperatingSystem by calling from_dict on the json representation
        operating_system_model = OperatingSystem.from_dict(
            operating_system_model_json)
        assert operating_system_model != False

        # Construct a model instance of OperatingSystem by calling from_dict on the json representation
        operating_system_model_dict = OperatingSystem.from_dict(
            operating_system_model_json).__dict__
        operating_system_model2 = OperatingSystem(**operating_system_model_dict)

        # Verify the model instances are equivalent
        assert operating_system_model == operating_system_model2

        # Convert model instance back to dict and verify no loss of data
        operating_system_model_json2 = operating_system_model.to_dict()
        assert operating_system_model_json2 == operating_system_model_json


#-----------------------------------------------------------------------------
# Test Class for OperatingSystemCollection
#-----------------------------------------------------------------------------
class TestOperatingSystemCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for OperatingSystemCollection
    #--------------------------------------------------------
    def test_operating_system_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        operating_system_model = {}  # OperatingSystem
        operating_system_model['architecture'] = 'amd64'
        operating_system_model['display_name'] = 'Ubuntu Server 16.04 LTS amd64'
        operating_system_model['family'] = 'Ubuntu Server'
        operating_system_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64'
        operating_system_model['name'] = 'ubuntu-16-amd64'
        operating_system_model['vendor'] = 'Canonical'
        operating_system_model['version'] = '16.04 LTS'

        operating_system_collection_first_model = {
        }  # OperatingSystemCollectionFirst
        operating_system_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/operating_systems?limit=20'

        operating_system_collection_next_model = {
        }  # OperatingSystemCollectionNext
        operating_system_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/operating_systems?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a json representation of a OperatingSystemCollection model
        operating_system_collection_model_json = {}
        operating_system_collection_model_json[
            'first'] = operating_system_collection_first_model
        operating_system_collection_model_json['limit'] = 20
        operating_system_collection_model_json[
            'next'] = operating_system_collection_next_model
        operating_system_collection_model_json['operating_systems'] = [
            operating_system_model
        ]

        # Construct a model instance of OperatingSystemCollection by calling from_dict on the json representation
        operating_system_collection_model = OperatingSystemCollection.from_dict(
            operating_system_collection_model_json)
        assert operating_system_collection_model != False

        # Construct a model instance of OperatingSystemCollection by calling from_dict on the json representation
        operating_system_collection_model_dict = OperatingSystemCollection.from_dict(
            operating_system_collection_model_json).__dict__
        operating_system_collection_model2 = OperatingSystemCollection(
            **operating_system_collection_model_dict)

        # Verify the model instances are equivalent
        assert operating_system_collection_model == operating_system_collection_model2

        # Convert model instance back to dict and verify no loss of data
        operating_system_collection_model_json2 = operating_system_collection_model.to_dict(
        )
        assert operating_system_collection_model_json2 == operating_system_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for OperatingSystemCollectionFirst
#-----------------------------------------------------------------------------
class TestOperatingSystemCollectionFirst():

    #--------------------------------------------------------
    # Test serialization/deserialization for OperatingSystemCollectionFirst
    #--------------------------------------------------------
    def test_operating_system_collection_first_serialization(self):

        # Construct a json representation of a OperatingSystemCollectionFirst model
        operating_system_collection_first_model_json = {}
        operating_system_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/operating_systems?limit=20'

        # Construct a model instance of OperatingSystemCollectionFirst by calling from_dict on the json representation
        operating_system_collection_first_model = OperatingSystemCollectionFirst.from_dict(
            operating_system_collection_first_model_json)
        assert operating_system_collection_first_model != False

        # Construct a model instance of OperatingSystemCollectionFirst by calling from_dict on the json representation
        operating_system_collection_first_model_dict = OperatingSystemCollectionFirst.from_dict(
            operating_system_collection_first_model_json).__dict__
        operating_system_collection_first_model2 = OperatingSystemCollectionFirst(
            **operating_system_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert operating_system_collection_first_model == operating_system_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        operating_system_collection_first_model_json2 = operating_system_collection_first_model.to_dict(
        )
        assert operating_system_collection_first_model_json2 == operating_system_collection_first_model_json


#-----------------------------------------------------------------------------
# Test Class for OperatingSystemCollectionNext
#-----------------------------------------------------------------------------
class TestOperatingSystemCollectionNext():

    #--------------------------------------------------------
    # Test serialization/deserialization for OperatingSystemCollectionNext
    #--------------------------------------------------------
    def test_operating_system_collection_next_serialization(self):

        # Construct a json representation of a OperatingSystemCollectionNext model
        operating_system_collection_next_model_json = {}
        operating_system_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/operating_systems?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of OperatingSystemCollectionNext by calling from_dict on the json representation
        operating_system_collection_next_model = OperatingSystemCollectionNext.from_dict(
            operating_system_collection_next_model_json)
        assert operating_system_collection_next_model != False

        # Construct a model instance of OperatingSystemCollectionNext by calling from_dict on the json representation
        operating_system_collection_next_model_dict = OperatingSystemCollectionNext.from_dict(
            operating_system_collection_next_model_json).__dict__
        operating_system_collection_next_model2 = OperatingSystemCollectionNext(
            **operating_system_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert operating_system_collection_next_model == operating_system_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        operating_system_collection_next_model_json2 = operating_system_collection_next_model.to_dict(
        )
        assert operating_system_collection_next_model_json2 == operating_system_collection_next_model_json


#-----------------------------------------------------------------------------
# Test Class for PublicGateway
#-----------------------------------------------------------------------------
class TestPublicGateway():

    #--------------------------------------------------------
    # Test serialization/deserialization for PublicGateway
    #--------------------------------------------------------
    def test_public_gateway_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        public_gateway_floating_ip_model = {}  # PublicGatewayFloatingIp
        public_gateway_floating_ip_model['address'] = '203.0.113.1'
        public_gateway_floating_ip_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        public_gateway_floating_ip_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        public_gateway_floating_ip_model[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        public_gateway_floating_ip_model['name'] = 'my-floating-ip'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model['name'] = 'us-south-1'

        # Construct a json representation of a PublicGateway model
        public_gateway_model_json = {}
        public_gateway_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        public_gateway_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_model_json[
            'floating_ip'] = public_gateway_floating_ip_model
        public_gateway_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_model_json['id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_model_json['name'] = 'my-public-gateway'
        public_gateway_model_json[
            'resource_group'] = resource_group_reference_model
        public_gateway_model_json['resource_type'] = 'public_gateway'
        public_gateway_model_json['status'] = 'available'
        public_gateway_model_json['vpc'] = vpc_reference_model
        public_gateway_model_json['zone'] = zone_reference_model

        # Construct a model instance of PublicGateway by calling from_dict on the json representation
        public_gateway_model = PublicGateway.from_dict(
            public_gateway_model_json)
        assert public_gateway_model != False

        # Construct a model instance of PublicGateway by calling from_dict on the json representation
        public_gateway_model_dict = PublicGateway.from_dict(
            public_gateway_model_json).__dict__
        public_gateway_model2 = PublicGateway(**public_gateway_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_model == public_gateway_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_model_json2 = public_gateway_model.to_dict()
        assert public_gateway_model_json2 == public_gateway_model_json


#-----------------------------------------------------------------------------
# Test Class for PublicGatewayCollection
#-----------------------------------------------------------------------------
class TestPublicGatewayCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for PublicGatewayCollection
    #--------------------------------------------------------
    def test_public_gateway_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        public_gateway_floating_ip_model = {}  # PublicGatewayFloatingIp
        public_gateway_floating_ip_model['address'] = '203.0.113.1'
        public_gateway_floating_ip_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        public_gateway_floating_ip_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        public_gateway_floating_ip_model[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        public_gateway_floating_ip_model['name'] = 'my-floating-ip'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model['name'] = 'us-south-1'

        public_gateway_model = {}  # PublicGateway
        public_gateway_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        public_gateway_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_model['floating_ip'] = public_gateway_floating_ip_model
        public_gateway_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_model['id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_model['name'] = 'my-public-gateway'
        public_gateway_model['resource_group'] = resource_group_reference_model
        public_gateway_model['resource_type'] = 'public_gateway'
        public_gateway_model['status'] = 'available'
        public_gateway_model['vpc'] = vpc_reference_model
        public_gateway_model['zone'] = zone_reference_model

        public_gateway_collection_first_model = {
        }  # PublicGatewayCollectionFirst
        public_gateway_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways?limit=20'

        public_gateway_collection_next_model = {}  # PublicGatewayCollectionNext
        public_gateway_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a json representation of a PublicGatewayCollection model
        public_gateway_collection_model_json = {}
        public_gateway_collection_model_json[
            'first'] = public_gateway_collection_first_model
        public_gateway_collection_model_json['limit'] = 20
        public_gateway_collection_model_json[
            'next'] = public_gateway_collection_next_model
        public_gateway_collection_model_json['public_gateways'] = [
            public_gateway_model
        ]
        public_gateway_collection_model_json['total_count'] = 132

        # Construct a model instance of PublicGatewayCollection by calling from_dict on the json representation
        public_gateway_collection_model = PublicGatewayCollection.from_dict(
            public_gateway_collection_model_json)
        assert public_gateway_collection_model != False

        # Construct a model instance of PublicGatewayCollection by calling from_dict on the json representation
        public_gateway_collection_model_dict = PublicGatewayCollection.from_dict(
            public_gateway_collection_model_json).__dict__
        public_gateway_collection_model2 = PublicGatewayCollection(
            **public_gateway_collection_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_collection_model == public_gateway_collection_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_collection_model_json2 = public_gateway_collection_model.to_dict(
        )
        assert public_gateway_collection_model_json2 == public_gateway_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for PublicGatewayCollectionFirst
#-----------------------------------------------------------------------------
class TestPublicGatewayCollectionFirst():

    #--------------------------------------------------------
    # Test serialization/deserialization for PublicGatewayCollectionFirst
    #--------------------------------------------------------
    def test_public_gateway_collection_first_serialization(self):

        # Construct a json representation of a PublicGatewayCollectionFirst model
        public_gateway_collection_first_model_json = {}
        public_gateway_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways?limit=20'

        # Construct a model instance of PublicGatewayCollectionFirst by calling from_dict on the json representation
        public_gateway_collection_first_model = PublicGatewayCollectionFirst.from_dict(
            public_gateway_collection_first_model_json)
        assert public_gateway_collection_first_model != False

        # Construct a model instance of PublicGatewayCollectionFirst by calling from_dict on the json representation
        public_gateway_collection_first_model_dict = PublicGatewayCollectionFirst.from_dict(
            public_gateway_collection_first_model_json).__dict__
        public_gateway_collection_first_model2 = PublicGatewayCollectionFirst(
            **public_gateway_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_collection_first_model == public_gateway_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_collection_first_model_json2 = public_gateway_collection_first_model.to_dict(
        )
        assert public_gateway_collection_first_model_json2 == public_gateway_collection_first_model_json


#-----------------------------------------------------------------------------
# Test Class for PublicGatewayCollectionNext
#-----------------------------------------------------------------------------
class TestPublicGatewayCollectionNext():

    #--------------------------------------------------------
    # Test serialization/deserialization for PublicGatewayCollectionNext
    #--------------------------------------------------------
    def test_public_gateway_collection_next_serialization(self):

        # Construct a json representation of a PublicGatewayCollectionNext model
        public_gateway_collection_next_model_json = {}
        public_gateway_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of PublicGatewayCollectionNext by calling from_dict on the json representation
        public_gateway_collection_next_model = PublicGatewayCollectionNext.from_dict(
            public_gateway_collection_next_model_json)
        assert public_gateway_collection_next_model != False

        # Construct a model instance of PublicGatewayCollectionNext by calling from_dict on the json representation
        public_gateway_collection_next_model_dict = PublicGatewayCollectionNext.from_dict(
            public_gateway_collection_next_model_json).__dict__
        public_gateway_collection_next_model2 = PublicGatewayCollectionNext(
            **public_gateway_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_collection_next_model == public_gateway_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_collection_next_model_json2 = public_gateway_collection_next_model.to_dict(
        )
        assert public_gateway_collection_next_model_json2 == public_gateway_collection_next_model_json


#-----------------------------------------------------------------------------
# Test Class for PublicGatewayFloatingIp
#-----------------------------------------------------------------------------
class TestPublicGatewayFloatingIp():

    #--------------------------------------------------------
    # Test serialization/deserialization for PublicGatewayFloatingIp
    #--------------------------------------------------------
    def test_public_gateway_floating_ip_serialization(self):

        # Construct a json representation of a PublicGatewayFloatingIp model
        public_gateway_floating_ip_model_json = {}
        public_gateway_floating_ip_model_json['address'] = '203.0.113.1'
        public_gateway_floating_ip_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        public_gateway_floating_ip_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        public_gateway_floating_ip_model_json[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        public_gateway_floating_ip_model_json['name'] = 'my-floating-ip'

        # Construct a model instance of PublicGatewayFloatingIp by calling from_dict on the json representation
        public_gateway_floating_ip_model = PublicGatewayFloatingIp.from_dict(
            public_gateway_floating_ip_model_json)
        assert public_gateway_floating_ip_model != False

        # Construct a model instance of PublicGatewayFloatingIp by calling from_dict on the json representation
        public_gateway_floating_ip_model_dict = PublicGatewayFloatingIp.from_dict(
            public_gateway_floating_ip_model_json).__dict__
        public_gateway_floating_ip_model2 = PublicGatewayFloatingIp(
            **public_gateway_floating_ip_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_floating_ip_model == public_gateway_floating_ip_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_floating_ip_model_json2 = public_gateway_floating_ip_model.to_dict(
        )
        assert public_gateway_floating_ip_model_json2 == public_gateway_floating_ip_model_json


#-----------------------------------------------------------------------------
# Test Class for PublicGatewayReference
#-----------------------------------------------------------------------------
class TestPublicGatewayReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for PublicGatewayReference
    #--------------------------------------------------------
    def test_public_gateway_reference_serialization(self):

        # Construct a json representation of a PublicGatewayReference model
        public_gateway_reference_model_json = {}
        public_gateway_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_reference_model_json[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_reference_model_json['name'] = 'my-public-gateway'
        public_gateway_reference_model_json['resource_type'] = 'public_gateway'

        # Construct a model instance of PublicGatewayReference by calling from_dict on the json representation
        public_gateway_reference_model = PublicGatewayReference.from_dict(
            public_gateway_reference_model_json)
        assert public_gateway_reference_model != False

        # Construct a model instance of PublicGatewayReference by calling from_dict on the json representation
        public_gateway_reference_model_dict = PublicGatewayReference.from_dict(
            public_gateway_reference_model_json).__dict__
        public_gateway_reference_model2 = PublicGatewayReference(
            **public_gateway_reference_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_reference_model == public_gateway_reference_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_reference_model_json2 = public_gateway_reference_model.to_dict(
        )
        assert public_gateway_reference_model_json2 == public_gateway_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for Region
#-----------------------------------------------------------------------------
class TestRegion():

    #--------------------------------------------------------
    # Test serialization/deserialization for Region
    #--------------------------------------------------------
    def test_region_serialization(self):

        # Construct a json representation of a Region model
        region_model_json = {}
        region_model_json['endpoint'] = 'testString'
        region_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south'
        region_model_json['name'] = 'us-south'
        region_model_json['status'] = 'available'

        # Construct a model instance of Region by calling from_dict on the json representation
        region_model = Region.from_dict(region_model_json)
        assert region_model != False

        # Construct a model instance of Region by calling from_dict on the json representation
        region_model_dict = Region.from_dict(region_model_json).__dict__
        region_model2 = Region(**region_model_dict)

        # Verify the model instances are equivalent
        assert region_model == region_model2

        # Convert model instance back to dict and verify no loss of data
        region_model_json2 = region_model.to_dict()
        assert region_model_json2 == region_model_json


#-----------------------------------------------------------------------------
# Test Class for RegionCollection
#-----------------------------------------------------------------------------
class TestRegionCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for RegionCollection
    #--------------------------------------------------------
    def test_region_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        region_model = {}  # Region
        region_model['endpoint'] = 'testString'
        region_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south'
        region_model['name'] = 'us-south'
        region_model['status'] = 'available'

        # Construct a json representation of a RegionCollection model
        region_collection_model_json = {}
        region_collection_model_json['regions'] = [region_model]

        # Construct a model instance of RegionCollection by calling from_dict on the json representation
        region_collection_model = RegionCollection.from_dict(
            region_collection_model_json)
        assert region_collection_model != False

        # Construct a model instance of RegionCollection by calling from_dict on the json representation
        region_collection_model_dict = RegionCollection.from_dict(
            region_collection_model_json).__dict__
        region_collection_model2 = RegionCollection(
            **region_collection_model_dict)

        # Verify the model instances are equivalent
        assert region_collection_model == region_collection_model2

        # Convert model instance back to dict and verify no loss of data
        region_collection_model_json2 = region_collection_model.to_dict()
        assert region_collection_model_json2 == region_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for RegionReference
#-----------------------------------------------------------------------------
class TestRegionReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for RegionReference
    #--------------------------------------------------------
    def test_region_reference_serialization(self):

        # Construct a json representation of a RegionReference model
        region_reference_model_json = {}
        region_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south'
        region_reference_model_json['name'] = 'us-south'

        # Construct a model instance of RegionReference by calling from_dict on the json representation
        region_reference_model = RegionReference.from_dict(
            region_reference_model_json)
        assert region_reference_model != False

        # Construct a model instance of RegionReference by calling from_dict on the json representation
        region_reference_model_dict = RegionReference.from_dict(
            region_reference_model_json).__dict__
        region_reference_model2 = RegionReference(**region_reference_model_dict)

        # Verify the model instances are equivalent
        assert region_reference_model == region_reference_model2

        # Convert model instance back to dict and verify no loss of data
        region_reference_model_json2 = region_reference_model.to_dict()
        assert region_reference_model_json2 == region_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for ResourceGroupReference
#-----------------------------------------------------------------------------
class TestResourceGroupReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for ResourceGroupReference
    #--------------------------------------------------------
    def test_resource_group_reference_serialization(self):

        # Construct a json representation of a ResourceGroupReference model
        resource_group_reference_model_json = {}
        resource_group_reference_model_json[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model_json[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model_json['name'] = 'my-resource-group'

        # Construct a model instance of ResourceGroupReference by calling from_dict on the json representation
        resource_group_reference_model = ResourceGroupReference.from_dict(
            resource_group_reference_model_json)
        assert resource_group_reference_model != False

        # Construct a model instance of ResourceGroupReference by calling from_dict on the json representation
        resource_group_reference_model_dict = ResourceGroupReference.from_dict(
            resource_group_reference_model_json).__dict__
        resource_group_reference_model2 = ResourceGroupReference(
            **resource_group_reference_model_dict)

        # Verify the model instances are equivalent
        assert resource_group_reference_model == resource_group_reference_model2

        # Convert model instance back to dict and verify no loss of data
        resource_group_reference_model_json2 = resource_group_reference_model.to_dict(
        )
        assert resource_group_reference_model_json2 == resource_group_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for Route
#-----------------------------------------------------------------------------
class TestRoute():

    #--------------------------------------------------------
    # Test serialization/deserialization for Route
    #--------------------------------------------------------
    def test_route_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        route_next_hop_model = {}  # RouteNextHop
        route_next_hop_model['address'] = '192.168.3.4'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model['name'] = 'us-south-1'

        # Construct a json representation of a Route model
        route_model_json = {}
        route_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        route_model_json['destination'] = '192.168.3.0/24'
        route_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531'
        route_model_json['id'] = '1a15dca5-7e33-45e1-b7c5-bc690e569531'
        route_model_json['lifecycle_state'] = 'stable'
        route_model_json['name'] = 'my-route-1'
        route_model_json['next_hop'] = route_next_hop_model
        route_model_json['zone'] = zone_reference_model

        # Construct a model instance of Route by calling from_dict on the json representation
        route_model = Route.from_dict(route_model_json)
        assert route_model != False

        # Construct a model instance of Route by calling from_dict on the json representation
        route_model_dict = Route.from_dict(route_model_json).__dict__
        route_model2 = Route(**route_model_dict)

        # Verify the model instances are equivalent
        assert route_model == route_model2

        # Convert model instance back to dict and verify no loss of data
        route_model_json2 = route_model.to_dict()
        assert route_model_json2 == route_model_json


#-----------------------------------------------------------------------------
# Test Class for RouteCollection
#-----------------------------------------------------------------------------
class TestRouteCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for RouteCollection
    #--------------------------------------------------------
    def test_route_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        route_next_hop_model = {}  # RouteNextHop
        route_next_hop_model['address'] = '192.168.3.4'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model['name'] = 'us-south-1'

        route_model = {}  # Route
        route_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        route_model['destination'] = '192.168.3.0/24'
        route_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531'
        route_model['id'] = '1a15dca5-7e33-45e1-b7c5-bc690e569531'
        route_model['lifecycle_state'] = 'stable'
        route_model['name'] = 'my-route-1'
        route_model['next_hop'] = route_next_hop_model
        route_model['zone'] = zone_reference_model

        # Construct a json representation of a RouteCollection model
        route_collection_model_json = {}
        route_collection_model_json['routes'] = [route_model]

        # Construct a model instance of RouteCollection by calling from_dict on the json representation
        route_collection_model = RouteCollection.from_dict(
            route_collection_model_json)
        assert route_collection_model != False

        # Construct a model instance of RouteCollection by calling from_dict on the json representation
        route_collection_model_dict = RouteCollection.from_dict(
            route_collection_model_json).__dict__
        route_collection_model2 = RouteCollection(**route_collection_model_dict)

        # Verify the model instances are equivalent
        assert route_collection_model == route_collection_model2

        # Convert model instance back to dict and verify no loss of data
        route_collection_model_json2 = route_collection_model.to_dict()
        assert route_collection_model_json2 == route_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroup
#-----------------------------------------------------------------------------
class TestSecurityGroup():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroup
    #--------------------------------------------------------
    def test_security_group_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_interface_reference_model = {}  # NetworkInterfaceReference
        network_interface_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_reference_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_reference_model['name'] = 'my-network-interface'
        network_interface_reference_model[
            'primary_ipv4_address'] = '192.168.3.4'
        network_interface_reference_model['resource_type'] = 'network_interface'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        security_group_rule_model = {}  # SecurityGroupRule
        security_group_rule_model['direction'] = 'inbound'
        security_group_rule_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_model['id'] = '6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_model['ip_version'] = 'ipv4'
        security_group_rule_model['protocol'] = 'udp'
        security_group_rule_model['remote'] = {'foo': 'bar'}
        security_group_rule_model['port_max'] = 22
        security_group_rule_model['port_min'] = 22

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        # Construct a json representation of a SecurityGroup model
        security_group_model_json = {}
        security_group_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        security_group_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_model_json['id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_model_json['name'] = 'my-security-group'
        security_group_model_json['network_interfaces'] = [
            network_interface_reference_model
        ]
        security_group_model_json[
            'resource_group'] = resource_group_reference_model
        security_group_model_json['rules'] = [security_group_rule_model]
        security_group_model_json['vpc'] = vpc_reference_model

        # Construct a model instance of SecurityGroup by calling from_dict on the json representation
        security_group_model = SecurityGroup.from_dict(
            security_group_model_json)
        assert security_group_model != False

        # Construct a model instance of SecurityGroup by calling from_dict on the json representation
        security_group_model_dict = SecurityGroup.from_dict(
            security_group_model_json).__dict__
        security_group_model2 = SecurityGroup(**security_group_model_dict)

        # Verify the model instances are equivalent
        assert security_group_model == security_group_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_model_json2 = security_group_model.to_dict()
        assert security_group_model_json2 == security_group_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupCollection
#-----------------------------------------------------------------------------
class TestSecurityGroupCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupCollection
    #--------------------------------------------------------
    def test_security_group_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_interface_reference_model = {}  # NetworkInterfaceReference
        network_interface_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_reference_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_reference_model['name'] = 'my-network-interface'
        network_interface_reference_model[
            'primary_ipv4_address'] = '192.168.3.4'
        network_interface_reference_model['resource_type'] = 'network_interface'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        security_group_rule_model = {}  # SecurityGroupRule
        security_group_rule_model['direction'] = 'inbound'
        security_group_rule_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_model['id'] = '6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_model['ip_version'] = 'ipv4'
        security_group_rule_model['protocol'] = 'udp'
        security_group_rule_model['remote'] = {'foo': 'bar'}
        security_group_rule_model['port_max'] = 22
        security_group_rule_model['port_min'] = 22

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        security_group_model = {}  # SecurityGroup
        security_group_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        security_group_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_model['id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_model['name'] = 'my-security-group'
        security_group_model['network_interfaces'] = [
            network_interface_reference_model
        ]
        security_group_model['resource_group'] = resource_group_reference_model
        security_group_model['rules'] = [security_group_rule_model]
        security_group_model['vpc'] = vpc_reference_model

        security_group_collection_first_model = {
        }  # SecurityGroupCollectionFirst
        security_group_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups?limit=20'

        security_group_collection_next_model = {}  # SecurityGroupCollectionNext
        security_group_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a json representation of a SecurityGroupCollection model
        security_group_collection_model_json = {}
        security_group_collection_model_json[
            'first'] = security_group_collection_first_model
        security_group_collection_model_json['limit'] = 20
        security_group_collection_model_json[
            'next'] = security_group_collection_next_model
        security_group_collection_model_json['security_groups'] = [
            security_group_model
        ]
        security_group_collection_model_json['total_count'] = 132

        # Construct a model instance of SecurityGroupCollection by calling from_dict on the json representation
        security_group_collection_model = SecurityGroupCollection.from_dict(
            security_group_collection_model_json)
        assert security_group_collection_model != False

        # Construct a model instance of SecurityGroupCollection by calling from_dict on the json representation
        security_group_collection_model_dict = SecurityGroupCollection.from_dict(
            security_group_collection_model_json).__dict__
        security_group_collection_model2 = SecurityGroupCollection(
            **security_group_collection_model_dict)

        # Verify the model instances are equivalent
        assert security_group_collection_model == security_group_collection_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_collection_model_json2 = security_group_collection_model.to_dict(
        )
        assert security_group_collection_model_json2 == security_group_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupCollectionFirst
#-----------------------------------------------------------------------------
class TestSecurityGroupCollectionFirst():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupCollectionFirst
    #--------------------------------------------------------
    def test_security_group_collection_first_serialization(self):

        # Construct a json representation of a SecurityGroupCollectionFirst model
        security_group_collection_first_model_json = {}
        security_group_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups?limit=20'

        # Construct a model instance of SecurityGroupCollectionFirst by calling from_dict on the json representation
        security_group_collection_first_model = SecurityGroupCollectionFirst.from_dict(
            security_group_collection_first_model_json)
        assert security_group_collection_first_model != False

        # Construct a model instance of SecurityGroupCollectionFirst by calling from_dict on the json representation
        security_group_collection_first_model_dict = SecurityGroupCollectionFirst.from_dict(
            security_group_collection_first_model_json).__dict__
        security_group_collection_first_model2 = SecurityGroupCollectionFirst(
            **security_group_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert security_group_collection_first_model == security_group_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_collection_first_model_json2 = security_group_collection_first_model.to_dict(
        )
        assert security_group_collection_first_model_json2 == security_group_collection_first_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupCollectionNext
#-----------------------------------------------------------------------------
class TestSecurityGroupCollectionNext():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupCollectionNext
    #--------------------------------------------------------
    def test_security_group_collection_next_serialization(self):

        # Construct a json representation of a SecurityGroupCollectionNext model
        security_group_collection_next_model_json = {}
        security_group_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of SecurityGroupCollectionNext by calling from_dict on the json representation
        security_group_collection_next_model = SecurityGroupCollectionNext.from_dict(
            security_group_collection_next_model_json)
        assert security_group_collection_next_model != False

        # Construct a model instance of SecurityGroupCollectionNext by calling from_dict on the json representation
        security_group_collection_next_model_dict = SecurityGroupCollectionNext.from_dict(
            security_group_collection_next_model_json).__dict__
        security_group_collection_next_model2 = SecurityGroupCollectionNext(
            **security_group_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert security_group_collection_next_model == security_group_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_collection_next_model_json2 = security_group_collection_next_model.to_dict(
        )
        assert security_group_collection_next_model_json2 == security_group_collection_next_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupReference
#-----------------------------------------------------------------------------
class TestSecurityGroupReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupReference
    #--------------------------------------------------------
    def test_security_group_reference_serialization(self):

        # Construct a json representation of a SecurityGroupReference model
        security_group_reference_model_json = {}
        security_group_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model_json[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model_json['name'] = 'my-security-group'

        # Construct a model instance of SecurityGroupReference by calling from_dict on the json representation
        security_group_reference_model = SecurityGroupReference.from_dict(
            security_group_reference_model_json)
        assert security_group_reference_model != False

        # Construct a model instance of SecurityGroupReference by calling from_dict on the json representation
        security_group_reference_model_dict = SecurityGroupReference.from_dict(
            security_group_reference_model_json).__dict__
        security_group_reference_model2 = SecurityGroupReference(
            **security_group_reference_model_dict)

        # Verify the model instances are equivalent
        assert security_group_reference_model == security_group_reference_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_reference_model_json2 = security_group_reference_model.to_dict(
        )
        assert security_group_reference_model_json2 == security_group_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRuleCollection
#-----------------------------------------------------------------------------
class TestSecurityGroupRuleCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRuleCollection
    #--------------------------------------------------------
    def test_security_group_rule_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        security_group_rule_model = {}  # SecurityGroupRule
        security_group_rule_model['direction'] = 'inbound'
        security_group_rule_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_model['id'] = '6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_model['ip_version'] = 'ipv4'
        security_group_rule_model['protocol'] = 'udp'
        security_group_rule_model['remote'] = {'foo': 'bar'}
        security_group_rule_model['port_max'] = 22
        security_group_rule_model['port_min'] = 22

        # Construct a json representation of a SecurityGroupRuleCollection model
        security_group_rule_collection_model_json = {}
        security_group_rule_collection_model_json['rules'] = [
            security_group_rule_model
        ]

        # Construct a model instance of SecurityGroupRuleCollection by calling from_dict on the json representation
        security_group_rule_collection_model = SecurityGroupRuleCollection.from_dict(
            security_group_rule_collection_model_json)
        assert security_group_rule_collection_model != False

        # Construct a model instance of SecurityGroupRuleCollection by calling from_dict on the json representation
        security_group_rule_collection_model_dict = SecurityGroupRuleCollection.from_dict(
            security_group_rule_collection_model_json).__dict__
        security_group_rule_collection_model2 = SecurityGroupRuleCollection(
            **security_group_rule_collection_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_collection_model == security_group_rule_collection_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_collection_model_json2 = security_group_rule_collection_model.to_dict(
        )
        assert security_group_rule_collection_model_json2 == security_group_rule_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for Subnet
#-----------------------------------------------------------------------------
class TestSubnet():

    #--------------------------------------------------------
    # Test serialization/deserialization for Subnet
    #--------------------------------------------------------
    def test_subnet_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_reference_model = {}  # NetworkACLReference
        network_acl_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model['name'] = 'my-network-acl'

        public_gateway_reference_model = {}  # PublicGatewayReference
        public_gateway_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_reference_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_reference_model['name'] = 'my-public-gateway'
        public_gateway_reference_model['resource_type'] = 'public_gateway'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model['name'] = 'us-south-1'

        # Construct a json representation of a Subnet model
        subnet_model_json = {}
        subnet_model_json['available_ipv4_address_count'] = 15
        subnet_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        subnet_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_model_json['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_model_json['ip_version'] = 'both'
        subnet_model_json['ipv4_cidr_block'] = '10.0.0.0/24'
        subnet_model_json['name'] = 'my-subnet'
        subnet_model_json['network_acl'] = network_acl_reference_model
        subnet_model_json['public_gateway'] = public_gateway_reference_model
        subnet_model_json['resource_group'] = resource_group_reference_model
        subnet_model_json['status'] = 'available'
        subnet_model_json['total_ipv4_address_count'] = 256
        subnet_model_json['vpc'] = vpc_reference_model
        subnet_model_json['zone'] = zone_reference_model

        # Construct a model instance of Subnet by calling from_dict on the json representation
        subnet_model = Subnet.from_dict(subnet_model_json)
        assert subnet_model != False

        # Construct a model instance of Subnet by calling from_dict on the json representation
        subnet_model_dict = Subnet.from_dict(subnet_model_json).__dict__
        subnet_model2 = Subnet(**subnet_model_dict)

        # Verify the model instances are equivalent
        assert subnet_model == subnet_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_model_json2 = subnet_model.to_dict()
        assert subnet_model_json2 == subnet_model_json


#-----------------------------------------------------------------------------
# Test Class for SubnetCollection
#-----------------------------------------------------------------------------
class TestSubnetCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for SubnetCollection
    #--------------------------------------------------------
    def test_subnet_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_reference_model = {}  # NetworkACLReference
        network_acl_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model['name'] = 'my-network-acl'

        public_gateway_reference_model = {}  # PublicGatewayReference
        public_gateway_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_reference_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_reference_model['name'] = 'my-public-gateway'
        public_gateway_reference_model['resource_type'] = 'public_gateway'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model['name'] = 'us-south-1'

        subnet_model = {}  # Subnet
        subnet_model['available_ipv4_address_count'] = 15
        subnet_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        subnet_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_model['ip_version'] = 'both'
        subnet_model['ipv4_cidr_block'] = '10.0.0.0/24'
        subnet_model['name'] = 'my-subnet'
        subnet_model['network_acl'] = network_acl_reference_model
        subnet_model['public_gateway'] = public_gateway_reference_model
        subnet_model['resource_group'] = resource_group_reference_model
        subnet_model['status'] = 'available'
        subnet_model['total_ipv4_address_count'] = 256
        subnet_model['vpc'] = vpc_reference_model
        subnet_model['zone'] = zone_reference_model

        subnet_collection_first_model = {}  # SubnetCollectionFirst
        subnet_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets?limit=20'

        subnet_collection_next_model = {}  # SubnetCollectionNext
        subnet_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a json representation of a SubnetCollection model
        subnet_collection_model_json = {}
        subnet_collection_model_json['first'] = subnet_collection_first_model
        subnet_collection_model_json['limit'] = 20
        subnet_collection_model_json['next'] = subnet_collection_next_model
        subnet_collection_model_json['subnets'] = [subnet_model]
        subnet_collection_model_json['total_count'] = 132

        # Construct a model instance of SubnetCollection by calling from_dict on the json representation
        subnet_collection_model = SubnetCollection.from_dict(
            subnet_collection_model_json)
        assert subnet_collection_model != False

        # Construct a model instance of SubnetCollection by calling from_dict on the json representation
        subnet_collection_model_dict = SubnetCollection.from_dict(
            subnet_collection_model_json).__dict__
        subnet_collection_model2 = SubnetCollection(
            **subnet_collection_model_dict)

        # Verify the model instances are equivalent
        assert subnet_collection_model == subnet_collection_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_collection_model_json2 = subnet_collection_model.to_dict()
        assert subnet_collection_model_json2 == subnet_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for SubnetCollectionFirst
#-----------------------------------------------------------------------------
class TestSubnetCollectionFirst():

    #--------------------------------------------------------
    # Test serialization/deserialization for SubnetCollectionFirst
    #--------------------------------------------------------
    def test_subnet_collection_first_serialization(self):

        # Construct a json representation of a SubnetCollectionFirst model
        subnet_collection_first_model_json = {}
        subnet_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets?limit=20'

        # Construct a model instance of SubnetCollectionFirst by calling from_dict on the json representation
        subnet_collection_first_model = SubnetCollectionFirst.from_dict(
            subnet_collection_first_model_json)
        assert subnet_collection_first_model != False

        # Construct a model instance of SubnetCollectionFirst by calling from_dict on the json representation
        subnet_collection_first_model_dict = SubnetCollectionFirst.from_dict(
            subnet_collection_first_model_json).__dict__
        subnet_collection_first_model2 = SubnetCollectionFirst(
            **subnet_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert subnet_collection_first_model == subnet_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_collection_first_model_json2 = subnet_collection_first_model.to_dict(
        )
        assert subnet_collection_first_model_json2 == subnet_collection_first_model_json


#-----------------------------------------------------------------------------
# Test Class for SubnetCollectionNext
#-----------------------------------------------------------------------------
class TestSubnetCollectionNext():

    #--------------------------------------------------------
    # Test serialization/deserialization for SubnetCollectionNext
    #--------------------------------------------------------
    def test_subnet_collection_next_serialization(self):

        # Construct a json representation of a SubnetCollectionNext model
        subnet_collection_next_model_json = {}
        subnet_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of SubnetCollectionNext by calling from_dict on the json representation
        subnet_collection_next_model = SubnetCollectionNext.from_dict(
            subnet_collection_next_model_json)
        assert subnet_collection_next_model != False

        # Construct a model instance of SubnetCollectionNext by calling from_dict on the json representation
        subnet_collection_next_model_dict = SubnetCollectionNext.from_dict(
            subnet_collection_next_model_json).__dict__
        subnet_collection_next_model2 = SubnetCollectionNext(
            **subnet_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert subnet_collection_next_model == subnet_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_collection_next_model_json2 = subnet_collection_next_model.to_dict(
        )
        assert subnet_collection_next_model_json2 == subnet_collection_next_model_json


#-----------------------------------------------------------------------------
# Test Class for SubnetReference
#-----------------------------------------------------------------------------
class TestSubnetReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for SubnetReference
    #--------------------------------------------------------
    def test_subnet_reference_serialization(self):

        # Construct a json representation of a SubnetReference model
        subnet_reference_model_json = {}
        subnet_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model_json[
            'id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model_json['name'] = 'my-subnet'

        # Construct a model instance of SubnetReference by calling from_dict on the json representation
        subnet_reference_model = SubnetReference.from_dict(
            subnet_reference_model_json)
        assert subnet_reference_model != False

        # Construct a model instance of SubnetReference by calling from_dict on the json representation
        subnet_reference_model_dict = SubnetReference.from_dict(
            subnet_reference_model_json).__dict__
        subnet_reference_model2 = SubnetReference(**subnet_reference_model_dict)

        # Verify the model instances are equivalent
        assert subnet_reference_model == subnet_reference_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_reference_model_json2 = subnet_reference_model.to_dict()
        assert subnet_reference_model_json2 == subnet_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for VPC
#-----------------------------------------------------------------------------
class TestVPC():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPC
    #--------------------------------------------------------
    def test_vpc_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        ip_model = {}  # IP
        ip_model['address'] = '192.168.3.4'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model['name'] = 'us-south-1'

        network_acl_reference_model = {}  # NetworkACLReference
        network_acl_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model['name'] = 'my-network-acl'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        security_group_reference_model = {}  # SecurityGroupReference
        security_group_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model['name'] = 'my-security-group'

        vpccse_source_ip_model = {}  # VPCCSESourceIP
        vpccse_source_ip_model['ip'] = ip_model
        vpccse_source_ip_model['zone'] = zone_reference_model

        # Construct a json representation of a VPC model
        vpc_model_json = {}
        vpc_model_json['classic_access'] = False
        vpc_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        vpc_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_model_json['cse_source_ips'] = [vpccse_source_ip_model]
        vpc_model_json['default_network_acl'] = network_acl_reference_model
        vpc_model_json[
            'default_security_group'] = security_group_reference_model
        vpc_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_model_json['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_model_json['name'] = 'my-vpc'
        vpc_model_json['resource_group'] = resource_group_reference_model
        vpc_model_json['status'] = 'available'

        # Construct a model instance of VPC by calling from_dict on the json representation
        vpc_model = VPC.from_dict(vpc_model_json)
        assert vpc_model != False

        # Construct a model instance of VPC by calling from_dict on the json representation
        vpc_model_dict = VPC.from_dict(vpc_model_json).__dict__
        vpc_model2 = VPC(**vpc_model_dict)

        # Verify the model instances are equivalent
        assert vpc_model == vpc_model2

        # Convert model instance back to dict and verify no loss of data
        vpc_model_json2 = vpc_model.to_dict()
        assert vpc_model_json2 == vpc_model_json


#-----------------------------------------------------------------------------
# Test Class for VPCCSESourceIP
#-----------------------------------------------------------------------------
class TestVPCCSESourceIP():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPCCSESourceIP
    #--------------------------------------------------------
    def test_vpccse_source_ip_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        ip_model = {}  # IP
        ip_model['address'] = '192.168.3.4'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model['name'] = 'us-south-1'

        # Construct a json representation of a VPCCSESourceIP model
        vpccse_source_ip_model_json = {}
        vpccse_source_ip_model_json['ip'] = ip_model
        vpccse_source_ip_model_json['zone'] = zone_reference_model

        # Construct a model instance of VPCCSESourceIP by calling from_dict on the json representation
        vpccse_source_ip_model = VPCCSESourceIP.from_dict(
            vpccse_source_ip_model_json)
        assert vpccse_source_ip_model != False

        # Construct a model instance of VPCCSESourceIP by calling from_dict on the json representation
        vpccse_source_ip_model_dict = VPCCSESourceIP.from_dict(
            vpccse_source_ip_model_json).__dict__
        vpccse_source_ip_model2 = VPCCSESourceIP(**vpccse_source_ip_model_dict)

        # Verify the model instances are equivalent
        assert vpccse_source_ip_model == vpccse_source_ip_model2

        # Convert model instance back to dict and verify no loss of data
        vpccse_source_ip_model_json2 = vpccse_source_ip_model.to_dict()
        assert vpccse_source_ip_model_json2 == vpccse_source_ip_model_json


#-----------------------------------------------------------------------------
# Test Class for VPCCollection
#-----------------------------------------------------------------------------
class TestVPCCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPCCollection
    #--------------------------------------------------------
    def test_vpc_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        ip_model = {}  # IP
        ip_model['address'] = '192.168.3.4'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model['name'] = 'us-south-1'

        network_acl_reference_model = {}  # NetworkACLReference
        network_acl_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model['name'] = 'my-network-acl'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        security_group_reference_model = {}  # SecurityGroupReference
        security_group_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model['name'] = 'my-security-group'

        vpccse_source_ip_model = {}  # VPCCSESourceIP
        vpccse_source_ip_model['ip'] = ip_model
        vpccse_source_ip_model['zone'] = zone_reference_model

        vpc_model = {}  # VPC
        vpc_model['classic_access'] = False
        vpc_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        vpc_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_model['cse_source_ips'] = [vpccse_source_ip_model]
        vpc_model['default_network_acl'] = network_acl_reference_model
        vpc_model['default_security_group'] = security_group_reference_model
        vpc_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_model['name'] = 'my-vpc'
        vpc_model['resource_group'] = resource_group_reference_model
        vpc_model['status'] = 'available'

        vpc_collection_first_model = {}  # VPCCollectionFirst
        vpc_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs?limit=20'

        vpc_collection_next_model = {}  # VPCCollectionNext
        vpc_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a json representation of a VPCCollection model
        vpc_collection_model_json = {}
        vpc_collection_model_json['first'] = vpc_collection_first_model
        vpc_collection_model_json['limit'] = 20
        vpc_collection_model_json['next'] = vpc_collection_next_model
        vpc_collection_model_json['total_count'] = 132
        vpc_collection_model_json['vpcs'] = [vpc_model]

        # Construct a model instance of VPCCollection by calling from_dict on the json representation
        vpc_collection_model = VPCCollection.from_dict(
            vpc_collection_model_json)
        assert vpc_collection_model != False

        # Construct a model instance of VPCCollection by calling from_dict on the json representation
        vpc_collection_model_dict = VPCCollection.from_dict(
            vpc_collection_model_json).__dict__
        vpc_collection_model2 = VPCCollection(**vpc_collection_model_dict)

        # Verify the model instances are equivalent
        assert vpc_collection_model == vpc_collection_model2

        # Convert model instance back to dict and verify no loss of data
        vpc_collection_model_json2 = vpc_collection_model.to_dict()
        assert vpc_collection_model_json2 == vpc_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for VPCCollectionFirst
#-----------------------------------------------------------------------------
class TestVPCCollectionFirst():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPCCollectionFirst
    #--------------------------------------------------------
    def test_vpc_collection_first_serialization(self):

        # Construct a json representation of a VPCCollectionFirst model
        vpc_collection_first_model_json = {}
        vpc_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs?limit=20'

        # Construct a model instance of VPCCollectionFirst by calling from_dict on the json representation
        vpc_collection_first_model = VPCCollectionFirst.from_dict(
            vpc_collection_first_model_json)
        assert vpc_collection_first_model != False

        # Construct a model instance of VPCCollectionFirst by calling from_dict on the json representation
        vpc_collection_first_model_dict = VPCCollectionFirst.from_dict(
            vpc_collection_first_model_json).__dict__
        vpc_collection_first_model2 = VPCCollectionFirst(
            **vpc_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert vpc_collection_first_model == vpc_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        vpc_collection_first_model_json2 = vpc_collection_first_model.to_dict()
        assert vpc_collection_first_model_json2 == vpc_collection_first_model_json


#-----------------------------------------------------------------------------
# Test Class for VPCCollectionNext
#-----------------------------------------------------------------------------
class TestVPCCollectionNext():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPCCollectionNext
    #--------------------------------------------------------
    def test_vpc_collection_next_serialization(self):

        # Construct a json representation of a VPCCollectionNext model
        vpc_collection_next_model_json = {}
        vpc_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of VPCCollectionNext by calling from_dict on the json representation
        vpc_collection_next_model = VPCCollectionNext.from_dict(
            vpc_collection_next_model_json)
        assert vpc_collection_next_model != False

        # Construct a model instance of VPCCollectionNext by calling from_dict on the json representation
        vpc_collection_next_model_dict = VPCCollectionNext.from_dict(
            vpc_collection_next_model_json).__dict__
        vpc_collection_next_model2 = VPCCollectionNext(
            **vpc_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert vpc_collection_next_model == vpc_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        vpc_collection_next_model_json2 = vpc_collection_next_model.to_dict()
        assert vpc_collection_next_model_json2 == vpc_collection_next_model_json


#-----------------------------------------------------------------------------
# Test Class for VPCReference
#-----------------------------------------------------------------------------
class TestVPCReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPCReference
    #--------------------------------------------------------
    def test_vpc_reference_serialization(self):

        # Construct a json representation of a VPCReference model
        vpc_reference_model_json = {}
        vpc_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model_json['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model_json['name'] = 'my-vpc'

        # Construct a model instance of VPCReference by calling from_dict on the json representation
        vpc_reference_model = VPCReference.from_dict(vpc_reference_model_json)
        assert vpc_reference_model != False

        # Construct a model instance of VPCReference by calling from_dict on the json representation
        vpc_reference_model_dict = VPCReference.from_dict(
            vpc_reference_model_json).__dict__
        vpc_reference_model2 = VPCReference(**vpc_reference_model_dict)

        # Verify the model instances are equivalent
        assert vpc_reference_model == vpc_reference_model2

        # Convert model instance back to dict and verify no loss of data
        vpc_reference_model_json2 = vpc_reference_model.to_dict()
        assert vpc_reference_model_json2 == vpc_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for VPNGateway
#-----------------------------------------------------------------------------
class TestVPNGateway():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPNGateway
    #--------------------------------------------------------
    def test_vpn_gateway_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        vpn_gateway_connection_reference_model = {
        }  # VPNGatewayConnectionReference
        vpn_gateway_connection_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b'
        vpn_gateway_connection_reference_model[
            'id'] = 'a10a5771-dc23-442c-8460-c3601d8542f7'
        vpn_gateway_connection_reference_model['name'] = 'my-vpn-connection'

        vpn_gateway_public_ip_model = {}  # VPNGatewayPublicIp
        vpn_gateway_public_ip_model['address'] = '192.168.3.4'

        # Construct a json representation of a VPNGateway model
        vpn_gateway_model_json = {}
        vpn_gateway_model_json['connections'] = [
            vpn_gateway_connection_reference_model
        ]
        vpn_gateway_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        vpn_gateway_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b'
        vpn_gateway_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b'
        vpn_gateway_model_json['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'
        vpn_gateway_model_json['name'] = 'my-vpn-gateway'
        vpn_gateway_model_json['public_ip'] = vpn_gateway_public_ip_model
        vpn_gateway_model_json[
            'resource_group'] = resource_group_reference_model
        vpn_gateway_model_json['status'] = 'available'
        vpn_gateway_model_json['subnet'] = subnet_reference_model

        # Construct a model instance of VPNGateway by calling from_dict on the json representation
        vpn_gateway_model = VPNGateway.from_dict(vpn_gateway_model_json)
        assert vpn_gateway_model != False

        # Construct a model instance of VPNGateway by calling from_dict on the json representation
        vpn_gateway_model_dict = VPNGateway.from_dict(
            vpn_gateway_model_json).__dict__
        vpn_gateway_model2 = VPNGateway(**vpn_gateway_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_model == vpn_gateway_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_model_json2 = vpn_gateway_model.to_dict()
        assert vpn_gateway_model_json2 == vpn_gateway_model_json


#-----------------------------------------------------------------------------
# Test Class for VPNGatewayCollection
#-----------------------------------------------------------------------------
class TestVPNGatewayCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPNGatewayCollection
    #--------------------------------------------------------
    def test_vpn_gateway_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        vpn_gateway_connection_reference_model = {
        }  # VPNGatewayConnectionReference
        vpn_gateway_connection_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b'
        vpn_gateway_connection_reference_model[
            'id'] = 'a10a5771-dc23-442c-8460-c3601d8542f7'
        vpn_gateway_connection_reference_model['name'] = 'my-vpn-connection'

        vpn_gateway_public_ip_model = {}  # VPNGatewayPublicIp
        vpn_gateway_public_ip_model['address'] = '192.168.3.4'

        vpn_gateway_model = {}  # VPNGateway
        vpn_gateway_model['connections'] = [
            vpn_gateway_connection_reference_model
        ]
        vpn_gateway_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        vpn_gateway_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b'
        vpn_gateway_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b'
        vpn_gateway_model['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'
        vpn_gateway_model['name'] = 'my-vpn-gateway'
        vpn_gateway_model['public_ip'] = vpn_gateway_public_ip_model
        vpn_gateway_model['resource_group'] = resource_group_reference_model
        vpn_gateway_model['status'] = 'available'
        vpn_gateway_model['subnet'] = subnet_reference_model

        vpn_gateway_collection_first_model = {}  # VPNGatewayCollectionFirst
        vpn_gateway_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?limit=20'

        vpn_gateway_collection_next_model = {}  # VPNGatewayCollectionNext
        vpn_gateway_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20'

        # Construct a json representation of a VPNGatewayCollection model
        vpn_gateway_collection_model_json = {}
        vpn_gateway_collection_model_json[
            'first'] = vpn_gateway_collection_first_model
        vpn_gateway_collection_model_json['limit'] = 20
        vpn_gateway_collection_model_json[
            'next'] = vpn_gateway_collection_next_model
        vpn_gateway_collection_model_json['total_count'] = 132
        vpn_gateway_collection_model_json['vpn_gateways'] = [vpn_gateway_model]

        # Construct a model instance of VPNGatewayCollection by calling from_dict on the json representation
        vpn_gateway_collection_model = VPNGatewayCollection.from_dict(
            vpn_gateway_collection_model_json)
        assert vpn_gateway_collection_model != False

        # Construct a model instance of VPNGatewayCollection by calling from_dict on the json representation
        vpn_gateway_collection_model_dict = VPNGatewayCollection.from_dict(
            vpn_gateway_collection_model_json).__dict__
        vpn_gateway_collection_model2 = VPNGatewayCollection(
            **vpn_gateway_collection_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_collection_model == vpn_gateway_collection_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_collection_model_json2 = vpn_gateway_collection_model.to_dict(
        )
        assert vpn_gateway_collection_model_json2 == vpn_gateway_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for VPNGatewayCollectionFirst
#-----------------------------------------------------------------------------
class TestVPNGatewayCollectionFirst():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPNGatewayCollectionFirst
    #--------------------------------------------------------
    def test_vpn_gateway_collection_first_serialization(self):

        # Construct a json representation of a VPNGatewayCollectionFirst model
        vpn_gateway_collection_first_model_json = {}
        vpn_gateway_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?limit=20'

        # Construct a model instance of VPNGatewayCollectionFirst by calling from_dict on the json representation
        vpn_gateway_collection_first_model = VPNGatewayCollectionFirst.from_dict(
            vpn_gateway_collection_first_model_json)
        assert vpn_gateway_collection_first_model != False

        # Construct a model instance of VPNGatewayCollectionFirst by calling from_dict on the json representation
        vpn_gateway_collection_first_model_dict = VPNGatewayCollectionFirst.from_dict(
            vpn_gateway_collection_first_model_json).__dict__
        vpn_gateway_collection_first_model2 = VPNGatewayCollectionFirst(
            **vpn_gateway_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_collection_first_model == vpn_gateway_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_collection_first_model_json2 = vpn_gateway_collection_first_model.to_dict(
        )
        assert vpn_gateway_collection_first_model_json2 == vpn_gateway_collection_first_model_json


#-----------------------------------------------------------------------------
# Test Class for VPNGatewayCollectionNext
#-----------------------------------------------------------------------------
class TestVPNGatewayCollectionNext():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPNGatewayCollectionNext
    #--------------------------------------------------------
    def test_vpn_gateway_collection_next_serialization(self):

        # Construct a json representation of a VPNGatewayCollectionNext model
        vpn_gateway_collection_next_model_json = {}
        vpn_gateway_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20'

        # Construct a model instance of VPNGatewayCollectionNext by calling from_dict on the json representation
        vpn_gateway_collection_next_model = VPNGatewayCollectionNext.from_dict(
            vpn_gateway_collection_next_model_json)
        assert vpn_gateway_collection_next_model != False

        # Construct a model instance of VPNGatewayCollectionNext by calling from_dict on the json representation
        vpn_gateway_collection_next_model_dict = VPNGatewayCollectionNext.from_dict(
            vpn_gateway_collection_next_model_json).__dict__
        vpn_gateway_collection_next_model2 = VPNGatewayCollectionNext(
            **vpn_gateway_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_collection_next_model == vpn_gateway_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_collection_next_model_json2 = vpn_gateway_collection_next_model.to_dict(
        )
        assert vpn_gateway_collection_next_model_json2 == vpn_gateway_collection_next_model_json


#-----------------------------------------------------------------------------
# Test Class for VPNGatewayConnection
#-----------------------------------------------------------------------------
class TestVPNGatewayConnection():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPNGatewayConnection
    #--------------------------------------------------------
    def test_vpn_gateway_connection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        ike_policy_identity_model = {}  # IKEPolicyIdentity
        ike_policy_identity_model['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        i_psec_policy_identity_model = {}  # IPsecPolicyIdentity
        i_psec_policy_identity_model[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        vpn_gateway_connection_dpd_model = {}  # VPNGatewayConnectionDPD
        vpn_gateway_connection_dpd_model['action'] = 'restart'
        vpn_gateway_connection_dpd_model['interval'] = 30
        vpn_gateway_connection_dpd_model['timeout'] = 120

        # Construct a json representation of a VPNGatewayConnection model
        vpn_gateway_connection_model_json = {}
        vpn_gateway_connection_model_json['admin_state_up'] = True
        vpn_gateway_connection_model_json['authentication_mode'] = 'psk'
        vpn_gateway_connection_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        vpn_gateway_connection_model_json[
            'dead_peer_detection'] = vpn_gateway_connection_dpd_model
        vpn_gateway_connection_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b'
        vpn_gateway_connection_model_json[
            'id'] = 'a10a5771-dc23-442c-8460-c3601d8542f7'
        vpn_gateway_connection_model_json[
            'ike_policy'] = ike_policy_identity_model
        vpn_gateway_connection_model_json[
            'ipsec_policy'] = i_psec_policy_identity_model
        vpn_gateway_connection_model_json['local_cidrs'] = ['192.168.1.0/24']
        vpn_gateway_connection_model_json['name'] = 'my-vpn-connection'
        vpn_gateway_connection_model_json['peer_address'] = '169.21.50.5'
        vpn_gateway_connection_model_json['peer_cidrs'] = ['10.45.1.0/24']
        vpn_gateway_connection_model_json['psk'] = 'lkj14b1oi0alcniejkso'
        vpn_gateway_connection_model_json['route_mode'] = 'policy'
        vpn_gateway_connection_model_json['status'] = 'down'

        # Construct a model instance of VPNGatewayConnection by calling from_dict on the json representation
        vpn_gateway_connection_model = VPNGatewayConnection.from_dict(
            vpn_gateway_connection_model_json)
        assert vpn_gateway_connection_model != False

        # Construct a model instance of VPNGatewayConnection by calling from_dict on the json representation
        vpn_gateway_connection_model_dict = VPNGatewayConnection.from_dict(
            vpn_gateway_connection_model_json).__dict__
        vpn_gateway_connection_model2 = VPNGatewayConnection(
            **vpn_gateway_connection_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_connection_model == vpn_gateway_connection_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_connection_model_json2 = vpn_gateway_connection_model.to_dict(
        )
        assert vpn_gateway_connection_model_json2 == vpn_gateway_connection_model_json


#-----------------------------------------------------------------------------
# Test Class for VPNGatewayConnectionCollection
#-----------------------------------------------------------------------------
class TestVPNGatewayConnectionCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPNGatewayConnectionCollection
    #--------------------------------------------------------
    def test_vpn_gateway_connection_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        ike_policy_identity_model = {}  # IKEPolicyIdentity
        ike_policy_identity_model['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        i_psec_policy_identity_model = {}  # IPsecPolicyIdentity
        i_psec_policy_identity_model[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        vpn_gateway_connection_dpd_model = {}  # VPNGatewayConnectionDPD
        vpn_gateway_connection_dpd_model['action'] = 'restart'
        vpn_gateway_connection_dpd_model['interval'] = 30
        vpn_gateway_connection_dpd_model['timeout'] = 120

        vpn_gateway_connection_model = {}  # VPNGatewayConnection
        vpn_gateway_connection_model['admin_state_up'] = True
        vpn_gateway_connection_model['authentication_mode'] = 'psk'
        vpn_gateway_connection_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        vpn_gateway_connection_model[
            'dead_peer_detection'] = vpn_gateway_connection_dpd_model
        vpn_gateway_connection_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b'
        vpn_gateway_connection_model[
            'id'] = 'a10a5771-dc23-442c-8460-c3601d8542f7'
        vpn_gateway_connection_model['ike_policy'] = ike_policy_identity_model
        vpn_gateway_connection_model[
            'ipsec_policy'] = i_psec_policy_identity_model
        vpn_gateway_connection_model['local_cidrs'] = ['192.168.1.0/24']
        vpn_gateway_connection_model['name'] = 'my-vpn-connection'
        vpn_gateway_connection_model['peer_address'] = '169.21.50.5'
        vpn_gateway_connection_model['peer_cidrs'] = ['10.45.1.0/24']
        vpn_gateway_connection_model['psk'] = 'lkj14b1oi0alcniejkso'
        vpn_gateway_connection_model['route_mode'] = 'policy'
        vpn_gateway_connection_model['status'] = 'down'

        # Construct a json representation of a VPNGatewayConnectionCollection model
        vpn_gateway_connection_collection_model_json = {}
        vpn_gateway_connection_collection_model_json['connections'] = [
            vpn_gateway_connection_model
        ]

        # Construct a model instance of VPNGatewayConnectionCollection by calling from_dict on the json representation
        vpn_gateway_connection_collection_model = VPNGatewayConnectionCollection.from_dict(
            vpn_gateway_connection_collection_model_json)
        assert vpn_gateway_connection_collection_model != False

        # Construct a model instance of VPNGatewayConnectionCollection by calling from_dict on the json representation
        vpn_gateway_connection_collection_model_dict = VPNGatewayConnectionCollection.from_dict(
            vpn_gateway_connection_collection_model_json).__dict__
        vpn_gateway_connection_collection_model2 = VPNGatewayConnectionCollection(
            **vpn_gateway_connection_collection_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_connection_collection_model == vpn_gateway_connection_collection_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_connection_collection_model_json2 = vpn_gateway_connection_collection_model.to_dict(
        )
        assert vpn_gateway_connection_collection_model_json2 == vpn_gateway_connection_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for VPNGatewayConnectionDPD
#-----------------------------------------------------------------------------
class TestVPNGatewayConnectionDPD():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPNGatewayConnectionDPD
    #--------------------------------------------------------
    def test_vpn_gateway_connection_dpd_serialization(self):

        # Construct a json representation of a VPNGatewayConnectionDPD model
        vpn_gateway_connection_dpd_model_json = {}
        vpn_gateway_connection_dpd_model_json['action'] = 'restart'
        vpn_gateway_connection_dpd_model_json['interval'] = 30
        vpn_gateway_connection_dpd_model_json['timeout'] = 120

        # Construct a model instance of VPNGatewayConnectionDPD by calling from_dict on the json representation
        vpn_gateway_connection_dpd_model = VPNGatewayConnectionDPD.from_dict(
            vpn_gateway_connection_dpd_model_json)
        assert vpn_gateway_connection_dpd_model != False

        # Construct a model instance of VPNGatewayConnectionDPD by calling from_dict on the json representation
        vpn_gateway_connection_dpd_model_dict = VPNGatewayConnectionDPD.from_dict(
            vpn_gateway_connection_dpd_model_json).__dict__
        vpn_gateway_connection_dpd_model2 = VPNGatewayConnectionDPD(
            **vpn_gateway_connection_dpd_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_connection_dpd_model == vpn_gateway_connection_dpd_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_connection_dpd_model_json2 = vpn_gateway_connection_dpd_model.to_dict(
        )
        assert vpn_gateway_connection_dpd_model_json2 == vpn_gateway_connection_dpd_model_json


#-----------------------------------------------------------------------------
# Test Class for VPNGatewayConnectionDPDPrototype
#-----------------------------------------------------------------------------
class TestVPNGatewayConnectionDPDPrototype():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPNGatewayConnectionDPDPrototype
    #--------------------------------------------------------
    def test_vpn_gateway_connection_dpd_prototype_serialization(self):

        # Construct a json representation of a VPNGatewayConnectionDPDPrototype model
        vpn_gateway_connection_dpd_prototype_model_json = {}
        vpn_gateway_connection_dpd_prototype_model_json['action'] = 'restart'
        vpn_gateway_connection_dpd_prototype_model_json['interval'] = 30
        vpn_gateway_connection_dpd_prototype_model_json['timeout'] = 120

        # Construct a model instance of VPNGatewayConnectionDPDPrototype by calling from_dict on the json representation
        vpn_gateway_connection_dpd_prototype_model = VPNGatewayConnectionDPDPrototype.from_dict(
            vpn_gateway_connection_dpd_prototype_model_json)
        assert vpn_gateway_connection_dpd_prototype_model != False

        # Construct a model instance of VPNGatewayConnectionDPDPrototype by calling from_dict on the json representation
        vpn_gateway_connection_dpd_prototype_model_dict = VPNGatewayConnectionDPDPrototype.from_dict(
            vpn_gateway_connection_dpd_prototype_model_json).__dict__
        vpn_gateway_connection_dpd_prototype_model2 = VPNGatewayConnectionDPDPrototype(
            **vpn_gateway_connection_dpd_prototype_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_connection_dpd_prototype_model == vpn_gateway_connection_dpd_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_connection_dpd_prototype_model_json2 = vpn_gateway_connection_dpd_prototype_model.to_dict(
        )
        assert vpn_gateway_connection_dpd_prototype_model_json2 == vpn_gateway_connection_dpd_prototype_model_json


#-----------------------------------------------------------------------------
# Test Class for VPNGatewayConnectionLocalCIDRs
#-----------------------------------------------------------------------------
class TestVPNGatewayConnectionLocalCIDRs():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPNGatewayConnectionLocalCIDRs
    #--------------------------------------------------------
    def test_vpn_gateway_connection_local_cid_rs_serialization(self):

        # Construct a json representation of a VPNGatewayConnectionLocalCIDRs model
        vpn_gateway_connection_local_cid_rs_model_json = {}
        vpn_gateway_connection_local_cid_rs_model_json['local_cidrs'] = [
            '192.168.1.0/24'
        ]

        # Construct a model instance of VPNGatewayConnectionLocalCIDRs by calling from_dict on the json representation
        vpn_gateway_connection_local_cid_rs_model = VPNGatewayConnectionLocalCIDRs.from_dict(
            vpn_gateway_connection_local_cid_rs_model_json)
        assert vpn_gateway_connection_local_cid_rs_model != False

        # Construct a model instance of VPNGatewayConnectionLocalCIDRs by calling from_dict on the json representation
        vpn_gateway_connection_local_cid_rs_model_dict = VPNGatewayConnectionLocalCIDRs.from_dict(
            vpn_gateway_connection_local_cid_rs_model_json).__dict__
        vpn_gateway_connection_local_cid_rs_model2 = VPNGatewayConnectionLocalCIDRs(
            **vpn_gateway_connection_local_cid_rs_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_connection_local_cid_rs_model == vpn_gateway_connection_local_cid_rs_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_connection_local_cid_rs_model_json2 = vpn_gateway_connection_local_cid_rs_model.to_dict(
        )
        assert vpn_gateway_connection_local_cid_rs_model_json2 == vpn_gateway_connection_local_cid_rs_model_json


#-----------------------------------------------------------------------------
# Test Class for VPNGatewayConnectionPeerCIDRs
#-----------------------------------------------------------------------------
class TestVPNGatewayConnectionPeerCIDRs():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPNGatewayConnectionPeerCIDRs
    #--------------------------------------------------------
    def test_vpn_gateway_connection_peer_cid_rs_serialization(self):

        # Construct a json representation of a VPNGatewayConnectionPeerCIDRs model
        vpn_gateway_connection_peer_cid_rs_model_json = {}
        vpn_gateway_connection_peer_cid_rs_model_json['peer_cidrs'] = [
            '10.45.1.0/24'
        ]

        # Construct a model instance of VPNGatewayConnectionPeerCIDRs by calling from_dict on the json representation
        vpn_gateway_connection_peer_cid_rs_model = VPNGatewayConnectionPeerCIDRs.from_dict(
            vpn_gateway_connection_peer_cid_rs_model_json)
        assert vpn_gateway_connection_peer_cid_rs_model != False

        # Construct a model instance of VPNGatewayConnectionPeerCIDRs by calling from_dict on the json representation
        vpn_gateway_connection_peer_cid_rs_model_dict = VPNGatewayConnectionPeerCIDRs.from_dict(
            vpn_gateway_connection_peer_cid_rs_model_json).__dict__
        vpn_gateway_connection_peer_cid_rs_model2 = VPNGatewayConnectionPeerCIDRs(
            **vpn_gateway_connection_peer_cid_rs_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_connection_peer_cid_rs_model == vpn_gateway_connection_peer_cid_rs_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_connection_peer_cid_rs_model_json2 = vpn_gateway_connection_peer_cid_rs_model.to_dict(
        )
        assert vpn_gateway_connection_peer_cid_rs_model_json2 == vpn_gateway_connection_peer_cid_rs_model_json


#-----------------------------------------------------------------------------
# Test Class for VPNGatewayConnectionReference
#-----------------------------------------------------------------------------
class TestVPNGatewayConnectionReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPNGatewayConnectionReference
    #--------------------------------------------------------
    def test_vpn_gateway_connection_reference_serialization(self):

        # Construct a json representation of a VPNGatewayConnectionReference model
        vpn_gateway_connection_reference_model_json = {}
        vpn_gateway_connection_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b'
        vpn_gateway_connection_reference_model_json[
            'id'] = 'a10a5771-dc23-442c-8460-c3601d8542f7'
        vpn_gateway_connection_reference_model_json[
            'name'] = 'my-vpn-connection'

        # Construct a model instance of VPNGatewayConnectionReference by calling from_dict on the json representation
        vpn_gateway_connection_reference_model = VPNGatewayConnectionReference.from_dict(
            vpn_gateway_connection_reference_model_json)
        assert vpn_gateway_connection_reference_model != False

        # Construct a model instance of VPNGatewayConnectionReference by calling from_dict on the json representation
        vpn_gateway_connection_reference_model_dict = VPNGatewayConnectionReference.from_dict(
            vpn_gateway_connection_reference_model_json).__dict__
        vpn_gateway_connection_reference_model2 = VPNGatewayConnectionReference(
            **vpn_gateway_connection_reference_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_connection_reference_model == vpn_gateway_connection_reference_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_connection_reference_model_json2 = vpn_gateway_connection_reference_model.to_dict(
        )
        assert vpn_gateway_connection_reference_model_json2 == vpn_gateway_connection_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for VPNGatewayPublicIp
#-----------------------------------------------------------------------------
class TestVPNGatewayPublicIp():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPNGatewayPublicIp
    #--------------------------------------------------------
    def test_vpn_gateway_public_ip_serialization(self):

        # Construct a json representation of a VPNGatewayPublicIp model
        vpn_gateway_public_ip_model_json = {}
        vpn_gateway_public_ip_model_json['address'] = '192.168.3.4'

        # Construct a model instance of VPNGatewayPublicIp by calling from_dict on the json representation
        vpn_gateway_public_ip_model = VPNGatewayPublicIp.from_dict(
            vpn_gateway_public_ip_model_json)
        assert vpn_gateway_public_ip_model != False

        # Construct a model instance of VPNGatewayPublicIp by calling from_dict on the json representation
        vpn_gateway_public_ip_model_dict = VPNGatewayPublicIp.from_dict(
            vpn_gateway_public_ip_model_json).__dict__
        vpn_gateway_public_ip_model2 = VPNGatewayPublicIp(
            **vpn_gateway_public_ip_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_public_ip_model == vpn_gateway_public_ip_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_public_ip_model_json2 = vpn_gateway_public_ip_model.to_dict(
        )
        assert vpn_gateway_public_ip_model_json2 == vpn_gateway_public_ip_model_json


#-----------------------------------------------------------------------------
# Test Class for Volume
#-----------------------------------------------------------------------------
class TestVolume():

    #--------------------------------------------------------
    # Test serialization/deserialization for Volume
    #--------------------------------------------------------
    def test_volume_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        instance_reference_model = {}  # InstanceReference
        instance_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model['id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model['name'] = 'my-instance'

        volume_attachment_device_model = {}  # VolumeAttachmentDevice
        volume_attachment_device_model[
            'id'] = '80b3e36e-41f4-40e9-bd56-beae81792a68'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        volume_attachment_reference_volume_context_model = {
        }  # VolumeAttachmentReferenceVolumeContext
        volume_attachment_reference_volume_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_reference_volume_context_model[
            'device'] = volume_attachment_device_model
        volume_attachment_reference_volume_context_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_volume_context_model[
            'id'] = '82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_volume_context_model[
            'instance'] = instance_reference_model
        volume_attachment_reference_volume_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_reference_volume_context_model['type'] = 'boot'

        volume_profile_reference_model = {}  # VolumeProfileReference
        volume_profile_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose'
        volume_profile_reference_model['name'] = 'general-purpose'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model['name'] = 'us-south-1'

        # Construct a json representation of a Volume model
        volume_model_json = {}
        volume_model_json['capacity'] = 100
        volume_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        volume_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_model_json['encryption'] = 'provider_managed'
        volume_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_model_json['id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_model_json['iops'] = 10000
        volume_model_json['name'] = 'my-volume'
        volume_model_json['profile'] = volume_profile_reference_model
        volume_model_json['resource_group'] = resource_group_reference_model
        volume_model_json['status'] = 'available'
        volume_model_json['volume_attachments'] = [
            volume_attachment_reference_volume_context_model
        ]
        volume_model_json['zone'] = zone_reference_model

        # Construct a model instance of Volume by calling from_dict on the json representation
        volume_model = Volume.from_dict(volume_model_json)
        assert volume_model != False

        # Construct a model instance of Volume by calling from_dict on the json representation
        volume_model_dict = Volume.from_dict(volume_model_json).__dict__
        volume_model2 = Volume(**volume_model_dict)

        # Verify the model instances are equivalent
        assert volume_model == volume_model2

        # Convert model instance back to dict and verify no loss of data
        volume_model_json2 = volume_model.to_dict()
        assert volume_model_json2 == volume_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeAttachment
#-----------------------------------------------------------------------------
class TestVolumeAttachment():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeAttachment
    #--------------------------------------------------------
    def test_volume_attachment_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        volume_attachment_device_model = {}  # VolumeAttachmentDevice
        volume_attachment_device_model[
            'id'] = '80b3e36e-41f4-40e9-bd56-beae81792a68'

        volume_reference_model = {}  # VolumeReference
        volume_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model['id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model['name'] = 'my-volume'

        # Construct a json representation of a VolumeAttachment model
        volume_attachment_model_json = {}
        volume_attachment_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        volume_attachment_model_json['delete_volume_on_instance_delete'] = True
        volume_attachment_model_json['device'] = volume_attachment_device_model
        volume_attachment_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_model_json[
            'id'] = '82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_model_json['name'] = 'my-volume-attachment'
        volume_attachment_model_json['status'] = 'attached'
        volume_attachment_model_json['type'] = 'boot'
        volume_attachment_model_json['volume'] = volume_reference_model

        # Construct a model instance of VolumeAttachment by calling from_dict on the json representation
        volume_attachment_model = VolumeAttachment.from_dict(
            volume_attachment_model_json)
        assert volume_attachment_model != False

        # Construct a model instance of VolumeAttachment by calling from_dict on the json representation
        volume_attachment_model_dict = VolumeAttachment.from_dict(
            volume_attachment_model_json).__dict__
        volume_attachment_model2 = VolumeAttachment(
            **volume_attachment_model_dict)

        # Verify the model instances are equivalent
        assert volume_attachment_model == volume_attachment_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_model_json2 = volume_attachment_model.to_dict()
        assert volume_attachment_model_json2 == volume_attachment_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeAttachmentCollection
#-----------------------------------------------------------------------------
class TestVolumeAttachmentCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeAttachmentCollection
    #--------------------------------------------------------
    def test_volume_attachment_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        volume_attachment_device_model = {}  # VolumeAttachmentDevice
        volume_attachment_device_model[
            'id'] = '80b3e36e-41f4-40e9-bd56-beae81792a68'

        volume_reference_model = {}  # VolumeReference
        volume_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model['id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model['name'] = 'my-volume'

        volume_attachment_model = {}  # VolumeAttachment
        volume_attachment_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        volume_attachment_model['delete_volume_on_instance_delete'] = True
        volume_attachment_model['device'] = volume_attachment_device_model
        volume_attachment_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_model['id'] = '82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_model['name'] = 'my-volume-attachment'
        volume_attachment_model['status'] = 'attached'
        volume_attachment_model['type'] = 'boot'
        volume_attachment_model['volume'] = volume_reference_model

        # Construct a json representation of a VolumeAttachmentCollection model
        volume_attachment_collection_model_json = {}
        volume_attachment_collection_model_json['volume_attachments'] = [
            volume_attachment_model
        ]

        # Construct a model instance of VolumeAttachmentCollection by calling from_dict on the json representation
        volume_attachment_collection_model = VolumeAttachmentCollection.from_dict(
            volume_attachment_collection_model_json)
        assert volume_attachment_collection_model != False

        # Construct a model instance of VolumeAttachmentCollection by calling from_dict on the json representation
        volume_attachment_collection_model_dict = VolumeAttachmentCollection.from_dict(
            volume_attachment_collection_model_json).__dict__
        volume_attachment_collection_model2 = VolumeAttachmentCollection(
            **volume_attachment_collection_model_dict)

        # Verify the model instances are equivalent
        assert volume_attachment_collection_model == volume_attachment_collection_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_collection_model_json2 = volume_attachment_collection_model.to_dict(
        )
        assert volume_attachment_collection_model_json2 == volume_attachment_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeAttachmentDevice
#-----------------------------------------------------------------------------
class TestVolumeAttachmentDevice():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeAttachmentDevice
    #--------------------------------------------------------
    def test_volume_attachment_device_serialization(self):

        # Construct a json representation of a VolumeAttachmentDevice model
        volume_attachment_device_model_json = {}
        volume_attachment_device_model_json[
            'id'] = '80b3e36e-41f4-40e9-bd56-beae81792a68'

        # Construct a model instance of VolumeAttachmentDevice by calling from_dict on the json representation
        volume_attachment_device_model = VolumeAttachmentDevice.from_dict(
            volume_attachment_device_model_json)
        assert volume_attachment_device_model != False

        # Construct a model instance of VolumeAttachmentDevice by calling from_dict on the json representation
        volume_attachment_device_model_dict = VolumeAttachmentDevice.from_dict(
            volume_attachment_device_model_json).__dict__
        volume_attachment_device_model2 = VolumeAttachmentDevice(
            **volume_attachment_device_model_dict)

        # Verify the model instances are equivalent
        assert volume_attachment_device_model == volume_attachment_device_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_device_model_json2 = volume_attachment_device_model.to_dict(
        )
        assert volume_attachment_device_model_json2 == volume_attachment_device_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeAttachmentPrototypeInstanceByImageContext
#-----------------------------------------------------------------------------
class TestVolumeAttachmentPrototypeInstanceByImageContext():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeAttachmentPrototypeInstanceByImageContext
    #--------------------------------------------------------
    def test_volume_attachment_prototype_instance_by_image_context_serialization(
            self):

        # Construct dict forms of any model objects needed in order to build this model.

        volume_profile_identity_model = {}  # VolumeProfileIdentity
        volume_profile_identity_model['name'] = 'general-purpose'

        volume_prototype_instance_by_image_context_model = {
        }  # VolumePrototypeInstanceByImageContext
        volume_prototype_instance_by_image_context_model['capacity'] = 100
        volume_prototype_instance_by_image_context_model['iops'] = 10000
        volume_prototype_instance_by_image_context_model['name'] = 'my-volume'
        volume_prototype_instance_by_image_context_model[
            'profile'] = volume_profile_identity_model

        # Construct a json representation of a VolumeAttachmentPrototypeInstanceByImageContext model
        volume_attachment_prototype_instance_by_image_context_model_json = {}
        volume_attachment_prototype_instance_by_image_context_model_json[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_by_image_context_model_json[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_by_image_context_model_json[
            'volume'] = volume_prototype_instance_by_image_context_model

        # Construct a model instance of VolumeAttachmentPrototypeInstanceByImageContext by calling from_dict on the json representation
        volume_attachment_prototype_instance_by_image_context_model = VolumeAttachmentPrototypeInstanceByImageContext.from_dict(
            volume_attachment_prototype_instance_by_image_context_model_json)
        assert volume_attachment_prototype_instance_by_image_context_model != False

        # Construct a model instance of VolumeAttachmentPrototypeInstanceByImageContext by calling from_dict on the json representation
        volume_attachment_prototype_instance_by_image_context_model_dict = VolumeAttachmentPrototypeInstanceByImageContext.from_dict(
            volume_attachment_prototype_instance_by_image_context_model_json
        ).__dict__
        volume_attachment_prototype_instance_by_image_context_model2 = VolumeAttachmentPrototypeInstanceByImageContext(
            **volume_attachment_prototype_instance_by_image_context_model_dict)

        # Verify the model instances are equivalent
        assert volume_attachment_prototype_instance_by_image_context_model == volume_attachment_prototype_instance_by_image_context_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_prototype_instance_by_image_context_model_json2 = volume_attachment_prototype_instance_by_image_context_model.to_dict(
        )
        assert volume_attachment_prototype_instance_by_image_context_model_json2 == volume_attachment_prototype_instance_by_image_context_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeAttachmentPrototypeInstanceContext
#-----------------------------------------------------------------------------
class TestVolumeAttachmentPrototypeInstanceContext():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeAttachmentPrototypeInstanceContext
    #--------------------------------------------------------
    def test_volume_attachment_prototype_instance_context_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        volume_attachment_prototype_instance_context_volume_model = {
        }  # VolumeAttachmentPrototypeInstanceContextVolume
        volume_attachment_prototype_instance_context_volume_model[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a json representation of a VolumeAttachmentPrototypeInstanceContext model
        volume_attachment_prototype_instance_context_model_json = {}
        volume_attachment_prototype_instance_context_model_json[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_context_model_json[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_context_model_json[
            'volume'] = volume_attachment_prototype_instance_context_volume_model

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContext by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_model = VolumeAttachmentPrototypeInstanceContext.from_dict(
            volume_attachment_prototype_instance_context_model_json)
        assert volume_attachment_prototype_instance_context_model != False

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContext by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_model_dict = VolumeAttachmentPrototypeInstanceContext.from_dict(
            volume_attachment_prototype_instance_context_model_json).__dict__
        volume_attachment_prototype_instance_context_model2 = VolumeAttachmentPrototypeInstanceContext(
            **volume_attachment_prototype_instance_context_model_dict)

        # Verify the model instances are equivalent
        assert volume_attachment_prototype_instance_context_model == volume_attachment_prototype_instance_context_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_prototype_instance_context_model_json2 = volume_attachment_prototype_instance_context_model.to_dict(
        )
        assert volume_attachment_prototype_instance_context_model_json2 == volume_attachment_prototype_instance_context_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeAttachmentReferenceInstanceContext
#-----------------------------------------------------------------------------
class TestVolumeAttachmentReferenceInstanceContext():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeAttachmentReferenceInstanceContext
    #--------------------------------------------------------
    def test_volume_attachment_reference_instance_context_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        volume_attachment_device_model = {}  # VolumeAttachmentDevice
        volume_attachment_device_model[
            'id'] = '80b3e36e-41f4-40e9-bd56-beae81792a68'

        volume_reference_model = {}  # VolumeReference
        volume_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model['id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model['name'] = 'my-volume'

        # Construct a json representation of a VolumeAttachmentReferenceInstanceContext model
        volume_attachment_reference_instance_context_model_json = {}
        volume_attachment_reference_instance_context_model_json[
            'device'] = volume_attachment_device_model
        volume_attachment_reference_instance_context_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_instance_context_model_json[
            'id'] = '82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_instance_context_model_json[
            'name'] = 'my-volume-attachment'
        volume_attachment_reference_instance_context_model_json[
            'volume'] = volume_reference_model

        # Construct a model instance of VolumeAttachmentReferenceInstanceContext by calling from_dict on the json representation
        volume_attachment_reference_instance_context_model = VolumeAttachmentReferenceInstanceContext.from_dict(
            volume_attachment_reference_instance_context_model_json)
        assert volume_attachment_reference_instance_context_model != False

        # Construct a model instance of VolumeAttachmentReferenceInstanceContext by calling from_dict on the json representation
        volume_attachment_reference_instance_context_model_dict = VolumeAttachmentReferenceInstanceContext.from_dict(
            volume_attachment_reference_instance_context_model_json).__dict__
        volume_attachment_reference_instance_context_model2 = VolumeAttachmentReferenceInstanceContext(
            **volume_attachment_reference_instance_context_model_dict)

        # Verify the model instances are equivalent
        assert volume_attachment_reference_instance_context_model == volume_attachment_reference_instance_context_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_reference_instance_context_model_json2 = volume_attachment_reference_instance_context_model.to_dict(
        )
        assert volume_attachment_reference_instance_context_model_json2 == volume_attachment_reference_instance_context_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeAttachmentReferenceVolumeContext
#-----------------------------------------------------------------------------
class TestVolumeAttachmentReferenceVolumeContext():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeAttachmentReferenceVolumeContext
    #--------------------------------------------------------
    def test_volume_attachment_reference_volume_context_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        instance_reference_model = {}  # InstanceReference
        instance_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model['id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model['name'] = 'my-instance'

        volume_attachment_device_model = {}  # VolumeAttachmentDevice
        volume_attachment_device_model[
            'id'] = '80b3e36e-41f4-40e9-bd56-beae81792a68'

        # Construct a json representation of a VolumeAttachmentReferenceVolumeContext model
        volume_attachment_reference_volume_context_model_json = {}
        volume_attachment_reference_volume_context_model_json[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_reference_volume_context_model_json[
            'device'] = volume_attachment_device_model
        volume_attachment_reference_volume_context_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_volume_context_model_json[
            'id'] = '82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_volume_context_model_json[
            'instance'] = instance_reference_model
        volume_attachment_reference_volume_context_model_json[
            'name'] = 'my-volume-attachment'
        volume_attachment_reference_volume_context_model_json['type'] = 'boot'

        # Construct a model instance of VolumeAttachmentReferenceVolumeContext by calling from_dict on the json representation
        volume_attachment_reference_volume_context_model = VolumeAttachmentReferenceVolumeContext.from_dict(
            volume_attachment_reference_volume_context_model_json)
        assert volume_attachment_reference_volume_context_model != False

        # Construct a model instance of VolumeAttachmentReferenceVolumeContext by calling from_dict on the json representation
        volume_attachment_reference_volume_context_model_dict = VolumeAttachmentReferenceVolumeContext.from_dict(
            volume_attachment_reference_volume_context_model_json).__dict__
        volume_attachment_reference_volume_context_model2 = VolumeAttachmentReferenceVolumeContext(
            **volume_attachment_reference_volume_context_model_dict)

        # Verify the model instances are equivalent
        assert volume_attachment_reference_volume_context_model == volume_attachment_reference_volume_context_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_reference_volume_context_model_json2 = volume_attachment_reference_volume_context_model.to_dict(
        )
        assert volume_attachment_reference_volume_context_model_json2 == volume_attachment_reference_volume_context_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeCollection
#-----------------------------------------------------------------------------
class TestVolumeCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeCollection
    #--------------------------------------------------------
    def test_volume_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        instance_reference_model = {}  # InstanceReference
        instance_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model['id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model['name'] = 'my-instance'

        volume_attachment_device_model = {}  # VolumeAttachmentDevice
        volume_attachment_device_model[
            'id'] = '80b3e36e-41f4-40e9-bd56-beae81792a68'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'

        volume_attachment_reference_volume_context_model = {
        }  # VolumeAttachmentReferenceVolumeContext
        volume_attachment_reference_volume_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_reference_volume_context_model[
            'device'] = volume_attachment_device_model
        volume_attachment_reference_volume_context_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_volume_context_model[
            'id'] = '82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_volume_context_model[
            'instance'] = instance_reference_model
        volume_attachment_reference_volume_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_reference_volume_context_model['type'] = 'boot'

        volume_profile_reference_model = {}  # VolumeProfileReference
        volume_profile_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose'
        volume_profile_reference_model['name'] = 'general-purpose'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model['name'] = 'us-south-1'

        volume_model = {}  # Volume
        volume_model['capacity'] = 100
        volume_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        volume_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_model['encryption'] = 'provider_managed'
        volume_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_model['id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_model['iops'] = 10000
        volume_model['name'] = 'my-volume'
        volume_model['profile'] = volume_profile_reference_model
        volume_model['resource_group'] = resource_group_reference_model
        volume_model['status'] = 'available'
        volume_model['volume_attachments'] = [
            volume_attachment_reference_volume_context_model
        ]
        volume_model['zone'] = zone_reference_model

        volume_collection_first_model = {}  # VolumeCollectionFirst
        volume_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes?limit=20'

        volume_collection_next_model = {}  # VolumeCollectionNext
        volume_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a json representation of a VolumeCollection model
        volume_collection_model_json = {}
        volume_collection_model_json['first'] = volume_collection_first_model
        volume_collection_model_json['limit'] = 20
        volume_collection_model_json['next'] = volume_collection_next_model
        volume_collection_model_json['volumes'] = [volume_model]

        # Construct a model instance of VolumeCollection by calling from_dict on the json representation
        volume_collection_model = VolumeCollection.from_dict(
            volume_collection_model_json)
        assert volume_collection_model != False

        # Construct a model instance of VolumeCollection by calling from_dict on the json representation
        volume_collection_model_dict = VolumeCollection.from_dict(
            volume_collection_model_json).__dict__
        volume_collection_model2 = VolumeCollection(
            **volume_collection_model_dict)

        # Verify the model instances are equivalent
        assert volume_collection_model == volume_collection_model2

        # Convert model instance back to dict and verify no loss of data
        volume_collection_model_json2 = volume_collection_model.to_dict()
        assert volume_collection_model_json2 == volume_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeCollectionFirst
#-----------------------------------------------------------------------------
class TestVolumeCollectionFirst():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeCollectionFirst
    #--------------------------------------------------------
    def test_volume_collection_first_serialization(self):

        # Construct a json representation of a VolumeCollectionFirst model
        volume_collection_first_model_json = {}
        volume_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes?limit=20'

        # Construct a model instance of VolumeCollectionFirst by calling from_dict on the json representation
        volume_collection_first_model = VolumeCollectionFirst.from_dict(
            volume_collection_first_model_json)
        assert volume_collection_first_model != False

        # Construct a model instance of VolumeCollectionFirst by calling from_dict on the json representation
        volume_collection_first_model_dict = VolumeCollectionFirst.from_dict(
            volume_collection_first_model_json).__dict__
        volume_collection_first_model2 = VolumeCollectionFirst(
            **volume_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert volume_collection_first_model == volume_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        volume_collection_first_model_json2 = volume_collection_first_model.to_dict(
        )
        assert volume_collection_first_model_json2 == volume_collection_first_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeCollectionNext
#-----------------------------------------------------------------------------
class TestVolumeCollectionNext():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeCollectionNext
    #--------------------------------------------------------
    def test_volume_collection_next_serialization(self):

        # Construct a json representation of a VolumeCollectionNext model
        volume_collection_next_model_json = {}
        volume_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of VolumeCollectionNext by calling from_dict on the json representation
        volume_collection_next_model = VolumeCollectionNext.from_dict(
            volume_collection_next_model_json)
        assert volume_collection_next_model != False

        # Construct a model instance of VolumeCollectionNext by calling from_dict on the json representation
        volume_collection_next_model_dict = VolumeCollectionNext.from_dict(
            volume_collection_next_model_json).__dict__
        volume_collection_next_model2 = VolumeCollectionNext(
            **volume_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert volume_collection_next_model == volume_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        volume_collection_next_model_json2 = volume_collection_next_model.to_dict(
        )
        assert volume_collection_next_model_json2 == volume_collection_next_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeProfile
#-----------------------------------------------------------------------------
class TestVolumeProfile():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeProfile
    #--------------------------------------------------------
    def test_volume_profile_serialization(self):

        # Construct a json representation of a VolumeProfile model
        volume_profile_model_json = {}
        volume_profile_model_json['family'] = 'tiered'
        volume_profile_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose'
        volume_profile_model_json['name'] = 'general-purpose'

        # Construct a model instance of VolumeProfile by calling from_dict on the json representation
        volume_profile_model = VolumeProfile.from_dict(
            volume_profile_model_json)
        assert volume_profile_model != False

        # Construct a model instance of VolumeProfile by calling from_dict on the json representation
        volume_profile_model_dict = VolumeProfile.from_dict(
            volume_profile_model_json).__dict__
        volume_profile_model2 = VolumeProfile(**volume_profile_model_dict)

        # Verify the model instances are equivalent
        assert volume_profile_model == volume_profile_model2

        # Convert model instance back to dict and verify no loss of data
        volume_profile_model_json2 = volume_profile_model.to_dict()
        assert volume_profile_model_json2 == volume_profile_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeProfileCollection
#-----------------------------------------------------------------------------
class TestVolumeProfileCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeProfileCollection
    #--------------------------------------------------------
    def test_volume_profile_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        volume_profile_model = {}  # VolumeProfile
        volume_profile_model['family'] = 'tiered'
        volume_profile_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose'
        volume_profile_model['name'] = 'general-purpose'

        volume_profile_collection_first_model = {
        }  # VolumeProfileCollectionFirst
        volume_profile_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?limit=20'

        volume_profile_collection_next_model = {}  # VolumeProfileCollectionNext
        volume_profile_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a json representation of a VolumeProfileCollection model
        volume_profile_collection_model_json = {}
        volume_profile_collection_model_json[
            'first'] = volume_profile_collection_first_model
        volume_profile_collection_model_json['limit'] = 20
        volume_profile_collection_model_json[
            'next'] = volume_profile_collection_next_model
        volume_profile_collection_model_json['profiles'] = [
            volume_profile_model
        ]
        volume_profile_collection_model_json['total_count'] = 132

        # Construct a model instance of VolumeProfileCollection by calling from_dict on the json representation
        volume_profile_collection_model = VolumeProfileCollection.from_dict(
            volume_profile_collection_model_json)
        assert volume_profile_collection_model != False

        # Construct a model instance of VolumeProfileCollection by calling from_dict on the json representation
        volume_profile_collection_model_dict = VolumeProfileCollection.from_dict(
            volume_profile_collection_model_json).__dict__
        volume_profile_collection_model2 = VolumeProfileCollection(
            **volume_profile_collection_model_dict)

        # Verify the model instances are equivalent
        assert volume_profile_collection_model == volume_profile_collection_model2

        # Convert model instance back to dict and verify no loss of data
        volume_profile_collection_model_json2 = volume_profile_collection_model.to_dict(
        )
        assert volume_profile_collection_model_json2 == volume_profile_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeProfileCollectionFirst
#-----------------------------------------------------------------------------
class TestVolumeProfileCollectionFirst():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeProfileCollectionFirst
    #--------------------------------------------------------
    def test_volume_profile_collection_first_serialization(self):

        # Construct a json representation of a VolumeProfileCollectionFirst model
        volume_profile_collection_first_model_json = {}
        volume_profile_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?limit=20'

        # Construct a model instance of VolumeProfileCollectionFirst by calling from_dict on the json representation
        volume_profile_collection_first_model = VolumeProfileCollectionFirst.from_dict(
            volume_profile_collection_first_model_json)
        assert volume_profile_collection_first_model != False

        # Construct a model instance of VolumeProfileCollectionFirst by calling from_dict on the json representation
        volume_profile_collection_first_model_dict = VolumeProfileCollectionFirst.from_dict(
            volume_profile_collection_first_model_json).__dict__
        volume_profile_collection_first_model2 = VolumeProfileCollectionFirst(
            **volume_profile_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert volume_profile_collection_first_model == volume_profile_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        volume_profile_collection_first_model_json2 = volume_profile_collection_first_model.to_dict(
        )
        assert volume_profile_collection_first_model_json2 == volume_profile_collection_first_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeProfileCollectionNext
#-----------------------------------------------------------------------------
class TestVolumeProfileCollectionNext():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeProfileCollectionNext
    #--------------------------------------------------------
    def test_volume_profile_collection_next_serialization(self):

        # Construct a json representation of a VolumeProfileCollectionNext model
        volume_profile_collection_next_model_json = {}
        volume_profile_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of VolumeProfileCollectionNext by calling from_dict on the json representation
        volume_profile_collection_next_model = VolumeProfileCollectionNext.from_dict(
            volume_profile_collection_next_model_json)
        assert volume_profile_collection_next_model != False

        # Construct a model instance of VolumeProfileCollectionNext by calling from_dict on the json representation
        volume_profile_collection_next_model_dict = VolumeProfileCollectionNext.from_dict(
            volume_profile_collection_next_model_json).__dict__
        volume_profile_collection_next_model2 = VolumeProfileCollectionNext(
            **volume_profile_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert volume_profile_collection_next_model == volume_profile_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        volume_profile_collection_next_model_json2 = volume_profile_collection_next_model.to_dict(
        )
        assert volume_profile_collection_next_model_json2 == volume_profile_collection_next_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeProfileReference
#-----------------------------------------------------------------------------
class TestVolumeProfileReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeProfileReference
    #--------------------------------------------------------
    def test_volume_profile_reference_serialization(self):

        # Construct a json representation of a VolumeProfileReference model
        volume_profile_reference_model_json = {}
        volume_profile_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose'
        volume_profile_reference_model_json['name'] = 'general-purpose'

        # Construct a model instance of VolumeProfileReference by calling from_dict on the json representation
        volume_profile_reference_model = VolumeProfileReference.from_dict(
            volume_profile_reference_model_json)
        assert volume_profile_reference_model != False

        # Construct a model instance of VolumeProfileReference by calling from_dict on the json representation
        volume_profile_reference_model_dict = VolumeProfileReference.from_dict(
            volume_profile_reference_model_json).__dict__
        volume_profile_reference_model2 = VolumeProfileReference(
            **volume_profile_reference_model_dict)

        # Verify the model instances are equivalent
        assert volume_profile_reference_model == volume_profile_reference_model2

        # Convert model instance back to dict and verify no loss of data
        volume_profile_reference_model_json2 = volume_profile_reference_model.to_dict(
        )
        assert volume_profile_reference_model_json2 == volume_profile_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumePrototypeInstanceByImageContext
#-----------------------------------------------------------------------------
class TestVolumePrototypeInstanceByImageContext():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumePrototypeInstanceByImageContext
    #--------------------------------------------------------
    def test_volume_prototype_instance_by_image_context_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        volume_profile_identity_model = {}  # VolumeProfileIdentity
        volume_profile_identity_model['name'] = 'general-purpose'

        # Construct a json representation of a VolumePrototypeInstanceByImageContext model
        volume_prototype_instance_by_image_context_model_json = {}
        volume_prototype_instance_by_image_context_model_json['capacity'] = 100
        volume_prototype_instance_by_image_context_model_json['iops'] = 10000
        volume_prototype_instance_by_image_context_model_json[
            'name'] = 'my-volume'
        volume_prototype_instance_by_image_context_model_json[
            'profile'] = volume_profile_identity_model

        # Construct a model instance of VolumePrototypeInstanceByImageContext by calling from_dict on the json representation
        volume_prototype_instance_by_image_context_model = VolumePrototypeInstanceByImageContext.from_dict(
            volume_prototype_instance_by_image_context_model_json)
        assert volume_prototype_instance_by_image_context_model != False

        # Construct a model instance of VolumePrototypeInstanceByImageContext by calling from_dict on the json representation
        volume_prototype_instance_by_image_context_model_dict = VolumePrototypeInstanceByImageContext.from_dict(
            volume_prototype_instance_by_image_context_model_json).__dict__
        volume_prototype_instance_by_image_context_model2 = VolumePrototypeInstanceByImageContext(
            **volume_prototype_instance_by_image_context_model_dict)

        # Verify the model instances are equivalent
        assert volume_prototype_instance_by_image_context_model == volume_prototype_instance_by_image_context_model2

        # Convert model instance back to dict and verify no loss of data
        volume_prototype_instance_by_image_context_model_json2 = volume_prototype_instance_by_image_context_model.to_dict(
        )
        assert volume_prototype_instance_by_image_context_model_json2 == volume_prototype_instance_by_image_context_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeReference
#-----------------------------------------------------------------------------
class TestVolumeReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeReference
    #--------------------------------------------------------
    def test_volume_reference_serialization(self):

        # Construct a json representation of a VolumeReference model
        volume_reference_model_json = {}
        volume_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model_json[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model_json['name'] = 'my-volume'

        # Construct a model instance of VolumeReference by calling from_dict on the json representation
        volume_reference_model = VolumeReference.from_dict(
            volume_reference_model_json)
        assert volume_reference_model != False

        # Construct a model instance of VolumeReference by calling from_dict on the json representation
        volume_reference_model_dict = VolumeReference.from_dict(
            volume_reference_model_json).__dict__
        volume_reference_model2 = VolumeReference(**volume_reference_model_dict)

        # Verify the model instances are equivalent
        assert volume_reference_model == volume_reference_model2

        # Convert model instance back to dict and verify no loss of data
        volume_reference_model_json2 = volume_reference_model.to_dict()
        assert volume_reference_model_json2 == volume_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for Zone
#-----------------------------------------------------------------------------
class TestZone():

    #--------------------------------------------------------
    # Test serialization/deserialization for Zone
    #--------------------------------------------------------
    def test_zone_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        region_reference_model = {}  # RegionReference
        region_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south'
        region_reference_model['name'] = 'us-south'

        # Construct a json representation of a Zone model
        zone_model_json = {}
        zone_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_model_json['name'] = 'us-south-1'
        zone_model_json['region'] = region_reference_model
        zone_model_json['status'] = 'available'

        # Construct a model instance of Zone by calling from_dict on the json representation
        zone_model = Zone.from_dict(zone_model_json)
        assert zone_model != False

        # Construct a model instance of Zone by calling from_dict on the json representation
        zone_model_dict = Zone.from_dict(zone_model_json).__dict__
        zone_model2 = Zone(**zone_model_dict)

        # Verify the model instances are equivalent
        assert zone_model == zone_model2

        # Convert model instance back to dict and verify no loss of data
        zone_model_json2 = zone_model.to_dict()
        assert zone_model_json2 == zone_model_json


#-----------------------------------------------------------------------------
# Test Class for ZoneCollection
#-----------------------------------------------------------------------------
class TestZoneCollection():

    #--------------------------------------------------------
    # Test serialization/deserialization for ZoneCollection
    #--------------------------------------------------------
    def test_zone_collection_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        region_reference_model = {}  # RegionReference
        region_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south'
        region_reference_model['name'] = 'us-south'

        zone_model = {}  # Zone
        zone_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_model['name'] = 'us-south-1'
        zone_model['region'] = region_reference_model
        zone_model['status'] = 'available'

        # Construct a json representation of a ZoneCollection model
        zone_collection_model_json = {}
        zone_collection_model_json['zones'] = [zone_model]

        # Construct a model instance of ZoneCollection by calling from_dict on the json representation
        zone_collection_model = ZoneCollection.from_dict(
            zone_collection_model_json)
        assert zone_collection_model != False

        # Construct a model instance of ZoneCollection by calling from_dict on the json representation
        zone_collection_model_dict = ZoneCollection.from_dict(
            zone_collection_model_json).__dict__
        zone_collection_model2 = ZoneCollection(**zone_collection_model_dict)

        # Verify the model instances are equivalent
        assert zone_collection_model == zone_collection_model2

        # Convert model instance back to dict and verify no loss of data
        zone_collection_model_json2 = zone_collection_model.to_dict()
        assert zone_collection_model_json2 == zone_collection_model_json


#-----------------------------------------------------------------------------
# Test Class for ZoneReference
#-----------------------------------------------------------------------------
class TestZoneReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for ZoneReference
    #--------------------------------------------------------
    def test_zone_reference_serialization(self):

        # Construct a json representation of a ZoneReference model
        zone_reference_model_json = {}
        zone_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_reference_model_json['name'] = 'us-south-1'

        # Construct a model instance of ZoneReference by calling from_dict on the json representation
        zone_reference_model = ZoneReference.from_dict(
            zone_reference_model_json)
        assert zone_reference_model != False

        # Construct a model instance of ZoneReference by calling from_dict on the json representation
        zone_reference_model_dict = ZoneReference.from_dict(
            zone_reference_model_json).__dict__
        zone_reference_model2 = ZoneReference(**zone_reference_model_dict)

        # Verify the model instances are equivalent
        assert zone_reference_model == zone_reference_model2

        # Convert model instance back to dict and verify no loss of data
        zone_reference_model_json2 = zone_reference_model.to_dict()
        assert zone_reference_model_json2 == zone_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for CertificateInstanceIdentityByCRN
#-----------------------------------------------------------------------------
class TestCertificateInstanceIdentityByCRN():

    #--------------------------------------------------------
    # Test serialization/deserialization for CertificateInstanceIdentityByCRN
    #--------------------------------------------------------
    def test_certificate_instance_identity_by_crn_serialization(self):

        # Construct a json representation of a CertificateInstanceIdentityByCRN model
        certificate_instance_identity_by_crn_model_json = {}
        certificate_instance_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758'

        # Construct a model instance of CertificateInstanceIdentityByCRN by calling from_dict on the json representation
        certificate_instance_identity_by_crn_model = CertificateInstanceIdentityByCRN.from_dict(
            certificate_instance_identity_by_crn_model_json)
        assert certificate_instance_identity_by_crn_model != False

        # Construct a model instance of CertificateInstanceIdentityByCRN by calling from_dict on the json representation
        certificate_instance_identity_by_crn_model_dict = CertificateInstanceIdentityByCRN.from_dict(
            certificate_instance_identity_by_crn_model_json).__dict__
        certificate_instance_identity_by_crn_model2 = CertificateInstanceIdentityByCRN(
            **certificate_instance_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert certificate_instance_identity_by_crn_model == certificate_instance_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        certificate_instance_identity_by_crn_model_json2 = certificate_instance_identity_by_crn_model.to_dict(
        )
        assert certificate_instance_identity_by_crn_model_json2 == certificate_instance_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for CloudObjectStorageBucketIdentityByName
#-----------------------------------------------------------------------------
class TestCloudObjectStorageBucketIdentityByName():

    #--------------------------------------------------------
    # Test serialization/deserialization for CloudObjectStorageBucketIdentityByName
    #--------------------------------------------------------
    def test_cloud_object_storage_bucket_identity_by_name_serialization(self):

        # Construct a json representation of a CloudObjectStorageBucketIdentityByName model
        cloud_object_storage_bucket_identity_by_name_model_json = {}
        cloud_object_storage_bucket_identity_by_name_model_json[
            'name'] = 'bucket-27200-lwx4cfvcue'

        # Construct a model instance of CloudObjectStorageBucketIdentityByName by calling from_dict on the json representation
        cloud_object_storage_bucket_identity_by_name_model = CloudObjectStorageBucketIdentityByName.from_dict(
            cloud_object_storage_bucket_identity_by_name_model_json)
        assert cloud_object_storage_bucket_identity_by_name_model != False

        # Construct a model instance of CloudObjectStorageBucketIdentityByName by calling from_dict on the json representation
        cloud_object_storage_bucket_identity_by_name_model_dict = CloudObjectStorageBucketIdentityByName.from_dict(
            cloud_object_storage_bucket_identity_by_name_model_json).__dict__
        cloud_object_storage_bucket_identity_by_name_model2 = CloudObjectStorageBucketIdentityByName(
            **cloud_object_storage_bucket_identity_by_name_model_dict)

        # Verify the model instances are equivalent
        assert cloud_object_storage_bucket_identity_by_name_model == cloud_object_storage_bucket_identity_by_name_model2

        # Convert model instance back to dict and verify no loss of data
        cloud_object_storage_bucket_identity_by_name_model_json2 = cloud_object_storage_bucket_identity_by_name_model.to_dict(
        )
        assert cloud_object_storage_bucket_identity_by_name_model_json2 == cloud_object_storage_bucket_identity_by_name_model_json


#-----------------------------------------------------------------------------
# Test Class for FloatingIPPrototypeFloatingIPByTarget
#-----------------------------------------------------------------------------
class TestFloatingIPPrototypeFloatingIPByTarget():

    #--------------------------------------------------------
    # Test serialization/deserialization for FloatingIPPrototypeFloatingIPByTarget
    #--------------------------------------------------------
    def test_floating_ip_prototype_floating_ip_by_target_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_interface_identity_model = {}  # NetworkInterfaceIdentity
        network_interface_identity_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'

        resource_group_identity_model = {}  # ResourceGroupIdentity
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a json representation of a FloatingIPPrototypeFloatingIPByTarget model
        floating_ip_prototype_floating_ip_by_target_model_json = {}
        floating_ip_prototype_floating_ip_by_target_model_json[
            'name'] = 'my-floating-ip'
        floating_ip_prototype_floating_ip_by_target_model_json[
            'resource_group'] = resource_group_identity_model
        floating_ip_prototype_floating_ip_by_target_model_json[
            'target'] = network_interface_identity_model

        # Construct a model instance of FloatingIPPrototypeFloatingIPByTarget by calling from_dict on the json representation
        floating_ip_prototype_floating_ip_by_target_model = FloatingIPPrototypeFloatingIPByTarget.from_dict(
            floating_ip_prototype_floating_ip_by_target_model_json)
        assert floating_ip_prototype_floating_ip_by_target_model != False

        # Construct a model instance of FloatingIPPrototypeFloatingIPByTarget by calling from_dict on the json representation
        floating_ip_prototype_floating_ip_by_target_model_dict = FloatingIPPrototypeFloatingIPByTarget.from_dict(
            floating_ip_prototype_floating_ip_by_target_model_json).__dict__
        floating_ip_prototype_floating_ip_by_target_model2 = FloatingIPPrototypeFloatingIPByTarget(
            **floating_ip_prototype_floating_ip_by_target_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_prototype_floating_ip_by_target_model == floating_ip_prototype_floating_ip_by_target_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_prototype_floating_ip_by_target_model_json2 = floating_ip_prototype_floating_ip_by_target_model.to_dict(
        )
        assert floating_ip_prototype_floating_ip_by_target_model_json2 == floating_ip_prototype_floating_ip_by_target_model_json


#-----------------------------------------------------------------------------
# Test Class for FloatingIPPrototypeFloatingIPByZone
#-----------------------------------------------------------------------------
class TestFloatingIPPrototypeFloatingIPByZone():

    #--------------------------------------------------------
    # Test serialization/deserialization for FloatingIPPrototypeFloatingIPByZone
    #--------------------------------------------------------
    def test_floating_ip_prototype_floating_ip_by_zone_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_identity_model = {}  # ResourceGroupIdentity
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        zone_identity_model = {}  # ZoneIdentity
        zone_identity_model['name'] = 'us-south-1'

        # Construct a json representation of a FloatingIPPrototypeFloatingIPByZone model
        floating_ip_prototype_floating_ip_by_zone_model_json = {}
        floating_ip_prototype_floating_ip_by_zone_model_json[
            'name'] = 'my-floating-ip'
        floating_ip_prototype_floating_ip_by_zone_model_json[
            'resource_group'] = resource_group_identity_model
        floating_ip_prototype_floating_ip_by_zone_model_json[
            'zone'] = zone_identity_model

        # Construct a model instance of FloatingIPPrototypeFloatingIPByZone by calling from_dict on the json representation
        floating_ip_prototype_floating_ip_by_zone_model = FloatingIPPrototypeFloatingIPByZone.from_dict(
            floating_ip_prototype_floating_ip_by_zone_model_json)
        assert floating_ip_prototype_floating_ip_by_zone_model != False

        # Construct a model instance of FloatingIPPrototypeFloatingIPByZone by calling from_dict on the json representation
        floating_ip_prototype_floating_ip_by_zone_model_dict = FloatingIPPrototypeFloatingIPByZone.from_dict(
            floating_ip_prototype_floating_ip_by_zone_model_json).__dict__
        floating_ip_prototype_floating_ip_by_zone_model2 = FloatingIPPrototypeFloatingIPByZone(
            **floating_ip_prototype_floating_ip_by_zone_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_prototype_floating_ip_by_zone_model == floating_ip_prototype_floating_ip_by_zone_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_prototype_floating_ip_by_zone_model_json2 = floating_ip_prototype_floating_ip_by_zone_model.to_dict(
        )
        assert floating_ip_prototype_floating_ip_by_zone_model_json2 == floating_ip_prototype_floating_ip_by_zone_model_json


#-----------------------------------------------------------------------------
# Test Class for FloatingIPTargetNetworkInterfaceReference
#-----------------------------------------------------------------------------
class TestFloatingIPTargetNetworkInterfaceReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for FloatingIPTargetNetworkInterfaceReference
    #--------------------------------------------------------
    def test_floating_ip_target_network_interface_reference_serialization(self):

        # Construct a json representation of a FloatingIPTargetNetworkInterfaceReference model
        floating_ip_target_network_interface_reference_model_json = {}
        floating_ip_target_network_interface_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        floating_ip_target_network_interface_reference_model_json[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        floating_ip_target_network_interface_reference_model_json[
            'name'] = 'my-network-interface'
        floating_ip_target_network_interface_reference_model_json[
            'primary_ipv4_address'] = '192.168.3.4'
        floating_ip_target_network_interface_reference_model_json[
            'resource_type'] = 'network_interface'

        # Construct a model instance of FloatingIPTargetNetworkInterfaceReference by calling from_dict on the json representation
        floating_ip_target_network_interface_reference_model = FloatingIPTargetNetworkInterfaceReference.from_dict(
            floating_ip_target_network_interface_reference_model_json)
        assert floating_ip_target_network_interface_reference_model != False

        # Construct a model instance of FloatingIPTargetNetworkInterfaceReference by calling from_dict on the json representation
        floating_ip_target_network_interface_reference_model_dict = FloatingIPTargetNetworkInterfaceReference.from_dict(
            floating_ip_target_network_interface_reference_model_json).__dict__
        floating_ip_target_network_interface_reference_model2 = FloatingIPTargetNetworkInterfaceReference(
            **floating_ip_target_network_interface_reference_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_target_network_interface_reference_model == floating_ip_target_network_interface_reference_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_target_network_interface_reference_model_json2 = floating_ip_target_network_interface_reference_model.to_dict(
        )
        assert floating_ip_target_network_interface_reference_model_json2 == floating_ip_target_network_interface_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for FloatingIPTargetPublicGatewayReference
#-----------------------------------------------------------------------------
class TestFloatingIPTargetPublicGatewayReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for FloatingIPTargetPublicGatewayReference
    #--------------------------------------------------------
    def test_floating_ip_target_public_gateway_reference_serialization(self):

        # Construct a json representation of a FloatingIPTargetPublicGatewayReference model
        floating_ip_target_public_gateway_reference_model_json = {}
        floating_ip_target_public_gateway_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241'
        floating_ip_target_public_gateway_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241'
        floating_ip_target_public_gateway_reference_model_json[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'
        floating_ip_target_public_gateway_reference_model_json[
            'name'] = 'my-public-gateway'
        floating_ip_target_public_gateway_reference_model_json[
            'resource_type'] = 'public_gateway'

        # Construct a model instance of FloatingIPTargetPublicGatewayReference by calling from_dict on the json representation
        floating_ip_target_public_gateway_reference_model = FloatingIPTargetPublicGatewayReference.from_dict(
            floating_ip_target_public_gateway_reference_model_json)
        assert floating_ip_target_public_gateway_reference_model != False

        # Construct a model instance of FloatingIPTargetPublicGatewayReference by calling from_dict on the json representation
        floating_ip_target_public_gateway_reference_model_dict = FloatingIPTargetPublicGatewayReference.from_dict(
            floating_ip_target_public_gateway_reference_model_json).__dict__
        floating_ip_target_public_gateway_reference_model2 = FloatingIPTargetPublicGatewayReference(
            **floating_ip_target_public_gateway_reference_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_target_public_gateway_reference_model == floating_ip_target_public_gateway_reference_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_target_public_gateway_reference_model_json2 = floating_ip_target_public_gateway_reference_model.to_dict(
        )
        assert floating_ip_target_public_gateway_reference_model_json2 == floating_ip_target_public_gateway_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollectorTargetInstanceReference
#-----------------------------------------------------------------------------
class TestFlowLogCollectorTargetInstanceReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollectorTargetInstanceReference
    #--------------------------------------------------------
    def test_flow_log_collector_target_instance_reference_serialization(self):

        # Construct a json representation of a FlowLogCollectorTargetInstanceReference model
        flow_log_collector_target_instance_reference_model_json = {}
        flow_log_collector_target_instance_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        flow_log_collector_target_instance_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        flow_log_collector_target_instance_reference_model_json[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        flow_log_collector_target_instance_reference_model_json[
            'name'] = 'my-instance'

        # Construct a model instance of FlowLogCollectorTargetInstanceReference by calling from_dict on the json representation
        flow_log_collector_target_instance_reference_model = FlowLogCollectorTargetInstanceReference.from_dict(
            flow_log_collector_target_instance_reference_model_json)
        assert flow_log_collector_target_instance_reference_model != False

        # Construct a model instance of FlowLogCollectorTargetInstanceReference by calling from_dict on the json representation
        flow_log_collector_target_instance_reference_model_dict = FlowLogCollectorTargetInstanceReference.from_dict(
            flow_log_collector_target_instance_reference_model_json).__dict__
        flow_log_collector_target_instance_reference_model2 = FlowLogCollectorTargetInstanceReference(
            **flow_log_collector_target_instance_reference_model_dict)

        # Verify the model instances are equivalent
        assert flow_log_collector_target_instance_reference_model == flow_log_collector_target_instance_reference_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_target_instance_reference_model_json2 = flow_log_collector_target_instance_reference_model.to_dict(
        )
        assert flow_log_collector_target_instance_reference_model_json2 == flow_log_collector_target_instance_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext
#-----------------------------------------------------------------------------
class TestFlowLogCollectorTargetNetworkInterfaceReferenceTargetContext():

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext
    #--------------------------------------------------------
    def test_flow_log_collector_target_network_interface_reference_target_context_serialization(
            self):

        # Construct a json representation of a FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext model
        flow_log_collector_target_network_interface_reference_target_context_model_json = {}
        flow_log_collector_target_network_interface_reference_target_context_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        flow_log_collector_target_network_interface_reference_target_context_model_json[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        flow_log_collector_target_network_interface_reference_target_context_model_json[
            'name'] = 'my-network-interface'
        flow_log_collector_target_network_interface_reference_target_context_model_json[
            'resource_type'] = 'network_interface'

        # Construct a model instance of FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext by calling from_dict on the json representation
        flow_log_collector_target_network_interface_reference_target_context_model = FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext.from_dict(
            flow_log_collector_target_network_interface_reference_target_context_model_json
        )
        assert flow_log_collector_target_network_interface_reference_target_context_model != False

        # Construct a model instance of FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext by calling from_dict on the json representation
        flow_log_collector_target_network_interface_reference_target_context_model_dict = FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext.from_dict(
            flow_log_collector_target_network_interface_reference_target_context_model_json
        ).__dict__
        flow_log_collector_target_network_interface_reference_target_context_model2 = FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext(
            **
            flow_log_collector_target_network_interface_reference_target_context_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_target_network_interface_reference_target_context_model == flow_log_collector_target_network_interface_reference_target_context_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_target_network_interface_reference_target_context_model_json2 = flow_log_collector_target_network_interface_reference_target_context_model.to_dict(
        )
        assert flow_log_collector_target_network_interface_reference_target_context_model_json2 == flow_log_collector_target_network_interface_reference_target_context_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollectorTargetSubnetReference
#-----------------------------------------------------------------------------
class TestFlowLogCollectorTargetSubnetReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollectorTargetSubnetReference
    #--------------------------------------------------------
    def test_flow_log_collector_target_subnet_reference_serialization(self):

        # Construct a json representation of a FlowLogCollectorTargetSubnetReference model
        flow_log_collector_target_subnet_reference_model_json = {}
        flow_log_collector_target_subnet_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        flow_log_collector_target_subnet_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        flow_log_collector_target_subnet_reference_model_json[
            'id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        flow_log_collector_target_subnet_reference_model_json[
            'name'] = 'my-subnet'

        # Construct a model instance of FlowLogCollectorTargetSubnetReference by calling from_dict on the json representation
        flow_log_collector_target_subnet_reference_model = FlowLogCollectorTargetSubnetReference.from_dict(
            flow_log_collector_target_subnet_reference_model_json)
        assert flow_log_collector_target_subnet_reference_model != False

        # Construct a model instance of FlowLogCollectorTargetSubnetReference by calling from_dict on the json representation
        flow_log_collector_target_subnet_reference_model_dict = FlowLogCollectorTargetSubnetReference.from_dict(
            flow_log_collector_target_subnet_reference_model_json).__dict__
        flow_log_collector_target_subnet_reference_model2 = FlowLogCollectorTargetSubnetReference(
            **flow_log_collector_target_subnet_reference_model_dict)

        # Verify the model instances are equivalent
        assert flow_log_collector_target_subnet_reference_model == flow_log_collector_target_subnet_reference_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_target_subnet_reference_model_json2 = flow_log_collector_target_subnet_reference_model.to_dict(
        )
        assert flow_log_collector_target_subnet_reference_model_json2 == flow_log_collector_target_subnet_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollectorTargetVPCReference
#-----------------------------------------------------------------------------
class TestFlowLogCollectorTargetVPCReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollectorTargetVPCReference
    #--------------------------------------------------------
    def test_flow_log_collector_target_vpc_reference_serialization(self):

        # Construct a json representation of a FlowLogCollectorTargetVPCReference model
        flow_log_collector_target_vpc_reference_model_json = {}
        flow_log_collector_target_vpc_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        flow_log_collector_target_vpc_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        flow_log_collector_target_vpc_reference_model_json[
            'id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        flow_log_collector_target_vpc_reference_model_json['name'] = 'my-vpc'

        # Construct a model instance of FlowLogCollectorTargetVPCReference by calling from_dict on the json representation
        flow_log_collector_target_vpc_reference_model = FlowLogCollectorTargetVPCReference.from_dict(
            flow_log_collector_target_vpc_reference_model_json)
        assert flow_log_collector_target_vpc_reference_model != False

        # Construct a model instance of FlowLogCollectorTargetVPCReference by calling from_dict on the json representation
        flow_log_collector_target_vpc_reference_model_dict = FlowLogCollectorTargetVPCReference.from_dict(
            flow_log_collector_target_vpc_reference_model_json).__dict__
        flow_log_collector_target_vpc_reference_model2 = FlowLogCollectorTargetVPCReference(
            **flow_log_collector_target_vpc_reference_model_dict)

        # Verify the model instances are equivalent
        assert flow_log_collector_target_vpc_reference_model == flow_log_collector_target_vpc_reference_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_target_vpc_reference_model_json2 = flow_log_collector_target_vpc_reference_model.to_dict(
        )
        assert flow_log_collector_target_vpc_reference_model_json2 == flow_log_collector_target_vpc_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for IKEPolicyIdentityByHref
#-----------------------------------------------------------------------------
class TestIKEPolicyIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for IKEPolicyIdentityByHref
    #--------------------------------------------------------
    def test_ike_policy_identity_by_href_serialization(self):

        # Construct a json representation of a IKEPolicyIdentityByHref model
        ike_policy_identity_by_href_model_json = {}
        ike_policy_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a model instance of IKEPolicyIdentityByHref by calling from_dict on the json representation
        ike_policy_identity_by_href_model = IKEPolicyIdentityByHref.from_dict(
            ike_policy_identity_by_href_model_json)
        assert ike_policy_identity_by_href_model != False

        # Construct a model instance of IKEPolicyIdentityByHref by calling from_dict on the json representation
        ike_policy_identity_by_href_model_dict = IKEPolicyIdentityByHref.from_dict(
            ike_policy_identity_by_href_model_json).__dict__
        ike_policy_identity_by_href_model2 = IKEPolicyIdentityByHref(
            **ike_policy_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert ike_policy_identity_by_href_model == ike_policy_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        ike_policy_identity_by_href_model_json2 = ike_policy_identity_by_href_model.to_dict(
        )
        assert ike_policy_identity_by_href_model_json2 == ike_policy_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for IKEPolicyIdentityById
#-----------------------------------------------------------------------------
class TestIKEPolicyIdentityById():

    #--------------------------------------------------------
    # Test serialization/deserialization for IKEPolicyIdentityById
    #--------------------------------------------------------
    def test_ike_policy_identity_by_id_serialization(self):

        # Construct a json representation of a IKEPolicyIdentityById model
        ike_policy_identity_by_id_model_json = {}
        ike_policy_identity_by_id_model_json[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a model instance of IKEPolicyIdentityById by calling from_dict on the json representation
        ike_policy_identity_by_id_model = IKEPolicyIdentityById.from_dict(
            ike_policy_identity_by_id_model_json)
        assert ike_policy_identity_by_id_model != False

        # Construct a model instance of IKEPolicyIdentityById by calling from_dict on the json representation
        ike_policy_identity_by_id_model_dict = IKEPolicyIdentityById.from_dict(
            ike_policy_identity_by_id_model_json).__dict__
        ike_policy_identity_by_id_model2 = IKEPolicyIdentityById(
            **ike_policy_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert ike_policy_identity_by_id_model == ike_policy_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        ike_policy_identity_by_id_model_json2 = ike_policy_identity_by_id_model.to_dict(
        )
        assert ike_policy_identity_by_id_model_json2 == ike_policy_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for IPsecPolicyIdentityByHref
#-----------------------------------------------------------------------------
class TestIPsecPolicyIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for IPsecPolicyIdentityByHref
    #--------------------------------------------------------
    def test_i_psec_policy_identity_by_href_serialization(self):

        # Construct a json representation of a IPsecPolicyIdentityByHref model
        i_psec_policy_identity_by_href_model_json = {}
        i_psec_policy_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a model instance of IPsecPolicyIdentityByHref by calling from_dict on the json representation
        i_psec_policy_identity_by_href_model = IPsecPolicyIdentityByHref.from_dict(
            i_psec_policy_identity_by_href_model_json)
        assert i_psec_policy_identity_by_href_model != False

        # Construct a model instance of IPsecPolicyIdentityByHref by calling from_dict on the json representation
        i_psec_policy_identity_by_href_model_dict = IPsecPolicyIdentityByHref.from_dict(
            i_psec_policy_identity_by_href_model_json).__dict__
        i_psec_policy_identity_by_href_model2 = IPsecPolicyIdentityByHref(
            **i_psec_policy_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert i_psec_policy_identity_by_href_model == i_psec_policy_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        i_psec_policy_identity_by_href_model_json2 = i_psec_policy_identity_by_href_model.to_dict(
        )
        assert i_psec_policy_identity_by_href_model_json2 == i_psec_policy_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for IPsecPolicyIdentityById
#-----------------------------------------------------------------------------
class TestIPsecPolicyIdentityById():

    #--------------------------------------------------------
    # Test serialization/deserialization for IPsecPolicyIdentityById
    #--------------------------------------------------------
    def test_i_psec_policy_identity_by_id_serialization(self):

        # Construct a json representation of a IPsecPolicyIdentityById model
        i_psec_policy_identity_by_id_model_json = {}
        i_psec_policy_identity_by_id_model_json[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a model instance of IPsecPolicyIdentityById by calling from_dict on the json representation
        i_psec_policy_identity_by_id_model = IPsecPolicyIdentityById.from_dict(
            i_psec_policy_identity_by_id_model_json)
        assert i_psec_policy_identity_by_id_model != False

        # Construct a model instance of IPsecPolicyIdentityById by calling from_dict on the json representation
        i_psec_policy_identity_by_id_model_dict = IPsecPolicyIdentityById.from_dict(
            i_psec_policy_identity_by_id_model_json).__dict__
        i_psec_policy_identity_by_id_model2 = IPsecPolicyIdentityById(
            **i_psec_policy_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert i_psec_policy_identity_by_id_model == i_psec_policy_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        i_psec_policy_identity_by_id_model_json2 = i_psec_policy_identity_by_id_model.to_dict(
        )
        assert i_psec_policy_identity_by_id_model_json2 == i_psec_policy_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for ImageIdentityByCRN
#-----------------------------------------------------------------------------
class TestImageIdentityByCRN():

    #--------------------------------------------------------
    # Test serialization/deserialization for ImageIdentityByCRN
    #--------------------------------------------------------
    def test_image_identity_by_crn_serialization(self):

        # Construct a json representation of a ImageIdentityByCRN model
        image_identity_by_crn_model_json = {}
        image_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        # Construct a model instance of ImageIdentityByCRN by calling from_dict on the json representation
        image_identity_by_crn_model = ImageIdentityByCRN.from_dict(
            image_identity_by_crn_model_json)
        assert image_identity_by_crn_model != False

        # Construct a model instance of ImageIdentityByCRN by calling from_dict on the json representation
        image_identity_by_crn_model_dict = ImageIdentityByCRN.from_dict(
            image_identity_by_crn_model_json).__dict__
        image_identity_by_crn_model2 = ImageIdentityByCRN(
            **image_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert image_identity_by_crn_model == image_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        image_identity_by_crn_model_json2 = image_identity_by_crn_model.to_dict(
        )
        assert image_identity_by_crn_model_json2 == image_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for ImageIdentityByHref
#-----------------------------------------------------------------------------
class TestImageIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for ImageIdentityByHref
    #--------------------------------------------------------
    def test_image_identity_by_href_serialization(self):

        # Construct a json representation of a ImageIdentityByHref model
        image_identity_by_href_model_json = {}
        image_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        # Construct a model instance of ImageIdentityByHref by calling from_dict on the json representation
        image_identity_by_href_model = ImageIdentityByHref.from_dict(
            image_identity_by_href_model_json)
        assert image_identity_by_href_model != False

        # Construct a model instance of ImageIdentityByHref by calling from_dict on the json representation
        image_identity_by_href_model_dict = ImageIdentityByHref.from_dict(
            image_identity_by_href_model_json).__dict__
        image_identity_by_href_model2 = ImageIdentityByHref(
            **image_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert image_identity_by_href_model == image_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        image_identity_by_href_model_json2 = image_identity_by_href_model.to_dict(
        )
        assert image_identity_by_href_model_json2 == image_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for ImageIdentityById
#-----------------------------------------------------------------------------
class TestImageIdentityById():

    #--------------------------------------------------------
    # Test serialization/deserialization for ImageIdentityById
    #--------------------------------------------------------
    def test_image_identity_by_id_serialization(self):

        # Construct a json representation of a ImageIdentityById model
        image_identity_by_id_model_json = {}
        image_identity_by_id_model_json[
            'id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        # Construct a model instance of ImageIdentityById by calling from_dict on the json representation
        image_identity_by_id_model = ImageIdentityById.from_dict(
            image_identity_by_id_model_json)
        assert image_identity_by_id_model != False

        # Construct a model instance of ImageIdentityById by calling from_dict on the json representation
        image_identity_by_id_model_dict = ImageIdentityById.from_dict(
            image_identity_by_id_model_json).__dict__
        image_identity_by_id_model2 = ImageIdentityById(
            **image_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert image_identity_by_id_model == image_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        image_identity_by_id_model_json2 = image_identity_by_id_model.to_dict()
        assert image_identity_by_id_model_json2 == image_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for ImagePrototypeImageByFile
#-----------------------------------------------------------------------------
class TestImagePrototypeImageByFile():

    #--------------------------------------------------------
    # Test serialization/deserialization for ImagePrototypeImageByFile
    #--------------------------------------------------------
    def test_image_prototype_image_by_file_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        image_file_prototype_model = {}  # ImageFilePrototype
        image_file_prototype_model[
            'href'] = 'cos://us-south/custom-image-vpc-bucket/customImage-0.vhd'

        operating_system_identity_model = {}  # OperatingSystemIdentity
        operating_system_identity_model['name'] = 'ubuntu-16-amd64'

        resource_group_identity_model = {}  # ResourceGroupIdentity
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a json representation of a ImagePrototypeImageByFile model
        image_prototype_image_by_file_model_json = {}
        image_prototype_image_by_file_model_json['name'] = 'my-image'
        image_prototype_image_by_file_model_json[
            'resource_group'] = resource_group_identity_model
        image_prototype_image_by_file_model_json[
            'file'] = image_file_prototype_model
        image_prototype_image_by_file_model_json[
            'operating_system'] = operating_system_identity_model

        # Construct a model instance of ImagePrototypeImageByFile by calling from_dict on the json representation
        image_prototype_image_by_file_model = ImagePrototypeImageByFile.from_dict(
            image_prototype_image_by_file_model_json)
        assert image_prototype_image_by_file_model != False

        # Construct a model instance of ImagePrototypeImageByFile by calling from_dict on the json representation
        image_prototype_image_by_file_model_dict = ImagePrototypeImageByFile.from_dict(
            image_prototype_image_by_file_model_json).__dict__
        image_prototype_image_by_file_model2 = ImagePrototypeImageByFile(
            **image_prototype_image_by_file_model_dict)

        # Verify the model instances are equivalent
        assert image_prototype_image_by_file_model == image_prototype_image_by_file_model2

        # Convert model instance back to dict and verify no loss of data
        image_prototype_image_by_file_model_json2 = image_prototype_image_by_file_model.to_dict(
        )
        assert image_prototype_image_by_file_model_json2 == image_prototype_image_by_file_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfileBandwidthDependent
#-----------------------------------------------------------------------------
class TestInstanceProfileBandwidthDependent():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfileBandwidthDependent
    #--------------------------------------------------------
    def test_instance_profile_bandwidth_dependent_serialization(self):

        # Construct a json representation of a InstanceProfileBandwidthDependent model
        instance_profile_bandwidth_dependent_model_json = {}
        instance_profile_bandwidth_dependent_model_json['type'] = 'dependent'

        # Construct a model instance of InstanceProfileBandwidthDependent by calling from_dict on the json representation
        instance_profile_bandwidth_dependent_model = InstanceProfileBandwidthDependent.from_dict(
            instance_profile_bandwidth_dependent_model_json)
        assert instance_profile_bandwidth_dependent_model != False

        # Construct a model instance of InstanceProfileBandwidthDependent by calling from_dict on the json representation
        instance_profile_bandwidth_dependent_model_dict = InstanceProfileBandwidthDependent.from_dict(
            instance_profile_bandwidth_dependent_model_json).__dict__
        instance_profile_bandwidth_dependent_model2 = InstanceProfileBandwidthDependent(
            **instance_profile_bandwidth_dependent_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_bandwidth_dependent_model == instance_profile_bandwidth_dependent_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_bandwidth_dependent_model_json2 = instance_profile_bandwidth_dependent_model.to_dict(
        )
        assert instance_profile_bandwidth_dependent_model_json2 == instance_profile_bandwidth_dependent_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfileBandwidthEnum
#-----------------------------------------------------------------------------
class TestInstanceProfileBandwidthEnum():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfileBandwidthEnum
    #--------------------------------------------------------
    def test_instance_profile_bandwidth_enum_serialization(self):

        # Construct a json representation of a InstanceProfileBandwidthEnum model
        instance_profile_bandwidth_enum_model_json = {}
        instance_profile_bandwidth_enum_model_json['default'] = 38
        instance_profile_bandwidth_enum_model_json['type'] = 'enum'
        instance_profile_bandwidth_enum_model_json['values'] = [38]

        # Construct a model instance of InstanceProfileBandwidthEnum by calling from_dict on the json representation
        instance_profile_bandwidth_enum_model = InstanceProfileBandwidthEnum.from_dict(
            instance_profile_bandwidth_enum_model_json)
        assert instance_profile_bandwidth_enum_model != False

        # Construct a model instance of InstanceProfileBandwidthEnum by calling from_dict on the json representation
        instance_profile_bandwidth_enum_model_dict = InstanceProfileBandwidthEnum.from_dict(
            instance_profile_bandwidth_enum_model_json).__dict__
        instance_profile_bandwidth_enum_model2 = InstanceProfileBandwidthEnum(
            **instance_profile_bandwidth_enum_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_bandwidth_enum_model == instance_profile_bandwidth_enum_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_bandwidth_enum_model_json2 = instance_profile_bandwidth_enum_model.to_dict(
        )
        assert instance_profile_bandwidth_enum_model_json2 == instance_profile_bandwidth_enum_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfileBandwidthFixed
#-----------------------------------------------------------------------------
class TestInstanceProfileBandwidthFixed():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfileBandwidthFixed
    #--------------------------------------------------------
    def test_instance_profile_bandwidth_fixed_serialization(self):

        # Construct a json representation of a InstanceProfileBandwidthFixed model
        instance_profile_bandwidth_fixed_model_json = {}
        instance_profile_bandwidth_fixed_model_json['type'] = 'fixed'
        instance_profile_bandwidth_fixed_model_json['value'] = 20000

        # Construct a model instance of InstanceProfileBandwidthFixed by calling from_dict on the json representation
        instance_profile_bandwidth_fixed_model = InstanceProfileBandwidthFixed.from_dict(
            instance_profile_bandwidth_fixed_model_json)
        assert instance_profile_bandwidth_fixed_model != False

        # Construct a model instance of InstanceProfileBandwidthFixed by calling from_dict on the json representation
        instance_profile_bandwidth_fixed_model_dict = InstanceProfileBandwidthFixed.from_dict(
            instance_profile_bandwidth_fixed_model_json).__dict__
        instance_profile_bandwidth_fixed_model2 = InstanceProfileBandwidthFixed(
            **instance_profile_bandwidth_fixed_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_bandwidth_fixed_model == instance_profile_bandwidth_fixed_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_bandwidth_fixed_model_json2 = instance_profile_bandwidth_fixed_model.to_dict(
        )
        assert instance_profile_bandwidth_fixed_model_json2 == instance_profile_bandwidth_fixed_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfileBandwidthRange
#-----------------------------------------------------------------------------
class TestInstanceProfileBandwidthRange():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfileBandwidthRange
    #--------------------------------------------------------
    def test_instance_profile_bandwidth_range_serialization(self):

        # Construct a json representation of a InstanceProfileBandwidthRange model
        instance_profile_bandwidth_range_model_json = {}
        instance_profile_bandwidth_range_model_json['default'] = 10000
        instance_profile_bandwidth_range_model_json['max'] = 80000
        instance_profile_bandwidth_range_model_json['min'] = 1000
        instance_profile_bandwidth_range_model_json['step'] = 1000
        instance_profile_bandwidth_range_model_json['type'] = 'range'

        # Construct a model instance of InstanceProfileBandwidthRange by calling from_dict on the json representation
        instance_profile_bandwidth_range_model = InstanceProfileBandwidthRange.from_dict(
            instance_profile_bandwidth_range_model_json)
        assert instance_profile_bandwidth_range_model != False

        # Construct a model instance of InstanceProfileBandwidthRange by calling from_dict on the json representation
        instance_profile_bandwidth_range_model_dict = InstanceProfileBandwidthRange.from_dict(
            instance_profile_bandwidth_range_model_json).__dict__
        instance_profile_bandwidth_range_model2 = InstanceProfileBandwidthRange(
            **instance_profile_bandwidth_range_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_bandwidth_range_model == instance_profile_bandwidth_range_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_bandwidth_range_model_json2 = instance_profile_bandwidth_range_model.to_dict(
        )
        assert instance_profile_bandwidth_range_model_json2 == instance_profile_bandwidth_range_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfileIdentityByHref
#-----------------------------------------------------------------------------
class TestInstanceProfileIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfileIdentityByHref
    #--------------------------------------------------------
    def test_instance_profile_identity_by_href_serialization(self):

        # Construct a json representation of a InstanceProfileIdentityByHref model
        instance_profile_identity_by_href_model_json = {}
        instance_profile_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16'

        # Construct a model instance of InstanceProfileIdentityByHref by calling from_dict on the json representation
        instance_profile_identity_by_href_model = InstanceProfileIdentityByHref.from_dict(
            instance_profile_identity_by_href_model_json)
        assert instance_profile_identity_by_href_model != False

        # Construct a model instance of InstanceProfileIdentityByHref by calling from_dict on the json representation
        instance_profile_identity_by_href_model_dict = InstanceProfileIdentityByHref.from_dict(
            instance_profile_identity_by_href_model_json).__dict__
        instance_profile_identity_by_href_model2 = InstanceProfileIdentityByHref(
            **instance_profile_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_identity_by_href_model == instance_profile_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_identity_by_href_model_json2 = instance_profile_identity_by_href_model.to_dict(
        )
        assert instance_profile_identity_by_href_model_json2 == instance_profile_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfileIdentityByName
#-----------------------------------------------------------------------------
class TestInstanceProfileIdentityByName():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfileIdentityByName
    #--------------------------------------------------------
    def test_instance_profile_identity_by_name_serialization(self):

        # Construct a json representation of a InstanceProfileIdentityByName model
        instance_profile_identity_by_name_model_json = {}
        instance_profile_identity_by_name_model_json['name'] = 'bc1-4x16'

        # Construct a model instance of InstanceProfileIdentityByName by calling from_dict on the json representation
        instance_profile_identity_by_name_model = InstanceProfileIdentityByName.from_dict(
            instance_profile_identity_by_name_model_json)
        assert instance_profile_identity_by_name_model != False

        # Construct a model instance of InstanceProfileIdentityByName by calling from_dict on the json representation
        instance_profile_identity_by_name_model_dict = InstanceProfileIdentityByName.from_dict(
            instance_profile_identity_by_name_model_json).__dict__
        instance_profile_identity_by_name_model2 = InstanceProfileIdentityByName(
            **instance_profile_identity_by_name_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_identity_by_name_model == instance_profile_identity_by_name_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_identity_by_name_model_json2 = instance_profile_identity_by_name_model.to_dict(
        )
        assert instance_profile_identity_by_name_model_json2 == instance_profile_identity_by_name_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfileMemoryDependent
#-----------------------------------------------------------------------------
class TestInstanceProfileMemoryDependent():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfileMemoryDependent
    #--------------------------------------------------------
    def test_instance_profile_memory_dependent_serialization(self):

        # Construct a json representation of a InstanceProfileMemoryDependent model
        instance_profile_memory_dependent_model_json = {}
        instance_profile_memory_dependent_model_json['type'] = 'dependent'

        # Construct a model instance of InstanceProfileMemoryDependent by calling from_dict on the json representation
        instance_profile_memory_dependent_model = InstanceProfileMemoryDependent.from_dict(
            instance_profile_memory_dependent_model_json)
        assert instance_profile_memory_dependent_model != False

        # Construct a model instance of InstanceProfileMemoryDependent by calling from_dict on the json representation
        instance_profile_memory_dependent_model_dict = InstanceProfileMemoryDependent.from_dict(
            instance_profile_memory_dependent_model_json).__dict__
        instance_profile_memory_dependent_model2 = InstanceProfileMemoryDependent(
            **instance_profile_memory_dependent_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_memory_dependent_model == instance_profile_memory_dependent_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_memory_dependent_model_json2 = instance_profile_memory_dependent_model.to_dict(
        )
        assert instance_profile_memory_dependent_model_json2 == instance_profile_memory_dependent_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfileMemoryEnum
#-----------------------------------------------------------------------------
class TestInstanceProfileMemoryEnum():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfileMemoryEnum
    #--------------------------------------------------------
    def test_instance_profile_memory_enum_serialization(self):

        # Construct a json representation of a InstanceProfileMemoryEnum model
        instance_profile_memory_enum_model_json = {}
        instance_profile_memory_enum_model_json['default'] = 38
        instance_profile_memory_enum_model_json['type'] = 'enum'
        instance_profile_memory_enum_model_json['values'] = [38]

        # Construct a model instance of InstanceProfileMemoryEnum by calling from_dict on the json representation
        instance_profile_memory_enum_model = InstanceProfileMemoryEnum.from_dict(
            instance_profile_memory_enum_model_json)
        assert instance_profile_memory_enum_model != False

        # Construct a model instance of InstanceProfileMemoryEnum by calling from_dict on the json representation
        instance_profile_memory_enum_model_dict = InstanceProfileMemoryEnum.from_dict(
            instance_profile_memory_enum_model_json).__dict__
        instance_profile_memory_enum_model2 = InstanceProfileMemoryEnum(
            **instance_profile_memory_enum_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_memory_enum_model == instance_profile_memory_enum_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_memory_enum_model_json2 = instance_profile_memory_enum_model.to_dict(
        )
        assert instance_profile_memory_enum_model_json2 == instance_profile_memory_enum_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfileMemoryFixed
#-----------------------------------------------------------------------------
class TestInstanceProfileMemoryFixed():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfileMemoryFixed
    #--------------------------------------------------------
    def test_instance_profile_memory_fixed_serialization(self):

        # Construct a json representation of a InstanceProfileMemoryFixed model
        instance_profile_memory_fixed_model_json = {}
        instance_profile_memory_fixed_model_json['type'] = 'fixed'
        instance_profile_memory_fixed_model_json['value'] = 16

        # Construct a model instance of InstanceProfileMemoryFixed by calling from_dict on the json representation
        instance_profile_memory_fixed_model = InstanceProfileMemoryFixed.from_dict(
            instance_profile_memory_fixed_model_json)
        assert instance_profile_memory_fixed_model != False

        # Construct a model instance of InstanceProfileMemoryFixed by calling from_dict on the json representation
        instance_profile_memory_fixed_model_dict = InstanceProfileMemoryFixed.from_dict(
            instance_profile_memory_fixed_model_json).__dict__
        instance_profile_memory_fixed_model2 = InstanceProfileMemoryFixed(
            **instance_profile_memory_fixed_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_memory_fixed_model == instance_profile_memory_fixed_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_memory_fixed_model_json2 = instance_profile_memory_fixed_model.to_dict(
        )
        assert instance_profile_memory_fixed_model_json2 == instance_profile_memory_fixed_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfileMemoryRange
#-----------------------------------------------------------------------------
class TestInstanceProfileMemoryRange():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfileMemoryRange
    #--------------------------------------------------------
    def test_instance_profile_memory_range_serialization(self):

        # Construct a json representation of a InstanceProfileMemoryRange model
        instance_profile_memory_range_model_json = {}
        instance_profile_memory_range_model_json['default'] = 16
        instance_profile_memory_range_model_json['max'] = 384
        instance_profile_memory_range_model_json['min'] = 8
        instance_profile_memory_range_model_json['step'] = 8
        instance_profile_memory_range_model_json['type'] = 'range'

        # Construct a model instance of InstanceProfileMemoryRange by calling from_dict on the json representation
        instance_profile_memory_range_model = InstanceProfileMemoryRange.from_dict(
            instance_profile_memory_range_model_json)
        assert instance_profile_memory_range_model != False

        # Construct a model instance of InstanceProfileMemoryRange by calling from_dict on the json representation
        instance_profile_memory_range_model_dict = InstanceProfileMemoryRange.from_dict(
            instance_profile_memory_range_model_json).__dict__
        instance_profile_memory_range_model2 = InstanceProfileMemoryRange(
            **instance_profile_memory_range_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_memory_range_model == instance_profile_memory_range_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_memory_range_model_json2 = instance_profile_memory_range_model.to_dict(
        )
        assert instance_profile_memory_range_model_json2 == instance_profile_memory_range_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfilePortSpeedDependent
#-----------------------------------------------------------------------------
class TestInstanceProfilePortSpeedDependent():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfilePortSpeedDependent
    #--------------------------------------------------------
    def test_instance_profile_port_speed_dependent_serialization(self):

        # Construct a json representation of a InstanceProfilePortSpeedDependent model
        instance_profile_port_speed_dependent_model_json = {}
        instance_profile_port_speed_dependent_model_json['type'] = 'dependent'

        # Construct a model instance of InstanceProfilePortSpeedDependent by calling from_dict on the json representation
        instance_profile_port_speed_dependent_model = InstanceProfilePortSpeedDependent.from_dict(
            instance_profile_port_speed_dependent_model_json)
        assert instance_profile_port_speed_dependent_model != False

        # Construct a model instance of InstanceProfilePortSpeedDependent by calling from_dict on the json representation
        instance_profile_port_speed_dependent_model_dict = InstanceProfilePortSpeedDependent.from_dict(
            instance_profile_port_speed_dependent_model_json).__dict__
        instance_profile_port_speed_dependent_model2 = InstanceProfilePortSpeedDependent(
            **instance_profile_port_speed_dependent_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_port_speed_dependent_model == instance_profile_port_speed_dependent_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_port_speed_dependent_model_json2 = instance_profile_port_speed_dependent_model.to_dict(
        )
        assert instance_profile_port_speed_dependent_model_json2 == instance_profile_port_speed_dependent_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfilePortSpeedFixed
#-----------------------------------------------------------------------------
class TestInstanceProfilePortSpeedFixed():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfilePortSpeedFixed
    #--------------------------------------------------------
    def test_instance_profile_port_speed_fixed_serialization(self):

        # Construct a json representation of a InstanceProfilePortSpeedFixed model
        instance_profile_port_speed_fixed_model_json = {}
        instance_profile_port_speed_fixed_model_json['type'] = 'fixed'
        instance_profile_port_speed_fixed_model_json['value'] = 1000

        # Construct a model instance of InstanceProfilePortSpeedFixed by calling from_dict on the json representation
        instance_profile_port_speed_fixed_model = InstanceProfilePortSpeedFixed.from_dict(
            instance_profile_port_speed_fixed_model_json)
        assert instance_profile_port_speed_fixed_model != False

        # Construct a model instance of InstanceProfilePortSpeedFixed by calling from_dict on the json representation
        instance_profile_port_speed_fixed_model_dict = InstanceProfilePortSpeedFixed.from_dict(
            instance_profile_port_speed_fixed_model_json).__dict__
        instance_profile_port_speed_fixed_model2 = InstanceProfilePortSpeedFixed(
            **instance_profile_port_speed_fixed_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_port_speed_fixed_model == instance_profile_port_speed_fixed_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_port_speed_fixed_model_json2 = instance_profile_port_speed_fixed_model.to_dict(
        )
        assert instance_profile_port_speed_fixed_model_json2 == instance_profile_port_speed_fixed_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfileVCPUDependent
#-----------------------------------------------------------------------------
class TestInstanceProfileVCPUDependent():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfileVCPUDependent
    #--------------------------------------------------------
    def test_instance_profile_vcpu_dependent_serialization(self):

        # Construct a json representation of a InstanceProfileVCPUDependent model
        instance_profile_vcpu_dependent_model_json = {}
        instance_profile_vcpu_dependent_model_json['type'] = 'dependent'

        # Construct a model instance of InstanceProfileVCPUDependent by calling from_dict on the json representation
        instance_profile_vcpu_dependent_model = InstanceProfileVCPUDependent.from_dict(
            instance_profile_vcpu_dependent_model_json)
        assert instance_profile_vcpu_dependent_model != False

        # Construct a model instance of InstanceProfileVCPUDependent by calling from_dict on the json representation
        instance_profile_vcpu_dependent_model_dict = InstanceProfileVCPUDependent.from_dict(
            instance_profile_vcpu_dependent_model_json).__dict__
        instance_profile_vcpu_dependent_model2 = InstanceProfileVCPUDependent(
            **instance_profile_vcpu_dependent_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_vcpu_dependent_model == instance_profile_vcpu_dependent_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_vcpu_dependent_model_json2 = instance_profile_vcpu_dependent_model.to_dict(
        )
        assert instance_profile_vcpu_dependent_model_json2 == instance_profile_vcpu_dependent_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfileVCPUEnum
#-----------------------------------------------------------------------------
class TestInstanceProfileVCPUEnum():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfileVCPUEnum
    #--------------------------------------------------------
    def test_instance_profile_vcpu_enum_serialization(self):

        # Construct a json representation of a InstanceProfileVCPUEnum model
        instance_profile_vcpu_enum_model_json = {}
        instance_profile_vcpu_enum_model_json['default'] = 38
        instance_profile_vcpu_enum_model_json['type'] = 'enum'
        instance_profile_vcpu_enum_model_json['values'] = [38]

        # Construct a model instance of InstanceProfileVCPUEnum by calling from_dict on the json representation
        instance_profile_vcpu_enum_model = InstanceProfileVCPUEnum.from_dict(
            instance_profile_vcpu_enum_model_json)
        assert instance_profile_vcpu_enum_model != False

        # Construct a model instance of InstanceProfileVCPUEnum by calling from_dict on the json representation
        instance_profile_vcpu_enum_model_dict = InstanceProfileVCPUEnum.from_dict(
            instance_profile_vcpu_enum_model_json).__dict__
        instance_profile_vcpu_enum_model2 = InstanceProfileVCPUEnum(
            **instance_profile_vcpu_enum_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_vcpu_enum_model == instance_profile_vcpu_enum_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_vcpu_enum_model_json2 = instance_profile_vcpu_enum_model.to_dict(
        )
        assert instance_profile_vcpu_enum_model_json2 == instance_profile_vcpu_enum_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfileVCPUFixed
#-----------------------------------------------------------------------------
class TestInstanceProfileVCPUFixed():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfileVCPUFixed
    #--------------------------------------------------------
    def test_instance_profile_vcpu_fixed_serialization(self):

        # Construct a json representation of a InstanceProfileVCPUFixed model
        instance_profile_vcpu_fixed_model_json = {}
        instance_profile_vcpu_fixed_model_json['type'] = 'fixed'
        instance_profile_vcpu_fixed_model_json['value'] = 16

        # Construct a model instance of InstanceProfileVCPUFixed by calling from_dict on the json representation
        instance_profile_vcpu_fixed_model = InstanceProfileVCPUFixed.from_dict(
            instance_profile_vcpu_fixed_model_json)
        assert instance_profile_vcpu_fixed_model != False

        # Construct a model instance of InstanceProfileVCPUFixed by calling from_dict on the json representation
        instance_profile_vcpu_fixed_model_dict = InstanceProfileVCPUFixed.from_dict(
            instance_profile_vcpu_fixed_model_json).__dict__
        instance_profile_vcpu_fixed_model2 = InstanceProfileVCPUFixed(
            **instance_profile_vcpu_fixed_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_vcpu_fixed_model == instance_profile_vcpu_fixed_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_vcpu_fixed_model_json2 = instance_profile_vcpu_fixed_model.to_dict(
        )
        assert instance_profile_vcpu_fixed_model_json2 == instance_profile_vcpu_fixed_model_json


#-----------------------------------------------------------------------------
# Test Class for InstanceProfileVCPURange
#-----------------------------------------------------------------------------
class TestInstanceProfileVCPURange():

    #--------------------------------------------------------
    # Test serialization/deserialization for InstanceProfileVCPURange
    #--------------------------------------------------------
    def test_instance_profile_vcpu_range_serialization(self):

        # Construct a json representation of a InstanceProfileVCPURange model
        instance_profile_vcpu_range_model_json = {}
        instance_profile_vcpu_range_model_json['default'] = 4
        instance_profile_vcpu_range_model_json['max'] = 56
        instance_profile_vcpu_range_model_json['min'] = 2
        instance_profile_vcpu_range_model_json['step'] = 2
        instance_profile_vcpu_range_model_json['type'] = 'range'

        # Construct a model instance of InstanceProfileVCPURange by calling from_dict on the json representation
        instance_profile_vcpu_range_model = InstanceProfileVCPURange.from_dict(
            instance_profile_vcpu_range_model_json)
        assert instance_profile_vcpu_range_model != False

        # Construct a model instance of InstanceProfileVCPURange by calling from_dict on the json representation
        instance_profile_vcpu_range_model_dict = InstanceProfileVCPURange.from_dict(
            instance_profile_vcpu_range_model_json).__dict__
        instance_profile_vcpu_range_model2 = InstanceProfileVCPURange(
            **instance_profile_vcpu_range_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_vcpu_range_model == instance_profile_vcpu_range_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_vcpu_range_model_json2 = instance_profile_vcpu_range_model.to_dict(
        )
        assert instance_profile_vcpu_range_model_json2 == instance_profile_vcpu_range_model_json


# #-----------------------------------------------------------------------------
# # Test Class for InstancePrototypeInstanceByImage
# #-----------------------------------------------------------------------------
# class TestInstancePrototypeInstanceByImage():

#     #--------------------------------------------------------
#     # Test serialization/deserialization for InstancePrototypeInstanceByImage
#     #--------------------------------------------------------
#     def test_instance_prototype_instance_by_image_serialization(self):

#         # Construct dict forms of any model objects needed in order to build this model.

#         volume_profile_identity_model = {}  # VolumeProfileIdentity
#         volume_profile_identity_model['name'] = 'general-purpose'

#         security_group_identity_model = {}  # SecurityGroupIdentity
#         security_group_identity_model[
#             'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

#         subnet_identity_model = {}  # SubnetIdentity
#         subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

#         volume_attachment_prototype_instance_context_volume_model = {
#         }  # VolumeAttachmentPrototypeInstanceContextVolume
#         volume_attachment_prototype_instance_context_volume_model[
#             'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

#         volume_prototype_instance_by_image_context_model = {
#         }  # VolumePrototypeInstanceByImageContext
#         volume_prototype_instance_by_image_context_model['capacity'] = 100
#         volume_prototype_instance_by_image_context_model['iops'] = 10000
#         volume_prototype_instance_by_image_context_model['name'] = 'my-volume'
#         volume_prototype_instance_by_image_context_model[
#             'profile'] = volume_profile_identity_model

#         image_identity_model = {}  # ImageIdentity
#         image_identity_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

#         instance_profile_identity_model = {}  # InstanceProfileIdentity
#         instance_profile_identity_model['name'] = 'bc1-4x16'

#         key_identity_model = {}  # KeyIdentity
#         key_identity_model['id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

#         network_interface_prototype_model = {}  # NetworkInterfacePrototype
#         network_interface_prototype_model['name'] = 'my-network-interface'
#         network_interface_prototype_model['primary_ipv4_address'] = '10.0.0.5'
#         network_interface_prototype_model['security_groups'] = [
#             security_group_identity_model
#         ]
#         network_interface_prototype_model['subnet'] = subnet_identity_model

#         resource_group_identity_model = {}  # ResourceGroupIdentity
#         resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

#         vpc_identity_model = {}  # VPCIdentity
#         vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

#         volume_attachment_prototype_instance_by_image_context_model = {
#         }  # VolumeAttachmentPrototypeInstanceByImageContext
#         volume_attachment_prototype_instance_by_image_context_model[
#             'delete_volume_on_instance_delete'] = True
#         volume_attachment_prototype_instance_by_image_context_model[
#             'name'] = 'my-volume-attachment'
#         volume_attachment_prototype_instance_by_image_context_model[
#             'volume'] = volume_prototype_instance_by_image_context_model

#         volume_attachment_prototype_instance_context_model = {
#         }  # VolumeAttachmentPrototypeInstanceContext
#         volume_attachment_prototype_instance_context_model[
#             'delete_volume_on_instance_delete'] = True
#         volume_attachment_prototype_instance_context_model[
#             'name'] = 'my-volume-attachment'
#         volume_attachment_prototype_instance_context_model[
#             'volume'] = volume_attachment_prototype_instance_context_volume_model

#         zone_identity_model = {}  # ZoneIdentity
#         zone_identity_model['name'] = 'us-south-1'

#         # Construct a json representation of a InstancePrototypeInstanceByImage model
#         instance_prototype_instance_by_image_model_json = {}
#         instance_prototype_instance_by_image_model_json['keys'] = [
#             key_identity_model
#         ]
#         instance_prototype_instance_by_image_model_json['name'] = 'my-instance'
#         instance_prototype_instance_by_image_model_json[
#             'network_interfaces'] = [network_interface_prototype_model]
#         instance_prototype_instance_by_image_model_json[
#             'profile'] = instance_profile_identity_model
#         instance_prototype_instance_by_image_model_json[
#             'resource_group'] = resource_group_identity_model
#         instance_prototype_instance_by_image_model_json[
#             'user_data'] = 'testString'
#         instance_prototype_instance_by_image_model_json[
#             'volume_attachments'] = [
#                 volume_attachment_prototype_instance_context_model
#             ]
#         instance_prototype_instance_by_image_model_json[
#             'vpc'] = vpc_identity_model
#         instance_prototype_instance_by_image_model_json[
#             'boot_volume_attachment'] = volume_attachment_prototype_instance_by_image_context_model
#         instance_prototype_instance_by_image_model_json[
#             'image'] = image_identity_model
#         instance_prototype_instance_by_image_model_json[
#             'primary_network_interface'] = network_interface_prototype_model
#         instance_prototype_instance_by_image_model_json[
#             'zone'] = zone_identity_model

#         # Construct a model instance of InstancePrototypeInstanceByImage by calling from_dict on the json representation
#         instance_prototype_instance_by_image_model = InstancePrototypeInstanceByImage.from_dict(
#             instance_prototype_instance_by_image_model_json)
#         assert instance_prototype_instance_by_image_model != False

#         # Construct a model instance of InstancePrototypeInstanceByImage by calling from_dict on the json representation
#         instance_prototype_instance_by_image_model_dict = InstancePrototypeInstanceByImage.from_dict(
#             instance_prototype_instance_by_image_model_json).__dict__
#         instance_prototype_instance_by_image_model2 = InstancePrototypeInstanceByImage(
#             **instance_prototype_instance_by_image_model_dict)

#         # Verify the model instances are equivalent
#         assert instance_prototype_instance_by_image_model == instance_prototype_instance_by_image_model2

#         # Convert model instance back to dict and verify no loss of data
#         instance_prototype_instance_by_image_model_json2 = instance_prototype_instance_by_image_model.to_dict(
#         )
#         assert instance_prototype_instance_by_image_model_json2 == instance_prototype_instance_by_image_model_json


#-----------------------------------------------------------------------------
# Test Class for KeyIdentityByCRN
#-----------------------------------------------------------------------------
class TestKeyIdentityByCRN():

    #--------------------------------------------------------
    # Test serialization/deserialization for KeyIdentityByCRN
    #--------------------------------------------------------
    def test_key_identity_by_crn_serialization(self):

        # Construct a json representation of a KeyIdentityByCRN model
        key_identity_by_crn_model_json = {}
        key_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803'

        # Construct a model instance of KeyIdentityByCRN by calling from_dict on the json representation
        key_identity_by_crn_model = KeyIdentityByCRN.from_dict(
            key_identity_by_crn_model_json)
        assert key_identity_by_crn_model != False

        # Construct a model instance of KeyIdentityByCRN by calling from_dict on the json representation
        key_identity_by_crn_model_dict = KeyIdentityByCRN.from_dict(
            key_identity_by_crn_model_json).__dict__
        key_identity_by_crn_model2 = KeyIdentityByCRN(
            **key_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert key_identity_by_crn_model == key_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        key_identity_by_crn_model_json2 = key_identity_by_crn_model.to_dict()
        assert key_identity_by_crn_model_json2 == key_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for KeyIdentityByFingerprint
#-----------------------------------------------------------------------------
class TestKeyIdentityByFingerprint():

    #--------------------------------------------------------
    # Test serialization/deserialization for KeyIdentityByFingerprint
    #--------------------------------------------------------
    def test_key_identity_by_fingerprint_serialization(self):

        # Construct a json representation of a KeyIdentityByFingerprint model
        key_identity_by_fingerprint_model_json = {}
        key_identity_by_fingerprint_model_json[
            'fingerprint'] = 'SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY'

        # Construct a model instance of KeyIdentityByFingerprint by calling from_dict on the json representation
        key_identity_by_fingerprint_model = KeyIdentityByFingerprint.from_dict(
            key_identity_by_fingerprint_model_json)
        assert key_identity_by_fingerprint_model != False

        # Construct a model instance of KeyIdentityByFingerprint by calling from_dict on the json representation
        key_identity_by_fingerprint_model_dict = KeyIdentityByFingerprint.from_dict(
            key_identity_by_fingerprint_model_json).__dict__
        key_identity_by_fingerprint_model2 = KeyIdentityByFingerprint(
            **key_identity_by_fingerprint_model_dict)

        # Verify the model instances are equivalent
        assert key_identity_by_fingerprint_model == key_identity_by_fingerprint_model2

        # Convert model instance back to dict and verify no loss of data
        key_identity_by_fingerprint_model_json2 = key_identity_by_fingerprint_model.to_dict(
        )
        assert key_identity_by_fingerprint_model_json2 == key_identity_by_fingerprint_model_json


#-----------------------------------------------------------------------------
# Test Class for KeyIdentityByHref
#-----------------------------------------------------------------------------
class TestKeyIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for KeyIdentityByHref
    #--------------------------------------------------------
    def test_key_identity_by_href_serialization(self):

        # Construct a json representation of a KeyIdentityByHref model
        key_identity_by_href_model_json = {}
        key_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803'

        # Construct a model instance of KeyIdentityByHref by calling from_dict on the json representation
        key_identity_by_href_model = KeyIdentityByHref.from_dict(
            key_identity_by_href_model_json)
        assert key_identity_by_href_model != False

        # Construct a model instance of KeyIdentityByHref by calling from_dict on the json representation
        key_identity_by_href_model_dict = KeyIdentityByHref.from_dict(
            key_identity_by_href_model_json).__dict__
        key_identity_by_href_model2 = KeyIdentityByHref(
            **key_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert key_identity_by_href_model == key_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        key_identity_by_href_model_json2 = key_identity_by_href_model.to_dict()
        assert key_identity_by_href_model_json2 == key_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for KeyIdentityById
#-----------------------------------------------------------------------------
class TestKeyIdentityById():

    #--------------------------------------------------------
    # Test serialization/deserialization for KeyIdentityById
    #--------------------------------------------------------
    def test_key_identity_by_id_serialization(self):

        # Construct a json representation of a KeyIdentityById model
        key_identity_by_id_model_json = {}
        key_identity_by_id_model_json[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        # Construct a model instance of KeyIdentityById by calling from_dict on the json representation
        key_identity_by_id_model = KeyIdentityById.from_dict(
            key_identity_by_id_model_json)
        assert key_identity_by_id_model != False

        # Construct a model instance of KeyIdentityById by calling from_dict on the json representation
        key_identity_by_id_model_dict = KeyIdentityById.from_dict(
            key_identity_by_id_model_json).__dict__
        key_identity_by_id_model2 = KeyIdentityById(
            **key_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert key_identity_by_id_model == key_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        key_identity_by_id_model_json2 = key_identity_by_id_model.to_dict()
        assert key_identity_by_id_model_json2 == key_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for KeyReferenceInstanceInitializationContextKeyIdentityByFingerprint
#-----------------------------------------------------------------------------
class TestKeyReferenceInstanceInitializationContextKeyIdentityByFingerprint():

    #--------------------------------------------------------
    # Test serialization/deserialization for KeyReferenceInstanceInitializationContextKeyIdentityByFingerprint
    #--------------------------------------------------------
    def test_key_reference_instance_initialization_context_key_identity_by_fingerprint_serialization(
            self):

        # Construct a json representation of a KeyReferenceInstanceInitializationContextKeyIdentityByFingerprint model
        key_reference_instance_initialization_context_key_identity_by_fingerprint_model_json = {}
        key_reference_instance_initialization_context_key_identity_by_fingerprint_model_json[
            'fingerprint'] = 'SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY'

        # Construct a model instance of KeyReferenceInstanceInitializationContextKeyIdentityByFingerprint by calling from_dict on the json representation
        key_reference_instance_initialization_context_key_identity_by_fingerprint_model = KeyReferenceInstanceInitializationContextKeyIdentityByFingerprint.from_dict(
            key_reference_instance_initialization_context_key_identity_by_fingerprint_model_json
        )
        assert key_reference_instance_initialization_context_key_identity_by_fingerprint_model != False

        # Construct a model instance of KeyReferenceInstanceInitializationContextKeyIdentityByFingerprint by calling from_dict on the json representation
        key_reference_instance_initialization_context_key_identity_by_fingerprint_model_dict = KeyReferenceInstanceInitializationContextKeyIdentityByFingerprint.from_dict(
            key_reference_instance_initialization_context_key_identity_by_fingerprint_model_json
        ).__dict__
        key_reference_instance_initialization_context_key_identity_by_fingerprint_model2 = KeyReferenceInstanceInitializationContextKeyIdentityByFingerprint(
            **
            key_reference_instance_initialization_context_key_identity_by_fingerprint_model_dict
        )

        # Verify the model instances are equivalent
        assert key_reference_instance_initialization_context_key_identity_by_fingerprint_model == key_reference_instance_initialization_context_key_identity_by_fingerprint_model2

        # Convert model instance back to dict and verify no loss of data
        key_reference_instance_initialization_context_key_identity_by_fingerprint_model_json2 = key_reference_instance_initialization_context_key_identity_by_fingerprint_model.to_dict(
        )
        assert key_reference_instance_initialization_context_key_identity_by_fingerprint_model_json2 == key_reference_instance_initialization_context_key_identity_by_fingerprint_model_json


#-----------------------------------------------------------------------------
# Test Class for KeyReferenceInstanceInitializationContextKeyReference
#-----------------------------------------------------------------------------
class TestKeyReferenceInstanceInitializationContextKeyReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for KeyReferenceInstanceInitializationContextKeyReference
    #--------------------------------------------------------
    def test_key_reference_instance_initialization_context_key_reference_serialization(
            self):

        # Construct a json representation of a KeyReferenceInstanceInitializationContextKeyReference model
        key_reference_instance_initialization_context_key_reference_model_json = {}
        key_reference_instance_initialization_context_key_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_reference_instance_initialization_context_key_reference_model_json[
            'fingerprint'] = 'SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY'
        key_reference_instance_initialization_context_key_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_reference_instance_initialization_context_key_reference_model_json[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_reference_instance_initialization_context_key_reference_model_json[
            'name'] = 'my-key'

        # Construct a model instance of KeyReferenceInstanceInitializationContextKeyReference by calling from_dict on the json representation
        key_reference_instance_initialization_context_key_reference_model = KeyReferenceInstanceInitializationContextKeyReference.from_dict(
            key_reference_instance_initialization_context_key_reference_model_json
        )
        assert key_reference_instance_initialization_context_key_reference_model != False

        # Construct a model instance of KeyReferenceInstanceInitializationContextKeyReference by calling from_dict on the json representation
        key_reference_instance_initialization_context_key_reference_model_dict = KeyReferenceInstanceInitializationContextKeyReference.from_dict(
            key_reference_instance_initialization_context_key_reference_model_json
        ).__dict__
        key_reference_instance_initialization_context_key_reference_model2 = KeyReferenceInstanceInitializationContextKeyReference(
            **
            key_reference_instance_initialization_context_key_reference_model_dict
        )

        # Verify the model instances are equivalent
        assert key_reference_instance_initialization_context_key_reference_model == key_reference_instance_initialization_context_key_reference_model2

        # Convert model instance back to dict and verify no loss of data
        key_reference_instance_initialization_context_key_reference_model_json2 = key_reference_instance_initialization_context_key_reference_model.to_dict(
        )
        assert key_reference_instance_initialization_context_key_reference_model_json2 == key_reference_instance_initialization_context_key_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerPolicyPatchTargetLoadBalancerListenerPolicyRedirectURLPatch
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerPolicyPatchTargetLoadBalancerListenerPolicyRedirectURLPatch(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerPolicyPatchTargetLoadBalancerListenerPolicyRedirectURLPatch
    #--------------------------------------------------------
    def test_load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_serialization(
            self):

        # Construct a json representation of a LoadBalancerListenerPolicyPatchTargetLoadBalancerListenerPolicyRedirectURLPatch model
        load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_json = {}
        load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_json[
            'http_status_code'] = 301
        load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_json[
            'url'] = 'https://www.redirect.com'

        # Construct a model instance of LoadBalancerListenerPolicyPatchTargetLoadBalancerListenerPolicyRedirectURLPatch by calling from_dict on the json representation
        load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model = LoadBalancerListenerPolicyPatchTargetLoadBalancerListenerPolicyRedirectURLPatch.from_dict(
            load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_json
        )
        assert load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model != False

        # Construct a model instance of LoadBalancerListenerPolicyPatchTargetLoadBalancerListenerPolicyRedirectURLPatch by calling from_dict on the json representation
        load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_dict = LoadBalancerListenerPolicyPatchTargetLoadBalancerListenerPolicyRedirectURLPatch.from_dict(
            load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_json
        ).__dict__
        load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model2 = LoadBalancerListenerPolicyPatchTargetLoadBalancerListenerPolicyRedirectURLPatch(
            **
            load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model == load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_json2 = load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model.to_dict(
        )
        assert load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_json2 == load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype
    #--------------------------------------------------------
    def test_load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_serialization(
            self):

        # Construct a json representation of a LoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype model
        load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_json = {}
        load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_json[
            'http_status_code'] = 301
        load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_json[
            'url'] = 'https://www.redirect.com'

        # Construct a model instance of LoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype by calling from_dict on the json representation
        load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model = LoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype.from_dict(
            load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_json
        )
        assert load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model != False

        # Construct a model instance of LoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype by calling from_dict on the json representation
        load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_dict = LoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype.from_dict(
            load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_json
        ).__dict__
        load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model2 = LoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype(
            **
            load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model == load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_json2 = load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model.to_dict(
        )
        assert load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_json2 == load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerPolicyTargetReferenceLoadBalancerListenerPolicyRedirectURL
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerPolicyTargetReferenceLoadBalancerListenerPolicyRedirectURL(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerPolicyTargetReferenceLoadBalancerListenerPolicyRedirectURL
    #--------------------------------------------------------
    def test_load_balancer_listener_policy_target_reference_load_balancer_listener_policy_redirect_url_serialization(
            self):

        # Construct a json representation of a LoadBalancerListenerPolicyTargetReferenceLoadBalancerListenerPolicyRedirectURL model
        load_balancer_listener_policy_target_reference_load_balancer_listener_policy_redirect_url_model_json = {}
        load_balancer_listener_policy_target_reference_load_balancer_listener_policy_redirect_url_model_json[
            'http_status_code'] = 301
        load_balancer_listener_policy_target_reference_load_balancer_listener_policy_redirect_url_model_json[
            'url'] = 'https://www.redirect.com'

        # Construct a model instance of LoadBalancerListenerPolicyTargetReferenceLoadBalancerListenerPolicyRedirectURL by calling from_dict on the json representation
        load_balancer_listener_policy_target_reference_load_balancer_listener_policy_redirect_url_model = LoadBalancerListenerPolicyTargetReferenceLoadBalancerListenerPolicyRedirectURL.from_dict(
            load_balancer_listener_policy_target_reference_load_balancer_listener_policy_redirect_url_model_json
        )
        assert load_balancer_listener_policy_target_reference_load_balancer_listener_policy_redirect_url_model != False

        # Construct a model instance of LoadBalancerListenerPolicyTargetReferenceLoadBalancerListenerPolicyRedirectURL by calling from_dict on the json representation
        load_balancer_listener_policy_target_reference_load_balancer_listener_policy_redirect_url_model_dict = LoadBalancerListenerPolicyTargetReferenceLoadBalancerListenerPolicyRedirectURL.from_dict(
            load_balancer_listener_policy_target_reference_load_balancer_listener_policy_redirect_url_model_json
        ).__dict__
        load_balancer_listener_policy_target_reference_load_balancer_listener_policy_redirect_url_model2 = LoadBalancerListenerPolicyTargetReferenceLoadBalancerListenerPolicyRedirectURL(
            **
            load_balancer_listener_policy_target_reference_load_balancer_listener_policy_redirect_url_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_target_reference_load_balancer_listener_policy_redirect_url_model == load_balancer_listener_policy_target_reference_load_balancer_listener_policy_redirect_url_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_target_reference_load_balancer_listener_policy_redirect_url_model_json2 = load_balancer_listener_policy_target_reference_load_balancer_listener_policy_redirect_url_model.to_dict(
        )
        assert load_balancer_listener_policy_target_reference_load_balancer_listener_policy_redirect_url_model_json2 == load_balancer_listener_policy_target_reference_load_balancer_listener_policy_redirect_url_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerPolicyTargetReferenceLoadBalancerPoolReference
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerPolicyTargetReferenceLoadBalancerPoolReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerPolicyTargetReferenceLoadBalancerPoolReference
    #--------------------------------------------------------
    def test_load_balancer_listener_policy_target_reference_load_balancer_pool_reference_serialization(
            self):

        # Construct a json representation of a LoadBalancerListenerPolicyTargetReferenceLoadBalancerPoolReference model
        load_balancer_listener_policy_target_reference_load_balancer_pool_reference_model_json = {}
        load_balancer_listener_policy_target_reference_load_balancer_pool_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_target_reference_load_balancer_pool_reference_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_target_reference_load_balancer_pool_reference_model_json[
            'name'] = 'my-load-balancer-pool'

        # Construct a model instance of LoadBalancerListenerPolicyTargetReferenceLoadBalancerPoolReference by calling from_dict on the json representation
        load_balancer_listener_policy_target_reference_load_balancer_pool_reference_model = LoadBalancerListenerPolicyTargetReferenceLoadBalancerPoolReference.from_dict(
            load_balancer_listener_policy_target_reference_load_balancer_pool_reference_model_json
        )
        assert load_balancer_listener_policy_target_reference_load_balancer_pool_reference_model != False

        # Construct a model instance of LoadBalancerListenerPolicyTargetReferenceLoadBalancerPoolReference by calling from_dict on the json representation
        load_balancer_listener_policy_target_reference_load_balancer_pool_reference_model_dict = LoadBalancerListenerPolicyTargetReferenceLoadBalancerPoolReference.from_dict(
            load_balancer_listener_policy_target_reference_load_balancer_pool_reference_model_json
        ).__dict__
        load_balancer_listener_policy_target_reference_load_balancer_pool_reference_model2 = LoadBalancerListenerPolicyTargetReferenceLoadBalancerPoolReference(
            **
            load_balancer_listener_policy_target_reference_load_balancer_pool_reference_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_target_reference_load_balancer_pool_reference_model == load_balancer_listener_policy_target_reference_load_balancer_pool_reference_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_target_reference_load_balancer_pool_reference_model_json2 = load_balancer_listener_policy_target_reference_load_balancer_pool_reference_model.to_dict(
        )
        assert load_balancer_listener_policy_target_reference_load_balancer_pool_reference_model_json2 == load_balancer_listener_policy_target_reference_load_balancer_pool_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPoolIdentityByHref
#-----------------------------------------------------------------------------
class TestLoadBalancerPoolIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPoolIdentityByHref
    #--------------------------------------------------------
    def test_load_balancer_pool_identity_by_href_serialization(self):

        # Construct a json representation of a LoadBalancerPoolIdentityByHref model
        load_balancer_pool_identity_by_href_model_json = {}
        load_balancer_pool_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a model instance of LoadBalancerPoolIdentityByHref by calling from_dict on the json representation
        load_balancer_pool_identity_by_href_model = LoadBalancerPoolIdentityByHref.from_dict(
            load_balancer_pool_identity_by_href_model_json)
        assert load_balancer_pool_identity_by_href_model != False

        # Construct a model instance of LoadBalancerPoolIdentityByHref by calling from_dict on the json representation
        load_balancer_pool_identity_by_href_model_dict = LoadBalancerPoolIdentityByHref.from_dict(
            load_balancer_pool_identity_by_href_model_json).__dict__
        load_balancer_pool_identity_by_href_model2 = LoadBalancerPoolIdentityByHref(
            **load_balancer_pool_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_identity_by_href_model == load_balancer_pool_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_identity_by_href_model_json2 = load_balancer_pool_identity_by_href_model.to_dict(
        )
        assert load_balancer_pool_identity_by_href_model_json2 == load_balancer_pool_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPoolIdentityById
#-----------------------------------------------------------------------------
class TestLoadBalancerPoolIdentityById():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPoolIdentityById
    #--------------------------------------------------------
    def test_load_balancer_pool_identity_by_id_serialization(self):

        # Construct a json representation of a LoadBalancerPoolIdentityById model
        load_balancer_pool_identity_by_id_model_json = {}
        load_balancer_pool_identity_by_id_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a model instance of LoadBalancerPoolIdentityById by calling from_dict on the json representation
        load_balancer_pool_identity_by_id_model = LoadBalancerPoolIdentityById.from_dict(
            load_balancer_pool_identity_by_id_model_json)
        assert load_balancer_pool_identity_by_id_model != False

        # Construct a model instance of LoadBalancerPoolIdentityById by calling from_dict on the json representation
        load_balancer_pool_identity_by_id_model_dict = LoadBalancerPoolIdentityById.from_dict(
            load_balancer_pool_identity_by_id_model_json).__dict__
        load_balancer_pool_identity_by_id_model2 = LoadBalancerPoolIdentityById(
            **load_balancer_pool_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_identity_by_id_model == load_balancer_pool_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_identity_by_id_model_json2 = load_balancer_pool_identity_by_id_model.to_dict(
        )
        assert load_balancer_pool_identity_by_id_model_json2 == load_balancer_pool_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPoolMemberTargetPrototypeIP
#-----------------------------------------------------------------------------
class TestLoadBalancerPoolMemberTargetPrototypeIP():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPoolMemberTargetPrototypeIP
    #--------------------------------------------------------
    def test_load_balancer_pool_member_target_prototype_ip_serialization(self):

        # Construct a json representation of a LoadBalancerPoolMemberTargetPrototypeIP model
        load_balancer_pool_member_target_prototype_ip_model_json = {}
        load_balancer_pool_member_target_prototype_ip_model_json[
            'address'] = '192.168.3.4'

        # Construct a model instance of LoadBalancerPoolMemberTargetPrototypeIP by calling from_dict on the json representation
        load_balancer_pool_member_target_prototype_ip_model = LoadBalancerPoolMemberTargetPrototypeIP.from_dict(
            load_balancer_pool_member_target_prototype_ip_model_json)
        assert load_balancer_pool_member_target_prototype_ip_model != False

        # Construct a model instance of LoadBalancerPoolMemberTargetPrototypeIP by calling from_dict on the json representation
        load_balancer_pool_member_target_prototype_ip_model_dict = LoadBalancerPoolMemberTargetPrototypeIP.from_dict(
            load_balancer_pool_member_target_prototype_ip_model_json).__dict__
        load_balancer_pool_member_target_prototype_ip_model2 = LoadBalancerPoolMemberTargetPrototypeIP(
            **load_balancer_pool_member_target_prototype_ip_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_member_target_prototype_ip_model == load_balancer_pool_member_target_prototype_ip_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_member_target_prototype_ip_model_json2 = load_balancer_pool_member_target_prototype_ip_model.to_dict(
        )
        assert load_balancer_pool_member_target_prototype_ip_model_json2 == load_balancer_pool_member_target_prototype_ip_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerPoolMemberTargetIP
#-----------------------------------------------------------------------------
class TestLoadBalancerPoolMemberTargetIP():

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerPoolMemberTargetIP
    #--------------------------------------------------------
    def test_load_balancer_pool_member_target_ip_serialization(self):

        # Construct a json representation of a LoadBalancerPoolMemberTargetIP model
        load_balancer_pool_member_target_ip_model_json = {}
        load_balancer_pool_member_target_ip_model_json[
            'address'] = '192.168.3.4'

        # Construct a model instance of LoadBalancerPoolMemberTargetIP by calling from_dict on the json representation
        load_balancer_pool_member_target_ip_model = LoadBalancerPoolMemberTargetIP.from_dict(
            load_balancer_pool_member_target_ip_model_json)
        assert load_balancer_pool_member_target_ip_model != False

        # Construct a model instance of LoadBalancerPoolMemberTargetIP by calling from_dict on the json representation
        load_balancer_pool_member_target_ip_model_dict = LoadBalancerPoolMemberTargetIP.from_dict(
            load_balancer_pool_member_target_ip_model_json).__dict__
        load_balancer_pool_member_target_ip_model2 = LoadBalancerPoolMemberTargetIP(
            **load_balancer_pool_member_target_ip_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_member_target_ip_model == load_balancer_pool_member_target_ip_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_member_target_ip_model_json2 = load_balancer_pool_member_target_ip_model.to_dict(
        )
        assert load_balancer_pool_member_target_ip_model_json2 == load_balancer_pool_member_target_ip_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLIdentityByCRN
#-----------------------------------------------------------------------------
class TestNetworkACLIdentityByCRN():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLIdentityByCRN
    #--------------------------------------------------------
    def test_network_acl_identity_by_crn_serialization(self):

        # Construct a json representation of a NetworkACLIdentityByCRN model
        network_acl_identity_by_crn_model_json = {}
        network_acl_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Construct a model instance of NetworkACLIdentityByCRN by calling from_dict on the json representation
        network_acl_identity_by_crn_model = NetworkACLIdentityByCRN.from_dict(
            network_acl_identity_by_crn_model_json)
        assert network_acl_identity_by_crn_model != False

        # Construct a model instance of NetworkACLIdentityByCRN by calling from_dict on the json representation
        network_acl_identity_by_crn_model_dict = NetworkACLIdentityByCRN.from_dict(
            network_acl_identity_by_crn_model_json).__dict__
        network_acl_identity_by_crn_model2 = NetworkACLIdentityByCRN(
            **network_acl_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_identity_by_crn_model == network_acl_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_identity_by_crn_model_json2 = network_acl_identity_by_crn_model.to_dict(
        )
        assert network_acl_identity_by_crn_model_json2 == network_acl_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLIdentityByHref
#-----------------------------------------------------------------------------
class TestNetworkACLIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLIdentityByHref
    #--------------------------------------------------------
    def test_network_acl_identity_by_href_serialization(self):

        # Construct a json representation of a NetworkACLIdentityByHref model
        network_acl_identity_by_href_model_json = {}
        network_acl_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Construct a model instance of NetworkACLIdentityByHref by calling from_dict on the json representation
        network_acl_identity_by_href_model = NetworkACLIdentityByHref.from_dict(
            network_acl_identity_by_href_model_json)
        assert network_acl_identity_by_href_model != False

        # Construct a model instance of NetworkACLIdentityByHref by calling from_dict on the json representation
        network_acl_identity_by_href_model_dict = NetworkACLIdentityByHref.from_dict(
            network_acl_identity_by_href_model_json).__dict__
        network_acl_identity_by_href_model2 = NetworkACLIdentityByHref(
            **network_acl_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_identity_by_href_model == network_acl_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_identity_by_href_model_json2 = network_acl_identity_by_href_model.to_dict(
        )
        assert network_acl_identity_by_href_model_json2 == network_acl_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLIdentityById
#-----------------------------------------------------------------------------
class TestNetworkACLIdentityById():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLIdentityById
    #--------------------------------------------------------
    def test_network_acl_identity_by_id_serialization(self):

        # Construct a json representation of a NetworkACLIdentityById model
        network_acl_identity_by_id_model_json = {}
        network_acl_identity_by_id_model_json[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Construct a model instance of NetworkACLIdentityById by calling from_dict on the json representation
        network_acl_identity_by_id_model = NetworkACLIdentityById.from_dict(
            network_acl_identity_by_id_model_json)
        assert network_acl_identity_by_id_model != False

        # Construct a model instance of NetworkACLIdentityById by calling from_dict on the json representation
        network_acl_identity_by_id_model_dict = NetworkACLIdentityById.from_dict(
            network_acl_identity_by_id_model_json).__dict__
        network_acl_identity_by_id_model2 = NetworkACLIdentityById(
            **network_acl_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_identity_by_id_model == network_acl_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_identity_by_id_model_json2 = network_acl_identity_by_id_model.to_dict(
        )
        assert network_acl_identity_by_id_model_json2 == network_acl_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLPrototypeNetworkACLByRules
#-----------------------------------------------------------------------------
class TestNetworkACLPrototypeNetworkACLByRules():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLPrototypeNetworkACLByRules
    #--------------------------------------------------------
    def test_network_acl_prototype_network_acl_by_rules_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        network_acl_rule_prototype_network_acl_context_model = {
        }  # NetworkACLRulePrototypeNetworkACLContext
        network_acl_rule_prototype_network_acl_context_model['action'] = 'allow'
        network_acl_rule_prototype_network_acl_context_model[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_prototype_network_acl_context_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_prototype_network_acl_context_model[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_prototype_network_acl_context_model[
            'direction'] = 'inbound'
        network_acl_rule_prototype_network_acl_context_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_network_acl_context_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_network_acl_context_model[
            'ip_version'] = 'ipv4'
        network_acl_rule_prototype_network_acl_context_model[
            'name'] = 'my-rule-2'
        network_acl_rule_prototype_network_acl_context_model['protocol'] = 'all'
        network_acl_rule_prototype_network_acl_context_model[
            'source'] = '192.168.3.0/24'

        resource_group_identity_model = {}  # ResourceGroupIdentity
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        vpc_identity_model = {}  # VPCIdentity
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a json representation of a NetworkACLPrototypeNetworkACLByRules model
        network_acl_prototype_network_acl_by_rules_model_json = {}
        network_acl_prototype_network_acl_by_rules_model_json[
            'name'] = 'my-network-acl'
        network_acl_prototype_network_acl_by_rules_model_json[
            'resource_group'] = resource_group_identity_model
        network_acl_prototype_network_acl_by_rules_model_json[
            'vpc'] = vpc_identity_model
        network_acl_prototype_network_acl_by_rules_model_json['rules'] = [
            network_acl_rule_prototype_network_acl_context_model
        ]

        # Construct a model instance of NetworkACLPrototypeNetworkACLByRules by calling from_dict on the json representation
        network_acl_prototype_network_acl_by_rules_model = NetworkACLPrototypeNetworkACLByRules.from_dict(
            network_acl_prototype_network_acl_by_rules_model_json)
        assert network_acl_prototype_network_acl_by_rules_model != False

        # Construct a model instance of NetworkACLPrototypeNetworkACLByRules by calling from_dict on the json representation
        network_acl_prototype_network_acl_by_rules_model_dict = NetworkACLPrototypeNetworkACLByRules.from_dict(
            network_acl_prototype_network_acl_by_rules_model_json).__dict__
        network_acl_prototype_network_acl_by_rules_model2 = NetworkACLPrototypeNetworkACLByRules(
            **network_acl_prototype_network_acl_by_rules_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_prototype_network_acl_by_rules_model == network_acl_prototype_network_acl_by_rules_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_prototype_network_acl_by_rules_model_json2 = network_acl_prototype_network_acl_by_rules_model.to_dict(
        )
        assert network_acl_prototype_network_acl_by_rules_model_json2 == network_acl_prototype_network_acl_by_rules_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLPrototypeNetworkACLBySourceNetworkACL
#-----------------------------------------------------------------------------
class TestNetworkACLPrototypeNetworkACLBySourceNetworkACL():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLPrototypeNetworkACLBySourceNetworkACL
    #--------------------------------------------------------
    def test_network_acl_prototype_network_acl_by_source_network_acl_serialization(
            self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_identity_model = {}  # NetworkACLIdentity
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        resource_group_identity_model = {}  # ResourceGroupIdentity
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        vpc_identity_model = {}  # VPCIdentity
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a json representation of a NetworkACLPrototypeNetworkACLBySourceNetworkACL model
        network_acl_prototype_network_acl_by_source_network_acl_model_json = {}
        network_acl_prototype_network_acl_by_source_network_acl_model_json[
            'name'] = 'my-network-acl'
        network_acl_prototype_network_acl_by_source_network_acl_model_json[
            'resource_group'] = resource_group_identity_model
        network_acl_prototype_network_acl_by_source_network_acl_model_json[
            'vpc'] = vpc_identity_model
        network_acl_prototype_network_acl_by_source_network_acl_model_json[
            'source_network_acl'] = network_acl_identity_model

        # Construct a model instance of NetworkACLPrototypeNetworkACLBySourceNetworkACL by calling from_dict on the json representation
        network_acl_prototype_network_acl_by_source_network_acl_model = NetworkACLPrototypeNetworkACLBySourceNetworkACL.from_dict(
            network_acl_prototype_network_acl_by_source_network_acl_model_json)
        assert network_acl_prototype_network_acl_by_source_network_acl_model != False

        # Construct a model instance of NetworkACLPrototypeNetworkACLBySourceNetworkACL by calling from_dict on the json representation
        network_acl_prototype_network_acl_by_source_network_acl_model_dict = NetworkACLPrototypeNetworkACLBySourceNetworkACL.from_dict(
            network_acl_prototype_network_acl_by_source_network_acl_model_json
        ).__dict__
        network_acl_prototype_network_acl_by_source_network_acl_model2 = NetworkACLPrototypeNetworkACLBySourceNetworkACL(
            **
            network_acl_prototype_network_acl_by_source_network_acl_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_prototype_network_acl_by_source_network_acl_model == network_acl_prototype_network_acl_by_source_network_acl_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_prototype_network_acl_by_source_network_acl_model_json2 = network_acl_prototype_network_acl_by_source_network_acl_model.to_dict(
        )
        assert network_acl_prototype_network_acl_by_source_network_acl_model_json2 == network_acl_prototype_network_acl_by_source_network_acl_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRuleItemNetworkACLRuleProtocolAll
#-----------------------------------------------------------------------------
class TestNetworkACLRuleItemNetworkACLRuleProtocolAll():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRuleItemNetworkACLRuleProtocolAll
    #--------------------------------------------------------
    def test_network_acl_rule_item_network_acl_rule_protocol_all_serialization(
            self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a json representation of a NetworkACLRuleItemNetworkACLRuleProtocolAll model
        network_acl_rule_item_network_acl_rule_protocol_all_model_json = {}
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'action'] = 'allow'
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'direction'] = 'inbound'
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'ip_version'] = 'ipv4'
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'protocol'] = 'all'
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'source'] = '192.168.3.0/24'

        # Construct a model instance of NetworkACLRuleItemNetworkACLRuleProtocolAll by calling from_dict on the json representation
        network_acl_rule_item_network_acl_rule_protocol_all_model = NetworkACLRuleItemNetworkACLRuleProtocolAll.from_dict(
            network_acl_rule_item_network_acl_rule_protocol_all_model_json)
        assert network_acl_rule_item_network_acl_rule_protocol_all_model != False

        # Construct a model instance of NetworkACLRuleItemNetworkACLRuleProtocolAll by calling from_dict on the json representation
        network_acl_rule_item_network_acl_rule_protocol_all_model_dict = NetworkACLRuleItemNetworkACLRuleProtocolAll.from_dict(
            network_acl_rule_item_network_acl_rule_protocol_all_model_json
        ).__dict__
        network_acl_rule_item_network_acl_rule_protocol_all_model2 = NetworkACLRuleItemNetworkACLRuleProtocolAll(
            **network_acl_rule_item_network_acl_rule_protocol_all_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_item_network_acl_rule_protocol_all_model == network_acl_rule_item_network_acl_rule_protocol_all_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_item_network_acl_rule_protocol_all_model_json2 = network_acl_rule_item_network_acl_rule_protocol_all_model.to_dict(
        )
        assert network_acl_rule_item_network_acl_rule_protocol_all_model_json2 == network_acl_rule_item_network_acl_rule_protocol_all_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRuleItemNetworkACLRuleProtocolICMP
#-----------------------------------------------------------------------------
class TestNetworkACLRuleItemNetworkACLRuleProtocolICMP():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRuleItemNetworkACLRuleProtocolICMP
    #--------------------------------------------------------
    def test_network_acl_rule_item_network_acl_rule_protocol_icmp_serialization(
            self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a json representation of a NetworkACLRuleItemNetworkACLRuleProtocolICMP model
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json = {}
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'action'] = 'allow'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'direction'] = 'inbound'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'ip_version'] = 'ipv4'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'protocol'] = 'icmp'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'source'] = '192.168.3.0/24'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'code'] = 0
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'type'] = 8

        # Construct a model instance of NetworkACLRuleItemNetworkACLRuleProtocolICMP by calling from_dict on the json representation
        network_acl_rule_item_network_acl_rule_protocol_icmp_model = NetworkACLRuleItemNetworkACLRuleProtocolICMP.from_dict(
            network_acl_rule_item_network_acl_rule_protocol_icmp_model_json)
        assert network_acl_rule_item_network_acl_rule_protocol_icmp_model != False

        # Construct a model instance of NetworkACLRuleItemNetworkACLRuleProtocolICMP by calling from_dict on the json representation
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_dict = NetworkACLRuleItemNetworkACLRuleProtocolICMP.from_dict(
            network_acl_rule_item_network_acl_rule_protocol_icmp_model_json
        ).__dict__
        network_acl_rule_item_network_acl_rule_protocol_icmp_model2 = NetworkACLRuleItemNetworkACLRuleProtocolICMP(
            **network_acl_rule_item_network_acl_rule_protocol_icmp_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_item_network_acl_rule_protocol_icmp_model == network_acl_rule_item_network_acl_rule_protocol_icmp_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json2 = network_acl_rule_item_network_acl_rule_protocol_icmp_model.to_dict(
        )
        assert network_acl_rule_item_network_acl_rule_protocol_icmp_model_json2 == network_acl_rule_item_network_acl_rule_protocol_icmp_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP
#-----------------------------------------------------------------------------
class TestNetworkACLRuleItemNetworkACLRuleProtocolTCPUDP():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP
    #--------------------------------------------------------
    def test_network_acl_rule_item_network_acl_rule_protocol_tcpudp_serialization(
            self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a json representation of a NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP model
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json = {}
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'action'] = 'allow'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'direction'] = 'inbound'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'ip_version'] = 'ipv4'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'protocol'] = 'udp'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'source'] = '192.168.3.0/24'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'destination_port_max'] = 22
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'destination_port_min'] = 22
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'source_port_max'] = 65535
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'source_port_min'] = 49152

        # Construct a model instance of NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP by calling from_dict on the json representation
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model = NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP.from_dict(
            network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json)
        assert network_acl_rule_item_network_acl_rule_protocol_tcpudp_model != False

        # Construct a model instance of NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP by calling from_dict on the json representation
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_dict = NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP.from_dict(
            network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json
        ).__dict__
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model2 = NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP(
            **network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_item_network_acl_rule_protocol_tcpudp_model == network_acl_rule_item_network_acl_rule_protocol_tcpudp_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json2 = network_acl_rule_item_network_acl_rule_protocol_tcpudp_model.to_dict(
        )
        assert network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json2 == network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRulePatchBeforeNetworkACLRuleIdentityByHref
#-----------------------------------------------------------------------------
class TestNetworkACLRulePatchBeforeNetworkACLRuleIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRulePatchBeforeNetworkACLRuleIdentityByHref
    #--------------------------------------------------------
    def test_network_acl_rule_patch_before_network_acl_rule_identity_by_href_serialization(
            self):

        # Construct a json representation of a NetworkACLRulePatchBeforeNetworkACLRuleIdentityByHref model
        network_acl_rule_patch_before_network_acl_rule_identity_by_href_model_json = {}
        network_acl_rule_patch_before_network_acl_rule_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'

        # Construct a model instance of NetworkACLRulePatchBeforeNetworkACLRuleIdentityByHref by calling from_dict on the json representation
        network_acl_rule_patch_before_network_acl_rule_identity_by_href_model = NetworkACLRulePatchBeforeNetworkACLRuleIdentityByHref.from_dict(
            network_acl_rule_patch_before_network_acl_rule_identity_by_href_model_json
        )
        assert network_acl_rule_patch_before_network_acl_rule_identity_by_href_model != False

        # Construct a model instance of NetworkACLRulePatchBeforeNetworkACLRuleIdentityByHref by calling from_dict on the json representation
        network_acl_rule_patch_before_network_acl_rule_identity_by_href_model_dict = NetworkACLRulePatchBeforeNetworkACLRuleIdentityByHref.from_dict(
            network_acl_rule_patch_before_network_acl_rule_identity_by_href_model_json
        ).__dict__
        network_acl_rule_patch_before_network_acl_rule_identity_by_href_model2 = NetworkACLRulePatchBeforeNetworkACLRuleIdentityByHref(
            **
            network_acl_rule_patch_before_network_acl_rule_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert network_acl_rule_patch_before_network_acl_rule_identity_by_href_model == network_acl_rule_patch_before_network_acl_rule_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_patch_before_network_acl_rule_identity_by_href_model_json2 = network_acl_rule_patch_before_network_acl_rule_identity_by_href_model.to_dict(
        )
        assert network_acl_rule_patch_before_network_acl_rule_identity_by_href_model_json2 == network_acl_rule_patch_before_network_acl_rule_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRulePatchBeforeNetworkACLRuleIdentityById
#-----------------------------------------------------------------------------
class TestNetworkACLRulePatchBeforeNetworkACLRuleIdentityById():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRulePatchBeforeNetworkACLRuleIdentityById
    #--------------------------------------------------------
    def test_network_acl_rule_patch_before_network_acl_rule_identity_by_id_serialization(
            self):

        # Construct a json representation of a NetworkACLRulePatchBeforeNetworkACLRuleIdentityById model
        network_acl_rule_patch_before_network_acl_rule_identity_by_id_model_json = {}
        network_acl_rule_patch_before_network_acl_rule_identity_by_id_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'

        # Construct a model instance of NetworkACLRulePatchBeforeNetworkACLRuleIdentityById by calling from_dict on the json representation
        network_acl_rule_patch_before_network_acl_rule_identity_by_id_model = NetworkACLRulePatchBeforeNetworkACLRuleIdentityById.from_dict(
            network_acl_rule_patch_before_network_acl_rule_identity_by_id_model_json
        )
        assert network_acl_rule_patch_before_network_acl_rule_identity_by_id_model != False

        # Construct a model instance of NetworkACLRulePatchBeforeNetworkACLRuleIdentityById by calling from_dict on the json representation
        network_acl_rule_patch_before_network_acl_rule_identity_by_id_model_dict = NetworkACLRulePatchBeforeNetworkACLRuleIdentityById.from_dict(
            network_acl_rule_patch_before_network_acl_rule_identity_by_id_model_json
        ).__dict__
        network_acl_rule_patch_before_network_acl_rule_identity_by_id_model2 = NetworkACLRulePatchBeforeNetworkACLRuleIdentityById(
            **
            network_acl_rule_patch_before_network_acl_rule_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert network_acl_rule_patch_before_network_acl_rule_identity_by_id_model == network_acl_rule_patch_before_network_acl_rule_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_patch_before_network_acl_rule_identity_by_id_model_json2 = network_acl_rule_patch_before_network_acl_rule_identity_by_id_model.to_dict(
        )
        assert network_acl_rule_patch_before_network_acl_rule_identity_by_id_model_json2 == network_acl_rule_patch_before_network_acl_rule_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRuleProtocolAll
#-----------------------------------------------------------------------------
class TestNetworkACLRuleProtocolAll():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRuleProtocolAll
    #--------------------------------------------------------
    def test_network_acl_rule_protocol_all_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a json representation of a NetworkACLRuleProtocolAll model
        network_acl_rule_protocol_all_model_json = {}
        network_acl_rule_protocol_all_model_json['action'] = 'allow'
        network_acl_rule_protocol_all_model_json[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_protocol_all_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_protocol_all_model_json[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_protocol_all_model_json['direction'] = 'inbound'
        network_acl_rule_protocol_all_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_protocol_all_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_protocol_all_model_json['ip_version'] = 'ipv4'
        network_acl_rule_protocol_all_model_json['name'] = 'my-rule-2'
        network_acl_rule_protocol_all_model_json['protocol'] = 'all'
        network_acl_rule_protocol_all_model_json['source'] = '192.168.3.0/24'

        # Construct a model instance of NetworkACLRuleProtocolAll by calling from_dict on the json representation
        network_acl_rule_protocol_all_model = NetworkACLRuleProtocolAll.from_dict(
            network_acl_rule_protocol_all_model_json)
        assert network_acl_rule_protocol_all_model != False

        # Construct a model instance of NetworkACLRuleProtocolAll by calling from_dict on the json representation
        network_acl_rule_protocol_all_model_dict = NetworkACLRuleProtocolAll.from_dict(
            network_acl_rule_protocol_all_model_json).__dict__
        network_acl_rule_protocol_all_model2 = NetworkACLRuleProtocolAll(
            **network_acl_rule_protocol_all_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_protocol_all_model == network_acl_rule_protocol_all_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_protocol_all_model_json2 = network_acl_rule_protocol_all_model.to_dict(
        )
        assert network_acl_rule_protocol_all_model_json2 == network_acl_rule_protocol_all_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRuleProtocolICMP
#-----------------------------------------------------------------------------
class TestNetworkACLRuleProtocolICMP():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRuleProtocolICMP
    #--------------------------------------------------------
    def test_network_acl_rule_protocol_icmp_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a json representation of a NetworkACLRuleProtocolICMP model
        network_acl_rule_protocol_icmp_model_json = {}
        network_acl_rule_protocol_icmp_model_json['action'] = 'allow'
        network_acl_rule_protocol_icmp_model_json[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_protocol_icmp_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_protocol_icmp_model_json[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_protocol_icmp_model_json['direction'] = 'inbound'
        network_acl_rule_protocol_icmp_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_protocol_icmp_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_protocol_icmp_model_json['ip_version'] = 'ipv4'
        network_acl_rule_protocol_icmp_model_json['name'] = 'my-rule-2'
        network_acl_rule_protocol_icmp_model_json['protocol'] = 'icmp'
        network_acl_rule_protocol_icmp_model_json['source'] = '192.168.3.0/24'
        network_acl_rule_protocol_icmp_model_json['code'] = 0
        network_acl_rule_protocol_icmp_model_json['type'] = 8

        # Construct a model instance of NetworkACLRuleProtocolICMP by calling from_dict on the json representation
        network_acl_rule_protocol_icmp_model = NetworkACLRuleProtocolICMP.from_dict(
            network_acl_rule_protocol_icmp_model_json)
        assert network_acl_rule_protocol_icmp_model != False

        # Construct a model instance of NetworkACLRuleProtocolICMP by calling from_dict on the json representation
        network_acl_rule_protocol_icmp_model_dict = NetworkACLRuleProtocolICMP.from_dict(
            network_acl_rule_protocol_icmp_model_json).__dict__
        network_acl_rule_protocol_icmp_model2 = NetworkACLRuleProtocolICMP(
            **network_acl_rule_protocol_icmp_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_protocol_icmp_model == network_acl_rule_protocol_icmp_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_protocol_icmp_model_json2 = network_acl_rule_protocol_icmp_model.to_dict(
        )
        assert network_acl_rule_protocol_icmp_model_json2 == network_acl_rule_protocol_icmp_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRuleProtocolTCPUDP
#-----------------------------------------------------------------------------
class TestNetworkACLRuleProtocolTCPUDP():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRuleProtocolTCPUDP
    #--------------------------------------------------------
    def test_network_acl_rule_protocol_tcpudp_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a json representation of a NetworkACLRuleProtocolTCPUDP model
        network_acl_rule_protocol_tcpudp_model_json = {}
        network_acl_rule_protocol_tcpudp_model_json['action'] = 'allow'
        network_acl_rule_protocol_tcpudp_model_json[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_protocol_tcpudp_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_protocol_tcpudp_model_json[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_protocol_tcpudp_model_json['direction'] = 'inbound'
        network_acl_rule_protocol_tcpudp_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_protocol_tcpudp_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_protocol_tcpudp_model_json['ip_version'] = 'ipv4'
        network_acl_rule_protocol_tcpudp_model_json['name'] = 'my-rule-2'
        network_acl_rule_protocol_tcpudp_model_json['protocol'] = 'udp'
        network_acl_rule_protocol_tcpudp_model_json['source'] = '192.168.3.0/24'
        network_acl_rule_protocol_tcpudp_model_json['destination_port_max'] = 22
        network_acl_rule_protocol_tcpudp_model_json['destination_port_min'] = 22
        network_acl_rule_protocol_tcpudp_model_json['source_port_max'] = 65535
        network_acl_rule_protocol_tcpudp_model_json['source_port_min'] = 49152

        # Construct a model instance of NetworkACLRuleProtocolTCPUDP by calling from_dict on the json representation
        network_acl_rule_protocol_tcpudp_model = NetworkACLRuleProtocolTCPUDP.from_dict(
            network_acl_rule_protocol_tcpudp_model_json)
        assert network_acl_rule_protocol_tcpudp_model != False

        # Construct a model instance of NetworkACLRuleProtocolTCPUDP by calling from_dict on the json representation
        network_acl_rule_protocol_tcpudp_model_dict = NetworkACLRuleProtocolTCPUDP.from_dict(
            network_acl_rule_protocol_tcpudp_model_json).__dict__
        network_acl_rule_protocol_tcpudp_model2 = NetworkACLRuleProtocolTCPUDP(
            **network_acl_rule_protocol_tcpudp_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_protocol_tcpudp_model == network_acl_rule_protocol_tcpudp_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_protocol_tcpudp_model_json2 = network_acl_rule_protocol_tcpudp_model.to_dict(
        )
        assert network_acl_rule_protocol_tcpudp_model_json2 == network_acl_rule_protocol_tcpudp_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRulePrototypeBeforeNetworkACLRuleIdentityByHref
#-----------------------------------------------------------------------------
class TestNetworkACLRulePrototypeBeforeNetworkACLRuleIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRulePrototypeBeforeNetworkACLRuleIdentityByHref
    #--------------------------------------------------------
    def test_network_acl_rule_prototype_before_network_acl_rule_identity_by_href_serialization(
            self):

        # Construct a json representation of a NetworkACLRulePrototypeBeforeNetworkACLRuleIdentityByHref model
        network_acl_rule_prototype_before_network_acl_rule_identity_by_href_model_json = {}
        network_acl_rule_prototype_before_network_acl_rule_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'

        # Construct a model instance of NetworkACLRulePrototypeBeforeNetworkACLRuleIdentityByHref by calling from_dict on the json representation
        network_acl_rule_prototype_before_network_acl_rule_identity_by_href_model = NetworkACLRulePrototypeBeforeNetworkACLRuleIdentityByHref.from_dict(
            network_acl_rule_prototype_before_network_acl_rule_identity_by_href_model_json
        )
        assert network_acl_rule_prototype_before_network_acl_rule_identity_by_href_model != False

        # Construct a model instance of NetworkACLRulePrototypeBeforeNetworkACLRuleIdentityByHref by calling from_dict on the json representation
        network_acl_rule_prototype_before_network_acl_rule_identity_by_href_model_dict = NetworkACLRulePrototypeBeforeNetworkACLRuleIdentityByHref.from_dict(
            network_acl_rule_prototype_before_network_acl_rule_identity_by_href_model_json
        ).__dict__
        network_acl_rule_prototype_before_network_acl_rule_identity_by_href_model2 = NetworkACLRulePrototypeBeforeNetworkACLRuleIdentityByHref(
            **
            network_acl_rule_prototype_before_network_acl_rule_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert network_acl_rule_prototype_before_network_acl_rule_identity_by_href_model == network_acl_rule_prototype_before_network_acl_rule_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_prototype_before_network_acl_rule_identity_by_href_model_json2 = network_acl_rule_prototype_before_network_acl_rule_identity_by_href_model.to_dict(
        )
        assert network_acl_rule_prototype_before_network_acl_rule_identity_by_href_model_json2 == network_acl_rule_prototype_before_network_acl_rule_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRulePrototypeBeforeNetworkACLRuleIdentityById
#-----------------------------------------------------------------------------
class TestNetworkACLRulePrototypeBeforeNetworkACLRuleIdentityById():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRulePrototypeBeforeNetworkACLRuleIdentityById
    #--------------------------------------------------------
    def test_network_acl_rule_prototype_before_network_acl_rule_identity_by_id_serialization(
            self):

        # Construct a json representation of a NetworkACLRulePrototypeBeforeNetworkACLRuleIdentityById model
        network_acl_rule_prototype_before_network_acl_rule_identity_by_id_model_json = {}
        network_acl_rule_prototype_before_network_acl_rule_identity_by_id_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'

        # Construct a model instance of NetworkACLRulePrototypeBeforeNetworkACLRuleIdentityById by calling from_dict on the json representation
        network_acl_rule_prototype_before_network_acl_rule_identity_by_id_model = NetworkACLRulePrototypeBeforeNetworkACLRuleIdentityById.from_dict(
            network_acl_rule_prototype_before_network_acl_rule_identity_by_id_model_json
        )
        assert network_acl_rule_prototype_before_network_acl_rule_identity_by_id_model != False

        # Construct a model instance of NetworkACLRulePrototypeBeforeNetworkACLRuleIdentityById by calling from_dict on the json representation
        network_acl_rule_prototype_before_network_acl_rule_identity_by_id_model_dict = NetworkACLRulePrototypeBeforeNetworkACLRuleIdentityById.from_dict(
            network_acl_rule_prototype_before_network_acl_rule_identity_by_id_model_json
        ).__dict__
        network_acl_rule_prototype_before_network_acl_rule_identity_by_id_model2 = NetworkACLRulePrototypeBeforeNetworkACLRuleIdentityById(
            **
            network_acl_rule_prototype_before_network_acl_rule_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert network_acl_rule_prototype_before_network_acl_rule_identity_by_id_model == network_acl_rule_prototype_before_network_acl_rule_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_prototype_before_network_acl_rule_identity_by_id_model_json2 = network_acl_rule_prototype_before_network_acl_rule_identity_by_id_model.to_dict(
        )
        assert network_acl_rule_prototype_before_network_acl_rule_identity_by_id_model_json2 == network_acl_rule_prototype_before_network_acl_rule_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll
#-----------------------------------------------------------------------------
class TestNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll
    #--------------------------------------------------------
    def test_network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_serialization(
            self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a json representation of a NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll model
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json = {}
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json[
            'action'] = 'allow'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json[
            'direction'] = 'inbound'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json[
            'ip_version'] = 'ipv4'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json[
            'protocol'] = 'all'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json[
            'source'] = '192.168.3.0/24'

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model = NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll.from_dict(
            network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json
        )
        assert network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model != False

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_dict = NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll.from_dict(
            network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json
        ).__dict__
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model2 = NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll(
            **
            network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_dict
        )

        # Verify the model instances are equivalent
        assert network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model == network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json2 = network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model.to_dict(
        )
        assert network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json2 == network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP
#-----------------------------------------------------------------------------
class TestNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP
    #--------------------------------------------------------
    def test_network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_serialization(
            self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a json representation of a NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP model
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json = {}
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'action'] = 'allow'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'direction'] = 'inbound'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'ip_version'] = 'ipv4'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'protocol'] = 'icmp'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'source'] = '192.168.3.0/24'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'code'] = 0
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'type'] = 8

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model = NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP.from_dict(
            network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json
        )
        assert network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model != False

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_dict = NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP.from_dict(
            network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json
        ).__dict__
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model2 = NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP(
            **
            network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_dict
        )

        # Verify the model instances are equivalent
        assert network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model == network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json2 = network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model.to_dict(
        )
        assert network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json2 == network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP
#-----------------------------------------------------------------------------
class TestNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP
    #--------------------------------------------------------
    def test_network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_serialization(
            self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a json representation of a NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP model
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json = {}
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'action'] = 'allow'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'direction'] = 'inbound'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'ip_version'] = 'ipv4'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'protocol'] = 'udp'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'source'] = '192.168.3.0/24'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'destination_port_max'] = 22
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'destination_port_min'] = 22
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'source_port_max'] = 65535
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'source_port_min'] = 49152

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model = NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP.from_dict(
            network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json
        )
        assert network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model != False

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_dict = NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP.from_dict(
            network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json
        ).__dict__
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model2 = NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP(
            **
            network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_dict
        )

        # Verify the model instances are equivalent
        assert network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model == network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json2 = network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model.to_dict(
        )
        assert network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json2 == network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRulePrototypeNetworkACLRuleProtocolAll
#-----------------------------------------------------------------------------
class TestNetworkACLRulePrototypeNetworkACLRuleProtocolAll():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRulePrototypeNetworkACLRuleProtocolAll
    #--------------------------------------------------------
    def test_network_acl_rule_prototype_network_acl_rule_protocol_all_serialization(
            self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a json representation of a NetworkACLRulePrototypeNetworkACLRuleProtocolAll model
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json = {}
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json[
            'action'] = 'allow'
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json[
            'direction'] = 'inbound'
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json[
            'ip_version'] = 'ipv4'
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json[
            'protocol'] = 'all'
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json[
            'source'] = '192.168.3.0/24'

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLRuleProtocolAll by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_rule_protocol_all_model = NetworkACLRulePrototypeNetworkACLRuleProtocolAll.from_dict(
            network_acl_rule_prototype_network_acl_rule_protocol_all_model_json)
        assert network_acl_rule_prototype_network_acl_rule_protocol_all_model != False

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLRuleProtocolAll by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_dict = NetworkACLRulePrototypeNetworkACLRuleProtocolAll.from_dict(
            network_acl_rule_prototype_network_acl_rule_protocol_all_model_json
        ).__dict__
        network_acl_rule_prototype_network_acl_rule_protocol_all_model2 = NetworkACLRulePrototypeNetworkACLRuleProtocolAll(
            **
            network_acl_rule_prototype_network_acl_rule_protocol_all_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_prototype_network_acl_rule_protocol_all_model == network_acl_rule_prototype_network_acl_rule_protocol_all_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json2 = network_acl_rule_prototype_network_acl_rule_protocol_all_model.to_dict(
        )
        assert network_acl_rule_prototype_network_acl_rule_protocol_all_model_json2 == network_acl_rule_prototype_network_acl_rule_protocol_all_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRulePrototypeNetworkACLRuleProtocolICMP
#-----------------------------------------------------------------------------
class TestNetworkACLRulePrototypeNetworkACLRuleProtocolICMP():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRulePrototypeNetworkACLRuleProtocolICMP
    #--------------------------------------------------------
    def test_network_acl_rule_prototype_network_acl_rule_protocol_icmp_serialization(
            self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a json representation of a NetworkACLRulePrototypeNetworkACLRuleProtocolICMP model
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json = {}
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'action'] = 'allow'
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'direction'] = 'inbound'
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'ip_version'] = 'ipv4'
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'protocol'] = 'icmp'
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'source'] = '192.168.3.0/24'
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'code'] = 0
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'type'] = 8

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLRuleProtocolICMP by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model = NetworkACLRulePrototypeNetworkACLRuleProtocolICMP.from_dict(
            network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json
        )
        assert network_acl_rule_prototype_network_acl_rule_protocol_icmp_model != False

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLRuleProtocolICMP by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_dict = NetworkACLRulePrototypeNetworkACLRuleProtocolICMP.from_dict(
            network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json
        ).__dict__
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model2 = NetworkACLRulePrototypeNetworkACLRuleProtocolICMP(
            **
            network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_dict
        )

        # Verify the model instances are equivalent
        assert network_acl_rule_prototype_network_acl_rule_protocol_icmp_model == network_acl_rule_prototype_network_acl_rule_protocol_icmp_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json2 = network_acl_rule_prototype_network_acl_rule_protocol_icmp_model.to_dict(
        )
        assert network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json2 == network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP
#-----------------------------------------------------------------------------
class TestNetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP
    #--------------------------------------------------------
    def test_network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_serialization(
            self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a json representation of a NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP model
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json = {}
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'action'] = 'allow'
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'direction'] = 'inbound'
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'ip_version'] = 'ipv4'
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'protocol'] = 'udp'
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'source'] = '192.168.3.0/24'
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'destination_port_max'] = 22
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'destination_port_min'] = 22
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'source_port_max'] = 65535
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'source_port_min'] = 49152

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model = NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP.from_dict(
            network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json
        )
        assert network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model != False

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_dict = NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP.from_dict(
            network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json
        ).__dict__
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model2 = NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP(
            **
            network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_dict
        )

        # Verify the model instances are equivalent
        assert network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model == network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json2 = network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model.to_dict(
        )
        assert network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json2 == network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkInterfaceIdentityByHref
#-----------------------------------------------------------------------------
class TestNetworkInterfaceIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkInterfaceIdentityByHref
    #--------------------------------------------------------
    def test_network_interface_identity_by_href_serialization(self):

        # Construct a json representation of a NetworkInterfaceIdentityByHref model
        network_interface_identity_by_href_model_json = {}
        network_interface_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'

        # Construct a model instance of NetworkInterfaceIdentityByHref by calling from_dict on the json representation
        network_interface_identity_by_href_model = NetworkInterfaceIdentityByHref.from_dict(
            network_interface_identity_by_href_model_json)
        assert network_interface_identity_by_href_model != False

        # Construct a model instance of NetworkInterfaceIdentityByHref by calling from_dict on the json representation
        network_interface_identity_by_href_model_dict = NetworkInterfaceIdentityByHref.from_dict(
            network_interface_identity_by_href_model_json).__dict__
        network_interface_identity_by_href_model2 = NetworkInterfaceIdentityByHref(
            **network_interface_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert network_interface_identity_by_href_model == network_interface_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        network_interface_identity_by_href_model_json2 = network_interface_identity_by_href_model.to_dict(
        )
        assert network_interface_identity_by_href_model_json2 == network_interface_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for NetworkInterfaceIdentityById
#-----------------------------------------------------------------------------
class TestNetworkInterfaceIdentityById():

    #--------------------------------------------------------
    # Test serialization/deserialization for NetworkInterfaceIdentityById
    #--------------------------------------------------------
    def test_network_interface_identity_by_id_serialization(self):

        # Construct a json representation of a NetworkInterfaceIdentityById model
        network_interface_identity_by_id_model_json = {}
        network_interface_identity_by_id_model_json[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'

        # Construct a model instance of NetworkInterfaceIdentityById by calling from_dict on the json representation
        network_interface_identity_by_id_model = NetworkInterfaceIdentityById.from_dict(
            network_interface_identity_by_id_model_json)
        assert network_interface_identity_by_id_model != False

        # Construct a model instance of NetworkInterfaceIdentityById by calling from_dict on the json representation
        network_interface_identity_by_id_model_dict = NetworkInterfaceIdentityById.from_dict(
            network_interface_identity_by_id_model_json).__dict__
        network_interface_identity_by_id_model2 = NetworkInterfaceIdentityById(
            **network_interface_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert network_interface_identity_by_id_model == network_interface_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        network_interface_identity_by_id_model_json2 = network_interface_identity_by_id_model.to_dict(
        )
        assert network_interface_identity_by_id_model_json2 == network_interface_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for OperatingSystemIdentityByHref
#-----------------------------------------------------------------------------
class TestOperatingSystemIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for OperatingSystemIdentityByHref
    #--------------------------------------------------------
    def test_operating_system_identity_by_href_serialization(self):

        # Construct a json representation of a OperatingSystemIdentityByHref model
        operating_system_identity_by_href_model_json = {}
        operating_system_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64'

        # Construct a model instance of OperatingSystemIdentityByHref by calling from_dict on the json representation
        operating_system_identity_by_href_model = OperatingSystemIdentityByHref.from_dict(
            operating_system_identity_by_href_model_json)
        assert operating_system_identity_by_href_model != False

        # Construct a model instance of OperatingSystemIdentityByHref by calling from_dict on the json representation
        operating_system_identity_by_href_model_dict = OperatingSystemIdentityByHref.from_dict(
            operating_system_identity_by_href_model_json).__dict__
        operating_system_identity_by_href_model2 = OperatingSystemIdentityByHref(
            **operating_system_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert operating_system_identity_by_href_model == operating_system_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        operating_system_identity_by_href_model_json2 = operating_system_identity_by_href_model.to_dict(
        )
        assert operating_system_identity_by_href_model_json2 == operating_system_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for OperatingSystemIdentityByName
#-----------------------------------------------------------------------------
class TestOperatingSystemIdentityByName():

    #--------------------------------------------------------
    # Test serialization/deserialization for OperatingSystemIdentityByName
    #--------------------------------------------------------
    def test_operating_system_identity_by_name_serialization(self):

        # Construct a json representation of a OperatingSystemIdentityByName model
        operating_system_identity_by_name_model_json = {}
        operating_system_identity_by_name_model_json['name'] = 'ubuntu-16-amd64'

        # Construct a model instance of OperatingSystemIdentityByName by calling from_dict on the json representation
        operating_system_identity_by_name_model = OperatingSystemIdentityByName.from_dict(
            operating_system_identity_by_name_model_json)
        assert operating_system_identity_by_name_model != False

        # Construct a model instance of OperatingSystemIdentityByName by calling from_dict on the json representation
        operating_system_identity_by_name_model_dict = OperatingSystemIdentityByName.from_dict(
            operating_system_identity_by_name_model_json).__dict__
        operating_system_identity_by_name_model2 = OperatingSystemIdentityByName(
            **operating_system_identity_by_name_model_dict)

        # Verify the model instances are equivalent
        assert operating_system_identity_by_name_model == operating_system_identity_by_name_model2

        # Convert model instance back to dict and verify no loss of data
        operating_system_identity_by_name_model_json2 = operating_system_identity_by_name_model.to_dict(
        )
        assert operating_system_identity_by_name_model_json2 == operating_system_identity_by_name_model_json


#-----------------------------------------------------------------------------
# Test Class for PublicGatewayIdentityByCRN
#-----------------------------------------------------------------------------
class TestPublicGatewayIdentityByCRN():

    #--------------------------------------------------------
    # Test serialization/deserialization for PublicGatewayIdentityByCRN
    #--------------------------------------------------------
    def test_public_gateway_identity_by_crn_serialization(self):

        # Construct a json representation of a PublicGatewayIdentityByCRN model
        public_gateway_identity_by_crn_model_json = {}
        public_gateway_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Construct a model instance of PublicGatewayIdentityByCRN by calling from_dict on the json representation
        public_gateway_identity_by_crn_model = PublicGatewayIdentityByCRN.from_dict(
            public_gateway_identity_by_crn_model_json)
        assert public_gateway_identity_by_crn_model != False

        # Construct a model instance of PublicGatewayIdentityByCRN by calling from_dict on the json representation
        public_gateway_identity_by_crn_model_dict = PublicGatewayIdentityByCRN.from_dict(
            public_gateway_identity_by_crn_model_json).__dict__
        public_gateway_identity_by_crn_model2 = PublicGatewayIdentityByCRN(
            **public_gateway_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_identity_by_crn_model == public_gateway_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_identity_by_crn_model_json2 = public_gateway_identity_by_crn_model.to_dict(
        )
        assert public_gateway_identity_by_crn_model_json2 == public_gateway_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for PublicGatewayIdentityByHref
#-----------------------------------------------------------------------------
class TestPublicGatewayIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for PublicGatewayIdentityByHref
    #--------------------------------------------------------
    def test_public_gateway_identity_by_href_serialization(self):

        # Construct a json representation of a PublicGatewayIdentityByHref model
        public_gateway_identity_by_href_model_json = {}
        public_gateway_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Construct a model instance of PublicGatewayIdentityByHref by calling from_dict on the json representation
        public_gateway_identity_by_href_model = PublicGatewayIdentityByHref.from_dict(
            public_gateway_identity_by_href_model_json)
        assert public_gateway_identity_by_href_model != False

        # Construct a model instance of PublicGatewayIdentityByHref by calling from_dict on the json representation
        public_gateway_identity_by_href_model_dict = PublicGatewayIdentityByHref.from_dict(
            public_gateway_identity_by_href_model_json).__dict__
        public_gateway_identity_by_href_model2 = PublicGatewayIdentityByHref(
            **public_gateway_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_identity_by_href_model == public_gateway_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_identity_by_href_model_json2 = public_gateway_identity_by_href_model.to_dict(
        )
        assert public_gateway_identity_by_href_model_json2 == public_gateway_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for PublicGatewayIdentityById
#-----------------------------------------------------------------------------
class TestPublicGatewayIdentityById():

    #--------------------------------------------------------
    # Test serialization/deserialization for PublicGatewayIdentityById
    #--------------------------------------------------------
    def test_public_gateway_identity_by_id_serialization(self):

        # Construct a json representation of a PublicGatewayIdentityById model
        public_gateway_identity_by_id_model_json = {}
        public_gateway_identity_by_id_model_json[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Construct a model instance of PublicGatewayIdentityById by calling from_dict on the json representation
        public_gateway_identity_by_id_model = PublicGatewayIdentityById.from_dict(
            public_gateway_identity_by_id_model_json)
        assert public_gateway_identity_by_id_model != False

        # Construct a model instance of PublicGatewayIdentityById by calling from_dict on the json representation
        public_gateway_identity_by_id_model_dict = PublicGatewayIdentityById.from_dict(
            public_gateway_identity_by_id_model_json).__dict__
        public_gateway_identity_by_id_model2 = PublicGatewayIdentityById(
            **public_gateway_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_identity_by_id_model == public_gateway_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_identity_by_id_model_json2 = public_gateway_identity_by_id_model.to_dict(
        )
        assert public_gateway_identity_by_id_model_json2 == public_gateway_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for PublicGatewayPrototypeFloatingIpFloatingIPPrototypeTargetContext
#-----------------------------------------------------------------------------
class TestPublicGatewayPrototypeFloatingIpFloatingIPPrototypeTargetContext():

    #--------------------------------------------------------
    # Test serialization/deserialization for PublicGatewayPrototypeFloatingIpFloatingIPPrototypeTargetContext
    #--------------------------------------------------------
    def test_public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_serialization(
            self):

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_identity_model = {}  # ResourceGroupIdentity
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a json representation of a PublicGatewayPrototypeFloatingIpFloatingIPPrototypeTargetContext model
        public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_json = {}
        public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_json[
            'name'] = 'my-floating-ip'
        public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_json[
            'resource_group'] = resource_group_identity_model

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPPrototypeTargetContext by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model = PublicGatewayPrototypeFloatingIpFloatingIPPrototypeTargetContext.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_json
        )
        assert public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model != False

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPPrototypeTargetContext by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_dict = PublicGatewayPrototypeFloatingIpFloatingIPPrototypeTargetContext.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_json
        ).__dict__
        public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model2 = PublicGatewayPrototypeFloatingIpFloatingIPPrototypeTargetContext(
            **
            public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_dict
        )

        # Verify the model instances are equivalent
        assert public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model == public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_json2 = public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model.to_dict(
        )
        assert public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_json2 == public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_json


#-----------------------------------------------------------------------------
# Test Class for ResourceGroupIdentityById
#-----------------------------------------------------------------------------
class TestResourceGroupIdentityById():

    #--------------------------------------------------------
    # Test serialization/deserialization for ResourceGroupIdentityById
    #--------------------------------------------------------
    def test_resource_group_identity_by_id_serialization(self):

        # Construct a json representation of a ResourceGroupIdentityById model
        resource_group_identity_by_id_model_json = {}
        resource_group_identity_by_id_model_json[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a model instance of ResourceGroupIdentityById by calling from_dict on the json representation
        resource_group_identity_by_id_model = ResourceGroupIdentityById.from_dict(
            resource_group_identity_by_id_model_json)
        assert resource_group_identity_by_id_model != False

        # Construct a model instance of ResourceGroupIdentityById by calling from_dict on the json representation
        resource_group_identity_by_id_model_dict = ResourceGroupIdentityById.from_dict(
            resource_group_identity_by_id_model_json).__dict__
        resource_group_identity_by_id_model2 = ResourceGroupIdentityById(
            **resource_group_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert resource_group_identity_by_id_model == resource_group_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        resource_group_identity_by_id_model_json2 = resource_group_identity_by_id_model.to_dict(
        )
        assert resource_group_identity_by_id_model_json2 == resource_group_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for RouteNextHopIP
#-----------------------------------------------------------------------------
class TestRouteNextHopIP():

    #--------------------------------------------------------
    # Test serialization/deserialization for RouteNextHopIP
    #--------------------------------------------------------
    def test_route_next_hop_ip_serialization(self):

        # Construct a json representation of a RouteNextHopIP model
        route_next_hop_ip_model_json = {}
        route_next_hop_ip_model_json['address'] = '192.168.3.4'

        # Construct a model instance of RouteNextHopIP by calling from_dict on the json representation
        route_next_hop_ip_model = RouteNextHopIP.from_dict(
            route_next_hop_ip_model_json)
        assert route_next_hop_ip_model != False

        # Construct a model instance of RouteNextHopIP by calling from_dict on the json representation
        route_next_hop_ip_model_dict = RouteNextHopIP.from_dict(
            route_next_hop_ip_model_json).__dict__
        route_next_hop_ip_model2 = RouteNextHopIP(
            **route_next_hop_ip_model_dict)

        # Verify the model instances are equivalent
        assert route_next_hop_ip_model == route_next_hop_ip_model2

        # Convert model instance back to dict and verify no loss of data
        route_next_hop_ip_model_json2 = route_next_hop_ip_model.to_dict()
        assert route_next_hop_ip_model_json2 == route_next_hop_ip_model_json


#-----------------------------------------------------------------------------
# Test Class for RouteNextHopPrototypeRouteNextHopIP
#-----------------------------------------------------------------------------
class TestRouteNextHopPrototypeRouteNextHopIP():

    #--------------------------------------------------------
    # Test serialization/deserialization for RouteNextHopPrototypeRouteNextHopIP
    #--------------------------------------------------------
    def test_route_next_hop_prototype_route_next_hop_ip_serialization(self):

        # Construct a json representation of a RouteNextHopPrototypeRouteNextHopIP model
        route_next_hop_prototype_route_next_hop_ip_model_json = {}
        route_next_hop_prototype_route_next_hop_ip_model_json[
            'address'] = '192.168.3.4'

        # Construct a model instance of RouteNextHopPrototypeRouteNextHopIP by calling from_dict on the json representation
        route_next_hop_prototype_route_next_hop_ip_model = RouteNextHopPrototypeRouteNextHopIP.from_dict(
            route_next_hop_prototype_route_next_hop_ip_model_json)
        assert route_next_hop_prototype_route_next_hop_ip_model != False

        # Construct a model instance of RouteNextHopPrototypeRouteNextHopIP by calling from_dict on the json representation
        route_next_hop_prototype_route_next_hop_ip_model_dict = RouteNextHopPrototypeRouteNextHopIP.from_dict(
            route_next_hop_prototype_route_next_hop_ip_model_json).__dict__
        route_next_hop_prototype_route_next_hop_ip_model2 = RouteNextHopPrototypeRouteNextHopIP(
            **route_next_hop_prototype_route_next_hop_ip_model_dict)

        # Verify the model instances are equivalent
        assert route_next_hop_prototype_route_next_hop_ip_model == route_next_hop_prototype_route_next_hop_ip_model2

        # Convert model instance back to dict and verify no loss of data
        route_next_hop_prototype_route_next_hop_ip_model_json2 = route_next_hop_prototype_route_next_hop_ip_model.to_dict(
        )
        assert route_next_hop_prototype_route_next_hop_ip_model_json2 == route_next_hop_prototype_route_next_hop_ip_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupIdentityByCRN
#-----------------------------------------------------------------------------
class TestSecurityGroupIdentityByCRN():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupIdentityByCRN
    #--------------------------------------------------------
    def test_security_group_identity_by_crn_serialization(self):

        # Construct a json representation of a SecurityGroupIdentityByCRN model
        security_group_identity_by_crn_model_json = {}
        security_group_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupIdentityByCRN by calling from_dict on the json representation
        security_group_identity_by_crn_model = SecurityGroupIdentityByCRN.from_dict(
            security_group_identity_by_crn_model_json)
        assert security_group_identity_by_crn_model != False

        # Construct a model instance of SecurityGroupIdentityByCRN by calling from_dict on the json representation
        security_group_identity_by_crn_model_dict = SecurityGroupIdentityByCRN.from_dict(
            security_group_identity_by_crn_model_json).__dict__
        security_group_identity_by_crn_model2 = SecurityGroupIdentityByCRN(
            **security_group_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert security_group_identity_by_crn_model == security_group_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_identity_by_crn_model_json2 = security_group_identity_by_crn_model.to_dict(
        )
        assert security_group_identity_by_crn_model_json2 == security_group_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupIdentityByHref
#-----------------------------------------------------------------------------
class TestSecurityGroupIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupIdentityByHref
    #--------------------------------------------------------
    def test_security_group_identity_by_href_serialization(self):

        # Construct a json representation of a SecurityGroupIdentityByHref model
        security_group_identity_by_href_model_json = {}
        security_group_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupIdentityByHref by calling from_dict on the json representation
        security_group_identity_by_href_model = SecurityGroupIdentityByHref.from_dict(
            security_group_identity_by_href_model_json)
        assert security_group_identity_by_href_model != False

        # Construct a model instance of SecurityGroupIdentityByHref by calling from_dict on the json representation
        security_group_identity_by_href_model_dict = SecurityGroupIdentityByHref.from_dict(
            security_group_identity_by_href_model_json).__dict__
        security_group_identity_by_href_model2 = SecurityGroupIdentityByHref(
            **security_group_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert security_group_identity_by_href_model == security_group_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_identity_by_href_model_json2 = security_group_identity_by_href_model.to_dict(
        )
        assert security_group_identity_by_href_model_json2 == security_group_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupIdentityById
#-----------------------------------------------------------------------------
class TestSecurityGroupIdentityById():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupIdentityById
    #--------------------------------------------------------
    def test_security_group_identity_by_id_serialization(self):

        # Construct a json representation of a SecurityGroupIdentityById model
        security_group_identity_by_id_model_json = {}
        security_group_identity_by_id_model_json[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupIdentityById by calling from_dict on the json representation
        security_group_identity_by_id_model = SecurityGroupIdentityById.from_dict(
            security_group_identity_by_id_model_json)
        assert security_group_identity_by_id_model != False

        # Construct a model instance of SecurityGroupIdentityById by calling from_dict on the json representation
        security_group_identity_by_id_model_dict = SecurityGroupIdentityById.from_dict(
            security_group_identity_by_id_model_json).__dict__
        security_group_identity_by_id_model2 = SecurityGroupIdentityById(
            **security_group_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert security_group_identity_by_id_model == security_group_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_identity_by_id_model_json2 = security_group_identity_by_id_model.to_dict(
        )
        assert security_group_identity_by_id_model_json2 == security_group_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePatchRemoteCIDR
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePatchRemoteCIDR():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePatchRemoteCIDR
    #--------------------------------------------------------
    def test_security_group_rule_patch_remote_cidr_serialization(self):

        # Construct a json representation of a SecurityGroupRulePatchRemoteCIDR model
        security_group_rule_patch_remote_cidr_model_json = {}
        security_group_rule_patch_remote_cidr_model_json[
            'cidr_block'] = '192.168.3.0/24'

        # Construct a model instance of SecurityGroupRulePatchRemoteCIDR by calling from_dict on the json representation
        security_group_rule_patch_remote_cidr_model = SecurityGroupRulePatchRemoteCIDR.from_dict(
            security_group_rule_patch_remote_cidr_model_json)
        assert security_group_rule_patch_remote_cidr_model != False

        # Construct a model instance of SecurityGroupRulePatchRemoteCIDR by calling from_dict on the json representation
        security_group_rule_patch_remote_cidr_model_dict = SecurityGroupRulePatchRemoteCIDR.from_dict(
            security_group_rule_patch_remote_cidr_model_json).__dict__
        security_group_rule_patch_remote_cidr_model2 = SecurityGroupRulePatchRemoteCIDR(
            **security_group_rule_patch_remote_cidr_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_patch_remote_cidr_model == security_group_rule_patch_remote_cidr_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_patch_remote_cidr_model_json2 = security_group_rule_patch_remote_cidr_model.to_dict(
        )
        assert security_group_rule_patch_remote_cidr_model_json2 == security_group_rule_patch_remote_cidr_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePatchRemoteIP
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePatchRemoteIP():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePatchRemoteIP
    #--------------------------------------------------------
    def test_security_group_rule_patch_remote_ip_serialization(self):

        # Construct a json representation of a SecurityGroupRulePatchRemoteIP model
        security_group_rule_patch_remote_ip_model_json = {}
        security_group_rule_patch_remote_ip_model_json[
            'address'] = '192.168.3.4'

        # Construct a model instance of SecurityGroupRulePatchRemoteIP by calling from_dict on the json representation
        security_group_rule_patch_remote_ip_model = SecurityGroupRulePatchRemoteIP.from_dict(
            security_group_rule_patch_remote_ip_model_json)
        assert security_group_rule_patch_remote_ip_model != False

        # Construct a model instance of SecurityGroupRulePatchRemoteIP by calling from_dict on the json representation
        security_group_rule_patch_remote_ip_model_dict = SecurityGroupRulePatchRemoteIP.from_dict(
            security_group_rule_patch_remote_ip_model_json).__dict__
        security_group_rule_patch_remote_ip_model2 = SecurityGroupRulePatchRemoteIP(
            **security_group_rule_patch_remote_ip_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_patch_remote_ip_model == security_group_rule_patch_remote_ip_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_patch_remote_ip_model_json2 = security_group_rule_patch_remote_ip_model.to_dict(
        )
        assert security_group_rule_patch_remote_ip_model_json2 == security_group_rule_patch_remote_ip_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRuleProtocolAll
#-----------------------------------------------------------------------------
class TestSecurityGroupRuleProtocolAll():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRuleProtocolAll
    #--------------------------------------------------------
    def test_security_group_rule_protocol_all_serialization(self):

        # Construct a json representation of a SecurityGroupRuleProtocolAll model
        security_group_rule_protocol_all_model_json = {}
        security_group_rule_protocol_all_model_json['direction'] = 'inbound'
        security_group_rule_protocol_all_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_protocol_all_model_json[
            'id'] = '6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_protocol_all_model_json['ip_version'] = 'ipv4'
        security_group_rule_protocol_all_model_json['protocol'] = 'all'
        security_group_rule_protocol_all_model_json['remote'] = {'foo': 'bar'}

        # Construct a model instance of SecurityGroupRuleProtocolAll by calling from_dict on the json representation
        security_group_rule_protocol_all_model = SecurityGroupRuleProtocolAll.from_dict(
            security_group_rule_protocol_all_model_json)
        assert security_group_rule_protocol_all_model != False

        # Construct a model instance of SecurityGroupRuleProtocolAll by calling from_dict on the json representation
        security_group_rule_protocol_all_model_dict = SecurityGroupRuleProtocolAll.from_dict(
            security_group_rule_protocol_all_model_json).__dict__
        security_group_rule_protocol_all_model2 = SecurityGroupRuleProtocolAll(
            **security_group_rule_protocol_all_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_protocol_all_model == security_group_rule_protocol_all_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_protocol_all_model_json2 = security_group_rule_protocol_all_model.to_dict(
        )
        assert security_group_rule_protocol_all_model_json2 == security_group_rule_protocol_all_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRuleProtocolICMP
#-----------------------------------------------------------------------------
class TestSecurityGroupRuleProtocolICMP():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRuleProtocolICMP
    #--------------------------------------------------------
    def test_security_group_rule_protocol_icmp_serialization(self):

        # Construct a json representation of a SecurityGroupRuleProtocolICMP model
        security_group_rule_protocol_icmp_model_json = {}
        security_group_rule_protocol_icmp_model_json['direction'] = 'inbound'
        security_group_rule_protocol_icmp_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_protocol_icmp_model_json[
            'id'] = '6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_protocol_icmp_model_json['ip_version'] = 'ipv4'
        security_group_rule_protocol_icmp_model_json['protocol'] = 'icmp'
        security_group_rule_protocol_icmp_model_json['remote'] = {'foo': 'bar'}
        security_group_rule_protocol_icmp_model_json['code'] = 0
        security_group_rule_protocol_icmp_model_json['type'] = 8

        # Construct a model instance of SecurityGroupRuleProtocolICMP by calling from_dict on the json representation
        security_group_rule_protocol_icmp_model = SecurityGroupRuleProtocolICMP.from_dict(
            security_group_rule_protocol_icmp_model_json)
        assert security_group_rule_protocol_icmp_model != False

        # Construct a model instance of SecurityGroupRuleProtocolICMP by calling from_dict on the json representation
        security_group_rule_protocol_icmp_model_dict = SecurityGroupRuleProtocolICMP.from_dict(
            security_group_rule_protocol_icmp_model_json).__dict__
        security_group_rule_protocol_icmp_model2 = SecurityGroupRuleProtocolICMP(
            **security_group_rule_protocol_icmp_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_protocol_icmp_model == security_group_rule_protocol_icmp_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_protocol_icmp_model_json2 = security_group_rule_protocol_icmp_model.to_dict(
        )
        assert security_group_rule_protocol_icmp_model_json2 == security_group_rule_protocol_icmp_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRuleProtocolTCPUDP
#-----------------------------------------------------------------------------
class TestSecurityGroupRuleProtocolTCPUDP():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRuleProtocolTCPUDP
    #--------------------------------------------------------
    def test_security_group_rule_protocol_tcpudp_serialization(self):

        # Construct a json representation of a SecurityGroupRuleProtocolTCPUDP model
        security_group_rule_protocol_tcpudp_model_json = {}
        security_group_rule_protocol_tcpudp_model_json['direction'] = 'inbound'
        security_group_rule_protocol_tcpudp_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_protocol_tcpudp_model_json[
            'id'] = '6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_protocol_tcpudp_model_json['ip_version'] = 'ipv4'
        security_group_rule_protocol_tcpudp_model_json['protocol'] = 'udp'
        security_group_rule_protocol_tcpudp_model_json['remote'] = {
            'foo': 'bar'
        }
        security_group_rule_protocol_tcpudp_model_json['port_max'] = 22
        security_group_rule_protocol_tcpudp_model_json['port_min'] = 22

        # Construct a model instance of SecurityGroupRuleProtocolTCPUDP by calling from_dict on the json representation
        security_group_rule_protocol_tcpudp_model = SecurityGroupRuleProtocolTCPUDP.from_dict(
            security_group_rule_protocol_tcpudp_model_json)
        assert security_group_rule_protocol_tcpudp_model != False

        # Construct a model instance of SecurityGroupRuleProtocolTCPUDP by calling from_dict on the json representation
        security_group_rule_protocol_tcpudp_model_dict = SecurityGroupRuleProtocolTCPUDP.from_dict(
            security_group_rule_protocol_tcpudp_model_json).__dict__
        security_group_rule_protocol_tcpudp_model2 = SecurityGroupRuleProtocolTCPUDP(
            **security_group_rule_protocol_tcpudp_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_protocol_tcpudp_model == security_group_rule_protocol_tcpudp_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_protocol_tcpudp_model_json2 = security_group_rule_protocol_tcpudp_model.to_dict(
        )
        assert security_group_rule_protocol_tcpudp_model_json2 == security_group_rule_protocol_tcpudp_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeRemoteCIDR
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeRemoteCIDR():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeRemoteCIDR
    #--------------------------------------------------------
    def test_security_group_rule_prototype_remote_cidr_serialization(self):

        # Construct a json representation of a SecurityGroupRulePrototypeRemoteCIDR model
        security_group_rule_prototype_remote_cidr_model_json = {}
        security_group_rule_prototype_remote_cidr_model_json[
            'cidr_block'] = '192.168.3.0/24'

        # Construct a model instance of SecurityGroupRulePrototypeRemoteCIDR by calling from_dict on the json representation
        security_group_rule_prototype_remote_cidr_model = SecurityGroupRulePrototypeRemoteCIDR.from_dict(
            security_group_rule_prototype_remote_cidr_model_json)
        assert security_group_rule_prototype_remote_cidr_model != False

        # Construct a model instance of SecurityGroupRulePrototypeRemoteCIDR by calling from_dict on the json representation
        security_group_rule_prototype_remote_cidr_model_dict = SecurityGroupRulePrototypeRemoteCIDR.from_dict(
            security_group_rule_prototype_remote_cidr_model_json).__dict__
        security_group_rule_prototype_remote_cidr_model2 = SecurityGroupRulePrototypeRemoteCIDR(
            **security_group_rule_prototype_remote_cidr_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_remote_cidr_model == security_group_rule_prototype_remote_cidr_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_remote_cidr_model_json2 = security_group_rule_prototype_remote_cidr_model.to_dict(
        )
        assert security_group_rule_prototype_remote_cidr_model_json2 == security_group_rule_prototype_remote_cidr_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeRemoteIP
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeRemoteIP():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeRemoteIP
    #--------------------------------------------------------
    def test_security_group_rule_prototype_remote_ip_serialization(self):

        # Construct a json representation of a SecurityGroupRulePrototypeRemoteIP model
        security_group_rule_prototype_remote_ip_model_json = {}
        security_group_rule_prototype_remote_ip_model_json[
            'address'] = '192.168.3.4'

        # Construct a model instance of SecurityGroupRulePrototypeRemoteIP by calling from_dict on the json representation
        security_group_rule_prototype_remote_ip_model = SecurityGroupRulePrototypeRemoteIP.from_dict(
            security_group_rule_prototype_remote_ip_model_json)
        assert security_group_rule_prototype_remote_ip_model != False

        # Construct a model instance of SecurityGroupRulePrototypeRemoteIP by calling from_dict on the json representation
        security_group_rule_prototype_remote_ip_model_dict = SecurityGroupRulePrototypeRemoteIP.from_dict(
            security_group_rule_prototype_remote_ip_model_json).__dict__
        security_group_rule_prototype_remote_ip_model2 = SecurityGroupRulePrototypeRemoteIP(
            **security_group_rule_prototype_remote_ip_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_remote_ip_model == security_group_rule_prototype_remote_ip_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_remote_ip_model_json2 = security_group_rule_prototype_remote_ip_model.to_dict(
        )
        assert security_group_rule_prototype_remote_ip_model_json2 == security_group_rule_prototype_remote_ip_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteCIDR
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteCIDR():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteCIDR
    #--------------------------------------------------------
    def test_security_group_rule_prototype_security_group_rule_protocol_all_remote_cidr_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteCIDR model
        security_group_rule_prototype_security_group_rule_protocol_all_remote_cidr_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_all_remote_cidr_model_json[
            'cidr_block'] = '192.168.3.0/24'

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteCIDR by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_all_remote_cidr_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteCIDR.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_all_remote_cidr_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_all_remote_cidr_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteCIDR by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_all_remote_cidr_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteCIDR.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_all_remote_cidr_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_all_remote_cidr_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteCIDR(
            **
            security_group_rule_prototype_security_group_rule_protocol_all_remote_cidr_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_all_remote_cidr_model == security_group_rule_prototype_security_group_rule_protocol_all_remote_cidr_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_all_remote_cidr_model_json2 = security_group_rule_prototype_security_group_rule_protocol_all_remote_cidr_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_all_remote_cidr_model_json2 == security_group_rule_prototype_security_group_rule_protocol_all_remote_cidr_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteIP
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteIP():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteIP
    #--------------------------------------------------------
    def test_security_group_rule_prototype_security_group_rule_protocol_all_remote_ip_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteIP model
        security_group_rule_prototype_security_group_rule_protocol_all_remote_ip_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_all_remote_ip_model_json[
            'address'] = '192.168.3.4'

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteIP by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_all_remote_ip_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteIP.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_all_remote_ip_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_all_remote_ip_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteIP by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_all_remote_ip_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteIP.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_all_remote_ip_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_all_remote_ip_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteIP(
            **
            security_group_rule_prototype_security_group_rule_protocol_all_remote_ip_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_all_remote_ip_model == security_group_rule_prototype_security_group_rule_protocol_all_remote_ip_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_all_remote_ip_model_json2 = security_group_rule_prototype_security_group_rule_protocol_all_remote_ip_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_all_remote_ip_model_json2 == security_group_rule_prototype_security_group_rule_protocol_all_remote_ip_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteCIDR
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteCIDR():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteCIDR
    #--------------------------------------------------------
    def test_security_group_rule_prototype_security_group_rule_protocol_icmp_remote_cidr_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteCIDR model
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_cidr_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_cidr_model_json[
            'cidr_block'] = '192.168.3.0/24'

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteCIDR by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_cidr_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteCIDR.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_icmp_remote_cidr_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_remote_cidr_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteCIDR by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_cidr_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteCIDR.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_icmp_remote_cidr_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_cidr_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteCIDR(
            **
            security_group_rule_prototype_security_group_rule_protocol_icmp_remote_cidr_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_remote_cidr_model == security_group_rule_prototype_security_group_rule_protocol_icmp_remote_cidr_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_cidr_model_json2 = security_group_rule_prototype_security_group_rule_protocol_icmp_remote_cidr_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_remote_cidr_model_json2 == security_group_rule_prototype_security_group_rule_protocol_icmp_remote_cidr_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP
    #--------------------------------------------------------
    def test_security_group_rule_prototype_security_group_rule_protocol_icmp_remote_ip_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP model
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_ip_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_ip_model_json[
            'address'] = '192.168.3.4'

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_ip_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_icmp_remote_ip_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_remote_ip_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_ip_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_icmp_remote_ip_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_ip_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteIP(
            **
            security_group_rule_prototype_security_group_rule_protocol_icmp_remote_ip_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_remote_ip_model == security_group_rule_prototype_security_group_rule_protocol_icmp_remote_ip_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_ip_model_json2 = security_group_rule_prototype_security_group_rule_protocol_icmp_remote_ip_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_remote_ip_model_json2 == security_group_rule_prototype_security_group_rule_protocol_icmp_remote_ip_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteCIDR
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteCIDR():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteCIDR
    #--------------------------------------------------------
    def test_security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_cidr_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteCIDR model
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_cidr_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_cidr_model_json[
            'cidr_block'] = '192.168.3.0/24'

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteCIDR by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_cidr_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteCIDR.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_cidr_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_cidr_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteCIDR by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_cidr_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteCIDR.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_cidr_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_cidr_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteCIDR(
            **
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_cidr_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_cidr_model == security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_cidr_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_cidr_model_json2 = security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_cidr_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_cidr_model_json2 == security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_cidr_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteIP
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteIP():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteIP
    #--------------------------------------------------------
    def test_security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_ip_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteIP model
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_ip_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_ip_model_json[
            'address'] = '192.168.3.4'

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteIP by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_ip_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteIP.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_ip_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_ip_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteIP by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_ip_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteIP.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_ip_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_ip_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteIP(
            **
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_ip_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_ip_model == security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_ip_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_ip_model_json2 = security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_ip_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_ip_model_json2 == security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_ip_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolAll():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll
    #--------------------------------------------------------
    def test_security_group_rule_prototype_security_group_rule_protocol_all_serialization(
            self):

        # Construct dict forms of any model objects needed in order to build this model.

        security_group_rule_prototype_security_group_rule_protocol_all_remote_model = {
        }  # SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemote
        security_group_rule_prototype_security_group_rule_protocol_all_remote_model[
            'address'] = '192.168.3.4'

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll model
        security_group_rule_prototype_security_group_rule_protocol_all_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_all_model_json[
            'direction'] = 'inbound'
        security_group_rule_prototype_security_group_rule_protocol_all_model_json[
            'ip_version'] = 'ipv4'
        security_group_rule_prototype_security_group_rule_protocol_all_model_json[
            'protocol'] = 'all'
        security_group_rule_prototype_security_group_rule_protocol_all_model_json[
            'remote'] = security_group_rule_prototype_security_group_rule_protocol_all_remote_model

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_all_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_all_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_all_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_all_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_all_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_all_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll(
            **
            security_group_rule_prototype_security_group_rule_protocol_all_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_all_model == security_group_rule_prototype_security_group_rule_protocol_all_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_all_model_json2 = security_group_rule_prototype_security_group_rule_protocol_all_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_all_model_json2 == security_group_rule_prototype_security_group_rule_protocol_all_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP
    #--------------------------------------------------------
    def test_security_group_rule_prototype_security_group_rule_protocol_icmp_serialization(
            self):

        # Construct dict forms of any model objects needed in order to build this model.

        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_model = {
        }  # SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemote
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_model[
            'address'] = '192.168.3.4'

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP model
        security_group_rule_prototype_security_group_rule_protocol_icmp_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_icmp_model_json[
            'direction'] = 'inbound'
        security_group_rule_prototype_security_group_rule_protocol_icmp_model_json[
            'ip_version'] = 'ipv4'
        security_group_rule_prototype_security_group_rule_protocol_icmp_model_json[
            'protocol'] = 'icmp'
        security_group_rule_prototype_security_group_rule_protocol_icmp_model_json[
            'remote'] = security_group_rule_prototype_security_group_rule_protocol_icmp_remote_model
        security_group_rule_prototype_security_group_rule_protocol_icmp_model_json[
            'code'] = 0
        security_group_rule_prototype_security_group_rule_protocol_icmp_model_json[
            'type'] = 8

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_icmp_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_icmp_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_icmp_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_icmp_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_icmp_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP(
            **
            security_group_rule_prototype_security_group_rule_protocol_icmp_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_model == security_group_rule_prototype_security_group_rule_protocol_icmp_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_icmp_model_json2 = security_group_rule_prototype_security_group_rule_protocol_icmp_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_model_json2 == security_group_rule_prototype_security_group_rule_protocol_icmp_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP
    #--------------------------------------------------------
    def test_security_group_rule_prototype_security_group_rule_protocol_tcpudp_serialization(
            self):

        # Construct dict forms of any model objects needed in order to build this model.

        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_model = {
        }  # SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemote
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_model[
            'address'] = '192.168.3.4'

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP model
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json[
            'direction'] = 'inbound'
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json[
            'ip_version'] = 'ipv4'
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json[
            'protocol'] = 'udp'
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json[
            'remote'] = security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_model
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json[
            'port_max'] = 22
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json[
            'port_min'] = 22

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP(
            **
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_model == security_group_rule_prototype_security_group_rule_protocol_tcpudp_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json2 = security_group_rule_prototype_security_group_rule_protocol_tcpudp_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json2 == security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRuleRemoteCIDR
#-----------------------------------------------------------------------------
class TestSecurityGroupRuleRemoteCIDR():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRuleRemoteCIDR
    #--------------------------------------------------------
    def test_security_group_rule_remote_cidr_serialization(self):

        # Construct a json representation of a SecurityGroupRuleRemoteCIDR model
        security_group_rule_remote_cidr_model_json = {}
        security_group_rule_remote_cidr_model_json[
            'cidr_block'] = '192.168.3.0/24'

        # Construct a model instance of SecurityGroupRuleRemoteCIDR by calling from_dict on the json representation
        security_group_rule_remote_cidr_model = SecurityGroupRuleRemoteCIDR.from_dict(
            security_group_rule_remote_cidr_model_json)
        assert security_group_rule_remote_cidr_model != False

        # Construct a model instance of SecurityGroupRuleRemoteCIDR by calling from_dict on the json representation
        security_group_rule_remote_cidr_model_dict = SecurityGroupRuleRemoteCIDR.from_dict(
            security_group_rule_remote_cidr_model_json).__dict__
        security_group_rule_remote_cidr_model2 = SecurityGroupRuleRemoteCIDR(
            **security_group_rule_remote_cidr_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_remote_cidr_model == security_group_rule_remote_cidr_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_remote_cidr_model_json2 = security_group_rule_remote_cidr_model.to_dict(
        )
        assert security_group_rule_remote_cidr_model_json2 == security_group_rule_remote_cidr_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRuleRemoteIP
#-----------------------------------------------------------------------------
class TestSecurityGroupRuleRemoteIP():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRuleRemoteIP
    #--------------------------------------------------------
    def test_security_group_rule_remote_ip_serialization(self):

        # Construct a json representation of a SecurityGroupRuleRemoteIP model
        security_group_rule_remote_ip_model_json = {}
        security_group_rule_remote_ip_model_json['address'] = '192.168.3.4'

        # Construct a model instance of SecurityGroupRuleRemoteIP by calling from_dict on the json representation
        security_group_rule_remote_ip_model = SecurityGroupRuleRemoteIP.from_dict(
            security_group_rule_remote_ip_model_json)
        assert security_group_rule_remote_ip_model != False

        # Construct a model instance of SecurityGroupRuleRemoteIP by calling from_dict on the json representation
        security_group_rule_remote_ip_model_dict = SecurityGroupRuleRemoteIP.from_dict(
            security_group_rule_remote_ip_model_json).__dict__
        security_group_rule_remote_ip_model2 = SecurityGroupRuleRemoteIP(
            **security_group_rule_remote_ip_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_remote_ip_model == security_group_rule_remote_ip_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_remote_ip_model_json2 = security_group_rule_remote_ip_model.to_dict(
        )
        assert security_group_rule_remote_ip_model_json2 == security_group_rule_remote_ip_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRuleRemoteSecurityGroupReference
#-----------------------------------------------------------------------------
class TestSecurityGroupRuleRemoteSecurityGroupReference():

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRuleRemoteSecurityGroupReference
    #--------------------------------------------------------
    def test_security_group_rule_remote_security_group_reference_serialization(
            self):

        # Construct a json representation of a SecurityGroupRuleRemoteSecurityGroupReference model
        security_group_rule_remote_security_group_reference_model_json = {}
        security_group_rule_remote_security_group_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_rule_remote_security_group_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_rule_remote_security_group_reference_model_json[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_rule_remote_security_group_reference_model_json[
            'name'] = 'my-security-group'

        # Construct a model instance of SecurityGroupRuleRemoteSecurityGroupReference by calling from_dict on the json representation
        security_group_rule_remote_security_group_reference_model = SecurityGroupRuleRemoteSecurityGroupReference.from_dict(
            security_group_rule_remote_security_group_reference_model_json)
        assert security_group_rule_remote_security_group_reference_model != False

        # Construct a model instance of SecurityGroupRuleRemoteSecurityGroupReference by calling from_dict on the json representation
        security_group_rule_remote_security_group_reference_model_dict = SecurityGroupRuleRemoteSecurityGroupReference.from_dict(
            security_group_rule_remote_security_group_reference_model_json
        ).__dict__
        security_group_rule_remote_security_group_reference_model2 = SecurityGroupRuleRemoteSecurityGroupReference(
            **security_group_rule_remote_security_group_reference_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_remote_security_group_reference_model == security_group_rule_remote_security_group_reference_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_remote_security_group_reference_model_json2 = security_group_rule_remote_security_group_reference_model.to_dict(
        )
        assert security_group_rule_remote_security_group_reference_model_json2 == security_group_rule_remote_security_group_reference_model_json


#-----------------------------------------------------------------------------
# Test Class for SubnetIdentityByCRN
#-----------------------------------------------------------------------------
class TestSubnetIdentityByCRN():

    #--------------------------------------------------------
    # Test serialization/deserialization for SubnetIdentityByCRN
    #--------------------------------------------------------
    def test_subnet_identity_by_crn_serialization(self):

        # Construct a json representation of a SubnetIdentityByCRN model
        subnet_identity_by_crn_model_json = {}
        subnet_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a model instance of SubnetIdentityByCRN by calling from_dict on the json representation
        subnet_identity_by_crn_model = SubnetIdentityByCRN.from_dict(
            subnet_identity_by_crn_model_json)
        assert subnet_identity_by_crn_model != False

        # Construct a model instance of SubnetIdentityByCRN by calling from_dict on the json representation
        subnet_identity_by_crn_model_dict = SubnetIdentityByCRN.from_dict(
            subnet_identity_by_crn_model_json).__dict__
        subnet_identity_by_crn_model2 = SubnetIdentityByCRN(
            **subnet_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert subnet_identity_by_crn_model == subnet_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_identity_by_crn_model_json2 = subnet_identity_by_crn_model.to_dict(
        )
        assert subnet_identity_by_crn_model_json2 == subnet_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for SubnetIdentityByHref
#-----------------------------------------------------------------------------
class TestSubnetIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for SubnetIdentityByHref
    #--------------------------------------------------------
    def test_subnet_identity_by_href_serialization(self):

        # Construct a json representation of a SubnetIdentityByHref model
        subnet_identity_by_href_model_json = {}
        subnet_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a model instance of SubnetIdentityByHref by calling from_dict on the json representation
        subnet_identity_by_href_model = SubnetIdentityByHref.from_dict(
            subnet_identity_by_href_model_json)
        assert subnet_identity_by_href_model != False

        # Construct a model instance of SubnetIdentityByHref by calling from_dict on the json representation
        subnet_identity_by_href_model_dict = SubnetIdentityByHref.from_dict(
            subnet_identity_by_href_model_json).__dict__
        subnet_identity_by_href_model2 = SubnetIdentityByHref(
            **subnet_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert subnet_identity_by_href_model == subnet_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_identity_by_href_model_json2 = subnet_identity_by_href_model.to_dict(
        )
        assert subnet_identity_by_href_model_json2 == subnet_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for SubnetIdentityById
#-----------------------------------------------------------------------------
class TestSubnetIdentityById():

    #--------------------------------------------------------
    # Test serialization/deserialization for SubnetIdentityById
    #--------------------------------------------------------
    def test_subnet_identity_by_id_serialization(self):

        # Construct a json representation of a SubnetIdentityById model
        subnet_identity_by_id_model_json = {}
        subnet_identity_by_id_model_json[
            'id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a model instance of SubnetIdentityById by calling from_dict on the json representation
        subnet_identity_by_id_model = SubnetIdentityById.from_dict(
            subnet_identity_by_id_model_json)
        assert subnet_identity_by_id_model != False

        # Construct a model instance of SubnetIdentityById by calling from_dict on the json representation
        subnet_identity_by_id_model_dict = SubnetIdentityById.from_dict(
            subnet_identity_by_id_model_json).__dict__
        subnet_identity_by_id_model2 = SubnetIdentityById(
            **subnet_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert subnet_identity_by_id_model == subnet_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_identity_by_id_model_json2 = subnet_identity_by_id_model.to_dict(
        )
        assert subnet_identity_by_id_model_json2 == subnet_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for SubnetPrototypeSubnetByCIDR
#-----------------------------------------------------------------------------
class TestSubnetPrototypeSubnetByCIDR():

    #--------------------------------------------------------
    # Test serialization/deserialization for SubnetPrototypeSubnetByCIDR
    #--------------------------------------------------------
    def test_subnet_prototype_subnet_by_cidr_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_identity_model = {}  # NetworkACLIdentity
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        public_gateway_identity_model = {}  # PublicGatewayIdentity
        public_gateway_identity_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        resource_group_identity_model = {}  # ResourceGroupIdentity
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        vpc_identity_model = {}  # VPCIdentity
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        zone_identity_model = {}  # ZoneIdentity
        zone_identity_model['name'] = 'us-south-1'

        # Construct a json representation of a SubnetPrototypeSubnetByCIDR model
        subnet_prototype_subnet_by_cidr_model_json = {}
        subnet_prototype_subnet_by_cidr_model_json['ip_version'] = 'both'
        subnet_prototype_subnet_by_cidr_model_json['name'] = 'my-subnet'
        subnet_prototype_subnet_by_cidr_model_json[
            'network_acl'] = network_acl_identity_model
        subnet_prototype_subnet_by_cidr_model_json[
            'public_gateway'] = public_gateway_identity_model
        subnet_prototype_subnet_by_cidr_model_json[
            'resource_group'] = resource_group_identity_model
        subnet_prototype_subnet_by_cidr_model_json['vpc'] = vpc_identity_model
        subnet_prototype_subnet_by_cidr_model_json[
            'ipv4_cidr_block'] = '10.0.0.0/24'
        subnet_prototype_subnet_by_cidr_model_json['zone'] = zone_identity_model

        # Construct a model instance of SubnetPrototypeSubnetByCIDR by calling from_dict on the json representation
        subnet_prototype_subnet_by_cidr_model = SubnetPrototypeSubnetByCIDR.from_dict(
            subnet_prototype_subnet_by_cidr_model_json)
        assert subnet_prototype_subnet_by_cidr_model != False

        # Construct a model instance of SubnetPrototypeSubnetByCIDR by calling from_dict on the json representation
        subnet_prototype_subnet_by_cidr_model_dict = SubnetPrototypeSubnetByCIDR.from_dict(
            subnet_prototype_subnet_by_cidr_model_json).__dict__
        subnet_prototype_subnet_by_cidr_model2 = SubnetPrototypeSubnetByCIDR(
            **subnet_prototype_subnet_by_cidr_model_dict)

        # Verify the model instances are equivalent
        assert subnet_prototype_subnet_by_cidr_model == subnet_prototype_subnet_by_cidr_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_prototype_subnet_by_cidr_model_json2 = subnet_prototype_subnet_by_cidr_model.to_dict(
        )
        assert subnet_prototype_subnet_by_cidr_model_json2 == subnet_prototype_subnet_by_cidr_model_json


#-----------------------------------------------------------------------------
# Test Class for SubnetPrototypeSubnetByTotalCount
#-----------------------------------------------------------------------------
class TestSubnetPrototypeSubnetByTotalCount():

    #--------------------------------------------------------
    # Test serialization/deserialization for SubnetPrototypeSubnetByTotalCount
    #--------------------------------------------------------
    def test_subnet_prototype_subnet_by_total_count_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_identity_model = {}  # NetworkACLIdentity
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        public_gateway_identity_model = {}  # PublicGatewayIdentity
        public_gateway_identity_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        resource_group_identity_model = {}  # ResourceGroupIdentity
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        vpc_identity_model = {}  # VPCIdentity
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        zone_identity_model = {}  # ZoneIdentity
        zone_identity_model['name'] = 'us-south-1'

        # Construct a json representation of a SubnetPrototypeSubnetByTotalCount model
        subnet_prototype_subnet_by_total_count_model_json = {}
        subnet_prototype_subnet_by_total_count_model_json['ip_version'] = 'both'
        subnet_prototype_subnet_by_total_count_model_json['name'] = 'my-subnet'
        subnet_prototype_subnet_by_total_count_model_json[
            'network_acl'] = network_acl_identity_model
        subnet_prototype_subnet_by_total_count_model_json[
            'public_gateway'] = public_gateway_identity_model
        subnet_prototype_subnet_by_total_count_model_json[
            'resource_group'] = resource_group_identity_model
        subnet_prototype_subnet_by_total_count_model_json[
            'vpc'] = vpc_identity_model
        subnet_prototype_subnet_by_total_count_model_json[
            'total_ipv4_address_count'] = 256
        subnet_prototype_subnet_by_total_count_model_json[
            'zone'] = zone_identity_model

        # Construct a model instance of SubnetPrototypeSubnetByTotalCount by calling from_dict on the json representation
        subnet_prototype_subnet_by_total_count_model = SubnetPrototypeSubnetByTotalCount.from_dict(
            subnet_prototype_subnet_by_total_count_model_json)
        assert subnet_prototype_subnet_by_total_count_model != False

        # Construct a model instance of SubnetPrototypeSubnetByTotalCount by calling from_dict on the json representation
        subnet_prototype_subnet_by_total_count_model_dict = SubnetPrototypeSubnetByTotalCount.from_dict(
            subnet_prototype_subnet_by_total_count_model_json).__dict__
        subnet_prototype_subnet_by_total_count_model2 = SubnetPrototypeSubnetByTotalCount(
            **subnet_prototype_subnet_by_total_count_model_dict)

        # Verify the model instances are equivalent
        assert subnet_prototype_subnet_by_total_count_model == subnet_prototype_subnet_by_total_count_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_prototype_subnet_by_total_count_model_json2 = subnet_prototype_subnet_by_total_count_model.to_dict(
        )
        assert subnet_prototype_subnet_by_total_count_model_json2 == subnet_prototype_subnet_by_total_count_model_json


#-----------------------------------------------------------------------------
# Test Class for VPCIdentityByCRN
#-----------------------------------------------------------------------------
class TestVPCIdentityByCRN():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPCIdentityByCRN
    #--------------------------------------------------------
    def test_vpc_identity_by_crn_serialization(self):

        # Construct a json representation of a VPCIdentityByCRN model
        vpc_identity_by_crn_model_json = {}
        vpc_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a model instance of VPCIdentityByCRN by calling from_dict on the json representation
        vpc_identity_by_crn_model = VPCIdentityByCRN.from_dict(
            vpc_identity_by_crn_model_json)
        assert vpc_identity_by_crn_model != False

        # Construct a model instance of VPCIdentityByCRN by calling from_dict on the json representation
        vpc_identity_by_crn_model_dict = VPCIdentityByCRN.from_dict(
            vpc_identity_by_crn_model_json).__dict__
        vpc_identity_by_crn_model2 = VPCIdentityByCRN(
            **vpc_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert vpc_identity_by_crn_model == vpc_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        vpc_identity_by_crn_model_json2 = vpc_identity_by_crn_model.to_dict()
        assert vpc_identity_by_crn_model_json2 == vpc_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for VPCIdentityByHref
#-----------------------------------------------------------------------------
class TestVPCIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPCIdentityByHref
    #--------------------------------------------------------
    def test_vpc_identity_by_href_serialization(self):

        # Construct a json representation of a VPCIdentityByHref model
        vpc_identity_by_href_model_json = {}
        vpc_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a model instance of VPCIdentityByHref by calling from_dict on the json representation
        vpc_identity_by_href_model = VPCIdentityByHref.from_dict(
            vpc_identity_by_href_model_json)
        assert vpc_identity_by_href_model != False

        # Construct a model instance of VPCIdentityByHref by calling from_dict on the json representation
        vpc_identity_by_href_model_dict = VPCIdentityByHref.from_dict(
            vpc_identity_by_href_model_json).__dict__
        vpc_identity_by_href_model2 = VPCIdentityByHref(
            **vpc_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert vpc_identity_by_href_model == vpc_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        vpc_identity_by_href_model_json2 = vpc_identity_by_href_model.to_dict()
        assert vpc_identity_by_href_model_json2 == vpc_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for VPCIdentityById
#-----------------------------------------------------------------------------
class TestVPCIdentityById():

    #--------------------------------------------------------
    # Test serialization/deserialization for VPCIdentityById
    #--------------------------------------------------------
    def test_vpc_identity_by_id_serialization(self):

        # Construct a json representation of a VPCIdentityById model
        vpc_identity_by_id_model_json = {}
        vpc_identity_by_id_model_json[
            'id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a model instance of VPCIdentityById by calling from_dict on the json representation
        vpc_identity_by_id_model = VPCIdentityById.from_dict(
            vpc_identity_by_id_model_json)
        assert vpc_identity_by_id_model != False

        # Construct a model instance of VPCIdentityById by calling from_dict on the json representation
        vpc_identity_by_id_model_dict = VPCIdentityById.from_dict(
            vpc_identity_by_id_model_json).__dict__
        vpc_identity_by_id_model2 = VPCIdentityById(
            **vpc_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert vpc_identity_by_id_model == vpc_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        vpc_identity_by_id_model_json2 = vpc_identity_by_id_model.to_dict()
        assert vpc_identity_by_id_model_json2 == vpc_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeIdentityByCRN
#-----------------------------------------------------------------------------
class TestVolumeIdentityByCRN():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeIdentityByCRN
    #--------------------------------------------------------
    def test_volume_identity_by_crn_serialization(self):

        # Construct a json representation of a VolumeIdentityByCRN model
        volume_identity_by_crn_model_json = {}
        volume_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a model instance of VolumeIdentityByCRN by calling from_dict on the json representation
        volume_identity_by_crn_model = VolumeIdentityByCRN.from_dict(
            volume_identity_by_crn_model_json)
        assert volume_identity_by_crn_model != False

        # Construct a model instance of VolumeIdentityByCRN by calling from_dict on the json representation
        volume_identity_by_crn_model_dict = VolumeIdentityByCRN.from_dict(
            volume_identity_by_crn_model_json).__dict__
        volume_identity_by_crn_model2 = VolumeIdentityByCRN(
            **volume_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert volume_identity_by_crn_model == volume_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        volume_identity_by_crn_model_json2 = volume_identity_by_crn_model.to_dict(
        )
        assert volume_identity_by_crn_model_json2 == volume_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeIdentityByHref
#-----------------------------------------------------------------------------
class TestVolumeIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeIdentityByHref
    #--------------------------------------------------------
    def test_volume_identity_by_href_serialization(self):

        # Construct a json representation of a VolumeIdentityByHref model
        volume_identity_by_href_model_json = {}
        volume_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a model instance of VolumeIdentityByHref by calling from_dict on the json representation
        volume_identity_by_href_model = VolumeIdentityByHref.from_dict(
            volume_identity_by_href_model_json)
        assert volume_identity_by_href_model != False

        # Construct a model instance of VolumeIdentityByHref by calling from_dict on the json representation
        volume_identity_by_href_model_dict = VolumeIdentityByHref.from_dict(
            volume_identity_by_href_model_json).__dict__
        volume_identity_by_href_model2 = VolumeIdentityByHref(
            **volume_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert volume_identity_by_href_model == volume_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        volume_identity_by_href_model_json2 = volume_identity_by_href_model.to_dict(
        )
        assert volume_identity_by_href_model_json2 == volume_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeIdentityById
#-----------------------------------------------------------------------------
class TestVolumeIdentityById():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeIdentityById
    #--------------------------------------------------------
    def test_volume_identity_by_id_serialization(self):

        # Construct a json representation of a VolumeIdentityById model
        volume_identity_by_id_model_json = {}
        volume_identity_by_id_model_json[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a model instance of VolumeIdentityById by calling from_dict on the json representation
        volume_identity_by_id_model = VolumeIdentityById.from_dict(
            volume_identity_by_id_model_json)
        assert volume_identity_by_id_model != False

        # Construct a model instance of VolumeIdentityById by calling from_dict on the json representation
        volume_identity_by_id_model_dict = VolumeIdentityById.from_dict(
            volume_identity_by_id_model_json).__dict__
        volume_identity_by_id_model2 = VolumeIdentityById(
            **volume_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert volume_identity_by_id_model == volume_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        volume_identity_by_id_model_json2 = volume_identity_by_id_model.to_dict(
        )
        assert volume_identity_by_id_model_json2 == volume_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeProfileIdentityByHref
#-----------------------------------------------------------------------------
class TestVolumeProfileIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeProfileIdentityByHref
    #--------------------------------------------------------
    def test_volume_profile_identity_by_href_serialization(self):

        # Construct a json representation of a VolumeProfileIdentityByHref model
        volume_profile_identity_by_href_model_json = {}
        volume_profile_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose'

        # Construct a model instance of VolumeProfileIdentityByHref by calling from_dict on the json representation
        volume_profile_identity_by_href_model = VolumeProfileIdentityByHref.from_dict(
            volume_profile_identity_by_href_model_json)
        assert volume_profile_identity_by_href_model != False

        # Construct a model instance of VolumeProfileIdentityByHref by calling from_dict on the json representation
        volume_profile_identity_by_href_model_dict = VolumeProfileIdentityByHref.from_dict(
            volume_profile_identity_by_href_model_json).__dict__
        volume_profile_identity_by_href_model2 = VolumeProfileIdentityByHref(
            **volume_profile_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert volume_profile_identity_by_href_model == volume_profile_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        volume_profile_identity_by_href_model_json2 = volume_profile_identity_by_href_model.to_dict(
        )
        assert volume_profile_identity_by_href_model_json2 == volume_profile_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeProfileIdentityByName
#-----------------------------------------------------------------------------
class TestVolumeProfileIdentityByName():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeProfileIdentityByName
    #--------------------------------------------------------
    def test_volume_profile_identity_by_name_serialization(self):

        # Construct a json representation of a VolumeProfileIdentityByName model
        volume_profile_identity_by_name_model_json = {}
        volume_profile_identity_by_name_model_json['name'] = 'general-purpose'

        # Construct a model instance of VolumeProfileIdentityByName by calling from_dict on the json representation
        volume_profile_identity_by_name_model = VolumeProfileIdentityByName.from_dict(
            volume_profile_identity_by_name_model_json)
        assert volume_profile_identity_by_name_model != False

        # Construct a model instance of VolumeProfileIdentityByName by calling from_dict on the json representation
        volume_profile_identity_by_name_model_dict = VolumeProfileIdentityByName.from_dict(
            volume_profile_identity_by_name_model_json).__dict__
        volume_profile_identity_by_name_model2 = VolumeProfileIdentityByName(
            **volume_profile_identity_by_name_model_dict)

        # Verify the model instances are equivalent
        assert volume_profile_identity_by_name_model == volume_profile_identity_by_name_model2

        # Convert model instance back to dict and verify no loss of data
        volume_profile_identity_by_name_model_json2 = volume_profile_identity_by_name_model.to_dict(
        )
        assert volume_profile_identity_by_name_model_json2 == volume_profile_identity_by_name_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumePrototypeVolumeByCapacity
#-----------------------------------------------------------------------------
class TestVolumePrototypeVolumeByCapacity():

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumePrototypeVolumeByCapacity
    #--------------------------------------------------------
    def test_volume_prototype_volume_by_capacity_serialization(self):

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_identity_model = {}  # ResourceGroupIdentity
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        volume_profile_identity_model = {}  # VolumeProfileIdentity
        volume_profile_identity_model['name'] = 'general-purpose'

        zone_identity_model = {}  # ZoneIdentity
        zone_identity_model['name'] = 'us-south-1'

        # Construct a json representation of a VolumePrototypeVolumeByCapacity model
        volume_prototype_volume_by_capacity_model_json = {}
        volume_prototype_volume_by_capacity_model_json['iops'] = 10000
        volume_prototype_volume_by_capacity_model_json['name'] = 'my-volume'
        volume_prototype_volume_by_capacity_model_json[
            'profile'] = volume_profile_identity_model
        volume_prototype_volume_by_capacity_model_json[
            'resource_group'] = resource_group_identity_model
        volume_prototype_volume_by_capacity_model_json[
            'zone'] = zone_identity_model
        volume_prototype_volume_by_capacity_model_json['capacity'] = 100

        # Construct a model instance of VolumePrototypeVolumeByCapacity by calling from_dict on the json representation
        volume_prototype_volume_by_capacity_model = VolumePrototypeVolumeByCapacity.from_dict(
            volume_prototype_volume_by_capacity_model_json)
        assert volume_prototype_volume_by_capacity_model != False

        # Construct a model instance of VolumePrototypeVolumeByCapacity by calling from_dict on the json representation
        volume_prototype_volume_by_capacity_model_dict = VolumePrototypeVolumeByCapacity.from_dict(
            volume_prototype_volume_by_capacity_model_json).__dict__
        volume_prototype_volume_by_capacity_model2 = VolumePrototypeVolumeByCapacity(
            **volume_prototype_volume_by_capacity_model_dict)

        # Verify the model instances are equivalent
        assert volume_prototype_volume_by_capacity_model == volume_prototype_volume_by_capacity_model2

        # Convert model instance back to dict and verify no loss of data
        volume_prototype_volume_by_capacity_model_json2 = volume_prototype_volume_by_capacity_model.to_dict(
        )
        assert volume_prototype_volume_by_capacity_model_json2 == volume_prototype_volume_by_capacity_model_json


#-----------------------------------------------------------------------------
# Test Class for ZoneIdentityByHref
#-----------------------------------------------------------------------------
class TestZoneIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for ZoneIdentityByHref
    #--------------------------------------------------------
    def test_zone_identity_by_href_serialization(self):

        # Construct a json representation of a ZoneIdentityByHref model
        zone_identity_by_href_model_json = {}
        zone_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        # Construct a model instance of ZoneIdentityByHref by calling from_dict on the json representation
        zone_identity_by_href_model = ZoneIdentityByHref.from_dict(
            zone_identity_by_href_model_json)
        assert zone_identity_by_href_model != False

        # Construct a model instance of ZoneIdentityByHref by calling from_dict on the json representation
        zone_identity_by_href_model_dict = ZoneIdentityByHref.from_dict(
            zone_identity_by_href_model_json).__dict__
        zone_identity_by_href_model2 = ZoneIdentityByHref(
            **zone_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert zone_identity_by_href_model == zone_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        zone_identity_by_href_model_json2 = zone_identity_by_href_model.to_dict(
        )
        assert zone_identity_by_href_model_json2 == zone_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for ZoneIdentityByName
#-----------------------------------------------------------------------------
class TestZoneIdentityByName():

    #--------------------------------------------------------
    # Test serialization/deserialization for ZoneIdentityByName
    #--------------------------------------------------------
    def test_zone_identity_by_name_serialization(self):

        # Construct a json representation of a ZoneIdentityByName model
        zone_identity_by_name_model_json = {}
        zone_identity_by_name_model_json['name'] = 'us-south-1'

        # Construct a model instance of ZoneIdentityByName by calling from_dict on the json representation
        zone_identity_by_name_model = ZoneIdentityByName.from_dict(
            zone_identity_by_name_model_json)
        assert zone_identity_by_name_model != False

        # Construct a model instance of ZoneIdentityByName by calling from_dict on the json representation
        zone_identity_by_name_model_dict = ZoneIdentityByName.from_dict(
            zone_identity_by_name_model_json).__dict__
        zone_identity_by_name_model2 = ZoneIdentityByName(
            **zone_identity_by_name_model_dict)

        # Verify the model instances are equivalent
        assert zone_identity_by_name_model == zone_identity_by_name_model2

        # Convert model instance back to dict and verify no loss of data
        zone_identity_by_name_model_json2 = zone_identity_by_name_model.to_dict(
        )
        assert zone_identity_by_name_model_json2 == zone_identity_by_name_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN
#-----------------------------------------------------------------------------
class TestFlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN
    #--------------------------------------------------------
    def test_flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_serialization(
            self):

        # Construct a json representation of a FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN model
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model_json = {}
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a model instance of FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN by calling from_dict on the json representation
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model = FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN.from_dict(
            flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model_json
        )
        assert flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN by calling from_dict on the json representation
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model_dict = FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN.from_dict(
            flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model_json
        ).__dict__
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model2 = FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN(
            **
            flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model == flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model_json2 = flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model.to_dict(
        )
        assert flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model_json2 == flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref
#-----------------------------------------------------------------------------
class TestFlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref
    #--------------------------------------------------------
    def test_flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_serialization(
            self):

        # Construct a json representation of a FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref model
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model_json = {}
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a model instance of FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref by calling from_dict on the json representation
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model = FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref.from_dict(
            flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model_json
        )
        assert flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref by calling from_dict on the json representation
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model_dict = FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref.from_dict(
            flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model_json
        ).__dict__
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model2 = FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref(
            **
            flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model == flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model_json2 = flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model.to_dict(
        )
        assert flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model_json2 == flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityById
#-----------------------------------------------------------------------------
class TestFlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityById():

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityById
    #--------------------------------------------------------
    def test_flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_serialization(
            self):

        # Construct a json representation of a FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityById model
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model_json = {}
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model_json[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a model instance of FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityById by calling from_dict on the json representation
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model = FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityById.from_dict(
            flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model_json
        )
        assert flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityById by calling from_dict on the json representation
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model_dict = FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityById.from_dict(
            flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model_json
        ).__dict__
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model2 = FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityById(
            **
            flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model == flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model_json2 = flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model.to_dict(
        )
        assert flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model_json2 == flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref
#-----------------------------------------------------------------------------
class TestFlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref
    #--------------------------------------------------------
    def test_flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_href_serialization(
            self):

        # Construct a json representation of a FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref model
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_href_model_json = {}
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'

        # Construct a model instance of FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref by calling from_dict on the json representation
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_href_model = FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref.from_dict(
            flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_href_model_json
        )
        assert flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_href_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref by calling from_dict on the json representation
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_href_model_dict = FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref.from_dict(
            flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_href_model_json
        ).__dict__
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_href_model2 = FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref(
            **
            flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_href_model == flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_href_model_json2 = flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_href_model.to_dict(
        )
        assert flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_href_model_json2 == flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById
#-----------------------------------------------------------------------------
class TestFlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById
    #--------------------------------------------------------
    def test_flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_id_serialization(
            self):

        # Construct a json representation of a FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById model
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_id_model_json = {}
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_id_model_json[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'

        # Construct a model instance of FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById by calling from_dict on the json representation
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_id_model = FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById.from_dict(
            flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_id_model_json
        )
        assert flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_id_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById by calling from_dict on the json representation
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_id_model_dict = FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById.from_dict(
            flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_id_model_json
        ).__dict__
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_id_model2 = FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById(
            **
            flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_id_model == flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_id_model_json2 = flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_id_model.to_dict(
        )
        assert flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_id_model_json2 == flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN
#-----------------------------------------------------------------------------
class TestFlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN():

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN
    #--------------------------------------------------------
    def test_flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_serialization(
            self):

        # Construct a json representation of a FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN model
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model_json = {}
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a model instance of FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN by calling from_dict on the json representation
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model = FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN.from_dict(
            flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model_json
        )
        assert flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN by calling from_dict on the json representation
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model_dict = FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN.from_dict(
            flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model_json
        ).__dict__
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model2 = FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN(
            **
            flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model == flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model_json2 = flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model.to_dict(
        )
        assert flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model_json2 == flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref
#-----------------------------------------------------------------------------
class TestFlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref
    #--------------------------------------------------------
    def test_flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_serialization(
            self):

        # Construct a json representation of a FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref model
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model_json = {}
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a model instance of FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref by calling from_dict on the json representation
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model = FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref.from_dict(
            flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model_json
        )
        assert flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref by calling from_dict on the json representation
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model_dict = FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref.from_dict(
            flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model_json
        ).__dict__
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model2 = FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref(
            **
            flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model == flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model_json2 = flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model.to_dict(
        )
        assert flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model_json2 == flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityById
#-----------------------------------------------------------------------------
class TestFlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityById():

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityById
    #--------------------------------------------------------
    def test_flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_serialization(
            self):

        # Construct a json representation of a FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityById model
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model_json = {}
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model_json[
            'id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a model instance of FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityById by calling from_dict on the json representation
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model = FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityById.from_dict(
            flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model_json
        )
        assert flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityById by calling from_dict on the json representation
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model_dict = FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityById.from_dict(
            flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model_json
        ).__dict__
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model2 = FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityById(
            **
            flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model == flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model_json2 = flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model.to_dict(
        )
        assert flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model_json2 == flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN
#-----------------------------------------------------------------------------
class TestFlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN():

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN
    #--------------------------------------------------------
    def test_flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_serialization(
            self):

        # Construct a json representation of a FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN model
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model_json = {}
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a model instance of FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN by calling from_dict on the json representation
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model = FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN.from_dict(
            flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model_json
        )
        assert flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN by calling from_dict on the json representation
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model_dict = FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN.from_dict(
            flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model_json
        ).__dict__
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model2 = FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN(
            **
            flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model == flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model_json2 = flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model.to_dict(
        )
        assert flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model_json2 == flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref
#-----------------------------------------------------------------------------
class TestFlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref():

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref
    #--------------------------------------------------------
    def test_flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_serialization(
            self):

        # Construct a json representation of a FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref model
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model_json = {}
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a model instance of FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref by calling from_dict on the json representation
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model = FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref.from_dict(
            flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model_json
        )
        assert flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref by calling from_dict on the json representation
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model_dict = FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref.from_dict(
            flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model_json
        ).__dict__
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model2 = FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref(
            **
            flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model == flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model_json2 = flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model.to_dict(
        )
        assert flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model_json2 == flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityById
#-----------------------------------------------------------------------------
class TestFlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityById():

    #--------------------------------------------------------
    # Test serialization/deserialization for FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityById
    #--------------------------------------------------------
    def test_flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_serialization(
            self):

        # Construct a json representation of a FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityById model
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model_json = {}
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model_json[
            'id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a model instance of FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityById by calling from_dict on the json representation
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model = FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityById.from_dict(
            flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model_json
        )
        assert flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityById by calling from_dict on the json representation
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model_dict = FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityById.from_dict(
            flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model_json
        ).__dict__
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model2 = FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityById(
            **
            flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model == flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model_json2 = flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model.to_dict(
        )
        assert flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model_json2 == flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref
    #--------------------------------------------------------
    def test_load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_serialization(
            self):

        # Construct a json representation of a LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref model
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json = {}
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a model instance of LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref by calling from_dict on the json representation
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model = LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref.from_dict(
            load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json
        )
        assert load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model != False

        # Construct a model instance of LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref by calling from_dict on the json representation
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_dict = LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref.from_dict(
            load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json
        ).__dict__
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model2 = LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref(
            **
            load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model == load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json2 = load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model.to_dict(
        )
        assert load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json2 == load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById
    #--------------------------------------------------------
    def test_load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_serialization(
            self):

        # Construct a json representation of a LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json = {}
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a model instance of LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById by calling from_dict on the json representation
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model = LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById.from_dict(
            load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json
        )
        assert load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model != False

        # Construct a model instance of LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById by calling from_dict on the json representation
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_dict = LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById.from_dict(
            load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json
        ).__dict__
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model2 = LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById(
            **
            load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model == load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json2 = load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model.to_dict(
        )
        assert load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json2 == load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref
    #--------------------------------------------------------
    def test_load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_serialization(
            self):

        # Construct a json representation of a LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref model
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json = {}
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a model instance of LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref by calling from_dict on the json representation
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model = LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref.from_dict(
            load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json
        )
        assert load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model != False

        # Construct a model instance of LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref by calling from_dict on the json representation
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_dict = LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref.from_dict(
            load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json
        ).__dict__
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model2 = LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref(
            **
            load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model == load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json2 = load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model.to_dict(
        )
        assert load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json2 == load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById
#-----------------------------------------------------------------------------
class TestLoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById
    #--------------------------------------------------------
    def test_load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_serialization(
            self):

        # Construct a json representation of a LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json = {}
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a model instance of LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById by calling from_dict on the json representation
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model = LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById.from_dict(
            load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json
        )
        assert load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model != False

        # Construct a model instance of LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById by calling from_dict on the json representation
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_dict = LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById.from_dict(
            load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json
        ).__dict__
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model2 = LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById(
            **
            load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model == load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json2 = load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model.to_dict(
        )
        assert load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json2 == load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress
#-----------------------------------------------------------------------------
class TestPublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress
    #--------------------------------------------------------
    def test_public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_serialization(
            self):

        # Construct a json representation of a PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress model
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model_json = {}
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model_json[
            'address'] = '203.0.113.1'

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model_json
        )
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model != False

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model_dict = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model_json
        ).__dict__
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model2 = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress(
            **
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model_dict
        )

        # Verify the model instances are equivalent
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model == public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model_json2 = public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model.to_dict(
        )
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model_json2 == public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model_json


#-----------------------------------------------------------------------------
# Test Class for PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN
#-----------------------------------------------------------------------------
class TestPublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN
    #--------------------------------------------------------
    def test_public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_serialization(
            self):

        # Construct a json representation of a PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN model
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model_json = {}
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model_json
        )
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model != False

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model_dict = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model_json
        ).__dict__
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model2 = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN(
            **
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model_dict
        )

        # Verify the model instances are equivalent
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model == public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model_json2 = public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model.to_dict(
        )
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model_json2 == public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref
#-----------------------------------------------------------------------------
class TestPublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref
    #--------------------------------------------------------
    def test_public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_serialization(
            self):

        # Construct a json representation of a PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref model
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model_json = {}
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model_json
        )
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model != False

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model_dict = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model_json
        ).__dict__
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model2 = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref(
            **
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model == public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model_json2 = public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model.to_dict(
        )
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model_json2 == public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById
#-----------------------------------------------------------------------------
class TestPublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById
    #--------------------------------------------------------
    def test_public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_serialization(
            self):

        # Construct a json representation of a PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById model
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model_json = {}
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model_json[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model_json
        )
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model != False

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model_dict = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model_json
        ).__dict__
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model2 = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById(
            **
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model == public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model_json2 = public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model.to_dict(
        )
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model_json2 == public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN
    #--------------------------------------------------------
    def test_security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN model
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model_json = {}
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN by calling from_dict on the json representation
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model = SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN.from_dict(
            security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model_json
        )
        assert security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model != False

        # Construct a model instance of SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN by calling from_dict on the json representation
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model_dict = SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN.from_dict(
            security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model_json
        ).__dict__
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model2 = SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN(
            **
            security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model == security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model_json2 = security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model.to_dict(
        )
        assert security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model_json2 == security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref
    #--------------------------------------------------------
    def test_security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref model
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model_json = {}
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref by calling from_dict on the json representation
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model = SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref.from_dict(
            security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model_json
        )
        assert security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model != False

        # Construct a model instance of SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref by calling from_dict on the json representation
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model_dict = SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref.from_dict(
            security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model_json
        ).__dict__
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model2 = SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref(
            **
            security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model == security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model_json2 = security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model.to_dict(
        )
        assert security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model_json2 == security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityById
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityById(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityById
    #--------------------------------------------------------
    def test_security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityById model
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model_json = {}
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model_json[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityById by calling from_dict on the json representation
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model = SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityById.from_dict(
            security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model_json
        )
        assert security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model != False

        # Construct a model instance of SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityById by calling from_dict on the json representation
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model_dict = SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityById.from_dict(
            security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model_json
        ).__dict__
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model2 = SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityById(
            **
            security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model == security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model_json2 = security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model.to_dict(
        )
        assert security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model_json2 == security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN
    #--------------------------------------------------------
    def test_security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN model
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model_json = {}
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN by calling from_dict on the json representation
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model = SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN.from_dict(
            security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model_json
        )
        assert security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model != False

        # Construct a model instance of SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN by calling from_dict on the json representation
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model_dict = SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN.from_dict(
            security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model_json
        ).__dict__
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model2 = SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN(
            **
            security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model == security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model_json2 = security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model.to_dict(
        )
        assert security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model_json2 == security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref
    #--------------------------------------------------------
    def test_security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref model
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model_json = {}
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref by calling from_dict on the json representation
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model = SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref.from_dict(
            security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model_json
        )
        assert security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model != False

        # Construct a model instance of SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref by calling from_dict on the json representation
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model_dict = SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref.from_dict(
            security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model_json
        ).__dict__
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model2 = SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref(
            **
            security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model == security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model_json2 = security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model.to_dict(
        )
        assert security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model_json2 == security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityById
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityById(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityById
    #--------------------------------------------------------
    def test_security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityById model
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model_json = {}
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model_json[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityById by calling from_dict on the json representation
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model = SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityById.from_dict(
            security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model_json
        )
        assert security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model != False

        # Construct a model instance of SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityById by calling from_dict on the json representation
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model_dict = SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityById.from_dict(
            security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model_json
        ).__dict__
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model2 = SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityById(
            **
            security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model == security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model_json2 = security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model.to_dict(
        )
        assert security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model_json2 == security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN
    #--------------------------------------------------------
    def test_security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_crn_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN model
        security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_crn_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_crn_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_crn_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_crn_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_crn_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_crn_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_crn_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN(
            **
            security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_crn_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_crn_model == security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_crn_model_json2 = security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_crn_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_crn_model_json2 == security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityByHref
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityByHref(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityByHref
    #--------------------------------------------------------
    def test_security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_href_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityByHref model
        security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_href_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityByHref by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_href_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityByHref.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_href_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_href_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityByHref by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_href_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityByHref.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_href_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_href_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityByHref(
            **
            security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_href_model == security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_href_model_json2 = security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_href_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_href_model_json2 == security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityById
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityById(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityById
    #--------------------------------------------------------
    def test_security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_id_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityById model
        security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_id_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_id_model_json[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityById by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_id_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityById.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_id_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_id_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityById by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_id_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityById.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_id_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_id_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAllRemoteSecurityGroupIdentitySecurityGroupIdentityById(
            **
            security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_id_model == security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_id_model_json2 = security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_id_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_id_model_json2 == security_group_rule_prototype_security_group_rule_protocol_all_remote_security_group_identity_security_group_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN
    #--------------------------------------------------------
    def test_security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_crn_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN model
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_crn_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_crn_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_crn_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_crn_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_crn_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_crn_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_crn_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN(
            **
            security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_crn_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_crn_model == security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_crn_model_json2 = security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_crn_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_crn_model_json2 == security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityByHref
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityByHref(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityByHref
    #--------------------------------------------------------
    def test_security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_href_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityByHref model
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_href_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityByHref by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_href_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityByHref.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_href_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_href_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityByHref by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_href_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityByHref.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_href_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_href_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityByHref(
            **
            security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_href_model == security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_href_model_json2 = security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_href_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_href_model_json2 == security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityById
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityById(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityById
    #--------------------------------------------------------
    def test_security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_id_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityById model
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_id_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_id_model_json[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityById by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_id_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityById.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_id_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_id_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityById by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_id_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityById.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_id_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_id_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMPRemoteSecurityGroupIdentitySecurityGroupIdentityById(
            **
            security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_id_model == security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_id_model_json2 = security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_id_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_id_model_json2 == security_group_rule_prototype_security_group_rule_protocol_icmp_remote_security_group_identity_security_group_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN
    #--------------------------------------------------------
    def test_security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_crn_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN model
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_crn_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_crn_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_crn_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_crn_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_crn_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_crn_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_crn_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN(
            **
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_crn_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_crn_model == security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_crn_model_json2 = security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_crn_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_crn_model_json2 == security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityByHref
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityByHref(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityByHref
    #--------------------------------------------------------
    def test_security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_href_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityByHref model
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_href_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityByHref by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_href_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityByHref.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_href_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_href_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityByHref by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_href_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityByHref.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_href_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_href_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityByHref(
            **
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_href_model == security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_href_model_json2 = security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_href_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_href_model_json2 == security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityById
#-----------------------------------------------------------------------------
class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityById(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityById
    #--------------------------------------------------------
    def test_security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_id_serialization(
            self):

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityById model
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_id_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_id_model_json[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityById by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_id_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityById.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_id_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_id_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityById by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_id_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityById.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_id_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_id_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDPRemoteSecurityGroupIdentitySecurityGroupIdentityById(
            **
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_id_model == security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_id_model_json2 = security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_id_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_id_model_json2 == security_group_rule_prototype_security_group_rule_protocol_tcpudp_remote_security_group_identity_security_group_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN
#-----------------------------------------------------------------------------
class TestVolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN
    #--------------------------------------------------------
    def test_volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_serialization(
            self):

        # Construct a json representation of a VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN model
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model_json = {}
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model = VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN.from_dict(
            volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model_json
        )
        assert volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model != False

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model_dict = VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN.from_dict(
            volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model_json
        ).__dict__
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model2 = VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN(
            **
            volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model_dict
        )

        # Verify the model instances are equivalent
        assert volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model == volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model_json2 = volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model.to_dict(
        )
        assert volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model_json2 == volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref
#-----------------------------------------------------------------------------
class TestVolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref
    #--------------------------------------------------------
    def test_volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_serialization(
            self):

        # Construct a json representation of a VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref model
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model_json = {}
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model = VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref.from_dict(
            volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model_json
        )
        assert volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model != False

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model_dict = VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref.from_dict(
            volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model_json
        ).__dict__
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model2 = VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref(
            **
            volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model == volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model_json2 = volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model.to_dict(
        )
        assert volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model_json2 == volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById
#-----------------------------------------------------------------------------
class TestVolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById
    #--------------------------------------------------------
    def test_volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_serialization(
            self):

        # Construct a json representation of a VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById model
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model_json = {}
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model_json[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model = VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById.from_dict(
            volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model_json
        )
        assert volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model != False

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model_dict = VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById.from_dict(
            volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model_json
        ).__dict__
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model2 = VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById(
            **
            volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model == volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model_json2 = volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model.to_dict(
        )
        assert volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model_json2 == volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model_json


#-----------------------------------------------------------------------------
# Test Class for VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity
#-----------------------------------------------------------------------------
class TestVolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity(
):

    #--------------------------------------------------------
    # Test serialization/deserialization for VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity
    #--------------------------------------------------------
    def test_volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_serialization(
            self):

        # Construct dict forms of any model objects needed in order to build this model.

        volume_profile_identity_model = {}  # VolumeProfileIdentity
        volume_profile_identity_model['name'] = 'general-purpose'

        # Construct a json representation of a VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity model
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json = {}
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json[
            'iops'] = 10000
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json[
            'name'] = 'my-volume'
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json[
            'profile'] = volume_profile_identity_model
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json[
            'capacity'] = 100

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model = VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity.from_dict(
            volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json
        )
        assert volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model != False

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_dict = VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity.from_dict(
            volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json
        ).__dict__
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model2 = VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity(
            **
            volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_dict
        )

        # Verify the model instances are equivalent
        assert volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model == volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json2 = volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model.to_dict(
        )
        assert volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json2 == volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json


# endregion
##############################################################################
# End of Model Tests
##############################################################################
