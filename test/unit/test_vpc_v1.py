# -*- coding: utf-8 -*-
# (C) Copyright IBM Corp. 2020.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
Unit Tests for VpcV1
"""

from datetime import datetime, timezone
from ibm_cloud_sdk_core.authenticators.no_auth_authenticator import NoAuthAuthenticator
import base64
import inspect
import json
import pytest
import re
import requests
import responses
import urllib
from ibm_vpc.vpc_v1 import *

version = 'testString'
generation = 2

service = VpcV1(authenticator=NoAuthAuthenticator(), version=version)

base_url = 'https://us-south.iaas.cloud.ibm.com/v1'
service.set_service_url(base_url)

##############################################################################
# Start of Service: VPCs
##############################################################################
# region


class TestListVpcs():
    """
    Test Class for list_vpcs
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_vpcs_all_params(self):
        """
        list_vpcs()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "vpcs": [{"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "default_network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "classic_access": false, "default_security_group": {"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}], "status": "available"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'
        classic_access = True

        # Invoke method
        response = service.list_vpcs(start=start,
                                     limit=limit,
                                     resource_group_id=resource_group_id,
                                     classic_access=classic_access,
                                     headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string
        assert 'classic_access={}'.format(
            'true' if classic_access else 'false') in query_string

    @responses.activate
    def test_list_vpcs_required_params(self):
        """
        test_list_vpcs_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "vpcs": [{"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "default_network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "classic_access": false, "default_security_group": {"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}], "status": "available"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_vpcs()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_vpcs_value_error(self):
        """
        test_list_vpcs_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "vpcs": [{"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "default_network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "classic_access": false, "default_security_group": {"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}], "status": "available"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_vpcs(**req_copy)


class TestCreateVpc():
    """
    Test Class for create_vpc
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_vpc_all_params(self):
        """
        create_vpc()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs')
        mock_response = '{"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "default_network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "classic_access": false, "default_security_group": {"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}], "status": "available"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        name = 'my-vpc'
        address_prefix_management = 'manual'
        classic_access = False
        resource_group = resource_group_identity_model

        # Invoke method
        response = service.create_vpc(
            name=name,
            address_prefix_management=address_prefix_management,
            classic_access=classic_access,
            resource_group=resource_group,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['name'] == 'my-vpc'
        assert req_body['address_prefix_management'] == 'manual'
        assert req_body['classic_access'] == False
        assert req_body['resource_group'] == resource_group_identity_model

    @responses.activate
    def test_create_vpc_required_params(self):
        """
        test_create_vpc_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs')
        mock_response = '{"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "default_network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "classic_access": false, "default_security_group": {"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}], "status": "available"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Invoke method
        response = service.create_vpc()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201

    @responses.activate
    def test_create_vpc_value_error(self):
        """
        test_create_vpc_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs')
        mock_response = '{"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "default_network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "classic_access": false, "default_security_group": {"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}], "status": "available"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_vpc(**req_copy)


class TestDeleteVpc():
    """
    Test Class for delete_vpc
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_vpc_all_params(self):
        """
        delete_vpc()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_vpc(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_vpc_value_error(self):
        """
        test_delete_vpc_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_vpc(**req_copy)


class TestGetVpc():
    """
    Test Class for get_vpc
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_vpc_all_params(self):
        """
        get_vpc()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString')
        mock_response = '{"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "default_network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "classic_access": false, "default_security_group": {"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}], "status": "available"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_vpc(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_vpc_value_error(self):
        """
        test_get_vpc_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString')
        mock_response = '{"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "default_network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "classic_access": false, "default_security_group": {"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}], "status": "available"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_vpc(**req_copy)


class TestUpdateVpc():
    """
    Test Class for update_vpc
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_vpc_all_params(self):
        """
        update_vpc()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString')
        mock_response = '{"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "default_network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "classic_access": false, "default_security_group": {"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}], "status": "available"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VPCPatch model
        vpc_patch_model = {}
        vpc_patch_model['name'] = 'my-vpc'

        # Set up parameter values
        id = 'testString'
        vpc_patch = vpc_patch_model

        # Invoke method
        response = service.update_vpc(id, vpc_patch, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == vpc_patch

    @responses.activate
    def test_update_vpc_value_error(self):
        """
        test_update_vpc_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString')
        mock_response = '{"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "default_network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "classic_access": false, "default_security_group": {"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}], "status": "available"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VPCPatch model
        vpc_patch_model = {}
        vpc_patch_model['name'] = 'my-vpc'

        # Set up parameter values
        id = 'testString'
        vpc_patch = vpc_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "vpc_patch": vpc_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_vpc(**req_copy)


class TestGetVpcDefaultNetworkAcl():
    """
    Test Class for get_vpc_default_network_acl
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_vpc_default_network_acl_all_params(self):
        """
        get_vpc_default_network_acl()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/default_network_acl')
        mock_response = '{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "mnemonic-ersatz-eatery-malaise", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_vpc_default_network_acl(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_vpc_default_network_acl_value_error(self):
        """
        test_get_vpc_default_network_acl_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/default_network_acl')
        mock_response = '{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "mnemonic-ersatz-eatery-malaise", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_vpc_default_network_acl(**req_copy)


class TestGetVpcDefaultSecurityGroup():
    """
    Test Class for get_vpc_default_security_group
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_vpc_default_security_group_all_params(self):
        """
        get_vpc_default_security_group()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/default_security_group')
        mock_response = '{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "observant-chip-emphatic-engraver", "rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_vpc_default_security_group(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_vpc_default_security_group_value_error(self):
        """
        test_get_vpc_default_security_group_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/default_security_group')
        mock_response = '{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "observant-chip-emphatic-engraver", "rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_vpc_default_security_group(**req_copy)


class TestListVpcAddressPrefixes():
    """
    Test Class for list_vpc_address_prefixes
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_vpc_address_prefixes_all_params(self):
        """
        list_vpc_address_prefixes()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/address_prefixes')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/a4e28308-8ee7-46ab-8108-9f881f22bdbf/address_prefixes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/a4e28308-8ee7-46ab-8108-9f881f22bdbf/address_prefixes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "address_prefixes": [{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-address-prefix-2", "is_default": false, "cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": false, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'
        start = 'testString'
        limit = 1

        # Invoke method
        response = service.list_vpc_address_prefixes(vpc_id,
                                                     start=start,
                                                     limit=limit,
                                                     headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string

    @responses.activate
    def test_list_vpc_address_prefixes_required_params(self):
        """
        test_list_vpc_address_prefixes_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/address_prefixes')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/a4e28308-8ee7-46ab-8108-9f881f22bdbf/address_prefixes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/a4e28308-8ee7-46ab-8108-9f881f22bdbf/address_prefixes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "address_prefixes": [{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-address-prefix-2", "is_default": false, "cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": false, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'

        # Invoke method
        response = service.list_vpc_address_prefixes(vpc_id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_vpc_address_prefixes_value_error(self):
        """
        test_list_vpc_address_prefixes_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/address_prefixes')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/a4e28308-8ee7-46ab-8108-9f881f22bdbf/address_prefixes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/a4e28308-8ee7-46ab-8108-9f881f22bdbf/address_prefixes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "address_prefixes": [{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-address-prefix-2", "is_default": false, "cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": false, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_vpc_address_prefixes(**req_copy)


class TestCreateVpcAddressPrefix():
    """
    Test Class for create_vpc_address_prefix
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_vpc_address_prefix_all_params(self):
        """
        create_vpc_address_prefix()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/address_prefixes')
        mock_response = '{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-address-prefix-2", "is_default": false, "cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": false, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Set up parameter values
        vpc_id = 'testString'
        cidr = '10.0.0.0/24'
        zone = zone_identity_model
        name = 'my-address-prefix-2'
        is_default = True

        # Invoke method
        response = service.create_vpc_address_prefix(vpc_id,
                                                     cidr,
                                                     zone,
                                                     name=name,
                                                     is_default=is_default,
                                                     headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['cidr'] == '10.0.0.0/24'
        assert req_body['zone'] == zone_identity_model
        assert req_body['name'] == 'my-address-prefix-2'
        assert req_body['is_default'] == True

    @responses.activate
    def test_create_vpc_address_prefix_value_error(self):
        """
        test_create_vpc_address_prefix_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/address_prefixes')
        mock_response = '{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-address-prefix-2", "is_default": false, "cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": false, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Set up parameter values
        vpc_id = 'testString'
        cidr = '10.0.0.0/24'
        zone = zone_identity_model
        name = 'my-address-prefix-2'
        is_default = True

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
            "cidr": cidr,
            "zone": zone,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_vpc_address_prefix(**req_copy)


class TestDeleteVpcAddressPrefix():
    """
    Test Class for delete_vpc_address_prefix
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_vpc_address_prefix_all_params(self):
        """
        delete_vpc_address_prefix()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpcs/testString/address_prefixes/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_vpc_address_prefix(vpc_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_vpc_address_prefix_value_error(self):
        """
        test_delete_vpc_address_prefix_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpcs/testString/address_prefixes/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_vpc_address_prefix(**req_copy)


class TestGetVpcAddressPrefix():
    """
    Test Class for get_vpc_address_prefix
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_vpc_address_prefix_all_params(self):
        """
        get_vpc_address_prefix()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpcs/testString/address_prefixes/testString')
        mock_response = '{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-address-prefix-2", "is_default": false, "cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": false, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_vpc_address_prefix(vpc_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_vpc_address_prefix_value_error(self):
        """
        test_get_vpc_address_prefix_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpcs/testString/address_prefixes/testString')
        mock_response = '{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-address-prefix-2", "is_default": false, "cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": false, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_vpc_address_prefix(**req_copy)


class TestUpdateVpcAddressPrefix():
    """
    Test Class for update_vpc_address_prefix
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_vpc_address_prefix_all_params(self):
        """
        update_vpc_address_prefix()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpcs/testString/address_prefixes/testString')
        mock_response = '{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-address-prefix-2", "is_default": false, "cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": false, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a AddressPrefixPatch model
        address_prefix_patch_model = {}
        address_prefix_patch_model['name'] = 'my-address-prefix-2'
        address_prefix_patch_model['is_default'] = False

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'
        address_prefix_patch = address_prefix_patch_model

        # Invoke method
        response = service.update_vpc_address_prefix(vpc_id,
                                                     id,
                                                     address_prefix_patch,
                                                     headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == address_prefix_patch

    @responses.activate
    def test_update_vpc_address_prefix_value_error(self):
        """
        test_update_vpc_address_prefix_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpcs/testString/address_prefixes/testString')
        mock_response = '{"id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-address-prefix-2", "is_default": false, "cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": false, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a AddressPrefixPatch model
        address_prefix_patch_model = {}
        address_prefix_patch_model['name'] = 'my-address-prefix-2'
        address_prefix_patch_model['is_default'] = False

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'
        address_prefix_patch = address_prefix_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
            "id": id,
            "address_prefix_patch": address_prefix_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_vpc_address_prefix(**req_copy)


class TestListVpcRoutes():
    """
    Test Class for list_vpc_routes
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_vpc_routes_all_params(self):
        """
        list_vpc_routes()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString/routes')
        mock_response = '{"routes": [{"next_hop": {"address": "192.168.3.4"}, "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1", "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "lifecycle_state": "stable", "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'
        zone_name = 'testString'

        # Invoke method
        response = service.list_vpc_routes(vpc_id,
                                           zone_name=zone_name,
                                           headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'zone.name={}'.format(zone_name) in query_string

    @responses.activate
    def test_list_vpc_routes_required_params(self):
        """
        test_list_vpc_routes_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString/routes')
        mock_response = '{"routes": [{"next_hop": {"address": "192.168.3.4"}, "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1", "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "lifecycle_state": "stable", "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'

        # Invoke method
        response = service.list_vpc_routes(vpc_id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_vpc_routes_value_error(self):
        """
        test_list_vpc_routes_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString/routes')
        mock_response = '{"routes": [{"next_hop": {"address": "192.168.3.4"}, "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1", "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "lifecycle_state": "stable", "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_vpc_routes(**req_copy)


class TestCreateVpcRoute():
    """
    Test Class for create_vpc_route
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_vpc_route_all_params(self):
        """
        create_vpc_route()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString/routes')
        mock_response = '{"next_hop": {"address": "192.168.3.4"}, "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1", "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "lifecycle_state": "stable", "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a RouteNextHopPrototypeRouteNextHopIP model
        route_next_hop_prototype_model = {}
        route_next_hop_prototype_model['address'] = '192.168.3.4'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Set up parameter values
        vpc_id = 'testString'
        next_hop = route_next_hop_prototype_model
        destination = '192.168.3.0/24'
        zone = zone_identity_model
        name = 'my-route-2'

        # Invoke method
        response = service.create_vpc_route(vpc_id,
                                            next_hop,
                                            destination,
                                            zone,
                                            name=name,
                                            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['next_hop'] == route_next_hop_prototype_model
        assert req_body['destination'] == '192.168.3.0/24'
        assert req_body['zone'] == zone_identity_model
        assert req_body['name'] == 'my-route-2'

    @responses.activate
    def test_create_vpc_route_value_error(self):
        """
        test_create_vpc_route_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpcs/testString/routes')
        mock_response = '{"next_hop": {"address": "192.168.3.4"}, "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1", "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "lifecycle_state": "stable", "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a RouteNextHopPrototypeRouteNextHopIP model
        route_next_hop_prototype_model = {}
        route_next_hop_prototype_model['address'] = '192.168.3.4'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Set up parameter values
        vpc_id = 'testString'
        next_hop = route_next_hop_prototype_model
        destination = '192.168.3.0/24'
        zone = zone_identity_model
        name = 'my-route-2'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
            "next_hop": next_hop,
            "destination": destination,
            "zone": zone,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_vpc_route(**req_copy)


class TestDeleteVpcRoute():
    """
    Test Class for delete_vpc_route
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_vpc_route_all_params(self):
        """
        delete_vpc_route()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/routes/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_vpc_route(vpc_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_vpc_route_value_error(self):
        """
        test_delete_vpc_route_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/routes/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_vpc_route(**req_copy)


class TestGetVpcRoute():
    """
    Test Class for get_vpc_route
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_vpc_route_all_params(self):
        """
        get_vpc_route()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/routes/testString')
        mock_response = '{"next_hop": {"address": "192.168.3.4"}, "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1", "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "lifecycle_state": "stable", "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_vpc_route(vpc_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_vpc_route_value_error(self):
        """
        test_get_vpc_route_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/routes/testString')
        mock_response = '{"next_hop": {"address": "192.168.3.4"}, "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1", "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "lifecycle_state": "stable", "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_vpc_route(**req_copy)


class TestUpdateVpcRoute():
    """
    Test Class for update_vpc_route
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_vpc_route_all_params(self):
        """
        update_vpc_route()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/routes/testString')
        mock_response = '{"next_hop": {"address": "192.168.3.4"}, "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1", "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "lifecycle_state": "stable", "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a RoutePatch model
        route_patch_model = {}
        route_patch_model['name'] = 'my-route-2'

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'
        route_patch = route_patch_model

        # Invoke method
        response = service.update_vpc_route(vpc_id, id, route_patch, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == route_patch

    @responses.activate
    def test_update_vpc_route_value_error(self):
        """
        test_update_vpc_route_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpcs/testString/routes/testString')
        mock_response = '{"next_hop": {"address": "192.168.3.4"}, "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1", "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "lifecycle_state": "stable", "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a RoutePatch model
        route_patch_model = {}
        route_patch_model['name'] = 'my-route-2'

        # Set up parameter values
        vpc_id = 'testString'
        id = 'testString'
        route_patch = route_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc_id": vpc_id,
            "id": id,
            "route_patch": route_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_vpc_route(**req_copy)


# endregion
##############################################################################
# End of Service: VPCs
##############################################################################

##############################################################################
# Start of Service: Subnets
##############################################################################
# region


class TestListSubnets():
    """
    Test Class for list_subnets
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_subnets_all_params(self):
        """
        list_subnets()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "available_ipv4_address_count": 15, "network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "total_ipv4_address_count": 256, "created_at": "2019-01-01T12:00:00", "ipv4_cidr_block": "10.0.0.0/24", "public_gateway": {"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}, "ip_version": "ipv4"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'

        # Invoke method
        response = service.list_subnets(start=start,
                                        limit=limit,
                                        resource_group_id=resource_group_id,
                                        headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string

    @responses.activate
    def test_list_subnets_required_params(self):
        """
        test_list_subnets_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "available_ipv4_address_count": 15, "network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "total_ipv4_address_count": 256, "created_at": "2019-01-01T12:00:00", "ipv4_cidr_block": "10.0.0.0/24", "public_gateway": {"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}, "ip_version": "ipv4"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_subnets()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_subnets_value_error(self):
        """
        test_list_subnets_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "available_ipv4_address_count": 15, "network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "total_ipv4_address_count": 256, "created_at": "2019-01-01T12:00:00", "ipv4_cidr_block": "10.0.0.0/24", "public_gateway": {"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}, "ip_version": "ipv4"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_subnets(**req_copy)


class TestCreateSubnet():
    """
    Test Class for create_subnet
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_subnet_all_params(self):
        """
        create_subnet()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets')
        mock_response = '{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "available_ipv4_address_count": 15, "network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "total_ipv4_address_count": 256, "created_at": "2019-01-01T12:00:00", "ipv4_cidr_block": "10.0.0.0/24", "public_gateway": {"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}, "ip_version": "ipv4"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a NetworkACLIdentityById model
        network_acl_identity_model = {}
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Construct a dict representation of a PublicGatewayIdentityById model
        public_gateway_identity_model = {}
        public_gateway_identity_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a SubnetPrototypeSubnetByTotalCount model
        subnet_prototype_model = {}
        subnet_prototype_model['name'] = 'my-subnet'
        subnet_prototype_model['network_acl'] = network_acl_identity_model
        subnet_prototype_model['public_gateway'] = public_gateway_identity_model
        subnet_prototype_model['ip_version'] = 'ipv4'
        subnet_prototype_model['resource_group'] = resource_group_identity_model
        subnet_prototype_model['vpc'] = vpc_identity_model
        subnet_prototype_model['total_ipv4_address_count'] = 256
        subnet_prototype_model['zone'] = zone_identity_model

        # Set up parameter values
        subnet_prototype = subnet_prototype_model

        # Invoke method
        response = service.create_subnet(subnet_prototype, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == subnet_prototype

    @responses.activate
    def test_create_subnet_value_error(self):
        """
        test_create_subnet_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets')
        mock_response = '{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "available_ipv4_address_count": 15, "network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "total_ipv4_address_count": 256, "created_at": "2019-01-01T12:00:00", "ipv4_cidr_block": "10.0.0.0/24", "public_gateway": {"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}, "ip_version": "ipv4"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a NetworkACLIdentityById model
        network_acl_identity_model = {}
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Construct a dict representation of a PublicGatewayIdentityById model
        public_gateway_identity_model = {}
        public_gateway_identity_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a SubnetPrototypeSubnetByTotalCount model
        subnet_prototype_model = {}
        subnet_prototype_model['name'] = 'my-subnet'
        subnet_prototype_model['network_acl'] = network_acl_identity_model
        subnet_prototype_model['public_gateway'] = public_gateway_identity_model
        subnet_prototype_model['ip_version'] = 'ipv4'
        subnet_prototype_model['resource_group'] = resource_group_identity_model
        subnet_prototype_model['vpc'] = vpc_identity_model
        subnet_prototype_model['total_ipv4_address_count'] = 256
        subnet_prototype_model['zone'] = zone_identity_model

        # Set up parameter values
        subnet_prototype = subnet_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "subnet_prototype": subnet_prototype,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_subnet(**req_copy)


class TestDeleteSubnet():
    """
    Test Class for delete_subnet
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_subnet_all_params(self):
        """
        delete_subnet()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_subnet(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_subnet_value_error(self):
        """
        test_delete_subnet_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_subnet(**req_copy)


class TestGetSubnet():
    """
    Test Class for get_subnet
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_subnet_all_params(self):
        """
        get_subnet()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString')
        mock_response = '{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "available_ipv4_address_count": 15, "network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "total_ipv4_address_count": 256, "created_at": "2019-01-01T12:00:00", "ipv4_cidr_block": "10.0.0.0/24", "public_gateway": {"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}, "ip_version": "ipv4"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_subnet(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_subnet_value_error(self):
        """
        test_get_subnet_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString')
        mock_response = '{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "available_ipv4_address_count": 15, "network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "total_ipv4_address_count": 256, "created_at": "2019-01-01T12:00:00", "ipv4_cidr_block": "10.0.0.0/24", "public_gateway": {"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}, "ip_version": "ipv4"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_subnet(**req_copy)


class TestUpdateSubnet():
    """
    Test Class for update_subnet
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_subnet_all_params(self):
        """
        update_subnet()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString')
        mock_response = '{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "available_ipv4_address_count": 15, "network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "total_ipv4_address_count": 256, "created_at": "2019-01-01T12:00:00", "ipv4_cidr_block": "10.0.0.0/24", "public_gateway": {"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}, "ip_version": "ipv4"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a NetworkACLIdentityById model
        network_acl_identity_model = {}
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Construct a dict representation of a PublicGatewayIdentityById model
        public_gateway_identity_model = {}
        public_gateway_identity_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Construct a dict representation of a SubnetPatch model
        subnet_patch_model = {}
        subnet_patch_model['name'] = 'my-subnet'
        subnet_patch_model['network_acl'] = network_acl_identity_model
        subnet_patch_model['public_gateway'] = public_gateway_identity_model

        # Set up parameter values
        id = 'testString'
        subnet_patch = subnet_patch_model

        # Invoke method
        response = service.update_subnet(id, subnet_patch, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == subnet_patch

    @responses.activate
    def test_update_subnet_value_error(self):
        """
        test_update_subnet_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString')
        mock_response = '{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "available_ipv4_address_count": 15, "network_acl": {"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "total_ipv4_address_count": 256, "created_at": "2019-01-01T12:00:00", "ipv4_cidr_block": "10.0.0.0/24", "public_gateway": {"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}, "ip_version": "ipv4"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a NetworkACLIdentityById model
        network_acl_identity_model = {}
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Construct a dict representation of a PublicGatewayIdentityById model
        public_gateway_identity_model = {}
        public_gateway_identity_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Construct a dict representation of a SubnetPatch model
        subnet_patch_model = {}
        subnet_patch_model['name'] = 'my-subnet'
        subnet_patch_model['network_acl'] = network_acl_identity_model
        subnet_patch_model['public_gateway'] = public_gateway_identity_model

        # Set up parameter values
        id = 'testString'
        subnet_patch = subnet_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "subnet_patch": subnet_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_subnet(**req_copy)


class TestGetSubnetNetworkAcl():
    """
    Test Class for get_subnet_network_acl
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_subnet_network_acl_all_params(self):
        """
        get_subnet_network_acl()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString/network_acl')
        mock_response = '{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_subnet_network_acl(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_subnet_network_acl_value_error(self):
        """
        test_get_subnet_network_acl_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString/network_acl')
        mock_response = '{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_subnet_network_acl(**req_copy)


class TestReplaceSubnetNetworkAcl():
    """
    Test Class for replace_subnet_network_acl
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_replace_subnet_network_acl_all_params(self):
        """
        replace_subnet_network_acl()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString/network_acl')
        mock_response = '{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a NetworkACLIdentityById model
        network_acl_identity_model = {}
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Set up parameter values
        id = 'testString'
        network_acl_identity = network_acl_identity_model

        # Invoke method
        response = service.replace_subnet_network_acl(id,
                                                      network_acl_identity,
                                                      headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == network_acl_identity

    @responses.activate
    def test_replace_subnet_network_acl_value_error(self):
        """
        test_replace_subnet_network_acl_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/subnets/testString/network_acl')
        mock_response = '{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a NetworkACLIdentityById model
        network_acl_identity_model = {}
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Set up parameter values
        id = 'testString'
        network_acl_identity = network_acl_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "network_acl_identity": network_acl_identity,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.replace_subnet_network_acl(**req_copy)


class TestUnsetSubnetPublicGateway():
    """
    Test Class for unset_subnet_public_gateway
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_unset_subnet_public_gateway_all_params(self):
        """
        unset_subnet_public_gateway()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/subnets/testString/public_gateway')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.unset_subnet_public_gateway(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_unset_subnet_public_gateway_value_error(self):
        """
        test_unset_subnet_public_gateway_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/subnets/testString/public_gateway')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.unset_subnet_public_gateway(**req_copy)


class TestGetSubnetPublicGateway():
    """
    Test Class for get_subnet_public_gateway
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_subnet_public_gateway_all_params(self):
        """
        get_subnet_public_gateway()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/subnets/testString/public_gateway')
        mock_response = '{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_subnet_public_gateway(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_subnet_public_gateway_value_error(self):
        """
        test_get_subnet_public_gateway_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/subnets/testString/public_gateway')
        mock_response = '{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_subnet_public_gateway(**req_copy)


class TestSetSubnetPublicGateway():
    """
    Test Class for set_subnet_public_gateway
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_set_subnet_public_gateway_all_params(self):
        """
        set_subnet_public_gateway()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/subnets/testString/public_gateway')
        mock_response = '{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a PublicGatewayIdentityById model
        public_gateway_identity_model = {}
        public_gateway_identity_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Set up parameter values
        id = 'testString'
        public_gateway_identity = public_gateway_identity_model

        # Invoke method
        response = service.set_subnet_public_gateway(id,
                                                     public_gateway_identity,
                                                     headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == public_gateway_identity

    @responses.activate
    def test_set_subnet_public_gateway_value_error(self):
        """
        test_set_subnet_public_gateway_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/subnets/testString/public_gateway')
        mock_response = '{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a PublicGatewayIdentityById model
        public_gateway_identity_model = {}
        public_gateway_identity_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Set up parameter values
        id = 'testString'
        public_gateway_identity = public_gateway_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "public_gateway_identity": public_gateway_identity,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.set_subnet_public_gateway(**req_copy)


# endregion
##############################################################################
# End of Service: Subnets
##############################################################################

##############################################################################
# Start of Service: Images
##############################################################################
# region


class TestListImages():
    """
    Test Class for list_images
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_images_all_params(self):
        """
        list_images()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/images')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "images": [{"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image", "minimum_provisioned_size": 24, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "encryption": "user_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "created_at": "2019-01-01T12:00:00", "file": {"size": 1}, "operating_system": {"name": "ubuntu-16-amd64", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "vendor": "Canonical", "version": "16.04 LTS"}, "status": "available", "visibility": "private"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'
        name = 'testString'
        visibility = 'private'

        # Invoke method
        response = service.list_images(start=start,
                                       limit=limit,
                                       resource_group_id=resource_group_id,
                                       name=name,
                                       visibility=visibility,
                                       headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string
        assert 'name={}'.format(name) in query_string
        assert 'visibility={}'.format(visibility) in query_string

    @responses.activate
    def test_list_images_required_params(self):
        """
        test_list_images_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/images')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "images": [{"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image", "minimum_provisioned_size": 24, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "encryption": "user_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "created_at": "2019-01-01T12:00:00", "file": {"size": 1}, "operating_system": {"name": "ubuntu-16-amd64", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "vendor": "Canonical", "version": "16.04 LTS"}, "status": "available", "visibility": "private"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_images()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_images_value_error(self):
        """
        test_list_images_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/images')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "images": [{"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image", "minimum_provisioned_size": 24, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "encryption": "user_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "created_at": "2019-01-01T12:00:00", "file": {"size": 1}, "operating_system": {"name": "ubuntu-16-amd64", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "vendor": "Canonical", "version": "16.04 LTS"}, "status": "available", "visibility": "private"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_images(**req_copy)


class TestCreateImage():
    """
    Test Class for create_image
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_image_all_params(self):
        """
        create_image()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/images')
        mock_response = '{"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image", "minimum_provisioned_size": 24, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "encryption": "user_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "created_at": "2019-01-01T12:00:00", "file": {"size": 1}, "operating_system": {"name": "ubuntu-16-amd64", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "vendor": "Canonical", "version": "16.04 LTS"}, "status": "available", "visibility": "private"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a EncryptionKeyReference model
        encryption_key_reference_model = {}
        encryption_key_reference_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a ImageFilePrototype model
        image_file_prototype_model = {}
        image_file_prototype_model[
            'href'] = 'cos://us-south/my-bucket/my-image.qcow2'

        # Construct a dict representation of a OperatingSystemIdentityByName model
        operating_system_identity_model = {}
        operating_system_identity_model['name'] = 'debian-9-amd64'

        # Construct a dict representation of a ImagePrototypeImageByFile model
        image_prototype_model = {}
        image_prototype_model['name'] = 'my-image'
        image_prototype_model['encrypted_data_key'] = 'testString'
        image_prototype_model['encryption_key'] = encryption_key_reference_model
        image_prototype_model['resource_group'] = resource_group_identity_model
        image_prototype_model['file'] = image_file_prototype_model
        image_prototype_model[
            'operating_system'] = operating_system_identity_model

        # Set up parameter values
        image_prototype = image_prototype_model

        # Invoke method
        response = service.create_image(image_prototype, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == image_prototype

    @responses.activate
    def test_create_image_value_error(self):
        """
        test_create_image_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/images')
        mock_response = '{"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image", "minimum_provisioned_size": 24, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "encryption": "user_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "created_at": "2019-01-01T12:00:00", "file": {"size": 1}, "operating_system": {"name": "ubuntu-16-amd64", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "vendor": "Canonical", "version": "16.04 LTS"}, "status": "available", "visibility": "private"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a EncryptionKeyReference model
        encryption_key_reference_model = {}
        encryption_key_reference_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a ImageFilePrototype model
        image_file_prototype_model = {}
        image_file_prototype_model[
            'href'] = 'cos://us-south/my-bucket/my-image.qcow2'

        # Construct a dict representation of a OperatingSystemIdentityByName model
        operating_system_identity_model = {}
        operating_system_identity_model['name'] = 'debian-9-amd64'

        # Construct a dict representation of a ImagePrototypeImageByFile model
        image_prototype_model = {}
        image_prototype_model['name'] = 'my-image'
        image_prototype_model['encrypted_data_key'] = 'testString'
        image_prototype_model['encryption_key'] = encryption_key_reference_model
        image_prototype_model['resource_group'] = resource_group_identity_model
        image_prototype_model['file'] = image_file_prototype_model
        image_prototype_model[
            'operating_system'] = operating_system_identity_model

        # Set up parameter values
        image_prototype = image_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "image_prototype": image_prototype,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_image(**req_copy)


class TestDeleteImage():
    """
    Test Class for delete_image
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_image_all_params(self):
        """
        delete_image()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/images/testString')
        responses.add(responses.DELETE, url, status=202)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_image(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 202

    @responses.activate
    def test_delete_image_value_error(self):
        """
        test_delete_image_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/images/testString')
        responses.add(responses.DELETE, url, status=202)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_image(**req_copy)


class TestGetImage():
    """
    Test Class for get_image
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_image_all_params(self):
        """
        get_image()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/images/testString')
        mock_response = '{"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image", "minimum_provisioned_size": 24, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "encryption": "user_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "created_at": "2019-01-01T12:00:00", "file": {"size": 1}, "operating_system": {"name": "ubuntu-16-amd64", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "vendor": "Canonical", "version": "16.04 LTS"}, "status": "available", "visibility": "private"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_image(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_image_value_error(self):
        """
        test_get_image_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/images/testString')
        mock_response = '{"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image", "minimum_provisioned_size": 24, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "encryption": "user_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "created_at": "2019-01-01T12:00:00", "file": {"size": 1}, "operating_system": {"name": "ubuntu-16-amd64", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "vendor": "Canonical", "version": "16.04 LTS"}, "status": "available", "visibility": "private"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_image(**req_copy)


class TestUpdateImage():
    """
    Test Class for update_image
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_image_all_params(self):
        """
        update_image()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/images/testString')
        mock_response = '{"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image", "minimum_provisioned_size": 24, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "encryption": "user_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "created_at": "2019-01-01T12:00:00", "file": {"size": 1}, "operating_system": {"name": "ubuntu-16-amd64", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "vendor": "Canonical", "version": "16.04 LTS"}, "status": "available", "visibility": "private"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ImagePatch model
        image_patch_model = {}
        image_patch_model['name'] = 'my-image'

        # Set up parameter values
        id = 'testString'
        image_patch = image_patch_model

        # Invoke method
        response = service.update_image(id, image_patch, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == image_patch

    @responses.activate
    def test_update_image_value_error(self):
        """
        test_update_image_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/images/testString')
        mock_response = '{"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image", "minimum_provisioned_size": 24, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "encryption": "user_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "created_at": "2019-01-01T12:00:00", "file": {"size": 1}, "operating_system": {"name": "ubuntu-16-amd64", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "vendor": "Canonical", "version": "16.04 LTS"}, "status": "available", "visibility": "private"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a ImagePatch model
        image_patch_model = {}
        image_patch_model['name'] = 'my-image'

        # Set up parameter values
        id = 'testString'
        image_patch = image_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "image_patch": image_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_image(**req_copy)


class TestListOperatingSystems():
    """
    Test Class for list_operating_systems
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_operating_systems_all_params(self):
        """
        list_operating_systems()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/operating_systems')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "operating_systems": [{"name": "ubuntu-16-amd64", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "vendor": "Canonical", "version": "16.04 LTS"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1

        # Invoke method
        response = service.list_operating_systems(start=start,
                                                  limit=limit,
                                                  headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string

    @responses.activate
    def test_list_operating_systems_required_params(self):
        """
        test_list_operating_systems_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/operating_systems')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "operating_systems": [{"name": "ubuntu-16-amd64", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "vendor": "Canonical", "version": "16.04 LTS"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_operating_systems()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_operating_systems_value_error(self):
        """
        test_list_operating_systems_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/operating_systems')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "operating_systems": [{"name": "ubuntu-16-amd64", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "vendor": "Canonical", "version": "16.04 LTS"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_operating_systems(**req_copy)


class TestGetOperatingSystem():
    """
    Test Class for get_operating_system
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_operating_system_all_params(self):
        """
        get_operating_system()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/operating_systems/testString')
        mock_response = '{"name": "ubuntu-16-amd64", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "vendor": "Canonical", "version": "16.04 LTS"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        name = 'testString'

        # Invoke method
        response = service.get_operating_system(name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_operating_system_value_error(self):
        """
        test_get_operating_system_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/operating_systems/testString')
        mock_response = '{"name": "ubuntu-16-amd64", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "vendor": "Canonical", "version": "16.04 LTS"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "name": name,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_operating_system(**req_copy)


# endregion
##############################################################################
# End of Service: Images
##############################################################################

##############################################################################
# Start of Service: Keys
##############################################################################
# region


class TestListKeys():
    """
    Test Class for list_keys
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_keys_all_params(self):
        """
        list_keys()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/keys')
        mock_response = '{"keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "type": "rsa", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "length": 2048}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        resource_group_id = 'testString'

        # Invoke method
        response = service.list_keys(resource_group_id=resource_group_id,
                                     headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'resource_group.id={}'.format(resource_group_id) in query_string

    @responses.activate
    def test_list_keys_required_params(self):
        """
        test_list_keys_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/keys')
        mock_response = '{"keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "type": "rsa", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "length": 2048}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_keys()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_keys_value_error(self):
        """
        test_list_keys_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/keys')
        mock_response = '{"keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "type": "rsa", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "length": 2048}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_keys(**req_copy)


class TestCreateKey():
    """
    Test Class for create_key
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_key_all_params(self):
        """
        create_key()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/keys')
        mock_response = '{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "type": "rsa", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "length": 2048}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        public_key = 'AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En'
        name = 'my-key'
        type = 'rsa'
        resource_group = resource_group_identity_model

        # Invoke method
        response = service.create_key(public_key,
                                      name=name,
                                      type=type,
                                      resource_group=resource_group,
                                      headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body[
            'public_key'] == 'AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En'
        assert req_body['name'] == 'my-key'
        assert req_body['type'] == 'rsa'
        assert req_body['resource_group'] == resource_group_identity_model

    @responses.activate
    def test_create_key_value_error(self):
        """
        test_create_key_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/keys')
        mock_response = '{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "type": "rsa", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "length": 2048}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        public_key = 'AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En'
        name = 'my-key'
        type = 'rsa'
        resource_group = resource_group_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "public_key": public_key,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_key(**req_copy)


class TestDeleteKey():
    """
    Test Class for delete_key
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_key_all_params(self):
        """
        delete_key()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/keys/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_key(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_key_value_error(self):
        """
        test_delete_key_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/keys/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_key(**req_copy)


class TestGetKey():
    """
    Test Class for get_key
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_key_all_params(self):
        """
        get_key()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/keys/testString')
        mock_response = '{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "type": "rsa", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "length": 2048}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_key(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_key_value_error(self):
        """
        test_get_key_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/keys/testString')
        mock_response = '{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "type": "rsa", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "length": 2048}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_key(**req_copy)


class TestUpdateKey():
    """
    Test Class for update_key
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_key_all_params(self):
        """
        update_key()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/keys/testString')
        mock_response = '{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "type": "rsa", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "length": 2048}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a KeyPatch model
        key_patch_model = {}
        key_patch_model['name'] = 'my-key'

        # Set up parameter values
        id = 'testString'
        key_patch = key_patch_model

        # Invoke method
        response = service.update_key(id, key_patch, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == key_patch

    @responses.activate
    def test_update_key_value_error(self):
        """
        test_update_key_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/keys/testString')
        mock_response = '{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "type": "rsa", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "length": 2048}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a KeyPatch model
        key_patch_model = {}
        key_patch_model['name'] = 'my-key'

        # Set up parameter values
        id = 'testString'
        key_patch = key_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "key_patch": key_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_key(**req_copy)


# endregion
##############################################################################
# End of Service: Keys
##############################################################################

##############################################################################
# Start of Service: Instances
##############################################################################
# region


class TestListInstanceProfiles():
    """
    Test Class for list_instance_profiles
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_instance_profiles_all_params(self):
        """
        list_instance_profiles()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance/profiles')
        mock_response = '{"profiles": [{"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "bandwidth": {"type": "fixed", "value": 20000}, "port_speed": {"type": "fixed", "value": 1000}, "memory": {"type": "fixed", "value": 16}, "os_architecture": {"type": "enum", "default": "default", "values": ["amd64"]}, "vcpu_architecture": {"type": "fixed", "value": "amd64", "default": "default"}, "vcpu_count": {"type": "fixed", "value": 16}, "family": "balanced"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_instance_profiles()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_instance_profiles_value_error(self):
        """
        test_list_instance_profiles_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance/profiles')
        mock_response = '{"profiles": [{"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "bandwidth": {"type": "fixed", "value": 20000}, "port_speed": {"type": "fixed", "value": 1000}, "memory": {"type": "fixed", "value": 16}, "os_architecture": {"type": "enum", "default": "default", "values": ["amd64"]}, "vcpu_architecture": {"type": "fixed", "value": "amd64", "default": "default"}, "vcpu_count": {"type": "fixed", "value": 16}, "family": "balanced"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_instance_profiles(**req_copy)


class TestGetInstanceProfile():
    """
    Test Class for get_instance_profile
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_instance_profile_all_params(self):
        """
        get_instance_profile()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance/profiles/testString')
        mock_response = '{"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "bandwidth": {"type": "fixed", "value": 20000}, "port_speed": {"type": "fixed", "value": 1000}, "memory": {"type": "fixed", "value": 16}, "os_architecture": {"type": "enum", "default": "default", "values": ["amd64"]}, "vcpu_architecture": {"type": "fixed", "value": "amd64", "default": "default"}, "vcpu_count": {"type": "fixed", "value": 16}, "family": "balanced"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        name = 'testString'

        # Invoke method
        response = service.get_instance_profile(name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_instance_profile_value_error(self):
        """
        test_get_instance_profile_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance/profiles/testString')
        mock_response = '{"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "bandwidth": {"type": "fixed", "value": 20000}, "port_speed": {"type": "fixed", "value": 1000}, "memory": {"type": "fixed", "value": 16}, "os_architecture": {"type": "enum", "default": "default", "values": ["amd64"]}, "vcpu_architecture": {"type": "fixed", "value": "amd64", "default": "default"}, "vcpu_count": {"type": "fixed", "value": 16}, "family": "balanced"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "name": name,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_instance_profile(**req_copy)


class TestListInstanceTemplates():
    """
    Test Class for list_instance_templates
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_instance_templates_all_params(self):
        """
        list_instance_templates()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance/templates')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "templates": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-template", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "network_interfaces": [{"name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "profile": {"name": "bc1-4x16"}, "user_data": "user_data", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "created_at": "2019-01-01T12:00:00", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "primary_network_interface": {"name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"name": "my-volume", "profile": {"name": "general-purpose"}, "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "capacity": 100, "iops": 10000}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_instance_templates()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_instance_templates_value_error(self):
        """
        test_list_instance_templates_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance/templates')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "templates": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-template", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "network_interfaces": [{"name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "profile": {"name": "bc1-4x16"}, "user_data": "user_data", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "created_at": "2019-01-01T12:00:00", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "primary_network_interface": {"name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"name": "my-volume", "profile": {"name": "general-purpose"}, "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "capacity": 100, "iops": 10000}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_instance_templates(**req_copy)


class TestCreateInstanceTemplate():
    """
    Test Class for create_instance_template
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_instance_template_all_params(self):
        """
        create_instance_template()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance/templates')
        mock_response = '{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-template", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "network_interfaces": [{"name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "profile": {"name": "bc1-4x16"}, "user_data": "user_data", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "created_at": "2019-01-01T12:00:00", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "primary_network_interface": {"name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"name": "my-volume", "profile": {"name": "general-purpose"}, "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "capacity": 100, "iops": 10000}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a KeyIdentityKeyIdentityByFingerprint model
        key_identity_model = {}
        key_identity_model[
            'fingerprint'] = 'SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY'

        # Construct a dict representation of a SecurityGroupIdentityById model
        security_group_identity_model = {}
        security_group_identity_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a NetworkInterfacePrototype model
        network_interface_prototype_model = {}
        network_interface_prototype_model['name'] = 'my-network-interface'
        network_interface_prototype_model['primary_ipv4_address'] = '10.0.0.5'
        network_interface_prototype_model['security_groups'] = [
            security_group_identity_model
        ]
        network_interface_prototype_model['subnet'] = subnet_identity_model

        # Construct a dict representation of a InstanceProfileIdentityByName model
        instance_profile_identity_model = {}
        instance_profile_identity_model['name'] = 'gc.balanced.4x16'

        # Construct a dict representation of a VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById model
        volume_attachment_prototype_instance_context_volume_model = {}
        volume_attachment_prototype_instance_context_volume_model[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a dict representation of a VolumeAttachmentPrototypeInstanceContext model
        volume_attachment_prototype_instance_context_model = {}
        volume_attachment_prototype_instance_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_context_model[
            'volume'] = volume_attachment_prototype_instance_context_volume_model

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a VolumeProfileIdentityByName model
        volume_profile_identity_model = {}
        volume_profile_identity_model['name'] = 'general-purpose'

        # Construct a dict representation of a EncryptionKeyIdentityByCRN model
        encryption_key_identity_model = {}
        encryption_key_identity_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        # Construct a dict representation of a VolumePrototypeInstanceByImageContext model
        volume_prototype_instance_by_image_context_model = {}
        volume_prototype_instance_by_image_context_model['name'] = 'my-volume'
        volume_prototype_instance_by_image_context_model[
            'profile'] = volume_profile_identity_model
        volume_prototype_instance_by_image_context_model[
            'encryption_key'] = encryption_key_identity_model
        volume_prototype_instance_by_image_context_model['capacity'] = 100
        volume_prototype_instance_by_image_context_model['iops'] = 10000

        # Construct a dict representation of a VolumeAttachmentPrototypeInstanceByImageContext model
        volume_attachment_prototype_instance_by_image_context_model = {}
        volume_attachment_prototype_instance_by_image_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_by_image_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_by_image_context_model[
            'volume'] = volume_prototype_instance_by_image_context_model

        # Construct a dict representation of a ImageIdentityById model
        image_identity_model = {}
        image_identity_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        # Construct a dict representation of a InstanceTemplatePrototypeInstanceByImage model
        instance_template_prototype_model = {}
        instance_template_prototype_model['name'] = 'my-instance'
        instance_template_prototype_model['keys'] = [key_identity_model]
        instance_template_prototype_model['network_interfaces'] = [
            network_interface_prototype_model
        ]
        instance_template_prototype_model[
            'profile'] = instance_profile_identity_model
        instance_template_prototype_model['user_data'] = 'testString'
        instance_template_prototype_model['volume_attachments'] = [
            volume_attachment_prototype_instance_context_model
        ]
        instance_template_prototype_model['vpc'] = vpc_identity_model
        instance_template_prototype_model[
            'resource_group'] = resource_group_identity_model
        instance_template_prototype_model[
            'primary_network_interface'] = network_interface_prototype_model
        instance_template_prototype_model['zone'] = zone_identity_model
        instance_template_prototype_model[
            'boot_volume_attachment'] = volume_attachment_prototype_instance_by_image_context_model
        instance_template_prototype_model['image'] = image_identity_model

        # Set up parameter values
        instance_template_prototype = instance_template_prototype_model

        # Invoke method
        response = service.create_instance_template(instance_template_prototype,
                                                    headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == instance_template_prototype

    @responses.activate
    def test_create_instance_template_value_error(self):
        """
        test_create_instance_template_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance/templates')
        mock_response = '{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-template", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "network_interfaces": [{"name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "profile": {"name": "bc1-4x16"}, "user_data": "user_data", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "created_at": "2019-01-01T12:00:00", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "primary_network_interface": {"name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"name": "my-volume", "profile": {"name": "general-purpose"}, "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "capacity": 100, "iops": 10000}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a KeyIdentityKeyIdentityByFingerprint model
        key_identity_model = {}
        key_identity_model[
            'fingerprint'] = 'SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY'

        # Construct a dict representation of a SecurityGroupIdentityById model
        security_group_identity_model = {}
        security_group_identity_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a NetworkInterfacePrototype model
        network_interface_prototype_model = {}
        network_interface_prototype_model['name'] = 'my-network-interface'
        network_interface_prototype_model['primary_ipv4_address'] = '10.0.0.5'
        network_interface_prototype_model['security_groups'] = [
            security_group_identity_model
        ]
        network_interface_prototype_model['subnet'] = subnet_identity_model

        # Construct a dict representation of a InstanceProfileIdentityByName model
        instance_profile_identity_model = {}
        instance_profile_identity_model['name'] = 'gc.balanced.4x16'

        # Construct a dict representation of a VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById model
        volume_attachment_prototype_instance_context_volume_model = {}
        volume_attachment_prototype_instance_context_volume_model[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a dict representation of a VolumeAttachmentPrototypeInstanceContext model
        volume_attachment_prototype_instance_context_model = {}
        volume_attachment_prototype_instance_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_context_model[
            'volume'] = volume_attachment_prototype_instance_context_volume_model

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a VolumeProfileIdentityByName model
        volume_profile_identity_model = {}
        volume_profile_identity_model['name'] = 'general-purpose'

        # Construct a dict representation of a EncryptionKeyIdentityByCRN model
        encryption_key_identity_model = {}
        encryption_key_identity_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        # Construct a dict representation of a VolumePrototypeInstanceByImageContext model
        volume_prototype_instance_by_image_context_model = {}
        volume_prototype_instance_by_image_context_model['name'] = 'my-volume'
        volume_prototype_instance_by_image_context_model[
            'profile'] = volume_profile_identity_model
        volume_prototype_instance_by_image_context_model[
            'encryption_key'] = encryption_key_identity_model
        volume_prototype_instance_by_image_context_model['capacity'] = 100
        volume_prototype_instance_by_image_context_model['iops'] = 10000

        # Construct a dict representation of a VolumeAttachmentPrototypeInstanceByImageContext model
        volume_attachment_prototype_instance_by_image_context_model = {}
        volume_attachment_prototype_instance_by_image_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_by_image_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_by_image_context_model[
            'volume'] = volume_prototype_instance_by_image_context_model

        # Construct a dict representation of a ImageIdentityById model
        image_identity_model = {}
        image_identity_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        # Construct a dict representation of a InstanceTemplatePrototypeInstanceByImage model
        instance_template_prototype_model = {}
        instance_template_prototype_model['name'] = 'my-instance'
        instance_template_prototype_model['keys'] = [key_identity_model]
        instance_template_prototype_model['network_interfaces'] = [
            network_interface_prototype_model
        ]
        instance_template_prototype_model[
            'profile'] = instance_profile_identity_model
        instance_template_prototype_model['user_data'] = 'testString'
        instance_template_prototype_model['volume_attachments'] = [
            volume_attachment_prototype_instance_context_model
        ]
        instance_template_prototype_model['vpc'] = vpc_identity_model
        instance_template_prototype_model[
            'resource_group'] = resource_group_identity_model
        instance_template_prototype_model[
            'primary_network_interface'] = network_interface_prototype_model
        instance_template_prototype_model['zone'] = zone_identity_model
        instance_template_prototype_model[
            'boot_volume_attachment'] = volume_attachment_prototype_instance_by_image_context_model
        instance_template_prototype_model['image'] = image_identity_model

        # Set up parameter values
        instance_template_prototype = instance_template_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_template_prototype": instance_template_prototype,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_instance_template(**req_copy)


class TestDeleteInstanceTemplate():
    """
    Test Class for delete_instance_template
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_instance_template_all_params(self):
        """
        delete_instance_template()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance/templates/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_instance_template(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_instance_template_value_error(self):
        """
        test_delete_instance_template_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance/templates/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_instance_template(**req_copy)


class TestGetInstanceTemplate():
    """
    Test Class for get_instance_template
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_instance_template_all_params(self):
        """
        get_instance_template()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance/templates/testString')
        mock_response = '{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-template", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "network_interfaces": [{"name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "profile": {"name": "bc1-4x16"}, "user_data": "user_data", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "created_at": "2019-01-01T12:00:00", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "primary_network_interface": {"name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"name": "my-volume", "profile": {"name": "general-purpose"}, "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "capacity": 100, "iops": 10000}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_instance_template(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_instance_template_value_error(self):
        """
        test_get_instance_template_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance/templates/testString')
        mock_response = '{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-template", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "network_interfaces": [{"name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "profile": {"name": "bc1-4x16"}, "user_data": "user_data", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "created_at": "2019-01-01T12:00:00", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "primary_network_interface": {"name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"name": "my-volume", "profile": {"name": "general-purpose"}, "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "capacity": 100, "iops": 10000}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_instance_template(**req_copy)


class TestUpdateInstanceTemplate():
    """
    Test Class for update_instance_template
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_instance_template_all_params(self):
        """
        update_instance_template()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance/templates/testString')
        mock_response = '{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-template", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "network_interfaces": [{"name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "profile": {"name": "bc1-4x16"}, "user_data": "user_data", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "created_at": "2019-01-01T12:00:00", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "primary_network_interface": {"name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"name": "my-volume", "profile": {"name": "general-purpose"}, "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "capacity": 100, "iops": 10000}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a InstanceTemplatePatch model
        instance_template_patch_model = {}
        instance_template_patch_model['name'] = 'my-instance-template'

        # Set up parameter values
        id = 'testString'
        instance_template_patch = instance_template_patch_model

        # Invoke method
        response = service.update_instance_template(id,
                                                    instance_template_patch,
                                                    headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == instance_template_patch

    @responses.activate
    def test_update_instance_template_value_error(self):
        """
        test_update_instance_template_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance/templates/testString')
        mock_response = '{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-template", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "network_interfaces": [{"name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "profile": {"name": "bc1-4x16"}, "user_data": "user_data", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "created_at": "2019-01-01T12:00:00", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "primary_network_interface": {"name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"name": "my-volume", "profile": {"name": "general-purpose"}, "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "capacity": 100, "iops": 10000}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a InstanceTemplatePatch model
        instance_template_patch_model = {}
        instance_template_patch_model['name'] = 'my-instance-template'

        # Set up parameter values
        id = 'testString'
        instance_template_patch = instance_template_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "instance_template_patch": instance_template_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_instance_template(**req_copy)


class TestListInstances():
    """
    Test Class for list_instances
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_instances_all_params(self):
        """
        list_instances()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instances')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "instances": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "bandwidth": 1000, "boot_volume_attachment": {"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'
        name = 'testString'
        vpc_id = 'testString'
        vpc_crn = 'testString'
        vpc_name = 'testString'

        # Invoke method
        response = service.list_instances(start=start,
                                          limit=limit,
                                          resource_group_id=resource_group_id,
                                          name=name,
                                          vpc_id=vpc_id,
                                          vpc_crn=vpc_crn,
                                          vpc_name=vpc_name,
                                          headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string
        assert 'name={}'.format(name) in query_string
        assert 'vpc.id={}'.format(vpc_id) in query_string
        assert 'vpc.crn={}'.format(vpc_crn) in query_string
        assert 'vpc.name={}'.format(vpc_name) in query_string

    @responses.activate
    def test_list_instances_required_params(self):
        """
        test_list_instances_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instances')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "instances": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "bandwidth": 1000, "boot_volume_attachment": {"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_instances()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_instances_value_error(self):
        """
        test_list_instances_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instances')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "instances": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "bandwidth": 1000, "boot_volume_attachment": {"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_instances(**req_copy)


class TestCreateInstance():
    """
    Test Class for create_instance
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_instance_all_params(self):
        """
        create_instance()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instances')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "bandwidth": 1000, "boot_volume_attachment": {"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a KeyIdentityKeyIdentityByFingerprint model
        key_identity_model = {}
        key_identity_model[
            'fingerprint'] = 'SHA256:RJ+YWs2kupwFGiJuLqY85twmcdLOUcjIc9cA6IR8n8E'

        # Construct a dict representation of a SecurityGroupIdentityById model
        security_group_identity_model = {}
        security_group_identity_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a NetworkInterfacePrototype model
        network_interface_prototype_model = {}
        network_interface_prototype_model['name'] = 'my-network-interface'
        network_interface_prototype_model['primary_ipv4_address'] = '10.0.0.5'
        network_interface_prototype_model['security_groups'] = [
            security_group_identity_model
        ]
        network_interface_prototype_model['subnet'] = subnet_identity_model

        # Construct a dict representation of a InstanceProfileIdentityByName model
        instance_profile_identity_model = {}
        instance_profile_identity_model['name'] = 'gc.balanced.4x16'

        # Construct a dict representation of a VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById model
        volume_attachment_prototype_instance_context_volume_model = {}
        volume_attachment_prototype_instance_context_volume_model[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a dict representation of a VolumeAttachmentPrototypeInstanceContext model
        volume_attachment_prototype_instance_context_model = {}
        volume_attachment_prototype_instance_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_context_model[
            'volume'] = volume_attachment_prototype_instance_context_volume_model

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a VolumeProfileIdentityByName model
        volume_profile_identity_model = {}
        volume_profile_identity_model['name'] = 'general-purpose'

        # Construct a dict representation of a EncryptionKeyIdentityByCRN model
        encryption_key_identity_model = {}
        encryption_key_identity_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        # Construct a dict representation of a VolumePrototypeInstanceByImageContext model
        volume_prototype_instance_by_image_context_model = {}
        volume_prototype_instance_by_image_context_model['name'] = 'my-volume'
        volume_prototype_instance_by_image_context_model[
            'profile'] = volume_profile_identity_model
        volume_prototype_instance_by_image_context_model[
            'encryption_key'] = encryption_key_identity_model
        volume_prototype_instance_by_image_context_model['capacity'] = 100
        volume_prototype_instance_by_image_context_model['iops'] = 10000

        # Construct a dict representation of a VolumeAttachmentPrototypeInstanceByImageContext model
        volume_attachment_prototype_instance_by_image_context_model = {}
        volume_attachment_prototype_instance_by_image_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_by_image_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_by_image_context_model[
            'volume'] = volume_prototype_instance_by_image_context_model

        # Construct a dict representation of a ImageIdentityById model
        image_identity_model = {}
        image_identity_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        # Construct a dict representation of a InstancePrototypeInstanceByImage model
        instance_prototype_model = {}
        instance_prototype_model['name'] = 'my-instance'
        instance_prototype_model['keys'] = [key_identity_model]
        instance_prototype_model['network_interfaces'] = [
            network_interface_prototype_model
        ]
        instance_prototype_model['profile'] = instance_profile_identity_model
        instance_prototype_model['user_data'] = 'testString'
        instance_prototype_model['volume_attachments'] = [
            volume_attachment_prototype_instance_context_model
        ]
        instance_prototype_model['vpc'] = vpc_identity_model
        instance_prototype_model[
            'resource_group'] = resource_group_identity_model
        instance_prototype_model[
            'primary_network_interface'] = network_interface_prototype_model
        instance_prototype_model['zone'] = zone_identity_model
        instance_prototype_model[
            'boot_volume_attachment'] = volume_attachment_prototype_instance_by_image_context_model
        instance_prototype_model['image'] = image_identity_model

        # Set up parameter values
        instance_prototype = instance_prototype_model

        # Invoke method
        response = service.create_instance(instance_prototype, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == instance_prototype

    @responses.activate
    def test_create_instance_value_error(self):
        """
        test_create_instance_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instances')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "bandwidth": 1000, "boot_volume_attachment": {"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a KeyIdentityKeyIdentityByFingerprint model
        key_identity_model = {}
        key_identity_model[
            'fingerprint'] = 'SHA256:RJ+YWs2kupwFGiJuLqY85twmcdLOUcjIc9cA6IR8n8E'

        # Construct a dict representation of a SecurityGroupIdentityById model
        security_group_identity_model = {}
        security_group_identity_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a NetworkInterfacePrototype model
        network_interface_prototype_model = {}
        network_interface_prototype_model['name'] = 'my-network-interface'
        network_interface_prototype_model['primary_ipv4_address'] = '10.0.0.5'
        network_interface_prototype_model['security_groups'] = [
            security_group_identity_model
        ]
        network_interface_prototype_model['subnet'] = subnet_identity_model

        # Construct a dict representation of a InstanceProfileIdentityByName model
        instance_profile_identity_model = {}
        instance_profile_identity_model['name'] = 'gc.balanced.4x16'

        # Construct a dict representation of a VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById model
        volume_attachment_prototype_instance_context_volume_model = {}
        volume_attachment_prototype_instance_context_volume_model[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a dict representation of a VolumeAttachmentPrototypeInstanceContext model
        volume_attachment_prototype_instance_context_model = {}
        volume_attachment_prototype_instance_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_context_model[
            'volume'] = volume_attachment_prototype_instance_context_volume_model

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a VolumeProfileIdentityByName model
        volume_profile_identity_model = {}
        volume_profile_identity_model['name'] = 'general-purpose'

        # Construct a dict representation of a EncryptionKeyIdentityByCRN model
        encryption_key_identity_model = {}
        encryption_key_identity_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        # Construct a dict representation of a VolumePrototypeInstanceByImageContext model
        volume_prototype_instance_by_image_context_model = {}
        volume_prototype_instance_by_image_context_model['name'] = 'my-volume'
        volume_prototype_instance_by_image_context_model[
            'profile'] = volume_profile_identity_model
        volume_prototype_instance_by_image_context_model[
            'encryption_key'] = encryption_key_identity_model
        volume_prototype_instance_by_image_context_model['capacity'] = 100
        volume_prototype_instance_by_image_context_model['iops'] = 10000

        # Construct a dict representation of a VolumeAttachmentPrototypeInstanceByImageContext model
        volume_attachment_prototype_instance_by_image_context_model = {}
        volume_attachment_prototype_instance_by_image_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_by_image_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_by_image_context_model[
            'volume'] = volume_prototype_instance_by_image_context_model

        # Construct a dict representation of a ImageIdentityById model
        image_identity_model = {}
        image_identity_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        # Construct a dict representation of a InstancePrototypeInstanceByImage model
        instance_prototype_model = {}
        instance_prototype_model['name'] = 'my-instance'
        instance_prototype_model['keys'] = [key_identity_model]
        instance_prototype_model['network_interfaces'] = [
            network_interface_prototype_model
        ]
        instance_prototype_model['profile'] = instance_profile_identity_model
        instance_prototype_model['user_data'] = 'testString'
        instance_prototype_model['volume_attachments'] = [
            volume_attachment_prototype_instance_context_model
        ]
        instance_prototype_model['vpc'] = vpc_identity_model
        instance_prototype_model[
            'resource_group'] = resource_group_identity_model
        instance_prototype_model[
            'primary_network_interface'] = network_interface_prototype_model
        instance_prototype_model['zone'] = zone_identity_model
        instance_prototype_model[
            'boot_volume_attachment'] = volume_attachment_prototype_instance_by_image_context_model
        instance_prototype_model['image'] = image_identity_model

        # Set up parameter values
        instance_prototype = instance_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_prototype": instance_prototype,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_instance(**req_copy)


class TestDeleteInstance():
    """
    Test Class for delete_instance
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_instance_all_params(self):
        """
        delete_instance()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instances/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_instance(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_instance_value_error(self):
        """
        test_delete_instance_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instances/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_instance(**req_copy)


class TestGetInstance():
    """
    Test Class for get_instance
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_instance_all_params(self):
        """
        get_instance()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instances/testString')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "bandwidth": 1000, "boot_volume_attachment": {"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_instance(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_instance_value_error(self):
        """
        test_get_instance_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instances/testString')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "bandwidth": 1000, "boot_volume_attachment": {"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_instance(**req_copy)


class TestUpdateInstance():
    """
    Test Class for update_instance
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_instance_all_params(self):
        """
        update_instance()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instances/testString')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "bandwidth": 1000, "boot_volume_attachment": {"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a InstancePatch model
        instance_patch_model = {}
        instance_patch_model['name'] = 'my-instance'

        # Set up parameter values
        id = 'testString'
        instance_patch = instance_patch_model

        # Invoke method
        response = service.update_instance(id, instance_patch, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == instance_patch

    @responses.activate
    def test_update_instance_value_error(self):
        """
        test_update_instance_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instances/testString')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "bandwidth": 1000, "boot_volume_attachment": {"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"name": "bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a InstancePatch model
        instance_patch_model = {}
        instance_patch_model['name'] = 'my-instance'

        # Set up parameter values
        id = 'testString'
        instance_patch = instance_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "instance_patch": instance_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_instance(**req_copy)


class TestGetInstanceInitialization():
    """
    Test Class for get_instance_initialization
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_instance_initialization_all_params(self):
        """
        get_instance_initialization()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/initialization')
        mock_response = '{"keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key"}], "password": {"encrypted_password": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "encryption_key": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key"}}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_instance_initialization(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_instance_initialization_value_error(self):
        """
        test_get_instance_initialization_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/initialization')
        mock_response = '{"keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key"}], "password": {"encrypted_password": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "encryption_key": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "name": "my-key"}}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_instance_initialization(**req_copy)


class TestCreateInstanceAction():
    """
    Test Class for create_instance_action
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_instance_action_all_params(self):
        """
        create_instance_action()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instances/testString/actions')
        mock_response = '{"id": "109a1b6e-1242-4de1-be44-38705e9474ed", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/actions/109a1b6e-1242-4de1-be44-38705e9474ed", "force": false, "type": "reboot", "completed_at": "2019-01-01T12:00:00", "created_at": "2019-01-01T12:00:00", "started_at": "2019-01-01T12:00:00", "status": "completed"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Set up parameter values
        instance_id = 'testString'
        type = 'reboot'
        force = True

        # Invoke method
        response = service.create_instance_action(instance_id,
                                                  type,
                                                  force=force,
                                                  headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['type'] == 'reboot'
        assert req_body['force'] == True

    @responses.activate
    def test_create_instance_action_value_error(self):
        """
        test_create_instance_action_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instances/testString/actions')
        mock_response = '{"id": "109a1b6e-1242-4de1-be44-38705e9474ed", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/actions/109a1b6e-1242-4de1-be44-38705e9474ed", "force": false, "type": "reboot", "completed_at": "2019-01-01T12:00:00", "created_at": "2019-01-01T12:00:00", "started_at": "2019-01-01T12:00:00", "status": "completed"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Set up parameter values
        instance_id = 'testString'
        type = 'reboot'
        force = True

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "type": type,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_instance_action(**req_copy)


class TestListInstanceNetworkInterfaces():
    """
    Test Class for list_instance_network_interfaces
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_instance_network_interfaces_all_params(self):
        """
        list_instance_network_interfaces()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/network_interfaces')
        mock_response = '{"network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'

        # Invoke method
        response = service.list_instance_network_interfaces(instance_id,
                                                            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_instance_network_interfaces_value_error(self):
        """
        test_list_instance_network_interfaces_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/network_interfaces')
        mock_response = '{"network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_instance_network_interfaces(**req_copy)


class TestCreateInstanceNetworkInterface():
    """
    Test Class for create_instance_network_interface
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_instance_network_interface_all_params(self):
        """
        create_instance_network_interface()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/network_interfaces')
        mock_response = '{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a SecurityGroupIdentityById model
        security_group_identity_model = {}
        security_group_identity_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Set up parameter values
        instance_id = 'testString'
        subnet = subnet_identity_model
        name = 'my-network-interface'
        primary_ipv4_address = '10.0.0.5'
        security_groups = [security_group_identity_model]

        # Invoke method
        response = service.create_instance_network_interface(
            instance_id,
            subnet,
            name=name,
            primary_ipv4_address=primary_ipv4_address,
            security_groups=security_groups,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['subnet'] == subnet_identity_model
        assert req_body['name'] == 'my-network-interface'
        assert req_body['primary_ipv4_address'] == '10.0.0.5'
        assert req_body['security_groups'] == [security_group_identity_model]

    @responses.activate
    def test_create_instance_network_interface_value_error(self):
        """
        test_create_instance_network_interface_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/network_interfaces')
        mock_response = '{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a SecurityGroupIdentityById model
        security_group_identity_model = {}
        security_group_identity_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Set up parameter values
        instance_id = 'testString'
        subnet = subnet_identity_model
        name = 'my-network-interface'
        primary_ipv4_address = '10.0.0.5'
        security_groups = [security_group_identity_model]

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "subnet": subnet,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_instance_network_interface(**req_copy)


class TestDeleteInstanceNetworkInterface():
    """
    Test Class for delete_instance_network_interface
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_instance_network_interface_all_params(self):
        """
        delete_instance_network_interface()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/network_interfaces/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_instance_network_interface(instance_id,
                                                             id,
                                                             headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_instance_network_interface_value_error(self):
        """
        test_delete_instance_network_interface_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/network_interfaces/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_instance_network_interface(**req_copy)


class TestGetInstanceNetworkInterface():
    """
    Test Class for get_instance_network_interface
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_instance_network_interface_all_params(self):
        """
        get_instance_network_interface()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/network_interfaces/testString')
        mock_response = '{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_instance_network_interface(instance_id,
                                                          id,
                                                          headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_instance_network_interface_value_error(self):
        """
        test_get_instance_network_interface_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/network_interfaces/testString')
        mock_response = '{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_instance_network_interface(**req_copy)


class TestUpdateInstanceNetworkInterface():
    """
    Test Class for update_instance_network_interface
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_instance_network_interface_all_params(self):
        """
        update_instance_network_interface()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/network_interfaces/testString')
        mock_response = '{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a NetworkInterfacePatch model
        network_interface_patch_model = {}
        network_interface_patch_model['name'] = 'my-network-interface'

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'
        network_interface_patch = network_interface_patch_model

        # Invoke method
        response = service.update_instance_network_interface(
            instance_id, id, network_interface_patch, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == network_interface_patch

    @responses.activate
    def test_update_instance_network_interface_value_error(self):
        """
        test_update_instance_network_interface_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/network_interfaces/testString')
        mock_response = '{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a NetworkInterfacePatch model
        network_interface_patch_model = {}
        network_interface_patch_model['name'] = 'my-network-interface'

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'
        network_interface_patch = network_interface_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "id": id,
            "network_interface_patch": network_interface_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_instance_network_interface(**req_copy)


class TestListInstanceNetworkInterfaceFloatingIps():
    """
    Test Class for list_instance_network_interface_floating_ips
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_instance_network_interface_floating_ips_all_params(self):
        """
        list_instance_network_interface_floating_ips()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instances/testString/network_interfaces/testString/floating_ips')
        mock_response = '{"floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        network_interface_id = 'testString'

        # Invoke method
        response = service.list_instance_network_interface_floating_ips(
            instance_id, network_interface_id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_instance_network_interface_floating_ips_value_error(self):
        """
        test_list_instance_network_interface_floating_ips_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instances/testString/network_interfaces/testString/floating_ips')
        mock_response = '{"floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        network_interface_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "network_interface_id": network_interface_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_instance_network_interface_floating_ips(**req_copy)


class TestRemoveInstanceNetworkInterfaceFloatingIp():
    """
    Test Class for remove_instance_network_interface_floating_ip
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_remove_instance_network_interface_floating_ip_all_params(self):
        """
        remove_instance_network_interface_floating_ip()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instances/testString/network_interfaces/testString/floating_ips/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_id = 'testString'
        network_interface_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.remove_instance_network_interface_floating_ip(
            instance_id, network_interface_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_remove_instance_network_interface_floating_ip_value_error(self):
        """
        test_remove_instance_network_interface_floating_ip_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instances/testString/network_interfaces/testString/floating_ips/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_id = 'testString'
        network_interface_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "network_interface_id": network_interface_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.remove_instance_network_interface_floating_ip(
                    **req_copy)


class TestGetInstanceNetworkInterfaceFloatingIp():
    """
    Test Class for get_instance_network_interface_floating_ip
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_instance_network_interface_floating_ip_all_params(self):
        """
        get_instance_network_interface_floating_ip()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instances/testString/network_interfaces/testString/floating_ips/testString'
        )
        mock_response = '{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        network_interface_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_instance_network_interface_floating_ip(
            instance_id, network_interface_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_instance_network_interface_floating_ip_value_error(self):
        """
        test_get_instance_network_interface_floating_ip_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instances/testString/network_interfaces/testString/floating_ips/testString'
        )
        mock_response = '{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        network_interface_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "network_interface_id": network_interface_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_instance_network_interface_floating_ip(**req_copy)


class TestAddInstanceNetworkInterfaceFloatingIp():
    """
    Test Class for add_instance_network_interface_floating_ip
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_add_instance_network_interface_floating_ip_all_params(self):
        """
        add_instance_network_interface_floating_ip()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instances/testString/network_interfaces/testString/floating_ips/testString'
        )
        mock_response = '{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Set up parameter values
        instance_id = 'testString'
        network_interface_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.add_instance_network_interface_floating_ip(
            instance_id, network_interface_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201

    @responses.activate
    def test_add_instance_network_interface_floating_ip_value_error(self):
        """
        test_add_instance_network_interface_floating_ip_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instances/testString/network_interfaces/testString/floating_ips/testString'
        )
        mock_response = '{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Set up parameter values
        instance_id = 'testString'
        network_interface_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "network_interface_id": network_interface_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.add_instance_network_interface_floating_ip(**req_copy)


class TestListInstanceVolumeAttachments():
    """
    Test Class for list_instance_volume_attachments
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_instance_volume_attachments_all_params(self):
        """
        list_instance_volume_attachments()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/volume_attachments')
        mock_response = '{"volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}, "created_at": "2019-01-01T12:00:00", "status": "attached", "type": "boot"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'

        # Invoke method
        response = service.list_instance_volume_attachments(instance_id,
                                                            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_instance_volume_attachments_value_error(self):
        """
        test_list_instance_volume_attachments_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/volume_attachments')
        mock_response = '{"volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}, "created_at": "2019-01-01T12:00:00", "status": "attached", "type": "boot"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_instance_volume_attachments(**req_copy)


class TestCreateInstanceVolumeAttachment():
    """
    Test Class for create_instance_volume_attachment
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_instance_volume_attachment_all_params(self):
        """
        create_instance_volume_attachment()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/volume_attachments')
        mock_response = '{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}, "created_at": "2019-01-01T12:00:00", "status": "attached", "type": "boot"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VolumeIdentityById model
        volume_identity_model = {}
        volume_identity_model['id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Set up parameter values
        instance_id = 'testString'
        volume = volume_identity_model
        delete_volume_on_instance_delete = True
        name = 'my-volume-attachment'

        # Invoke method
        response = service.create_instance_volume_attachment(
            instance_id,
            volume,
            delete_volume_on_instance_delete=delete_volume_on_instance_delete,
            name=name,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['volume'] == volume_identity_model
        assert req_body['delete_volume_on_instance_delete'] == True
        assert req_body['name'] == 'my-volume-attachment'

    @responses.activate
    def test_create_instance_volume_attachment_value_error(self):
        """
        test_create_instance_volume_attachment_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instances/testString/volume_attachments')
        mock_response = '{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}, "created_at": "2019-01-01T12:00:00", "status": "attached", "type": "boot"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VolumeIdentityById model
        volume_identity_model = {}
        volume_identity_model['id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Set up parameter values
        instance_id = 'testString'
        volume = volume_identity_model
        delete_volume_on_instance_delete = True
        name = 'my-volume-attachment'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "volume": volume,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_instance_volume_attachment(**req_copy)


class TestDeleteInstanceVolumeAttachment():
    """
    Test Class for delete_instance_volume_attachment
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_instance_volume_attachment_all_params(self):
        """
        delete_instance_volume_attachment()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/volume_attachments/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_instance_volume_attachment(instance_id,
                                                             id,
                                                             headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_instance_volume_attachment_value_error(self):
        """
        test_delete_instance_volume_attachment_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/volume_attachments/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_instance_volume_attachment(**req_copy)


class TestGetInstanceVolumeAttachment():
    """
    Test Class for get_instance_volume_attachment
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_instance_volume_attachment_all_params(self):
        """
        get_instance_volume_attachment()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/volume_attachments/testString')
        mock_response = '{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}, "created_at": "2019-01-01T12:00:00", "status": "attached", "type": "boot"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_instance_volume_attachment(instance_id,
                                                          id,
                                                          headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_instance_volume_attachment_value_error(self):
        """
        test_get_instance_volume_attachment_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/volume_attachments/testString')
        mock_response = '{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}, "created_at": "2019-01-01T12:00:00", "status": "attached", "type": "boot"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_instance_volume_attachment(**req_copy)


class TestUpdateInstanceVolumeAttachment():
    """
    Test Class for update_instance_volume_attachment
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_instance_volume_attachment_all_params(self):
        """
        update_instance_volume_attachment()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/volume_attachments/testString')
        mock_response = '{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}, "created_at": "2019-01-01T12:00:00", "status": "attached", "type": "boot"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VolumeAttachmentPatch model
        volume_attachment_patch_model = {}
        volume_attachment_patch_model['delete_volume_on_instance_delete'] = True
        volume_attachment_patch_model['name'] = 'my-volume-attachment'

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'
        volume_attachment_patch = volume_attachment_patch_model

        # Invoke method
        response = service.update_instance_volume_attachment(
            instance_id, id, volume_attachment_patch, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == volume_attachment_patch

    @responses.activate
    def test_update_instance_volume_attachment_value_error(self):
        """
        test_update_instance_volume_attachment_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instances/testString/volume_attachments/testString')
        mock_response = '{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}, "created_at": "2019-01-01T12:00:00", "status": "attached", "type": "boot"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VolumeAttachmentPatch model
        volume_attachment_patch_model = {}
        volume_attachment_patch_model['delete_volume_on_instance_delete'] = True
        volume_attachment_patch_model['name'] = 'my-volume-attachment'

        # Set up parameter values
        instance_id = 'testString'
        id = 'testString'
        volume_attachment_patch = volume_attachment_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_id": instance_id,
            "id": id,
            "volume_attachment_patch": volume_attachment_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_instance_volume_attachment(**req_copy)


# endregion
##############################################################################
# End of Service: Instances
##############################################################################

##############################################################################
# Start of Service: InstanceGroups
##############################################################################
# region


class TestListInstanceGroups():
    """
    Test Class for list_instance_groups
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_instance_groups_all_params(self):
        """
        list_instance_groups()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance_groups')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "instance_groups": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group", "membership_count": 10, "application_port": 22, "load_balancer_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "created_at": "2019-01-01T12:00:00", "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "managers": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-instance-group-manager"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "status": "deleting", "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1

        # Invoke method
        response = service.list_instance_groups(start=start,
                                                limit=limit,
                                                headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string

    @responses.activate
    def test_list_instance_groups_required_params(self):
        """
        test_list_instance_groups_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance_groups')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "instance_groups": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group", "membership_count": 10, "application_port": 22, "load_balancer_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "created_at": "2019-01-01T12:00:00", "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "managers": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-instance-group-manager"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "status": "deleting", "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_instance_groups()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_instance_groups_value_error(self):
        """
        test_list_instance_groups_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance_groups')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "instance_groups": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group", "membership_count": 10, "application_port": 22, "load_balancer_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "created_at": "2019-01-01T12:00:00", "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "managers": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-instance-group-manager"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "status": "deleting", "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_instance_groups(**req_copy)


class TestCreateInstanceGroup():
    """
    Test Class for create_instance_group
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_instance_group_all_params(self):
        """
        create_instance_group()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance_groups')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group", "membership_count": 10, "application_port": 22, "load_balancer_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "created_at": "2019-01-01T12:00:00", "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "managers": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-instance-group-manager"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "status": "deleting", "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a InstanceTemplateIdentityById model
        instance_template_identity_model = {}
        instance_template_identity_model[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a LoadBalancerIdentityById model
        load_balancer_identity_model = {}
        load_balancer_identity_model[
            'id'] = 'dd754295-e9e0-4c9d-bf6c-58fbc59e5727'

        # Construct a dict representation of a LoadBalancerPoolIdentityById model
        load_balancer_pool_identity_model = {}
        load_balancer_pool_identity_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        instance_template = instance_template_identity_model
        subnets = [subnet_identity_model]
        name = 'my-instance-group'
        membership_count = 10
        application_port = 22
        load_balancer = load_balancer_identity_model
        load_balancer_pool = load_balancer_pool_identity_model
        resource_group = resource_group_identity_model

        # Invoke method
        response = service.create_instance_group(
            instance_template,
            subnets,
            name=name,
            membership_count=membership_count,
            application_port=application_port,
            load_balancer=load_balancer,
            load_balancer_pool=load_balancer_pool,
            resource_group=resource_group,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['instance_template'] == instance_template_identity_model
        assert req_body['subnets'] == [subnet_identity_model]
        assert req_body['name'] == 'my-instance-group'
        assert req_body['membership_count'] == 10
        assert req_body['application_port'] == 22
        assert req_body['load_balancer'] == load_balancer_identity_model
        assert req_body[
            'load_balancer_pool'] == load_balancer_pool_identity_model
        assert req_body['resource_group'] == resource_group_identity_model

    @responses.activate
    def test_create_instance_group_value_error(self):
        """
        test_create_instance_group_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance_groups')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group", "membership_count": 10, "application_port": 22, "load_balancer_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "created_at": "2019-01-01T12:00:00", "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "managers": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-instance-group-manager"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "status": "deleting", "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a InstanceTemplateIdentityById model
        instance_template_identity_model = {}
        instance_template_identity_model[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a LoadBalancerIdentityById model
        load_balancer_identity_model = {}
        load_balancer_identity_model[
            'id'] = 'dd754295-e9e0-4c9d-bf6c-58fbc59e5727'

        # Construct a dict representation of a LoadBalancerPoolIdentityById model
        load_balancer_pool_identity_model = {}
        load_balancer_pool_identity_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        instance_template = instance_template_identity_model
        subnets = [subnet_identity_model]
        name = 'my-instance-group'
        membership_count = 10
        application_port = 22
        load_balancer = load_balancer_identity_model
        load_balancer_pool = load_balancer_pool_identity_model
        resource_group = resource_group_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_template": instance_template,
            "subnets": subnets,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_instance_group(**req_copy)


class TestDeleteInstanceGroup():
    """
    Test Class for delete_instance_group
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_instance_group_all_params(self):
        """
        delete_instance_group()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance_groups/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_instance_group(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_instance_group_value_error(self):
        """
        test_delete_instance_group_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance_groups/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_instance_group(**req_copy)


class TestGetInstanceGroup():
    """
    Test Class for get_instance_group
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_instance_group_all_params(self):
        """
        get_instance_group()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance_groups/testString')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group", "membership_count": 10, "application_port": 22, "load_balancer_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "created_at": "2019-01-01T12:00:00", "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "managers": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-instance-group-manager"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "status": "deleting", "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_instance_group(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_instance_group_value_error(self):
        """
        test_get_instance_group_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance_groups/testString')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group", "membership_count": 10, "application_port": 22, "load_balancer_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "created_at": "2019-01-01T12:00:00", "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "managers": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-instance-group-manager"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "status": "deleting", "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_instance_group(**req_copy)


class TestUpdateInstanceGroup():
    """
    Test Class for update_instance_group
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_instance_group_all_params(self):
        """
        update_instance_group()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance_groups/testString')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group", "membership_count": 10, "application_port": 22, "load_balancer_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "created_at": "2019-01-01T12:00:00", "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "managers": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-instance-group-manager"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "status": "deleting", "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a InstanceTemplateIdentityById model
        instance_template_identity_model = {}
        instance_template_identity_model[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a LoadBalancerIdentityById model
        load_balancer_identity_model = {}
        load_balancer_identity_model[
            'id'] = 'dd754295-e9e0-4c9d-bf6c-58fbc59e5727'

        # Construct a dict representation of a LoadBalancerPoolIdentityById model
        load_balancer_pool_identity_model = {}
        load_balancer_pool_identity_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a dict representation of a InstanceGroupPatch model
        instance_group_patch_model = {}
        instance_group_patch_model['name'] = 'my-instance-group'
        instance_group_patch_model['membership_count'] = 10
        instance_group_patch_model[
            'instance_template'] = instance_template_identity_model
        instance_group_patch_model['subnets'] = [subnet_identity_model]
        instance_group_patch_model['application_port'] = 22
        instance_group_patch_model[
            'load_balancer'] = load_balancer_identity_model
        instance_group_patch_model[
            'load_balancer_pool'] = load_balancer_pool_identity_model

        # Set up parameter values
        id = 'testString'
        instance_group_patch = instance_group_patch_model

        # Invoke method
        response = service.update_instance_group(id,
                                                 instance_group_patch,
                                                 headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == instance_group_patch

    @responses.activate
    def test_update_instance_group_value_error(self):
        """
        test_update_instance_group_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/instance_groups/testString')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group", "membership_count": 10, "application_port": 22, "load_balancer_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "created_at": "2019-01-01T12:00:00", "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "managers": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-instance-group-manager"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "status": "deleting", "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a InstanceTemplateIdentityById model
        instance_template_identity_model = {}
        instance_template_identity_model[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a LoadBalancerIdentityById model
        load_balancer_identity_model = {}
        load_balancer_identity_model[
            'id'] = 'dd754295-e9e0-4c9d-bf6c-58fbc59e5727'

        # Construct a dict representation of a LoadBalancerPoolIdentityById model
        load_balancer_pool_identity_model = {}
        load_balancer_pool_identity_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a dict representation of a InstanceGroupPatch model
        instance_group_patch_model = {}
        instance_group_patch_model['name'] = 'my-instance-group'
        instance_group_patch_model['membership_count'] = 10
        instance_group_patch_model[
            'instance_template'] = instance_template_identity_model
        instance_group_patch_model['subnets'] = [subnet_identity_model]
        instance_group_patch_model['application_port'] = 22
        instance_group_patch_model[
            'load_balancer'] = load_balancer_identity_model
        instance_group_patch_model[
            'load_balancer_pool'] = load_balancer_pool_identity_model

        # Set up parameter values
        id = 'testString'
        instance_group_patch = instance_group_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "instance_group_patch": instance_group_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_instance_group(**req_copy)


class TestDeleteInstanceGroupLoadBalancer():
    """
    Test Class for delete_instance_group_load_balancer
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_instance_group_load_balancer_all_params(self):
        """
        delete_instance_group_load_balancer()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instance_groups/testString/load_balancer')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_group_id = 'testString'

        # Invoke method
        response = service.delete_instance_group_load_balancer(
            instance_group_id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_instance_group_load_balancer_value_error(self):
        """
        test_delete_instance_group_load_balancer_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instance_groups/testString/load_balancer')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_group_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_group_id": instance_group_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_instance_group_load_balancer(**req_copy)


class TestListInstanceGroupManagers():
    """
    Test Class for list_instance_group_managers
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_instance_group_managers_all_params(self):
        """
        list_instance_group_managers()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instance_groups/testString/managers')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "managers": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-instance-group-manager", "management_enabled": true, "aggregation_window": 120, "cooldown": 210, "max_membership_count": 10, "min_membership_count": 10, "manager_type": "autoscale", "policies": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy"}]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_group_id = 'testString'

        # Invoke method
        response = service.list_instance_group_managers(instance_group_id,
                                                        headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_instance_group_managers_value_error(self):
        """
        test_list_instance_group_managers_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instance_groups/testString/managers')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "managers": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-instance-group-manager", "management_enabled": true, "aggregation_window": 120, "cooldown": 210, "max_membership_count": 10, "min_membership_count": 10, "manager_type": "autoscale", "policies": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy"}]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_group_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_group_id": instance_group_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_instance_group_managers(**req_copy)


class TestCreateInstanceGroupManager():
    """
    Test Class for create_instance_group_manager
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_instance_group_manager_all_params(self):
        """
        create_instance_group_manager()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instance_groups/testString/managers')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-instance-group-manager", "management_enabled": true, "aggregation_window": 120, "cooldown": 210, "max_membership_count": 10, "min_membership_count": 10, "manager_type": "autoscale", "policies": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy"}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype model
        instance_group_manager_prototype_model = {}
        instance_group_manager_prototype_model[
            'name'] = 'my-instance-group-manager'
        instance_group_manager_prototype_model['management_enabled'] = True
        instance_group_manager_prototype_model['aggregation_window'] = 120
        instance_group_manager_prototype_model['cooldown'] = 210
        instance_group_manager_prototype_model['max_membership_count'] = 10
        instance_group_manager_prototype_model['min_membership_count'] = 10
        instance_group_manager_prototype_model['manager_type'] = 'autoscale'

        # Set up parameter values
        instance_group_id = 'testString'
        instance_group_manager_prototype = instance_group_manager_prototype_model

        # Invoke method
        response = service.create_instance_group_manager(
            instance_group_id, instance_group_manager_prototype, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == instance_group_manager_prototype

    @responses.activate
    def test_create_instance_group_manager_value_error(self):
        """
        test_create_instance_group_manager_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instance_groups/testString/managers')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-instance-group-manager", "management_enabled": true, "aggregation_window": 120, "cooldown": 210, "max_membership_count": 10, "min_membership_count": 10, "manager_type": "autoscale", "policies": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy"}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype model
        instance_group_manager_prototype_model = {}
        instance_group_manager_prototype_model[
            'name'] = 'my-instance-group-manager'
        instance_group_manager_prototype_model['management_enabled'] = True
        instance_group_manager_prototype_model['aggregation_window'] = 120
        instance_group_manager_prototype_model['cooldown'] = 210
        instance_group_manager_prototype_model['max_membership_count'] = 10
        instance_group_manager_prototype_model['min_membership_count'] = 10
        instance_group_manager_prototype_model['manager_type'] = 'autoscale'

        # Set up parameter values
        instance_group_id = 'testString'
        instance_group_manager_prototype = instance_group_manager_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_group_id":
                instance_group_id,
            "instance_group_manager_prototype":
                instance_group_manager_prototype,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_instance_group_manager(**req_copy)


class TestDeleteInstanceGroupManager():
    """
    Test Class for delete_instance_group_manager
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_instance_group_manager_all_params(self):
        """
        delete_instance_group_manager()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instance_groups/testString/managers/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_group_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_instance_group_manager(instance_group_id,
                                                         id,
                                                         headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_instance_group_manager_value_error(self):
        """
        test_delete_instance_group_manager_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instance_groups/testString/managers/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_group_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_group_id": instance_group_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_instance_group_manager(**req_copy)


class TestGetInstanceGroupManager():
    """
    Test Class for get_instance_group_manager
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_instance_group_manager_all_params(self):
        """
        get_instance_group_manager()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instance_groups/testString/managers/testString')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-instance-group-manager", "management_enabled": true, "aggregation_window": 120, "cooldown": 210, "max_membership_count": 10, "min_membership_count": 10, "manager_type": "autoscale", "policies": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_group_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_instance_group_manager(instance_group_id,
                                                      id,
                                                      headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_instance_group_manager_value_error(self):
        """
        test_get_instance_group_manager_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instance_groups/testString/managers/testString')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-instance-group-manager", "management_enabled": true, "aggregation_window": 120, "cooldown": 210, "max_membership_count": 10, "min_membership_count": 10, "manager_type": "autoscale", "policies": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_group_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_group_id": instance_group_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_instance_group_manager(**req_copy)


class TestUpdateInstanceGroupManager():
    """
    Test Class for update_instance_group_manager
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_instance_group_manager_all_params(self):
        """
        update_instance_group_manager()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instance_groups/testString/managers/testString')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-instance-group-manager", "management_enabled": true, "aggregation_window": 120, "cooldown": 210, "max_membership_count": 10, "min_membership_count": 10, "manager_type": "autoscale", "policies": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy"}]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a InstanceGroupManagerPatch model
        instance_group_manager_patch_model = {}
        instance_group_manager_patch_model['name'] = 'my-instance-group-manager'
        instance_group_manager_patch_model['management_enabled'] = True
        instance_group_manager_patch_model['aggregation_window'] = 120
        instance_group_manager_patch_model['cooldown'] = 210
        instance_group_manager_patch_model['max_membership_count'] = 10
        instance_group_manager_patch_model['min_membership_count'] = 10

        # Set up parameter values
        instance_group_id = 'testString'
        id = 'testString'
        instance_group_manager_patch = instance_group_manager_patch_model

        # Invoke method
        response = service.update_instance_group_manager(
            instance_group_id, id, instance_group_manager_patch, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == instance_group_manager_patch

    @responses.activate
    def test_update_instance_group_manager_value_error(self):
        """
        test_update_instance_group_manager_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instance_groups/testString/managers/testString')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-instance-group-manager", "management_enabled": true, "aggregation_window": 120, "cooldown": 210, "max_membership_count": 10, "min_membership_count": 10, "manager_type": "autoscale", "policies": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy"}]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a InstanceGroupManagerPatch model
        instance_group_manager_patch_model = {}
        instance_group_manager_patch_model['name'] = 'my-instance-group-manager'
        instance_group_manager_patch_model['management_enabled'] = True
        instance_group_manager_patch_model['aggregation_window'] = 120
        instance_group_manager_patch_model['cooldown'] = 210
        instance_group_manager_patch_model['max_membership_count'] = 10
        instance_group_manager_patch_model['min_membership_count'] = 10

        # Set up parameter values
        instance_group_id = 'testString'
        id = 'testString'
        instance_group_manager_patch = instance_group_manager_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_group_id": instance_group_id,
            "id": id,
            "instance_group_manager_patch": instance_group_manager_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_instance_group_manager(**req_copy)


class TestListInstanceGroupManagerPolicies():
    """
    Test Class for list_instance_group_manager_policies
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_instance_group_manager_policies_all_params(self):
        """
        list_instance_group_manager_policies()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instance_groups/testString/managers/testString/policies')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "policies": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy", "metric_type": "cpu", "metric_value": 12, "policy_type": "target"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_group_id = 'testString'
        instance_group_manager_id = 'testString'

        # Invoke method
        response = service.list_instance_group_manager_policies(
            instance_group_id, instance_group_manager_id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_instance_group_manager_policies_value_error(self):
        """
        test_list_instance_group_manager_policies_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instance_groups/testString/managers/testString/policies')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "policies": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy", "metric_type": "cpu", "metric_value": 12, "policy_type": "target"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_group_id = 'testString'
        instance_group_manager_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_group_id": instance_group_id,
            "instance_group_manager_id": instance_group_manager_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_instance_group_manager_policies(**req_copy)


class TestCreateInstanceGroupManagerPolicy():
    """
    Test Class for create_instance_group_manager_policy
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_instance_group_manager_policy_all_params(self):
        """
        create_instance_group_manager_policy()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instance_groups/testString/managers/testString/policies')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy", "metric_type": "cpu", "metric_value": 12, "policy_type": "target"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype model
        instance_group_manager_policy_prototype_model = {}
        instance_group_manager_policy_prototype_model[
            'name'] = 'my-instance-group-manager-policy'
        instance_group_manager_policy_prototype_model['metric_type'] = 'cpu'
        instance_group_manager_policy_prototype_model['metric_value'] = 38
        instance_group_manager_policy_prototype_model['policy_type'] = 'target'

        # Set up parameter values
        instance_group_id = 'testString'
        instance_group_manager_id = 'testString'
        instance_group_manager_policy_prototype = instance_group_manager_policy_prototype_model

        # Invoke method
        response = service.create_instance_group_manager_policy(
            instance_group_id,
            instance_group_manager_id,
            instance_group_manager_policy_prototype,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == instance_group_manager_policy_prototype

    @responses.activate
    def test_create_instance_group_manager_policy_value_error(self):
        """
        test_create_instance_group_manager_policy_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instance_groups/testString/managers/testString/policies')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy", "metric_type": "cpu", "metric_value": 12, "policy_type": "target"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype model
        instance_group_manager_policy_prototype_model = {}
        instance_group_manager_policy_prototype_model[
            'name'] = 'my-instance-group-manager-policy'
        instance_group_manager_policy_prototype_model['metric_type'] = 'cpu'
        instance_group_manager_policy_prototype_model['metric_value'] = 38
        instance_group_manager_policy_prototype_model['policy_type'] = 'target'

        # Set up parameter values
        instance_group_id = 'testString'
        instance_group_manager_id = 'testString'
        instance_group_manager_policy_prototype = instance_group_manager_policy_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_group_id":
                instance_group_id,
            "instance_group_manager_id":
                instance_group_manager_id,
            "instance_group_manager_policy_prototype":
                instance_group_manager_policy_prototype,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_instance_group_manager_policy(**req_copy)


class TestDeleteInstanceGroupManagerPolicy():
    """
    Test Class for delete_instance_group_manager_policy
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_instance_group_manager_policy_all_params(self):
        """
        delete_instance_group_manager_policy()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instance_groups/testString/managers/testString/policies/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_group_id = 'testString'
        instance_group_manager_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_instance_group_manager_policy(
            instance_group_id, instance_group_manager_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_instance_group_manager_policy_value_error(self):
        """
        test_delete_instance_group_manager_policy_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instance_groups/testString/managers/testString/policies/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_group_id = 'testString'
        instance_group_manager_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_group_id": instance_group_id,
            "instance_group_manager_id": instance_group_manager_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_instance_group_manager_policy(**req_copy)


class TestGetInstanceGroupManagerPolicy():
    """
    Test Class for get_instance_group_manager_policy
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_instance_group_manager_policy_all_params(self):
        """
        get_instance_group_manager_policy()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instance_groups/testString/managers/testString/policies/testString'
        )
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy", "metric_type": "cpu", "metric_value": 12, "policy_type": "target"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_group_id = 'testString'
        instance_group_manager_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_instance_group_manager_policy(
            instance_group_id, instance_group_manager_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_instance_group_manager_policy_value_error(self):
        """
        test_get_instance_group_manager_policy_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instance_groups/testString/managers/testString/policies/testString'
        )
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy", "metric_type": "cpu", "metric_value": 12, "policy_type": "target"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_group_id = 'testString'
        instance_group_manager_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_group_id": instance_group_id,
            "instance_group_manager_id": instance_group_manager_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_instance_group_manager_policy(**req_copy)


class TestUpdateInstanceGroupManagerPolicy():
    """
    Test Class for update_instance_group_manager_policy
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_instance_group_manager_policy_all_params(self):
        """
        update_instance_group_manager_policy()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instance_groups/testString/managers/testString/policies/testString'
        )
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy", "metric_type": "cpu", "metric_value": 12, "policy_type": "target"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a InstanceGroupManagerPolicyPatch model
        instance_group_manager_policy_patch_model = {}
        instance_group_manager_policy_patch_model[
            'name'] = 'my-instance-group-manager-policy'
        instance_group_manager_policy_patch_model['metric_type'] = 'cpu'
        instance_group_manager_policy_patch_model['metric_value'] = 38

        # Set up parameter values
        instance_group_id = 'testString'
        instance_group_manager_id = 'testString'
        id = 'testString'
        instance_group_manager_policy_patch = instance_group_manager_policy_patch_model

        # Invoke method
        response = service.update_instance_group_manager_policy(
            instance_group_id,
            instance_group_manager_id,
            id,
            instance_group_manager_policy_patch,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == instance_group_manager_policy_patch

    @responses.activate
    def test_update_instance_group_manager_policy_value_error(self):
        """
        test_update_instance_group_manager_policy_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/instance_groups/testString/managers/testString/policies/testString'
        )
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy", "metric_type": "cpu", "metric_value": 12, "policy_type": "target"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a InstanceGroupManagerPolicyPatch model
        instance_group_manager_policy_patch_model = {}
        instance_group_manager_policy_patch_model[
            'name'] = 'my-instance-group-manager-policy'
        instance_group_manager_policy_patch_model['metric_type'] = 'cpu'
        instance_group_manager_policy_patch_model['metric_value'] = 38

        # Set up parameter values
        instance_group_id = 'testString'
        instance_group_manager_id = 'testString'
        id = 'testString'
        instance_group_manager_policy_patch = instance_group_manager_policy_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_group_id":
                instance_group_id,
            "instance_group_manager_id":
                instance_group_manager_id,
            "id":
                id,
            "instance_group_manager_policy_patch":
                instance_group_manager_policy_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_instance_group_manager_policy(**req_copy)


class TestDeleteInstanceGroupMemberships():
    """
    Test Class for delete_instance_group_memberships
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_instance_group_memberships_all_params(self):
        """
        delete_instance_group_memberships()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instance_groups/testString/memberships')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_group_id = 'testString'

        # Invoke method
        response = service.delete_instance_group_memberships(instance_group_id,
                                                             headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_instance_group_memberships_value_error(self):
        """
        test_delete_instance_group_memberships_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instance_groups/testString/memberships')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_group_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_group_id": instance_group_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_instance_group_memberships(**req_copy)


class TestListInstanceGroupMemberships():
    """
    Test Class for list_instance_group_memberships
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_instance_group_memberships_all_params(self):
        """
        list_instance_group_memberships()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instance_groups/testString/memberships')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/7241e2a8-601f-11ea-8503-000c29475bed/memberships?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/7241e2a8-601f-11ea-8503-000c29475bed/memberships?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "memberships": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed", "name": "my-instance-group-membership", "delete_instance_on_membership_delete": true, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "pool_member": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004"}, "status": "deleting"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_group_id = 'testString'

        # Invoke method
        response = service.list_instance_group_memberships(instance_group_id,
                                                           headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_instance_group_memberships_value_error(self):
        """
        test_list_instance_group_memberships_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/instance_groups/testString/memberships')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/7241e2a8-601f-11ea-8503-000c29475bed/memberships?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/7241e2a8-601f-11ea-8503-000c29475bed/memberships?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "memberships": [{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed", "name": "my-instance-group-membership", "delete_instance_on_membership_delete": true, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "pool_member": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004"}, "status": "deleting"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_group_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_group_id": instance_group_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_instance_group_memberships(**req_copy)


class TestDeleteInstanceGroupMembership():
    """
    Test Class for delete_instance_group_membership
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_instance_group_membership_all_params(self):
        """
        delete_instance_group_membership()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instance_groups/testString/memberships/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_group_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_instance_group_membership(instance_group_id,
                                                            id,
                                                            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_instance_group_membership_value_error(self):
        """
        test_delete_instance_group_membership_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instance_groups/testString/memberships/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        instance_group_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_group_id": instance_group_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_instance_group_membership(**req_copy)


class TestGetInstanceGroupMembership():
    """
    Test Class for get_instance_group_membership
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_instance_group_membership_all_params(self):
        """
        get_instance_group_membership()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instance_groups/testString/memberships/testString')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed", "name": "my-instance-group-membership", "delete_instance_on_membership_delete": true, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "pool_member": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004"}, "status": "deleting"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_group_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_instance_group_membership(instance_group_id,
                                                         id,
                                                         headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_instance_group_membership_value_error(self):
        """
        test_get_instance_group_membership_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instance_groups/testString/memberships/testString')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed", "name": "my-instance-group-membership", "delete_instance_on_membership_delete": true, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "pool_member": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004"}, "status": "deleting"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        instance_group_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_group_id": instance_group_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_instance_group_membership(**req_copy)


class TestUpdateInstanceGroupMembership():
    """
    Test Class for update_instance_group_membership
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_instance_group_membership_all_params(self):
        """
        update_instance_group_membership()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instance_groups/testString/memberships/testString')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed", "name": "my-instance-group-membership", "delete_instance_on_membership_delete": true, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "pool_member": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004"}, "status": "deleting"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a InstanceGroupMembershipPatch model
        instance_group_membership_patch_model = {}
        instance_group_membership_patch_model[
            'name'] = 'my-instance-group-membership'

        # Set up parameter values
        instance_group_id = 'testString'
        id = 'testString'
        instance_group_membership_patch = instance_group_membership_patch_model

        # Invoke method
        response = service.update_instance_group_membership(
            instance_group_id, id, instance_group_membership_patch, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == instance_group_membership_patch

    @responses.activate
    def test_update_instance_group_membership_value_error(self):
        """
        test_update_instance_group_membership_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/instance_groups/testString/memberships/testString')
        mock_response = '{"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed", "name": "my-instance-group-membership", "delete_instance_on_membership_delete": true, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "instance_template": {"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"}, "pool_member": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004"}, "status": "deleting"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a InstanceGroupMembershipPatch model
        instance_group_membership_patch_model = {}
        instance_group_membership_patch_model[
            'name'] = 'my-instance-group-membership'

        # Set up parameter values
        instance_group_id = 'testString'
        id = 'testString'
        instance_group_membership_patch = instance_group_membership_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "instance_group_id": instance_group_id,
            "id": id,
            "instance_group_membership_patch": instance_group_membership_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_instance_group_membership(**req_copy)


# endregion
##############################################################################
# End of Service: InstanceGroups
##############################################################################

##############################################################################
# Start of Service: Volumes
##############################################################################
# region


class TestListVolumeProfiles():
    """
    Test Class for list_volume_profiles
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_volume_profiles_all_params(self):
        """
        list_volume_profiles()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/volume/profiles')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "profiles": [{"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "family": "tiered"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1

        # Invoke method
        response = service.list_volume_profiles(start=start,
                                                limit=limit,
                                                headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string

    @responses.activate
    def test_list_volume_profiles_required_params(self):
        """
        test_list_volume_profiles_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/volume/profiles')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "profiles": [{"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "family": "tiered"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_volume_profiles()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_volume_profiles_value_error(self):
        """
        test_list_volume_profiles_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/volume/profiles')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "profiles": [{"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "family": "tiered"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_volume_profiles(**req_copy)


class TestGetVolumeProfile():
    """
    Test Class for get_volume_profile
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_volume_profile_all_params(self):
        """
        get_volume_profile()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/volume/profiles/testString')
        mock_response = '{"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "family": "tiered"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        name = 'testString'

        # Invoke method
        response = service.get_volume_profile(name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_volume_profile_value_error(self):
        """
        test_get_volume_profile_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/volume/profiles/testString')
        mock_response = '{"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "family": "tiered"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "name": name,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_volume_profile(**req_copy)


class TestListVolumes():
    """
    Test Class for list_volumes
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_volumes_all_params(self):
        """
        list_volumes()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "volumes": [{"iops": 10000, "capacity": 100, "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "profile": {"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose"}, "status": "available", "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "type": "boot"}], "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        name = 'testString'
        zone_name = 'testString'

        # Invoke method
        response = service.list_volumes(start=start,
                                        limit=limit,
                                        name=name,
                                        zone_name=zone_name,
                                        headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'name={}'.format(name) in query_string
        assert 'zone.name={}'.format(zone_name) in query_string

    @responses.activate
    def test_list_volumes_required_params(self):
        """
        test_list_volumes_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "volumes": [{"iops": 10000, "capacity": 100, "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "profile": {"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose"}, "status": "available", "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "type": "boot"}], "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_volumes()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_volumes_value_error(self):
        """
        test_list_volumes_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "volumes": [{"iops": 10000, "capacity": 100, "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "profile": {"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose"}, "status": "available", "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "type": "boot"}], "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_volumes(**req_copy)


class TestCreateVolume():
    """
    Test Class for create_volume
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_volume_all_params(self):
        """
        create_volume()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes')
        mock_response = '{"iops": 10000, "capacity": 100, "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "profile": {"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose"}, "status": "available", "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "type": "boot"}], "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VolumeProfileIdentityByName model
        volume_profile_identity_model = {}
        volume_profile_identity_model['name'] = 'general-purpose'

        # Construct a dict representation of a EncryptionKeyIdentityByCRN model
        encryption_key_identity_model = {}
        encryption_key_identity_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a VolumePrototypeVolumeByCapacity model
        volume_prototype_model = {}
        volume_prototype_model['name'] = 'my-volume'
        volume_prototype_model['profile'] = volume_profile_identity_model
        volume_prototype_model['encryption_key'] = encryption_key_identity_model
        volume_prototype_model['iops'] = 10000
        volume_prototype_model['resource_group'] = resource_group_identity_model
        volume_prototype_model['zone'] = zone_identity_model
        volume_prototype_model['capacity'] = 100

        # Set up parameter values
        volume_prototype = volume_prototype_model

        # Invoke method
        response = service.create_volume(volume_prototype, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == volume_prototype

    @responses.activate
    def test_create_volume_value_error(self):
        """
        test_create_volume_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes')
        mock_response = '{"iops": 10000, "capacity": 100, "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "profile": {"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose"}, "status": "available", "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "type": "boot"}], "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VolumeProfileIdentityByName model
        volume_profile_identity_model = {}
        volume_profile_identity_model['name'] = 'general-purpose'

        # Construct a dict representation of a EncryptionKeyIdentityByCRN model
        encryption_key_identity_model = {}
        encryption_key_identity_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a VolumePrototypeVolumeByCapacity model
        volume_prototype_model = {}
        volume_prototype_model['name'] = 'my-volume'
        volume_prototype_model['profile'] = volume_profile_identity_model
        volume_prototype_model['encryption_key'] = encryption_key_identity_model
        volume_prototype_model['iops'] = 10000
        volume_prototype_model['resource_group'] = resource_group_identity_model
        volume_prototype_model['zone'] = zone_identity_model
        volume_prototype_model['capacity'] = 100

        # Set up parameter values
        volume_prototype = volume_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "volume_prototype": volume_prototype,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_volume(**req_copy)


class TestDeleteVolume():
    """
    Test Class for delete_volume
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_volume_all_params(self):
        """
        delete_volume()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_volume(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_volume_value_error(self):
        """
        test_delete_volume_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_volume(**req_copy)


class TestGetVolume():
    """
    Test Class for get_volume
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_volume_all_params(self):
        """
        get_volume()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes/testString')
        mock_response = '{"iops": 10000, "capacity": 100, "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "profile": {"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose"}, "status": "available", "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "type": "boot"}], "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_volume(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_volume_value_error(self):
        """
        test_get_volume_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes/testString')
        mock_response = '{"iops": 10000, "capacity": 100, "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "profile": {"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose"}, "status": "available", "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "type": "boot"}], "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_volume(**req_copy)


class TestUpdateVolume():
    """
    Test Class for update_volume
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_volume_all_params(self):
        """
        update_volume()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes/testString')
        mock_response = '{"iops": 10000, "capacity": 100, "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "profile": {"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose"}, "status": "available", "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "type": "boot"}], "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VolumePatch model
        volume_patch_model = {}
        volume_patch_model['name'] = 'my-volume'

        # Set up parameter values
        id = 'testString'
        volume_patch = volume_patch_model

        # Invoke method
        response = service.update_volume(id, volume_patch, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == volume_patch

    @responses.activate
    def test_update_volume_value_error(self):
        """
        test_update_volume_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/volumes/testString')
        mock_response = '{"iops": 10000, "capacity": 100, "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "profile": {"name": "general-purpose", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose"}, "status": "available", "volume_attachments": [{"id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "instance": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "type": "boot"}], "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VolumePatch model
        volume_patch_model = {}
        volume_patch_model['name'] = 'my-volume'

        # Set up parameter values
        id = 'testString'
        volume_patch = volume_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "volume_patch": volume_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_volume(**req_copy)


# endregion
##############################################################################
# End of Service: Volumes
##############################################################################

##############################################################################
# Start of Service: Geography
##############################################################################
# region


class TestListRegions():
    """
    Test Class for list_regions
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_regions_all_params(self):
        """
        list_regions()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/regions')
        mock_response = '{"regions": [{"name": "us-south", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "endpoint": "endpoint", "status": "available"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_regions()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_regions_value_error(self):
        """
        test_list_regions_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/regions')
        mock_response = '{"regions": [{"name": "us-south", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "endpoint": "endpoint", "status": "available"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_regions(**req_copy)


class TestGetRegion():
    """
    Test Class for get_region
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_region_all_params(self):
        """
        get_region()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/regions/testString')
        mock_response = '{"name": "us-south", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "endpoint": "endpoint", "status": "available"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        name = 'testString'

        # Invoke method
        response = service.get_region(name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_region_value_error(self):
        """
        test_get_region_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/regions/testString')
        mock_response = '{"name": "us-south", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "endpoint": "endpoint", "status": "available"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "name": name,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_region(**req_copy)


class TestListRegionZones():
    """
    Test Class for list_region_zones
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_region_zones_all_params(self):
        """
        list_region_zones()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/regions/testString/zones')
        mock_response = '{"zones": [{"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "region": {"name": "us-south", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south"}, "status": "available"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        region_name = 'testString'

        # Invoke method
        response = service.list_region_zones(region_name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_region_zones_value_error(self):
        """
        test_list_region_zones_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/regions/testString/zones')
        mock_response = '{"zones": [{"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "region": {"name": "us-south", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south"}, "status": "available"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        region_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "region_name": region_name,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_region_zones(**req_copy)


class TestGetRegionZone():
    """
    Test Class for get_region_zone
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_region_zone_all_params(self):
        """
        get_region_zone()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/regions/testString/zones/testString')
        mock_response = '{"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "region": {"name": "us-south", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south"}, "status": "available"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        region_name = 'testString'
        zone_name = 'testString'

        # Invoke method
        response = service.get_region_zone(region_name, zone_name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_region_zone_value_error(self):
        """
        test_get_region_zone_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/regions/testString/zones/testString')
        mock_response = '{"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "region": {"name": "us-south", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south"}, "status": "available"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        region_name = 'testString'
        zone_name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "region_name": region_name,
            "zone_name": zone_name,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_region_zone(**req_copy)


# endregion
##############################################################################
# End of Service: Geography
##############################################################################

##############################################################################
# Start of Service: PublicGateways
##############################################################################
# region


class TestListPublicGateways():
    """
    Test Class for list_public_gateways
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_public_gateways_all_params(self):
        """
        list_public_gateways()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "public_gateways": [{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'

        # Invoke method
        response = service.list_public_gateways(
            start=start,
            limit=limit,
            resource_group_id=resource_group_id,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string

    @responses.activate
    def test_list_public_gateways_required_params(self):
        """
        test_list_public_gateways_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "public_gateways": [{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_public_gateways()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_public_gateways_value_error(self):
        """
        test_list_public_gateways_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "public_gateways": [{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_public_gateways(**req_copy)


class TestCreatePublicGateway():
    """
    Test Class for create_public_gateway
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_public_gateway_all_params(self):
        """
        create_public_gateway()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways')
        mock_response = '{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById model
        public_gateway_prototype_floating_ip_model = {}
        public_gateway_prototype_floating_ip_model[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        vpc = vpc_identity_model
        zone = zone_identity_model
        name = 'my-public-gateway'
        floating_ip = public_gateway_prototype_floating_ip_model
        resource_group = resource_group_identity_model

        # Invoke method
        response = service.create_public_gateway(vpc,
                                                 zone,
                                                 name=name,
                                                 floating_ip=floating_ip,
                                                 resource_group=resource_group,
                                                 headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['vpc'] == vpc_identity_model
        assert req_body['zone'] == zone_identity_model
        assert req_body['name'] == 'my-public-gateway'
        assert req_body[
            'floating_ip'] == public_gateway_prototype_floating_ip_model
        assert req_body['resource_group'] == resource_group_identity_model

    @responses.activate
    def test_create_public_gateway_value_error(self):
        """
        test_create_public_gateway_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways')
        mock_response = '{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById model
        public_gateway_prototype_floating_ip_model = {}
        public_gateway_prototype_floating_ip_model[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        vpc = vpc_identity_model
        zone = zone_identity_model
        name = 'my-public-gateway'
        floating_ip = public_gateway_prototype_floating_ip_model
        resource_group = resource_group_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc": vpc,
            "zone": zone,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_public_gateway(**req_copy)


class TestDeletePublicGateway():
    """
    Test Class for delete_public_gateway
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_public_gateway_all_params(self):
        """
        delete_public_gateway()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_public_gateway(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_public_gateway_value_error(self):
        """
        test_delete_public_gateway_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_public_gateway(**req_copy)


class TestGetPublicGateway():
    """
    Test Class for get_public_gateway
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_public_gateway_all_params(self):
        """
        get_public_gateway()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways/testString')
        mock_response = '{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_public_gateway(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_public_gateway_value_error(self):
        """
        test_get_public_gateway_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways/testString')
        mock_response = '{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_public_gateway(**req_copy)


class TestUpdatePublicGateway():
    """
    Test Class for update_public_gateway
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_public_gateway_all_params(self):
        """
        update_public_gateway()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways/testString')
        mock_response = '{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a PublicGatewayPatch model
        public_gateway_patch_model = {}
        public_gateway_patch_model['name'] = 'my-public-gateway'

        # Set up parameter values
        id = 'testString'
        public_gateway_patch = public_gateway_patch_model

        # Invoke method
        response = service.update_public_gateway(id,
                                                 public_gateway_patch,
                                                 headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == public_gateway_patch

    @responses.activate
    def test_update_public_gateway_value_error(self):
        """
        test_update_public_gateway_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/public_gateways/testString')
        mock_response = '{"id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "floating_ip": {"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}, "status": "available", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a PublicGatewayPatch model
        public_gateway_patch_model = {}
        public_gateway_patch_model['name'] = 'my-public-gateway'

        # Set up parameter values
        id = 'testString'
        public_gateway_patch = public_gateway_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "public_gateway_patch": public_gateway_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_public_gateway(**req_copy)


# endregion
##############################################################################
# End of Service: PublicGateways
##############################################################################

##############################################################################
# Start of Service: FloatingIPs
##############################################################################
# region


class TestListFloatingIps():
    """
    Test Class for list_floating_ips
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_floating_ips_all_params(self):
        """
        list_floating_ips()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'

        # Invoke method
        response = service.list_floating_ips(
            start=start,
            limit=limit,
            resource_group_id=resource_group_id,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string

    @responses.activate
    def test_list_floating_ips_required_params(self):
        """
        test_list_floating_ips_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_floating_ips()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_floating_ips_value_error(self):
        """
        test_list_floating_ips_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_floating_ips(**req_copy)


class TestCreateFloatingIp():
    """
    Test Class for create_floating_ip
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_floating_ip_all_params(self):
        """
        create_floating_ip()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips')
        mock_response = '{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a FloatingIPPrototypeFloatingIPByZone model
        floating_ip_prototype_model = {}
        floating_ip_prototype_model['name'] = 'my-floating-ip'
        floating_ip_prototype_model[
            'resource_group'] = resource_group_identity_model
        floating_ip_prototype_model['zone'] = zone_identity_model

        # Set up parameter values
        floating_ip_prototype = floating_ip_prototype_model

        # Invoke method
        response = service.create_floating_ip(floating_ip_prototype, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == floating_ip_prototype

    @responses.activate
    def test_create_floating_ip_value_error(self):
        """
        test_create_floating_ip_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips')
        mock_response = '{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a ZoneIdentityByName model
        zone_identity_model = {}
        zone_identity_model['name'] = 'us-south-1'

        # Construct a dict representation of a FloatingIPPrototypeFloatingIPByZone model
        floating_ip_prototype_model = {}
        floating_ip_prototype_model['name'] = 'my-floating-ip'
        floating_ip_prototype_model[
            'resource_group'] = resource_group_identity_model
        floating_ip_prototype_model['zone'] = zone_identity_model

        # Set up parameter values
        floating_ip_prototype = floating_ip_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "floating_ip_prototype": floating_ip_prototype,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_floating_ip(**req_copy)


class TestDeleteFloatingIp():
    """
    Test Class for delete_floating_ip
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_floating_ip_all_params(self):
        """
        delete_floating_ip()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_floating_ip(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_floating_ip_value_error(self):
        """
        test_delete_floating_ip_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_floating_ip(**req_copy)


class TestGetFloatingIp():
    """
    Test Class for get_floating_ip
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_floating_ip_all_params(self):
        """
        get_floating_ip()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips/testString')
        mock_response = '{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_floating_ip(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_floating_ip_value_error(self):
        """
        test_get_floating_ip_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips/testString')
        mock_response = '{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_floating_ip(**req_copy)


class TestUpdateFloatingIp():
    """
    Test Class for update_floating_ip
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_floating_ip_all_params(self):
        """
        update_floating_ip()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips/testString')
        mock_response = '{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById model
        floating_ip_patch_target_network_interface_identity_model = {}
        floating_ip_patch_target_network_interface_identity_model[
            'id'] = '69e55145-cc7d-4d8e-9e1f-cc3fb60b1793'

        # Construct a dict representation of a FloatingIPPatch model
        floating_ip_patch_model = {}
        floating_ip_patch_model['name'] = 'my-floating-ip'
        floating_ip_patch_model[
            'target'] = floating_ip_patch_target_network_interface_identity_model

        # Set up parameter values
        id = 'testString'
        floating_ip_patch = floating_ip_patch_model

        # Invoke method
        response = service.update_floating_ip(id, floating_ip_patch, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == floating_ip_patch

    @responses.activate
    def test_update_floating_ip_value_error(self):
        """
        test_update_floating_ip_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/floating_ips/testString')
        mock_response = '{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "status": "available", "target": {"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"name": "us-south-1", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById model
        floating_ip_patch_target_network_interface_identity_model = {}
        floating_ip_patch_target_network_interface_identity_model[
            'id'] = '69e55145-cc7d-4d8e-9e1f-cc3fb60b1793'

        # Construct a dict representation of a FloatingIPPatch model
        floating_ip_patch_model = {}
        floating_ip_patch_model['name'] = 'my-floating-ip'
        floating_ip_patch_model[
            'target'] = floating_ip_patch_target_network_interface_identity_model

        # Set up parameter values
        id = 'testString'
        floating_ip_patch = floating_ip_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "floating_ip_patch": floating_ip_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_floating_ip(**req_copy)


# endregion
##############################################################################
# End of Service: FloatingIPs
##############################################################################

##############################################################################
# Start of Service: NetworkACLs
##############################################################################
# region


class TestListNetworkAcls():
    """
    Test Class for list_network_acls
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_network_acls_all_params(self):
        """
        list_network_acls()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "network_acls": [{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'

        # Invoke method
        response = service.list_network_acls(
            start=start,
            limit=limit,
            resource_group_id=resource_group_id,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string

    @responses.activate
    def test_list_network_acls_required_params(self):
        """
        test_list_network_acls_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "network_acls": [{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_network_acls()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_network_acls_value_error(self):
        """
        test_list_network_acls_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "network_acls": [{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_network_acls(**req_copy)


class TestCreateNetworkAcl():
    """
    Test Class for create_network_acl
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_network_acl_all_params(self):
        """
        create_network_acl()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls')
        mock_response = '{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = 'cf7cd5a-2f30-4336-a495-6addc820cd61'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll model
        network_acl_rule_prototype_network_acl_context_model = {}
        network_acl_rule_prototype_network_acl_context_model[
            'name'] = 'my-rule-2'
        network_acl_rule_prototype_network_acl_context_model['action'] = 'allow'
        network_acl_rule_prototype_network_acl_context_model[
            'destination'] = '192.168.3.2/32'
        network_acl_rule_prototype_network_acl_context_model[
            'direction'] = 'inbound'
        network_acl_rule_prototype_network_acl_context_model[
            'source'] = '192.168.3.2/32'
        network_acl_rule_prototype_network_acl_context_model['protocol'] = 'all'

        # Construct a dict representation of a NetworkACLPrototypeNetworkACLByRules model
        network_acl_prototype_model = {}
        network_acl_prototype_model['name'] = 'my-network-acl'
        network_acl_prototype_model['vpc'] = vpc_identity_model
        network_acl_prototype_model[
            'resource_group'] = resource_group_identity_model
        network_acl_prototype_model['rules'] = [
            network_acl_rule_prototype_network_acl_context_model
        ]

        # Set up parameter values
        network_acl_prototype = network_acl_prototype_model

        # Invoke method
        response = service.create_network_acl(
            network_acl_prototype=network_acl_prototype, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == network_acl_prototype

    @responses.activate
    def test_create_network_acl_required_params(self):
        """
        test_create_network_acl_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls')
        mock_response = '{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Invoke method
        response = service.create_network_acl()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201

    @responses.activate
    def test_create_network_acl_value_error(self):
        """
        test_create_network_acl_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls')
        mock_response = '{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_network_acl(**req_copy)


class TestDeleteNetworkAcl():
    """
    Test Class for delete_network_acl
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_network_acl_all_params(self):
        """
        delete_network_acl()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_network_acl(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_network_acl_value_error(self):
        """
        test_delete_network_acl_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_network_acl(**req_copy)


class TestGetNetworkAcl():
    """
    Test Class for get_network_acl
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_network_acl_all_params(self):
        """
        get_network_acl()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString')
        mock_response = '{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_network_acl(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_network_acl_value_error(self):
        """
        test_get_network_acl_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString')
        mock_response = '{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_network_acl(**req_copy)


class TestUpdateNetworkAcl():
    """
    Test Class for update_network_acl
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_network_acl_all_params(self):
        """
        update_network_acl()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString')
        mock_response = '{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a NetworkACLPatch model
        network_acl_patch_model = {}
        network_acl_patch_model['name'] = 'my-network-acl'

        # Set up parameter values
        id = 'testString'
        network_acl_patch = network_acl_patch_model

        # Invoke method
        response = service.update_network_acl(id, network_acl_patch, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == network_acl_patch

    @responses.activate
    def test_update_network_acl_value_error(self):
        """
        test_update_network_acl_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString')
        mock_response = '{"id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a NetworkACLPatch model
        network_acl_patch_model = {}
        network_acl_patch_model['name'] = 'my-network-acl'

        # Set up parameter values
        id = 'testString'
        network_acl_patch = network_acl_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "network_acl_patch": network_acl_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_network_acl(**req_copy)


class TestListNetworkAclRules():
    """
    Test Class for list_network_acl_rules
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_network_acl_rules_all_params(self):
        """
        list_network_acl_rules()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString/rules')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        network_acl_id = 'testString'
        start = 'testString'
        limit = 1
        direction = 'inbound'

        # Invoke method
        response = service.list_network_acl_rules(network_acl_id,
                                                  start=start,
                                                  limit=limit,
                                                  direction=direction,
                                                  headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'direction={}'.format(direction) in query_string

    @responses.activate
    def test_list_network_acl_rules_required_params(self):
        """
        test_list_network_acl_rules_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString/rules')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        network_acl_id = 'testString'

        # Invoke method
        response = service.list_network_acl_rules(network_acl_id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_network_acl_rules_value_error(self):
        """
        test_list_network_acl_rules_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString/rules')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "rules": [{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "udp", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4", "destination_port_max": 22, "destination_port_min": 22, "source_port_max": 65535, "source_port_min": 49152}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        network_acl_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "network_acl_id": network_acl_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_network_acl_rules(**req_copy)


class TestCreateNetworkAclRule():
    """
    Test Class for create_network_acl_rule
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_network_acl_rule_all_params(self):
        """
        create_network_acl_rule()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString/rules')
        mock_response = '{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "all", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a NetworkACLRuleIdentityById model
        network_acl_rule_identity_model = {}
        network_acl_rule_identity_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'

        # Construct a dict representation of a NetworkACLRulePrototypeNetworkACLRuleProtocolICMP model
        network_acl_rule_prototype_model = {}
        network_acl_rule_prototype_model['name'] = 'my-rule-2'
        network_acl_rule_prototype_model['action'] = 'allow'
        network_acl_rule_prototype_model['destination'] = '192.168.3.2/32'
        network_acl_rule_prototype_model['direction'] = 'inbound'
        network_acl_rule_prototype_model['source'] = '192.168.3.2/32'
        network_acl_rule_prototype_model['protocol'] = 'icmp'
        network_acl_rule_prototype_model[
            'before'] = network_acl_rule_identity_model
        network_acl_rule_prototype_model['code'] = 0
        network_acl_rule_prototype_model['type'] = 8

        # Set up parameter values
        network_acl_id = 'testString'
        network_acl_rule_prototype = network_acl_rule_prototype_model

        # Invoke method
        response = service.create_network_acl_rule(network_acl_id,
                                                   network_acl_rule_prototype,
                                                   headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == network_acl_rule_prototype

    @responses.activate
    def test_create_network_acl_rule_value_error(self):
        """
        test_create_network_acl_rule_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/network_acls/testString/rules')
        mock_response = '{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "all", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a NetworkACLRuleIdentityById model
        network_acl_rule_identity_model = {}
        network_acl_rule_identity_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'

        # Construct a dict representation of a NetworkACLRulePrototypeNetworkACLRuleProtocolICMP model
        network_acl_rule_prototype_model = {}
        network_acl_rule_prototype_model['name'] = 'my-rule-2'
        network_acl_rule_prototype_model['action'] = 'allow'
        network_acl_rule_prototype_model['destination'] = '192.168.3.2/32'
        network_acl_rule_prototype_model['direction'] = 'inbound'
        network_acl_rule_prototype_model['source'] = '192.168.3.2/32'
        network_acl_rule_prototype_model['protocol'] = 'icmp'
        network_acl_rule_prototype_model[
            'before'] = network_acl_rule_identity_model
        network_acl_rule_prototype_model['code'] = 0
        network_acl_rule_prototype_model['type'] = 8

        # Set up parameter values
        network_acl_id = 'testString'
        network_acl_rule_prototype = network_acl_rule_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "network_acl_id": network_acl_id,
            "network_acl_rule_prototype": network_acl_rule_prototype,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_network_acl_rule(**req_copy)


class TestDeleteNetworkAclRule():
    """
    Test Class for delete_network_acl_rule
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_network_acl_rule_all_params(self):
        """
        delete_network_acl_rule()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/network_acls/testString/rules/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        network_acl_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_network_acl_rule(network_acl_id,
                                                   id,
                                                   headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_network_acl_rule_value_error(self):
        """
        test_delete_network_acl_rule_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/network_acls/testString/rules/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        network_acl_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "network_acl_id": network_acl_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_network_acl_rule(**req_copy)


class TestGetNetworkAclRule():
    """
    Test Class for get_network_acl_rule
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_network_acl_rule_all_params(self):
        """
        get_network_acl_rule()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/network_acls/testString/rules/testString')
        mock_response = '{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "all", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        network_acl_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_network_acl_rule(network_acl_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_network_acl_rule_value_error(self):
        """
        test_get_network_acl_rule_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/network_acls/testString/rules/testString')
        mock_response = '{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "all", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        network_acl_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "network_acl_id": network_acl_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_network_acl_rule(**req_copy)


class TestUpdateNetworkAclRule():
    """
    Test Class for update_network_acl_rule
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_network_acl_rule_all_params(self):
        """
        update_network_acl_rule()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/network_acls/testString/rules/testString')
        mock_response = '{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "all", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a NetworkACLRuleIdentityById model
        network_acl_rule_identity_model = {}
        network_acl_rule_identity_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'

        # Construct a dict representation of a NetworkACLRulePatch model
        network_acl_rule_patch_model = {}
        network_acl_rule_patch_model['name'] = 'my-rule-2'
        network_acl_rule_patch_model['action'] = 'allow'
        network_acl_rule_patch_model['destination'] = '192.168.3.2/32'
        network_acl_rule_patch_model['direction'] = 'inbound'
        network_acl_rule_patch_model['source'] = '192.168.3.2/32'
        network_acl_rule_patch_model['destination_port_max'] = 22
        network_acl_rule_patch_model['destination_port_min'] = 22
        network_acl_rule_patch_model['source_port_max'] = 65535
        network_acl_rule_patch_model['source_port_min'] = 49152
        network_acl_rule_patch_model['code'] = 0
        network_acl_rule_patch_model['type'] = 8
        network_acl_rule_patch_model['before'] = network_acl_rule_identity_model

        # Set up parameter values
        network_acl_id = 'testString'
        id = 'testString'
        network_acl_rule_patch = network_acl_rule_patch_model

        # Invoke method
        response = service.update_network_acl_rule(network_acl_id,
                                                   id,
                                                   network_acl_rule_patch,
                                                   headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == network_acl_rule_patch

    @responses.activate
    def test_update_network_acl_rule_value_error(self):
        """
        test_update_network_acl_rule_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/network_acls/testString/rules/testString')
        mock_response = '{"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-2", "action": "allow", "destination": "192.168.3.0/24", "direction": "inbound", "source": "192.168.3.0/24", "protocol": "all", "before": {"id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "ip_version": "ipv4"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a NetworkACLRuleIdentityById model
        network_acl_rule_identity_model = {}
        network_acl_rule_identity_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'

        # Construct a dict representation of a NetworkACLRulePatch model
        network_acl_rule_patch_model = {}
        network_acl_rule_patch_model['name'] = 'my-rule-2'
        network_acl_rule_patch_model['action'] = 'allow'
        network_acl_rule_patch_model['destination'] = '192.168.3.2/32'
        network_acl_rule_patch_model['direction'] = 'inbound'
        network_acl_rule_patch_model['source'] = '192.168.3.2/32'
        network_acl_rule_patch_model['destination_port_max'] = 22
        network_acl_rule_patch_model['destination_port_min'] = 22
        network_acl_rule_patch_model['source_port_max'] = 65535
        network_acl_rule_patch_model['source_port_min'] = 49152
        network_acl_rule_patch_model['code'] = 0
        network_acl_rule_patch_model['type'] = 8
        network_acl_rule_patch_model['before'] = network_acl_rule_identity_model

        # Set up parameter values
        network_acl_id = 'testString'
        id = 'testString'
        network_acl_rule_patch = network_acl_rule_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "network_acl_id": network_acl_id,
            "id": id,
            "network_acl_rule_patch": network_acl_rule_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_network_acl_rule(**req_copy)


# endregion
##############################################################################
# End of Service: NetworkACLs
##############################################################################

##############################################################################
# Start of Service: SecurityGroups
##############################################################################
# region


class TestListSecurityGroups():
    """
    Test Class for list_security_groups
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_security_groups_all_params(self):
        """
        list_security_groups()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'
        vpc_id = 'testString'
        vpc_crn = 'testString'
        vpc_name = 'testString'

        # Invoke method
        response = service.list_security_groups(
            start=start,
            limit=limit,
            resource_group_id=resource_group_id,
            vpc_id=vpc_id,
            vpc_crn=vpc_crn,
            vpc_name=vpc_name,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string
        assert 'vpc.id={}'.format(vpc_id) in query_string
        assert 'vpc.crn={}'.format(vpc_crn) in query_string
        assert 'vpc.name={}'.format(vpc_name) in query_string

    @responses.activate
    def test_list_security_groups_required_params(self):
        """
        test_list_security_groups_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_security_groups()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_security_groups_value_error(self):
        """
        test_list_security_groups_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_security_groups(**req_copy)


class TestCreateSecurityGroup():
    """
    Test Class for create_security_group
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_security_group_all_params(self):
        """
        create_security_group()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups')
        mock_response = '{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a SecurityGroupRulePrototypeRemoteIP model
        security_group_rule_prototype_remote_model = {}
        security_group_rule_prototype_remote_model['address'] = '192.168.3.4'

        # Construct a dict representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP model
        security_group_rule_prototype_model = {}
        security_group_rule_prototype_model['direction'] = 'inbound'
        security_group_rule_prototype_model['ip_version'] = 'ipv4'
        security_group_rule_prototype_model['protocol'] = 'icmp'
        security_group_rule_prototype_model[
            'remote'] = security_group_rule_prototype_remote_model
        security_group_rule_prototype_model['code'] = 0
        security_group_rule_prototype_model['type'] = 8

        # Set up parameter values
        vpc = vpc_identity_model
        name = 'my-security-group'
        resource_group = resource_group_identity_model
        rules = [security_group_rule_prototype_model]

        # Invoke method
        response = service.create_security_group(vpc,
                                                 name=name,
                                                 resource_group=resource_group,
                                                 rules=rules,
                                                 headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['vpc'] == vpc_identity_model
        assert req_body['name'] == 'my-security-group'
        assert req_body['resource_group'] == resource_group_identity_model
        assert req_body['rules'] == [security_group_rule_prototype_model]

    @responses.activate
    def test_create_security_group_value_error(self):
        """
        test_create_security_group_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups')
        mock_response = '{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VPCIdentityById model
        vpc_identity_model = {}
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a dict representation of a SecurityGroupRulePrototypeRemoteIP model
        security_group_rule_prototype_remote_model = {}
        security_group_rule_prototype_remote_model['address'] = '192.168.3.4'

        # Construct a dict representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP model
        security_group_rule_prototype_model = {}
        security_group_rule_prototype_model['direction'] = 'inbound'
        security_group_rule_prototype_model['ip_version'] = 'ipv4'
        security_group_rule_prototype_model['protocol'] = 'icmp'
        security_group_rule_prototype_model[
            'remote'] = security_group_rule_prototype_remote_model
        security_group_rule_prototype_model['code'] = 0
        security_group_rule_prototype_model['type'] = 8

        # Set up parameter values
        vpc = vpc_identity_model
        name = 'my-security-group'
        resource_group = resource_group_identity_model
        rules = [security_group_rule_prototype_model]

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpc": vpc,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_security_group(**req_copy)


class TestDeleteSecurityGroup():
    """
    Test Class for delete_security_group
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_security_group_all_params(self):
        """
        delete_security_group()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_security_group(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_security_group_value_error(self):
        """
        test_delete_security_group_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_security_group(**req_copy)


class TestGetSecurityGroup():
    """
    Test Class for get_security_group
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_security_group_all_params(self):
        """
        get_security_group()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups/testString')
        mock_response = '{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_security_group(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_security_group_value_error(self):
        """
        test_get_security_group_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups/testString')
        mock_response = '{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_security_group(**req_copy)


class TestUpdateSecurityGroup():
    """
    Test Class for update_security_group
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_security_group_all_params(self):
        """
        update_security_group()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups/testString')
        mock_response = '{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a SecurityGroupPatch model
        security_group_patch_model = {}
        security_group_patch_model['name'] = 'my-security-group'

        # Set up parameter values
        id = 'testString'
        security_group_patch = security_group_patch_model

        # Invoke method
        response = service.update_security_group(id,
                                                 security_group_patch,
                                                 headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == security_group_patch

    @responses.activate
    def test_update_security_group_value_error(self):
        """
        test_update_security_group_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/security_groups/testString')
        mock_response = '{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "created_at": "2019-01-01T12:00:00", "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a SecurityGroupPatch model
        security_group_patch_model = {}
        security_group_patch_model['name'] = 'my-security-group'

        # Set up parameter values
        id = 'testString'
        security_group_patch = security_group_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "security_group_patch": security_group_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_security_group(**req_copy)


class TestListSecurityGroupNetworkInterfaces():
    """
    Test Class for list_security_group_network_interfaces
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_security_group_network_interfaces_all_params(self):
        """
        list_security_group_network_interfaces()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/security_groups/testString/network_interfaces')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/3b2669a2-4c2b-4003-bc91-1b81f1326267/network_interfaces?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/3b2669a2-4c2b-4003-bc91-1b81f1326267/network_interfaces?start=d3e721fd-c988-4670-9927-dbd5e7b07fc6&limit=20"}, "total_count": 132, "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        security_group_id = 'testString'
        start = 'testString'
        limit = 1

        # Invoke method
        response = service.list_security_group_network_interfaces(
            security_group_id, start=start, limit=limit, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string

    @responses.activate
    def test_list_security_group_network_interfaces_required_params(self):
        """
        test_list_security_group_network_interfaces_required_params()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/security_groups/testString/network_interfaces')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/3b2669a2-4c2b-4003-bc91-1b81f1326267/network_interfaces?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/3b2669a2-4c2b-4003-bc91-1b81f1326267/network_interfaces?start=d3e721fd-c988-4670-9927-dbd5e7b07fc6&limit=20"}, "total_count": 132, "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        security_group_id = 'testString'

        # Invoke method
        response = service.list_security_group_network_interfaces(
            security_group_id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_security_group_network_interfaces_value_error(self):
        """
        test_list_security_group_network_interfaces_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/security_groups/testString/network_interfaces')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/3b2669a2-4c2b-4003-bc91-1b81f1326267/network_interfaces?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/3b2669a2-4c2b-4003-bc91-1b81f1326267/network_interfaces?start=d3e721fd-c988-4670-9927-dbd5e7b07fc6&limit=20"}, "total_count": 132, "network_interfaces": [{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        security_group_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "security_group_id": security_group_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_security_group_network_interfaces(**req_copy)


class TestRemoveSecurityGroupNetworkInterface():
    """
    Test Class for remove_security_group_network_interface
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_remove_security_group_network_interface_all_params(self):
        """
        remove_security_group_network_interface()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/security_groups/testString/network_interfaces/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.remove_security_group_network_interface(
            security_group_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_remove_security_group_network_interface_value_error(self):
        """
        test_remove_security_group_network_interface_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/security_groups/testString/network_interfaces/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "security_group_id": security_group_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.remove_security_group_network_interface(**req_copy)


class TestGetSecurityGroupNetworkInterface():
    """
    Test Class for get_security_group_network_interface
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_security_group_network_interface_all_params(self):
        """
        get_security_group_network_interface()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/security_groups/testString/network_interfaces/testString')
        mock_response = '{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_security_group_network_interface(
            security_group_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_security_group_network_interface_value_error(self):
        """
        test_get_security_group_network_interface_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/security_groups/testString/network_interfaces/testString')
        mock_response = '{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "security_group_id": security_group_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_security_group_network_interface(**req_copy)


class TestAddSecurityGroupNetworkInterface():
    """
    Test Class for add_security_group_network_interface
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_add_security_group_network_interface_all_params(self):
        """
        add_security_group_network_interface()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/security_groups/testString/network_interfaces/testString')
        mock_response = '{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.add_security_group_network_interface(
            security_group_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201

    @responses.activate
    def test_add_security_group_network_interface_value_error(self):
        """
        test_add_security_group_network_interface_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/security_groups/testString/network_interfaces/testString')
        mock_response = '{"name": "my-network-interface", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "created_at": "2019-01-01T12:00:00", "floating_ips": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "address": "203.0.113.1", "name": "my-floating-ip"}], "port_speed": 1000, "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "security_group_id": security_group_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.add_security_group_network_interface(**req_copy)


class TestListSecurityGroupRules():
    """
    Test Class for list_security_group_rules
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_security_group_rules_all_params(self):
        """
        list_security_group_rules()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/security_groups/testString/rules')
        mock_response = '{"rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        security_group_id = 'testString'

        # Invoke method
        response = service.list_security_group_rules(security_group_id,
                                                     headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_security_group_rules_value_error(self):
        """
        test_list_security_group_rules_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/security_groups/testString/rules')
        mock_response = '{"rules": [{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        security_group_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "security_group_id": security_group_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_security_group_rules(**req_copy)


class TestCreateSecurityGroupRule():
    """
    Test Class for create_security_group_rule
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_security_group_rule_all_params(self):
        """
        create_security_group_rule()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/security_groups/testString/rules')
        mock_response = '{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a SecurityGroupRulePrototypeRemoteIP model
        security_group_rule_prototype_remote_model = {}
        security_group_rule_prototype_remote_model['address'] = '192.168.3.4'

        # Construct a dict representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP model
        security_group_rule_prototype_model = {}
        security_group_rule_prototype_model['direction'] = 'inbound'
        security_group_rule_prototype_model['ip_version'] = 'ipv4'
        security_group_rule_prototype_model['protocol'] = 'icmp'
        security_group_rule_prototype_model[
            'remote'] = security_group_rule_prototype_remote_model
        security_group_rule_prototype_model['code'] = 0
        security_group_rule_prototype_model['type'] = 8

        # Set up parameter values
        security_group_id = 'testString'
        security_group_rule_prototype = security_group_rule_prototype_model

        # Invoke method
        response = service.create_security_group_rule(
            security_group_id, security_group_rule_prototype, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == security_group_rule_prototype

    @responses.activate
    def test_create_security_group_rule_value_error(self):
        """
        test_create_security_group_rule_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/security_groups/testString/rules')
        mock_response = '{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a SecurityGroupRulePrototypeRemoteIP model
        security_group_rule_prototype_remote_model = {}
        security_group_rule_prototype_remote_model['address'] = '192.168.3.4'

        # Construct a dict representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP model
        security_group_rule_prototype_model = {}
        security_group_rule_prototype_model['direction'] = 'inbound'
        security_group_rule_prototype_model['ip_version'] = 'ipv4'
        security_group_rule_prototype_model['protocol'] = 'icmp'
        security_group_rule_prototype_model[
            'remote'] = security_group_rule_prototype_remote_model
        security_group_rule_prototype_model['code'] = 0
        security_group_rule_prototype_model['type'] = 8

        # Set up parameter values
        security_group_id = 'testString'
        security_group_rule_prototype = security_group_rule_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "security_group_id": security_group_id,
            "security_group_rule_prototype": security_group_rule_prototype,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_security_group_rule(**req_copy)


class TestDeleteSecurityGroupRule():
    """
    Test Class for delete_security_group_rule
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_security_group_rule_all_params(self):
        """
        delete_security_group_rule()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/security_groups/testString/rules/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_security_group_rule(security_group_id,
                                                      id,
                                                      headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_security_group_rule_value_error(self):
        """
        test_delete_security_group_rule_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/security_groups/testString/rules/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "security_group_id": security_group_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_security_group_rule(**req_copy)


class TestGetSecurityGroupRule():
    """
    Test Class for get_security_group_rule
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_security_group_rule_all_params(self):
        """
        get_security_group_rule()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/security_groups/testString/rules/testString')
        mock_response = '{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_security_group_rule(security_group_id,
                                                   id,
                                                   headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_security_group_rule_value_error(self):
        """
        test_get_security_group_rule_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/security_groups/testString/rules/testString')
        mock_response = '{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "security_group_id": security_group_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_security_group_rule(**req_copy)


class TestUpdateSecurityGroupRule():
    """
    Test Class for update_security_group_rule
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_security_group_rule_all_params(self):
        """
        update_security_group_rule()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/security_groups/testString/rules/testString')
        mock_response = '{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a SecurityGroupRulePatchRemoteIP model
        security_group_rule_patch_remote_model = {}
        security_group_rule_patch_remote_model['address'] = '192.168.3.4'

        # Construct a dict representation of a SecurityGroupRulePatch model
        security_group_rule_patch_model = {}
        security_group_rule_patch_model[
            'remote'] = security_group_rule_patch_remote_model
        security_group_rule_patch_model['direction'] = 'inbound'
        security_group_rule_patch_model['ip_version'] = 'ipv4'
        security_group_rule_patch_model['code'] = 0
        security_group_rule_patch_model['port_max'] = 22
        security_group_rule_patch_model['port_min'] = 22
        security_group_rule_patch_model['type'] = 8

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'
        security_group_rule_patch = security_group_rule_patch_model

        # Invoke method
        response = service.update_security_group_rule(security_group_id,
                                                      id,
                                                      security_group_rule_patch,
                                                      headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == security_group_rule_patch

    @responses.activate
    def test_update_security_group_rule_value_error(self):
        """
        test_update_security_group_rule_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/security_groups/testString/rules/testString')
        mock_response = '{"id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "direction": "inbound", "ip_version": "ipv4", "protocol": "udp", "remote": {"address": "192.168.3.4"}, "port_max": 22, "port_min": 22}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a SecurityGroupRulePatchRemoteIP model
        security_group_rule_patch_remote_model = {}
        security_group_rule_patch_remote_model['address'] = '192.168.3.4'

        # Construct a dict representation of a SecurityGroupRulePatch model
        security_group_rule_patch_model = {}
        security_group_rule_patch_model[
            'remote'] = security_group_rule_patch_remote_model
        security_group_rule_patch_model['direction'] = 'inbound'
        security_group_rule_patch_model['ip_version'] = 'ipv4'
        security_group_rule_patch_model['code'] = 0
        security_group_rule_patch_model['port_max'] = 22
        security_group_rule_patch_model['port_min'] = 22
        security_group_rule_patch_model['type'] = 8

        # Set up parameter values
        security_group_id = 'testString'
        id = 'testString'
        security_group_rule_patch = security_group_rule_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "security_group_id": security_group_id,
            "id": id,
            "security_group_rule_patch": security_group_rule_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_security_group_rule(**req_copy)


# endregion
##############################################################################
# End of Service: SecurityGroups
##############################################################################

##############################################################################
# Start of Service: VPNGateways
##############################################################################
# region


class TestListIkePolicies():
    """
    Test Class for list_ike_policies
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_ike_policies_all_params(self):
        """
        list_ike_policies()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132, "ike_policies": [{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy", "authentication_algorithm": "md5", "dh_group": 2, "encryption_algorithm": "triple_des", "ike_version": 1, "key_lifetime": 28800, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "negotiation_mode": "main"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1

        # Invoke method
        response = service.list_ike_policies(start=start,
                                             limit=limit,
                                             headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string

    @responses.activate
    def test_list_ike_policies_required_params(self):
        """
        test_list_ike_policies_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132, "ike_policies": [{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy", "authentication_algorithm": "md5", "dh_group": 2, "encryption_algorithm": "triple_des", "ike_version": 1, "key_lifetime": 28800, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "negotiation_mode": "main"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_ike_policies()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_ike_policies_value_error(self):
        """
        test_list_ike_policies_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132, "ike_policies": [{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy", "authentication_algorithm": "md5", "dh_group": 2, "encryption_algorithm": "triple_des", "ike_version": 1, "key_lifetime": 28800, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "negotiation_mode": "main"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_ike_policies(**req_copy)


class TestCreateIkePolicy():
    """
    Test Class for create_ike_policy
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_ike_policy_all_params(self):
        """
        create_ike_policy()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies')
        mock_response = '{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy", "authentication_algorithm": "md5", "dh_group": 2, "encryption_algorithm": "triple_des", "ike_version": 1, "key_lifetime": 28800, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "negotiation_mode": "main"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        authentication_algorithm = 'md5'
        dh_group = 2
        encryption_algorithm = 'triple_des'
        ike_version = 1
        name = 'my-ike-policy'
        key_lifetime = 28800
        resource_group = resource_group_identity_model

        # Invoke method
        response = service.create_ike_policy(authentication_algorithm,
                                             dh_group,
                                             encryption_algorithm,
                                             ike_version,
                                             name=name,
                                             key_lifetime=key_lifetime,
                                             resource_group=resource_group,
                                             headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['authentication_algorithm'] == 'md5'
        assert req_body['dh_group'] == 2
        assert req_body['encryption_algorithm'] == 'triple_des'
        assert req_body['ike_version'] == 1
        assert req_body['name'] == 'my-ike-policy'
        assert req_body['key_lifetime'] == 28800
        assert req_body['resource_group'] == resource_group_identity_model

    @responses.activate
    def test_create_ike_policy_value_error(self):
        """
        test_create_ike_policy_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies')
        mock_response = '{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy", "authentication_algorithm": "md5", "dh_group": 2, "encryption_algorithm": "triple_des", "ike_version": 1, "key_lifetime": 28800, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "negotiation_mode": "main"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        authentication_algorithm = 'md5'
        dh_group = 2
        encryption_algorithm = 'triple_des'
        ike_version = 1
        name = 'my-ike-policy'
        key_lifetime = 28800
        resource_group = resource_group_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "authentication_algorithm": authentication_algorithm,
            "dh_group": dh_group,
            "encryption_algorithm": encryption_algorithm,
            "ike_version": ike_version,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_ike_policy(**req_copy)


class TestDeleteIkePolicy():
    """
    Test Class for delete_ike_policy
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_ike_policy_all_params(self):
        """
        delete_ike_policy()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_ike_policy(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_ike_policy_value_error(self):
        """
        test_delete_ike_policy_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_ike_policy(**req_copy)


class TestGetIkePolicy():
    """
    Test Class for get_ike_policy
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_ike_policy_all_params(self):
        """
        get_ike_policy()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies/testString')
        mock_response = '{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy", "authentication_algorithm": "md5", "dh_group": 2, "encryption_algorithm": "triple_des", "ike_version": 1, "key_lifetime": 28800, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "negotiation_mode": "main"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_ike_policy(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_ike_policy_value_error(self):
        """
        test_get_ike_policy_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies/testString')
        mock_response = '{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy", "authentication_algorithm": "md5", "dh_group": 2, "encryption_algorithm": "triple_des", "ike_version": 1, "key_lifetime": 28800, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "negotiation_mode": "main"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_ike_policy(**req_copy)


class TestUpdateIkePolicy():
    """
    Test Class for update_ike_policy
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_ike_policy_all_params(self):
        """
        update_ike_policy()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies/testString')
        mock_response = '{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy", "authentication_algorithm": "md5", "dh_group": 2, "encryption_algorithm": "triple_des", "ike_version": 1, "key_lifetime": 28800, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "negotiation_mode": "main"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a IKEPolicyPatch model
        ike_policy_patch_model = {}
        ike_policy_patch_model['name'] = 'my-ike-policy'
        ike_policy_patch_model['authentication_algorithm'] = 'md5'
        ike_policy_patch_model['dh_group'] = 2
        ike_policy_patch_model['encryption_algorithm'] = 'triple_des'
        ike_policy_patch_model['ike_version'] = 1
        ike_policy_patch_model['key_lifetime'] = 28800

        # Set up parameter values
        id = 'testString'
        ike_policy_patch = ike_policy_patch_model

        # Invoke method
        response = service.update_ike_policy(id, ike_policy_patch, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == ike_policy_patch

    @responses.activate
    def test_update_ike_policy_value_error(self):
        """
        test_update_ike_policy_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ike_policies/testString')
        mock_response = '{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy", "authentication_algorithm": "md5", "dh_group": 2, "encryption_algorithm": "triple_des", "ike_version": 1, "key_lifetime": 28800, "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "negotiation_mode": "main"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a IKEPolicyPatch model
        ike_policy_patch_model = {}
        ike_policy_patch_model['name'] = 'my-ike-policy'
        ike_policy_patch_model['authentication_algorithm'] = 'md5'
        ike_policy_patch_model['dh_group'] = 2
        ike_policy_patch_model['encryption_algorithm'] = 'triple_des'
        ike_policy_patch_model['ike_version'] = 1
        ike_policy_patch_model['key_lifetime'] = 28800

        # Set up parameter values
        id = 'testString'
        ike_policy_patch = ike_policy_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "ike_policy_patch": ike_policy_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_ike_policy(**req_copy)


class TestListIkePolicyConnections():
    """
    Test Class for list_ike_policy_connections
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_ike_policy_connections_all_params(self):
        """
        list_ike_policy_connections()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/ike_policies/testString/connections')
        mock_response = '{"connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection", "admin_state_up": true, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "route_mode": "policy", "authentication_mode": "psk", "status": "down", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.list_ike_policy_connections(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_ike_policy_connections_value_error(self):
        """
        test_list_ike_policy_connections_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/ike_policies/testString/connections')
        mock_response = '{"connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection", "admin_state_up": true, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "route_mode": "policy", "authentication_mode": "psk", "status": "down", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_ike_policy_connections(**req_copy)


class TestListIpsecPolicies():
    """
    Test Class for list_ipsec_policies
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_ipsec_policies_all_params(self):
        """
        list_ipsec_policies()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132, "ipsec_policies": [{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy", "authentication_algorithm": "md5", "encryption_algorithm": "triple_des", "key_lifetime": 3600, "pfs": "disabled", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "transform_protocol": "esp"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1

        # Invoke method
        response = service.list_ipsec_policies(start=start,
                                               limit=limit,
                                               headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string

    @responses.activate
    def test_list_ipsec_policies_required_params(self):
        """
        test_list_ipsec_policies_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132, "ipsec_policies": [{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy", "authentication_algorithm": "md5", "encryption_algorithm": "triple_des", "key_lifetime": 3600, "pfs": "disabled", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "transform_protocol": "esp"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_ipsec_policies()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_ipsec_policies_value_error(self):
        """
        test_list_ipsec_policies_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132, "ipsec_policies": [{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy", "authentication_algorithm": "md5", "encryption_algorithm": "triple_des", "key_lifetime": 3600, "pfs": "disabled", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "transform_protocol": "esp"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_ipsec_policies(**req_copy)


class TestCreateIpsecPolicy():
    """
    Test Class for create_ipsec_policy
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_ipsec_policy_all_params(self):
        """
        create_ipsec_policy()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies')
        mock_response = '{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy", "authentication_algorithm": "md5", "encryption_algorithm": "triple_des", "key_lifetime": 3600, "pfs": "disabled", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "transform_protocol": "esp"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        authentication_algorithm = 'md5'
        encryption_algorithm = 'triple_des'
        pfs = 'disabled'
        name = 'my-ipsec-policy'
        key_lifetime = 3600
        resource_group = resource_group_identity_model

        # Invoke method
        response = service.create_ipsec_policy(authentication_algorithm,
                                               encryption_algorithm,
                                               pfs,
                                               name=name,
                                               key_lifetime=key_lifetime,
                                               resource_group=resource_group,
                                               headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['authentication_algorithm'] == 'md5'
        assert req_body['encryption_algorithm'] == 'triple_des'
        assert req_body['pfs'] == 'disabled'
        assert req_body['name'] == 'my-ipsec-policy'
        assert req_body['key_lifetime'] == 3600
        assert req_body['resource_group'] == resource_group_identity_model

    @responses.activate
    def test_create_ipsec_policy_value_error(self):
        """
        test_create_ipsec_policy_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies')
        mock_response = '{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy", "authentication_algorithm": "md5", "encryption_algorithm": "triple_des", "key_lifetime": 3600, "pfs": "disabled", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "transform_protocol": "esp"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        authentication_algorithm = 'md5'
        encryption_algorithm = 'triple_des'
        pfs = 'disabled'
        name = 'my-ipsec-policy'
        key_lifetime = 3600
        resource_group = resource_group_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "authentication_algorithm": authentication_algorithm,
            "encryption_algorithm": encryption_algorithm,
            "pfs": pfs,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_ipsec_policy(**req_copy)


class TestDeleteIpsecPolicy():
    """
    Test Class for delete_ipsec_policy
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_ipsec_policy_all_params(self):
        """
        delete_ipsec_policy()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_ipsec_policy(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_ipsec_policy_value_error(self):
        """
        test_delete_ipsec_policy_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_ipsec_policy(**req_copy)


class TestGetIpsecPolicy():
    """
    Test Class for get_ipsec_policy
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_ipsec_policy_all_params(self):
        """
        get_ipsec_policy()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies/testString')
        mock_response = '{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy", "authentication_algorithm": "md5", "encryption_algorithm": "triple_des", "key_lifetime": 3600, "pfs": "disabled", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "transform_protocol": "esp"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_ipsec_policy(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_ipsec_policy_value_error(self):
        """
        test_get_ipsec_policy_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies/testString')
        mock_response = '{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy", "authentication_algorithm": "md5", "encryption_algorithm": "triple_des", "key_lifetime": 3600, "pfs": "disabled", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "transform_protocol": "esp"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_ipsec_policy(**req_copy)


class TestUpdateIpsecPolicy():
    """
    Test Class for update_ipsec_policy
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_ipsec_policy_all_params(self):
        """
        update_ipsec_policy()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies/testString')
        mock_response = '{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy", "authentication_algorithm": "md5", "encryption_algorithm": "triple_des", "key_lifetime": 3600, "pfs": "disabled", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "transform_protocol": "esp"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a IPsecPolicyPatch model
        i_psec_policy_patch_model = {}
        i_psec_policy_patch_model['name'] = 'my-ipsec-policy'
        i_psec_policy_patch_model['authentication_algorithm'] = 'md5'
        i_psec_policy_patch_model['encryption_algorithm'] = 'triple_des'
        i_psec_policy_patch_model['key_lifetime'] = 3600
        i_psec_policy_patch_model['pfs'] = 'disabled'

        # Set up parameter values
        id = 'testString'
        i_psec_policy_patch = i_psec_policy_patch_model

        # Invoke method
        response = service.update_ipsec_policy(id,
                                               i_psec_policy_patch,
                                               headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == i_psec_policy_patch

    @responses.activate
    def test_update_ipsec_policy_value_error(self):
        """
        test_update_ipsec_policy_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/ipsec_policies/testString')
        mock_response = '{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy", "authentication_algorithm": "md5", "encryption_algorithm": "triple_des", "key_lifetime": 3600, "pfs": "disabled", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "transform_protocol": "esp"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a IPsecPolicyPatch model
        i_psec_policy_patch_model = {}
        i_psec_policy_patch_model['name'] = 'my-ipsec-policy'
        i_psec_policy_patch_model['authentication_algorithm'] = 'md5'
        i_psec_policy_patch_model['encryption_algorithm'] = 'triple_des'
        i_psec_policy_patch_model['key_lifetime'] = 3600
        i_psec_policy_patch_model['pfs'] = 'disabled'

        # Set up parameter values
        id = 'testString'
        i_psec_policy_patch = i_psec_policy_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "i_psec_policy_patch": i_psec_policy_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_ipsec_policy(**req_copy)


class TestListIpsecPolicyConnections():
    """
    Test Class for list_ipsec_policy_connections
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_ipsec_policy_connections_all_params(self):
        """
        list_ipsec_policy_connections()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/ipsec_policies/testString/connections')
        mock_response = '{"connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection", "admin_state_up": true, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "route_mode": "policy", "authentication_mode": "psk", "status": "down", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.list_ipsec_policy_connections(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_ipsec_policy_connections_value_error(self):
        """
        test_list_ipsec_policy_connections_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/ipsec_policies/testString/connections')
        mock_response = '{"connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection", "admin_state_up": true, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "route_mode": "policy", "authentication_mode": "psk", "status": "down", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_ipsec_policy_connections(**req_copy)


class TestListVpnGateways():
    """
    Test Class for list_vpn_gateways
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_vpn_gateways_all_params(self):
        """
        list_vpn_gateways()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132, "vpn_gateways": [{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "resource_type": "vpn_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "public_ip": {"address": "192.168.3.4"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'

        # Invoke method
        response = service.list_vpn_gateways(
            start=start,
            limit=limit,
            resource_group_id=resource_group_id,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string

    @responses.activate
    def test_list_vpn_gateways_required_params(self):
        """
        test_list_vpn_gateways_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132, "vpn_gateways": [{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "resource_type": "vpn_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "public_ip": {"address": "192.168.3.4"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_vpn_gateways()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_vpn_gateways_value_error(self):
        """
        test_list_vpn_gateways_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132, "vpn_gateways": [{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "resource_type": "vpn_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "public_ip": {"address": "192.168.3.4"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_vpn_gateways(**req_copy)


class TestCreateVpnGateway():
    """
    Test Class for create_vpn_gateway
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_vpn_gateway_all_params(self):
        """
        create_vpn_gateway()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways')
        mock_response = '{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "resource_type": "vpn_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "public_ip": {"address": "192.168.3.4"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        subnet = subnet_identity_model
        name = 'my-vpn-gateway'
        resource_group = resource_group_identity_model

        # Invoke method
        response = service.create_vpn_gateway(subnet,
                                              name=name,
                                              resource_group=resource_group,
                                              headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['subnet'] == subnet_identity_model
        assert req_body['name'] == 'my-vpn-gateway'
        assert req_body['resource_group'] == resource_group_identity_model

    @responses.activate
    def test_create_vpn_gateway_value_error(self):
        """
        test_create_vpn_gateway_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways')
        mock_response = '{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "resource_type": "vpn_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "public_ip": {"address": "192.168.3.4"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        subnet = subnet_identity_model
        name = 'my-vpn-gateway'
        resource_group = resource_group_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "subnet": subnet,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_vpn_gateway(**req_copy)


class TestDeleteVpnGateway():
    """
    Test Class for delete_vpn_gateway
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_vpn_gateway_all_params(self):
        """
        delete_vpn_gateway()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways/testString')
        responses.add(responses.DELETE, url, status=202)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_vpn_gateway(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 202

    @responses.activate
    def test_delete_vpn_gateway_value_error(self):
        """
        test_delete_vpn_gateway_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways/testString')
        responses.add(responses.DELETE, url, status=202)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_vpn_gateway(**req_copy)


class TestGetVpnGateway():
    """
    Test Class for get_vpn_gateway
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_vpn_gateway_all_params(self):
        """
        get_vpn_gateway()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways/testString')
        mock_response = '{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "resource_type": "vpn_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "public_ip": {"address": "192.168.3.4"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_vpn_gateway(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_vpn_gateway_value_error(self):
        """
        test_get_vpn_gateway_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways/testString')
        mock_response = '{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "resource_type": "vpn_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "public_ip": {"address": "192.168.3.4"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_vpn_gateway(**req_copy)


class TestUpdateVpnGateway():
    """
    Test Class for update_vpn_gateway
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_vpn_gateway_all_params(self):
        """
        update_vpn_gateway()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways/testString')
        mock_response = '{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "resource_type": "vpn_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "public_ip": {"address": "192.168.3.4"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VPNGatewayPatch model
        vpn_gateway_patch_model = {}
        vpn_gateway_patch_model['name'] = 'my-vpn-gateway'

        # Set up parameter values
        id = 'testString'
        vpn_gateway_patch = vpn_gateway_patch_model

        # Invoke method
        response = service.update_vpn_gateway(id, vpn_gateway_patch, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == vpn_gateway_patch

    @responses.activate
    def test_update_vpn_gateway_value_error(self):
        """
        test_update_vpn_gateway_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/vpn_gateways/testString')
        mock_response = '{"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "resource_type": "vpn_gateway", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "public_ip": {"address": "192.168.3.4"}, "connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00", "status": "available", "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VPNGatewayPatch model
        vpn_gateway_patch_model = {}
        vpn_gateway_patch_model['name'] = 'my-vpn-gateway'

        # Set up parameter values
        id = 'testString'
        vpn_gateway_patch = vpn_gateway_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "vpn_gateway_patch": vpn_gateway_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_vpn_gateway(**req_copy)


class TestListVpnGatewayConnections():
    """
    Test Class for list_vpn_gateway_connections
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_vpn_gateway_connections_all_params(self):
        """
        list_vpn_gateway_connections()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpn_gateways/testString/connections')
        mock_response = '{"connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection", "admin_state_up": true, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "route_mode": "policy", "authentication_mode": "psk", "status": "down", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        status = 'testString'

        # Invoke method
        response = service.list_vpn_gateway_connections(vpn_gateway_id,
                                                        status=status,
                                                        headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'status={}'.format(status) in query_string

    @responses.activate
    def test_list_vpn_gateway_connections_required_params(self):
        """
        test_list_vpn_gateway_connections_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpn_gateways/testString/connections')
        mock_response = '{"connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection", "admin_state_up": true, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "route_mode": "policy", "authentication_mode": "psk", "status": "down", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpn_gateway_id = 'testString'

        # Invoke method
        response = service.list_vpn_gateway_connections(vpn_gateway_id,
                                                        headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_vpn_gateway_connections_value_error(self):
        """
        test_list_vpn_gateway_connections_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpn_gateways/testString/connections')
        mock_response = '{"connections": [{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection", "admin_state_up": true, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "route_mode": "policy", "authentication_mode": "psk", "status": "down", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpn_gateway_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_vpn_gateway_connections(**req_copy)


class TestCreateVpnGatewayConnection():
    """
    Test Class for create_vpn_gateway_connection
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_vpn_gateway_connection_all_params(self):
        """
        create_vpn_gateway_connection()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpn_gateways/testString/connections')
        mock_response = '{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection", "admin_state_up": true, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "route_mode": "policy", "authentication_mode": "psk", "status": "down", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VPNGatewayConnectionDPDPrototype model
        vpn_gateway_connection_dpd_prototype_model = {}
        vpn_gateway_connection_dpd_prototype_model['action'] = 'restart'
        vpn_gateway_connection_dpd_prototype_model['interval'] = 30
        vpn_gateway_connection_dpd_prototype_model['timeout'] = 120

        # Construct a dict representation of a IKEPolicyIdentityById model
        ike_policy_identity_model = {}
        ike_policy_identity_model['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a dict representation of a IPsecPolicyIdentityById model
        i_psec_policy_identity_model = {}
        i_psec_policy_identity_model[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Set up parameter values
        vpn_gateway_id = 'testString'
        peer_address = '169.21.50.5'
        psk = 'lkj14b1oi0alcniejkso'
        admin_state_up = True
        name = 'my-vpn-connection'
        dead_peer_detection = vpn_gateway_connection_dpd_prototype_model
        ike_policy = ike_policy_identity_model
        ipsec_policy = i_psec_policy_identity_model
        local_cidrs = ['192.168.1.0/24']
        peer_cidrs = ['10.45.1.0/24']

        # Invoke method
        response = service.create_vpn_gateway_connection(
            vpn_gateway_id,
            peer_address,
            psk,
            admin_state_up=admin_state_up,
            name=name,
            dead_peer_detection=dead_peer_detection,
            ike_policy=ike_policy,
            ipsec_policy=ipsec_policy,
            local_cidrs=local_cidrs,
            peer_cidrs=peer_cidrs,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['peer_address'] == '169.21.50.5'
        assert req_body['psk'] == 'lkj14b1oi0alcniejkso'
        assert req_body['admin_state_up'] == True
        assert req_body['name'] == 'my-vpn-connection'
        assert req_body[
            'dead_peer_detection'] == vpn_gateway_connection_dpd_prototype_model
        assert req_body['ike_policy'] == ike_policy_identity_model
        assert req_body['ipsec_policy'] == i_psec_policy_identity_model
        assert req_body['local_cidrs'] == ['192.168.1.0/24']
        assert req_body['peer_cidrs'] == ['10.45.1.0/24']

    @responses.activate
    def test_create_vpn_gateway_connection_value_error(self):
        """
        test_create_vpn_gateway_connection_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/vpn_gateways/testString/connections')
        mock_response = '{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection", "admin_state_up": true, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "route_mode": "policy", "authentication_mode": "psk", "status": "down", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a VPNGatewayConnectionDPDPrototype model
        vpn_gateway_connection_dpd_prototype_model = {}
        vpn_gateway_connection_dpd_prototype_model['action'] = 'restart'
        vpn_gateway_connection_dpd_prototype_model['interval'] = 30
        vpn_gateway_connection_dpd_prototype_model['timeout'] = 120

        # Construct a dict representation of a IKEPolicyIdentityById model
        ike_policy_identity_model = {}
        ike_policy_identity_model['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a dict representation of a IPsecPolicyIdentityById model
        i_psec_policy_identity_model = {}
        i_psec_policy_identity_model[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Set up parameter values
        vpn_gateway_id = 'testString'
        peer_address = '169.21.50.5'
        psk = 'lkj14b1oi0alcniejkso'
        admin_state_up = True
        name = 'my-vpn-connection'
        dead_peer_detection = vpn_gateway_connection_dpd_prototype_model
        ike_policy = ike_policy_identity_model
        ipsec_policy = i_psec_policy_identity_model
        local_cidrs = ['192.168.1.0/24']
        peer_cidrs = ['10.45.1.0/24']

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "peer_address": peer_address,
            "psk": psk,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_vpn_gateway_connection(**req_copy)


class TestDeleteVpnGatewayConnection():
    """
    Test Class for delete_vpn_gateway_connection
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_vpn_gateway_connection_all_params(self):
        """
        delete_vpn_gateway_connection()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpn_gateways/testString/connections/testString')
        responses.add(responses.DELETE, url, status=202)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_vpn_gateway_connection(vpn_gateway_id,
                                                         id,
                                                         headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 202

    @responses.activate
    def test_delete_vpn_gateway_connection_value_error(self):
        """
        test_delete_vpn_gateway_connection_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpn_gateways/testString/connections/testString')
        responses.add(responses.DELETE, url, status=202)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_vpn_gateway_connection(**req_copy)


class TestGetVpnGatewayConnection():
    """
    Test Class for get_vpn_gateway_connection
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_vpn_gateway_connection_all_params(self):
        """
        get_vpn_gateway_connection()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpn_gateways/testString/connections/testString')
        mock_response = '{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection", "admin_state_up": true, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "route_mode": "policy", "authentication_mode": "psk", "status": "down", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_vpn_gateway_connection(vpn_gateway_id,
                                                      id,
                                                      headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_vpn_gateway_connection_value_error(self):
        """
        test_get_vpn_gateway_connection_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpn_gateways/testString/connections/testString')
        mock_response = '{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection", "admin_state_up": true, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "route_mode": "policy", "authentication_mode": "psk", "status": "down", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_vpn_gateway_connection(**req_copy)


class TestUpdateVpnGatewayConnection():
    """
    Test Class for update_vpn_gateway_connection
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_vpn_gateway_connection_all_params(self):
        """
        update_vpn_gateway_connection()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpn_gateways/testString/connections/testString')
        mock_response = '{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection", "admin_state_up": true, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "route_mode": "policy", "authentication_mode": "psk", "status": "down", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VPNGatewayConnectionDPDPrototype model
        vpn_gateway_connection_dpd_prototype_model = {}
        vpn_gateway_connection_dpd_prototype_model['action'] = 'restart'
        vpn_gateway_connection_dpd_prototype_model['interval'] = 30
        vpn_gateway_connection_dpd_prototype_model['timeout'] = 120

        # Construct a dict representation of a IKEPolicyIdentityById model
        ike_policy_identity_model = {}
        ike_policy_identity_model['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a dict representation of a IPsecPolicyIdentityById model
        i_psec_policy_identity_model = {}
        i_psec_policy_identity_model[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a dict representation of a VPNGatewayConnectionPatch model
        vpn_gateway_connection_patch_model = {}
        vpn_gateway_connection_patch_model['admin_state_up'] = True
        vpn_gateway_connection_patch_model['peer_address'] = '169.21.50.5'
        vpn_gateway_connection_patch_model['name'] = 'my-vpn-connection'
        vpn_gateway_connection_patch_model['psk'] = 'lkj14b1oi0alcniejkso'
        vpn_gateway_connection_patch_model[
            'dead_peer_detection'] = vpn_gateway_connection_dpd_prototype_model
        vpn_gateway_connection_patch_model[
            'ike_policy'] = ike_policy_identity_model
        vpn_gateway_connection_patch_model[
            'ipsec_policy'] = i_psec_policy_identity_model

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        vpn_gateway_connection_patch = vpn_gateway_connection_patch_model

        # Invoke method
        response = service.update_vpn_gateway_connection(
            vpn_gateway_id, id, vpn_gateway_connection_patch, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == vpn_gateway_connection_patch

    @responses.activate
    def test_update_vpn_gateway_connection_value_error(self):
        """
        test_update_vpn_gateway_connection_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/vpn_gateways/testString/connections/testString')
        mock_response = '{"id": "a10a5771-dc23-442c-8460-c3601d8542f7", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection", "admin_state_up": true, "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "local_cidrs": ["192.168.1.0/24"], "peer_cidrs": ["10.45.1.0/24"], "route_mode": "policy", "authentication_mode": "psk", "status": "down", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "ike_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a VPNGatewayConnectionDPDPrototype model
        vpn_gateway_connection_dpd_prototype_model = {}
        vpn_gateway_connection_dpd_prototype_model['action'] = 'restart'
        vpn_gateway_connection_dpd_prototype_model['interval'] = 30
        vpn_gateway_connection_dpd_prototype_model['timeout'] = 120

        # Construct a dict representation of a IKEPolicyIdentityById model
        ike_policy_identity_model = {}
        ike_policy_identity_model['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a dict representation of a IPsecPolicyIdentityById model
        i_psec_policy_identity_model = {}
        i_psec_policy_identity_model[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a dict representation of a VPNGatewayConnectionPatch model
        vpn_gateway_connection_patch_model = {}
        vpn_gateway_connection_patch_model['admin_state_up'] = True
        vpn_gateway_connection_patch_model['peer_address'] = '169.21.50.5'
        vpn_gateway_connection_patch_model['name'] = 'my-vpn-connection'
        vpn_gateway_connection_patch_model['psk'] = 'lkj14b1oi0alcniejkso'
        vpn_gateway_connection_patch_model[
            'dead_peer_detection'] = vpn_gateway_connection_dpd_prototype_model
        vpn_gateway_connection_patch_model[
            'ike_policy'] = ike_policy_identity_model
        vpn_gateway_connection_patch_model[
            'ipsec_policy'] = i_psec_policy_identity_model

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        vpn_gateway_connection_patch = vpn_gateway_connection_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
            "vpn_gateway_connection_patch": vpn_gateway_connection_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_vpn_gateway_connection(**req_copy)


class TestListVpnGatewayConnectionLocalCidrs():
    """
    Test Class for list_vpn_gateway_connection_local_cidrs
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_vpn_gateway_connection_local_cidrs_all_params(self):
        """
        list_vpn_gateway_connection_local_cidrs()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/local_cidrs')
        mock_response = '{"local_cidrs": ["192.168.1.0/24"]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.list_vpn_gateway_connection_local_cidrs(
            vpn_gateway_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_vpn_gateway_connection_local_cidrs_value_error(self):
        """
        test_list_vpn_gateway_connection_local_cidrs_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/local_cidrs')
        mock_response = '{"local_cidrs": ["192.168.1.0/24"]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_vpn_gateway_connection_local_cidrs(**req_copy)


class TestRemoveVpnGatewayConnectionLocalCidr():
    """
    Test Class for remove_vpn_gateway_connection_local_cidr
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_remove_vpn_gateway_connection_local_cidr_all_params(self):
        """
        remove_vpn_gateway_connection_local_cidr()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Invoke method
        response = service.remove_vpn_gateway_connection_local_cidr(
            vpn_gateway_id, id, cidr_prefix, prefix_length, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_remove_vpn_gateway_connection_local_cidr_value_error(self):
        """
        test_remove_vpn_gateway_connection_local_cidr_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
            "cidr_prefix": cidr_prefix,
            "prefix_length": prefix_length,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.remove_vpn_gateway_connection_local_cidr(**req_copy)


class TestCheckVpnGatewayConnectionLocalCidr():
    """
    Test Class for check_vpn_gateway_connection_local_cidr
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_check_vpn_gateway_connection_local_cidr_all_params(self):
        """
        check_vpn_gateway_connection_local_cidr()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString'
        )
        responses.add(responses.GET, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Invoke method
        response = service.check_vpn_gateway_connection_local_cidr(
            vpn_gateway_id, id, cidr_prefix, prefix_length, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_check_vpn_gateway_connection_local_cidr_value_error(self):
        """
        test_check_vpn_gateway_connection_local_cidr_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString'
        )
        responses.add(responses.GET, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
            "cidr_prefix": cidr_prefix,
            "prefix_length": prefix_length,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.check_vpn_gateway_connection_local_cidr(**req_copy)


class TestAddVpnGatewayConnectionLocalCidr():
    """
    Test Class for add_vpn_gateway_connection_local_cidr
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_add_vpn_gateway_connection_local_cidr_all_params(self):
        """
        add_vpn_gateway_connection_local_cidr()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString'
        )
        responses.add(responses.PUT, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Invoke method
        response = service.add_vpn_gateway_connection_local_cidr(vpn_gateway_id,
                                                                 id,
                                                                 cidr_prefix,
                                                                 prefix_length,
                                                                 headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_add_vpn_gateway_connection_local_cidr_value_error(self):
        """
        test_add_vpn_gateway_connection_local_cidr_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString'
        )
        responses.add(responses.PUT, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
            "cidr_prefix": cidr_prefix,
            "prefix_length": prefix_length,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.add_vpn_gateway_connection_local_cidr(**req_copy)


class TestListVpnGatewayConnectionPeerCidrs():
    """
    Test Class for list_vpn_gateway_connection_peer_cidrs
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_vpn_gateway_connection_peer_cidrs_all_params(self):
        """
        list_vpn_gateway_connection_peer_cidrs()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/peer_cidrs')
        mock_response = '{"peer_cidrs": ["10.45.1.0/24"]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.list_vpn_gateway_connection_peer_cidrs(
            vpn_gateway_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_vpn_gateway_connection_peer_cidrs_value_error(self):
        """
        test_list_vpn_gateway_connection_peer_cidrs_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/peer_cidrs')
        mock_response = '{"peer_cidrs": ["10.45.1.0/24"]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_vpn_gateway_connection_peer_cidrs(**req_copy)


class TestRemoveVpnGatewayConnectionPeerCidr():
    """
    Test Class for remove_vpn_gateway_connection_peer_cidr
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_remove_vpn_gateway_connection_peer_cidr_all_params(self):
        """
        remove_vpn_gateway_connection_peer_cidr()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Invoke method
        response = service.remove_vpn_gateway_connection_peer_cidr(
            vpn_gateway_id, id, cidr_prefix, prefix_length, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_remove_vpn_gateway_connection_peer_cidr_value_error(self):
        """
        test_remove_vpn_gateway_connection_peer_cidr_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
            "cidr_prefix": cidr_prefix,
            "prefix_length": prefix_length,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.remove_vpn_gateway_connection_peer_cidr(**req_copy)


class TestCheckVpnGatewayConnectionPeerCidr():
    """
    Test Class for check_vpn_gateway_connection_peer_cidr
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_check_vpn_gateway_connection_peer_cidr_all_params(self):
        """
        check_vpn_gateway_connection_peer_cidr()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString'
        )
        responses.add(responses.GET, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Invoke method
        response = service.check_vpn_gateway_connection_peer_cidr(
            vpn_gateway_id, id, cidr_prefix, prefix_length, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_check_vpn_gateway_connection_peer_cidr_value_error(self):
        """
        test_check_vpn_gateway_connection_peer_cidr_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString'
        )
        responses.add(responses.GET, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
            "cidr_prefix": cidr_prefix,
            "prefix_length": prefix_length,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.check_vpn_gateway_connection_peer_cidr(**req_copy)


class TestAddVpnGatewayConnectionPeerCidr():
    """
    Test Class for add_vpn_gateway_connection_peer_cidr
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_add_vpn_gateway_connection_peer_cidr_all_params(self):
        """
        add_vpn_gateway_connection_peer_cidr()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString'
        )
        responses.add(responses.PUT, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Invoke method
        response = service.add_vpn_gateway_connection_peer_cidr(vpn_gateway_id,
                                                                id,
                                                                cidr_prefix,
                                                                prefix_length,
                                                                headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_add_vpn_gateway_connection_peer_cidr_value_error(self):
        """
        test_add_vpn_gateway_connection_peer_cidr_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString'
        )
        responses.add(responses.PUT, url, status=204)

        # Set up parameter values
        vpn_gateway_id = 'testString'
        id = 'testString'
        cidr_prefix = 'testString'
        prefix_length = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "vpn_gateway_id": vpn_gateway_id,
            "id": id,
            "cidr_prefix": cidr_prefix,
            "prefix_length": prefix_length,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.add_vpn_gateway_connection_peer_cidr(**req_copy)


# endregion
##############################################################################
# End of Service: VPNGateways
##############################################################################

##############################################################################
# Start of Service: LoadBalancers
##############################################################################
# region


class TestListLoadBalancerProfiles():
    """
    Test Class for list_load_balancer_profiles
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_load_balancer_profiles_all_params(self):
        """
        list_load_balancer_profiles()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancer/profiles')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "profiles": [{"name": "network-fixed", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "family": "network"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1

        # Invoke method
        response = service.list_load_balancer_profiles(start=start,
                                                       limit=limit,
                                                       headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string

    @responses.activate
    def test_list_load_balancer_profiles_required_params(self):
        """
        test_list_load_balancer_profiles_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancer/profiles')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "profiles": [{"name": "network-fixed", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "family": "network"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_load_balancer_profiles()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_load_balancer_profiles_value_error(self):
        """
        test_list_load_balancer_profiles_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancer/profiles')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "profiles": [{"name": "network-fixed", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "family": "network"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_load_balancer_profiles(**req_copy)


class TestGetLoadBalancerProfile():
    """
    Test Class for get_load_balancer_profile
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_load_balancer_profile_all_params(self):
        """
        get_load_balancer_profile()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancer/profiles/testString')
        mock_response = '{"name": "network-fixed", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "family": "network"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        name = 'testString'

        # Invoke method
        response = service.get_load_balancer_profile(name, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_load_balancer_profile_value_error(self):
        """
        test_get_load_balancer_profile_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancer/profiles/testString')
        mock_response = '{"name": "network-fixed", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "family": "network"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "name": name,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_load_balancer_profile(**req_copy)


class TestListLoadBalancers():
    """
    Test Class for list_load_balancers
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_load_balancers_all_params(self):
        """
        list_load_balancers()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers')
        mock_response = '{"load_balancers": [{"profile": {"name": "network-fixed", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "family": "network"}, "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-load-balancer", "created_at": "2019-01-01T12:00:00", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "is_public": true, "listeners": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004"}], "operating_status": "offline", "pools": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_load_balancers()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_load_balancers_value_error(self):
        """
        test_list_load_balancers_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers')
        mock_response = '{"load_balancers": [{"profile": {"name": "network-fixed", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "family": "network"}, "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-load-balancer", "created_at": "2019-01-01T12:00:00", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "is_public": true, "listeners": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004"}], "operating_status": "offline", "pools": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_load_balancers(**req_copy)


class TestCreateLoadBalancer():
    """
    Test Class for create_load_balancer
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_load_balancer_all_params(self):
        """
        create_load_balancer()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers')
        mock_response = '{"profile": {"name": "network-fixed", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "family": "network"}, "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-load-balancer", "created_at": "2019-01-01T12:00:00", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "is_public": true, "listeners": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004"}], "operating_status": "offline", "pools": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a LoadBalancerPoolIdentityByName model
        load_balancer_pool_identity_by_name_model = {}
        load_balancer_pool_identity_by_name_model[
            'name'] = 'my-load-balancer-pool'

        # Construct a dict representation of a LoadBalancerListenerPrototypeLoadBalancerContext model
        load_balancer_listener_prototype_load_balancer_context_model = {}
        load_balancer_listener_prototype_load_balancer_context_model[
            'connection_limit'] = 2000
        load_balancer_listener_prototype_load_balancer_context_model[
            'port'] = 443
        load_balancer_listener_prototype_load_balancer_context_model[
            'protocol'] = 'http'
        load_balancer_listener_prototype_load_balancer_context_model[
            'default_pool'] = load_balancer_pool_identity_by_name_model

        # Construct a dict representation of a LoadBalancerPoolHealthMonitorPrototype model
        load_balancer_pool_health_monitor_prototype_model = {}
        load_balancer_pool_health_monitor_prototype_model['delay'] = 5
        load_balancer_pool_health_monitor_prototype_model['max_retries'] = 2
        load_balancer_pool_health_monitor_prototype_model['port'] = 22
        load_balancer_pool_health_monitor_prototype_model['timeout'] = 2
        load_balancer_pool_health_monitor_prototype_model['type'] = 'http'
        load_balancer_pool_health_monitor_prototype_model['url_path'] = '/'

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a dict representation of a LoadBalancerPoolMemberPrototype model
        load_balancer_pool_member_prototype_model = {}
        load_balancer_pool_member_prototype_model['port'] = 80
        load_balancer_pool_member_prototype_model['weight'] = 50
        load_balancer_pool_member_prototype_model[
            'target'] = load_balancer_pool_member_target_prototype_model

        # Construct a dict representation of a LoadBalancerPoolSessionPersistencePrototype model
        load_balancer_pool_session_persistence_prototype_model = {}
        load_balancer_pool_session_persistence_prototype_model[
            'type'] = 'source_ip'

        # Construct a dict representation of a LoadBalancerPoolPrototype model
        load_balancer_pool_prototype_model = {}
        load_balancer_pool_prototype_model['name'] = 'my-load-balancer-pool'
        load_balancer_pool_prototype_model['algorithm'] = 'least_connections'
        load_balancer_pool_prototype_model['protocol'] = 'http'
        load_balancer_pool_prototype_model[
            'health_monitor'] = load_balancer_pool_health_monitor_prototype_model
        load_balancer_pool_prototype_model['members'] = [
            load_balancer_pool_member_prototype_model
        ]
        load_balancer_pool_prototype_model[
            'session_persistence'] = load_balancer_pool_session_persistence_prototype_model

        # Construct a dict representation of a LoadBalancerProfileIdentityByName model
        load_balancer_profile_identity_model = {}
        load_balancer_profile_identity_model['name'] = 'network-fixed'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        is_public = True
        subnets = [subnet_identity_model]
        name = 'my-load-balancer'
        listeners = [
            load_balancer_listener_prototype_load_balancer_context_model
        ]
        pools = [load_balancer_pool_prototype_model]
        profile = load_balancer_profile_identity_model
        resource_group = resource_group_identity_model

        # Invoke method
        response = service.create_load_balancer(is_public,
                                                subnets,
                                                name=name,
                                                listeners=listeners,
                                                pools=pools,
                                                profile=profile,
                                                resource_group=resource_group,
                                                headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['is_public'] == True
        assert req_body['subnets'] == [subnet_identity_model]
        assert req_body['name'] == 'my-load-balancer'
        assert req_body['listeners'] == [
            load_balancer_listener_prototype_load_balancer_context_model
        ]
        assert req_body['pools'] == [load_balancer_pool_prototype_model]
        assert req_body['profile'] == load_balancer_profile_identity_model
        assert req_body['resource_group'] == resource_group_identity_model

    @responses.activate
    def test_create_load_balancer_value_error(self):
        """
        test_create_load_balancer_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers')
        mock_response = '{"profile": {"name": "network-fixed", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "family": "network"}, "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-load-balancer", "created_at": "2019-01-01T12:00:00", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "is_public": true, "listeners": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004"}], "operating_status": "offline", "pools": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a SubnetIdentityById model
        subnet_identity_model = {}
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a dict representation of a LoadBalancerPoolIdentityByName model
        load_balancer_pool_identity_by_name_model = {}
        load_balancer_pool_identity_by_name_model[
            'name'] = 'my-load-balancer-pool'

        # Construct a dict representation of a LoadBalancerListenerPrototypeLoadBalancerContext model
        load_balancer_listener_prototype_load_balancer_context_model = {}
        load_balancer_listener_prototype_load_balancer_context_model[
            'connection_limit'] = 2000
        load_balancer_listener_prototype_load_balancer_context_model[
            'port'] = 443
        load_balancer_listener_prototype_load_balancer_context_model[
            'protocol'] = 'http'
        load_balancer_listener_prototype_load_balancer_context_model[
            'default_pool'] = load_balancer_pool_identity_by_name_model

        # Construct a dict representation of a LoadBalancerPoolHealthMonitorPrototype model
        load_balancer_pool_health_monitor_prototype_model = {}
        load_balancer_pool_health_monitor_prototype_model['delay'] = 5
        load_balancer_pool_health_monitor_prototype_model['max_retries'] = 2
        load_balancer_pool_health_monitor_prototype_model['port'] = 22
        load_balancer_pool_health_monitor_prototype_model['timeout'] = 2
        load_balancer_pool_health_monitor_prototype_model['type'] = 'http'
        load_balancer_pool_health_monitor_prototype_model['url_path'] = '/'

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a dict representation of a LoadBalancerPoolMemberPrototype model
        load_balancer_pool_member_prototype_model = {}
        load_balancer_pool_member_prototype_model['port'] = 80
        load_balancer_pool_member_prototype_model['weight'] = 50
        load_balancer_pool_member_prototype_model[
            'target'] = load_balancer_pool_member_target_prototype_model

        # Construct a dict representation of a LoadBalancerPoolSessionPersistencePrototype model
        load_balancer_pool_session_persistence_prototype_model = {}
        load_balancer_pool_session_persistence_prototype_model[
            'type'] = 'source_ip'

        # Construct a dict representation of a LoadBalancerPoolPrototype model
        load_balancer_pool_prototype_model = {}
        load_balancer_pool_prototype_model['name'] = 'my-load-balancer-pool'
        load_balancer_pool_prototype_model['algorithm'] = 'least_connections'
        load_balancer_pool_prototype_model['protocol'] = 'http'
        load_balancer_pool_prototype_model[
            'health_monitor'] = load_balancer_pool_health_monitor_prototype_model
        load_balancer_pool_prototype_model['members'] = [
            load_balancer_pool_member_prototype_model
        ]
        load_balancer_pool_prototype_model[
            'session_persistence'] = load_balancer_pool_session_persistence_prototype_model

        # Construct a dict representation of a LoadBalancerProfileIdentityByName model
        load_balancer_profile_identity_model = {}
        load_balancer_profile_identity_model['name'] = 'network-fixed'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        is_public = True
        subnets = [subnet_identity_model]
        name = 'my-load-balancer'
        listeners = [
            load_balancer_listener_prototype_load_balancer_context_model
        ]
        pools = [load_balancer_pool_prototype_model]
        profile = load_balancer_profile_identity_model
        resource_group = resource_group_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "is_public": is_public,
            "subnets": subnets,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_load_balancer(**req_copy)


class TestDeleteLoadBalancer():
    """
    Test Class for delete_load_balancer
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_load_balancer_all_params(self):
        """
        delete_load_balancer()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_load_balancer(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_load_balancer_value_error(self):
        """
        test_delete_load_balancer_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_load_balancer(**req_copy)


class TestGetLoadBalancer():
    """
    Test Class for get_load_balancer
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_load_balancer_all_params(self):
        """
        get_load_balancer()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString')
        mock_response = '{"profile": {"name": "network-fixed", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "family": "network"}, "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-load-balancer", "created_at": "2019-01-01T12:00:00", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "is_public": true, "listeners": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004"}], "operating_status": "offline", "pools": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_load_balancer(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_load_balancer_value_error(self):
        """
        test_get_load_balancer_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString')
        mock_response = '{"profile": {"name": "network-fixed", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "family": "network"}, "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-load-balancer", "created_at": "2019-01-01T12:00:00", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "is_public": true, "listeners": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004"}], "operating_status": "offline", "pools": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_load_balancer(**req_copy)


class TestUpdateLoadBalancer():
    """
    Test Class for update_load_balancer
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_load_balancer_all_params(self):
        """
        update_load_balancer()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString')
        mock_response = '{"profile": {"name": "network-fixed", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "family": "network"}, "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-load-balancer", "created_at": "2019-01-01T12:00:00", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "is_public": true, "listeners": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004"}], "operating_status": "offline", "pools": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a LoadBalancerPatch model
        load_balancer_patch_model = {}
        load_balancer_patch_model['name'] = 'my-load-balancer'

        # Set up parameter values
        id = 'testString'
        load_balancer_patch = load_balancer_patch_model

        # Invoke method
        response = service.update_load_balancer(id,
                                                load_balancer_patch,
                                                headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == load_balancer_patch

    @responses.activate
    def test_update_load_balancer_value_error(self):
        """
        test_update_load_balancer_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString')
        mock_response = '{"profile": {"name": "network-fixed", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "family": "network"}, "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "name": "my-load-balancer", "created_at": "2019-01-01T12:00:00", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "is_public": true, "listeners": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004"}], "operating_status": "offline", "pools": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "subnets": [{"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a LoadBalancerPatch model
        load_balancer_patch_model = {}
        load_balancer_patch_model['name'] = 'my-load-balancer'

        # Set up parameter values
        id = 'testString'
        load_balancer_patch = load_balancer_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "load_balancer_patch": load_balancer_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_load_balancer(**req_copy)


class TestGetLoadBalancerStatistics():
    """
    Test Class for get_load_balancer_statistics
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_load_balancer_statistics_all_params(self):
        """
        get_load_balancer_statistics()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/statistics')
        mock_response = '{"active_connections": 797, "connection_rate": 91.121, "data_processed_this_month": 10093173145, "throughput": 167.278}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_load_balancer_statistics(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_load_balancer_statistics_value_error(self):
        """
        test_get_load_balancer_statistics_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/statistics')
        mock_response = '{"active_connections": 797, "connection_rate": 91.121, "data_processed_this_month": 10093173145, "throughput": 167.278}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_load_balancer_statistics(**req_copy)


class TestListLoadBalancerListeners():
    """
    Test Class for list_load_balancer_listeners
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_load_balancer_listeners_all_params(self):
        """
        list_load_balancer_listeners()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/listeners')
        mock_response = '{"listeners": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "connection_limit": 2000, "port": 443, "protocol": "http", "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "created_at": "2019-01-01T12:00:00", "default_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "policies": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278"}], "provisioning_status": "active"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'

        # Invoke method
        response = service.list_load_balancer_listeners(load_balancer_id,
                                                        headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_load_balancer_listeners_value_error(self):
        """
        test_list_load_balancer_listeners_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/listeners')
        mock_response = '{"listeners": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "connection_limit": 2000, "port": 443, "protocol": "http", "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "created_at": "2019-01-01T12:00:00", "default_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "policies": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278"}], "provisioning_status": "active"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_load_balancer_listeners(**req_copy)


class TestCreateLoadBalancerListener():
    """
    Test Class for create_load_balancer_listener
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_load_balancer_listener_all_params(self):
        """
        create_load_balancer_listener()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/listeners')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "connection_limit": 2000, "port": 443, "protocol": "http", "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "created_at": "2019-01-01T12:00:00", "default_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "policies": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278"}], "provisioning_status": "active"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a CertificateInstanceIdentityByCRN model
        certificate_instance_identity_model = {}
        certificate_instance_identity_model[
            'crn'] = 'crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758'

        # Construct a dict representation of a LoadBalancerPoolIdentityById model
        load_balancer_pool_identity_model = {}
        load_balancer_pool_identity_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a dict representation of a LoadBalancerListenerPolicyRulePrototype model
        load_balancer_listener_policy_rule_prototype_model = {}
        load_balancer_listener_policy_rule_prototype_model[
            'condition'] = 'contains'
        load_balancer_listener_policy_rule_prototype_model[
            'field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_prototype_model['type'] = 'header'
        load_balancer_listener_policy_rule_prototype_model[
            'value'] = 'testString'

        # Construct a dict representation of a LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
        load_balancer_listener_policy_prototype_target_model = {}
        load_balancer_listener_policy_prototype_target_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a dict representation of a LoadBalancerListenerPolicyPrototype model
        load_balancer_listener_policy_prototype_model = {}
        load_balancer_listener_policy_prototype_model['name'] = 'my-policy'
        load_balancer_listener_policy_prototype_model['priority'] = 5
        load_balancer_listener_policy_prototype_model['action'] = 'forward'
        load_balancer_listener_policy_prototype_model['rules'] = [
            load_balancer_listener_policy_rule_prototype_model
        ]
        load_balancer_listener_policy_prototype_model[
            'target'] = load_balancer_listener_policy_prototype_target_model

        # Set up parameter values
        load_balancer_id = 'testString'
        port = 443
        protocol = 'http'
        connection_limit = 2000
        certificate_instance = certificate_instance_identity_model
        default_pool = load_balancer_pool_identity_model
        policies = [load_balancer_listener_policy_prototype_model]

        # Invoke method
        response = service.create_load_balancer_listener(
            load_balancer_id,
            port,
            protocol,
            connection_limit=connection_limit,
            certificate_instance=certificate_instance,
            default_pool=default_pool,
            policies=policies,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['port'] == 443
        assert req_body['protocol'] == 'http'
        assert req_body['connection_limit'] == 2000
        assert req_body[
            'certificate_instance'] == certificate_instance_identity_model
        assert req_body['default_pool'] == load_balancer_pool_identity_model
        assert req_body['policies'] == [
            load_balancer_listener_policy_prototype_model
        ]

    @responses.activate
    def test_create_load_balancer_listener_value_error(self):
        """
        test_create_load_balancer_listener_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/listeners')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "connection_limit": 2000, "port": 443, "protocol": "http", "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "created_at": "2019-01-01T12:00:00", "default_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "policies": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278"}], "provisioning_status": "active"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a CertificateInstanceIdentityByCRN model
        certificate_instance_identity_model = {}
        certificate_instance_identity_model[
            'crn'] = 'crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758'

        # Construct a dict representation of a LoadBalancerPoolIdentityById model
        load_balancer_pool_identity_model = {}
        load_balancer_pool_identity_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a dict representation of a LoadBalancerListenerPolicyRulePrototype model
        load_balancer_listener_policy_rule_prototype_model = {}
        load_balancer_listener_policy_rule_prototype_model[
            'condition'] = 'contains'
        load_balancer_listener_policy_rule_prototype_model[
            'field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_prototype_model['type'] = 'header'
        load_balancer_listener_policy_rule_prototype_model[
            'value'] = 'testString'

        # Construct a dict representation of a LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
        load_balancer_listener_policy_prototype_target_model = {}
        load_balancer_listener_policy_prototype_target_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a dict representation of a LoadBalancerListenerPolicyPrototype model
        load_balancer_listener_policy_prototype_model = {}
        load_balancer_listener_policy_prototype_model['name'] = 'my-policy'
        load_balancer_listener_policy_prototype_model['priority'] = 5
        load_balancer_listener_policy_prototype_model['action'] = 'forward'
        load_balancer_listener_policy_prototype_model['rules'] = [
            load_balancer_listener_policy_rule_prototype_model
        ]
        load_balancer_listener_policy_prototype_model[
            'target'] = load_balancer_listener_policy_prototype_target_model

        # Set up parameter values
        load_balancer_id = 'testString'
        port = 443
        protocol = 'http'
        connection_limit = 2000
        certificate_instance = certificate_instance_identity_model
        default_pool = load_balancer_pool_identity_model
        policies = [load_balancer_listener_policy_prototype_model]

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "port": port,
            "protocol": protocol,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_load_balancer_listener(**req_copy)


class TestDeleteLoadBalancerListener():
    """
    Test Class for delete_load_balancer_listener
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_load_balancer_listener_all_params(self):
        """
        delete_load_balancer_listener()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/listeners/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_load_balancer_listener(load_balancer_id,
                                                         id,
                                                         headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_load_balancer_listener_value_error(self):
        """
        test_delete_load_balancer_listener_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/listeners/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_load_balancer_listener(**req_copy)


class TestGetLoadBalancerListener():
    """
    Test Class for get_load_balancer_listener
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_load_balancer_listener_all_params(self):
        """
        get_load_balancer_listener()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/listeners/testString')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "connection_limit": 2000, "port": 443, "protocol": "http", "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "created_at": "2019-01-01T12:00:00", "default_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "policies": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278"}], "provisioning_status": "active"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_load_balancer_listener(load_balancer_id,
                                                      id,
                                                      headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_load_balancer_listener_value_error(self):
        """
        test_get_load_balancer_listener_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/listeners/testString')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "connection_limit": 2000, "port": 443, "protocol": "http", "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "created_at": "2019-01-01T12:00:00", "default_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "policies": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278"}], "provisioning_status": "active"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_load_balancer_listener(**req_copy)


class TestUpdateLoadBalancerListener():
    """
    Test Class for update_load_balancer_listener
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_load_balancer_listener_all_params(self):
        """
        update_load_balancer_listener()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/listeners/testString')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "connection_limit": 2000, "port": 443, "protocol": "http", "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "created_at": "2019-01-01T12:00:00", "default_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "policies": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278"}], "provisioning_status": "active"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a CertificateInstanceIdentityByCRN model
        certificate_instance_identity_model = {}
        certificate_instance_identity_model[
            'crn'] = 'crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758'

        # Construct a dict representation of a LoadBalancerPoolIdentityById model
        load_balancer_pool_identity_model = {}
        load_balancer_pool_identity_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a dict representation of a LoadBalancerListenerPatch model
        load_balancer_listener_patch_model = {}
        load_balancer_listener_patch_model['connection_limit'] = 2000
        load_balancer_listener_patch_model['port'] = 443
        load_balancer_listener_patch_model['protocol'] = 'http'
        load_balancer_listener_patch_model[
            'certificate_instance'] = certificate_instance_identity_model
        load_balancer_listener_patch_model[
            'default_pool'] = load_balancer_pool_identity_model

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'
        load_balancer_listener_patch = load_balancer_listener_patch_model

        # Invoke method
        response = service.update_load_balancer_listener(
            load_balancer_id, id, load_balancer_listener_patch, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == load_balancer_listener_patch

    @responses.activate
    def test_update_load_balancer_listener_value_error(self):
        """
        test_update_load_balancer_listener_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/listeners/testString')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "connection_limit": 2000, "port": 443, "protocol": "http", "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "created_at": "2019-01-01T12:00:00", "default_pool": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "policies": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278"}], "provisioning_status": "active"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a CertificateInstanceIdentityByCRN model
        certificate_instance_identity_model = {}
        certificate_instance_identity_model[
            'crn'] = 'crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758'

        # Construct a dict representation of a LoadBalancerPoolIdentityById model
        load_balancer_pool_identity_model = {}
        load_balancer_pool_identity_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a dict representation of a LoadBalancerListenerPatch model
        load_balancer_listener_patch_model = {}
        load_balancer_listener_patch_model['connection_limit'] = 2000
        load_balancer_listener_patch_model['port'] = 443
        load_balancer_listener_patch_model['protocol'] = 'http'
        load_balancer_listener_patch_model[
            'certificate_instance'] = certificate_instance_identity_model
        load_balancer_listener_patch_model[
            'default_pool'] = load_balancer_pool_identity_model

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'
        load_balancer_listener_patch = load_balancer_listener_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "id": id,
            "load_balancer_listener_patch": load_balancer_listener_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_load_balancer_listener(**req_copy)


class TestListLoadBalancerListenerPolicies():
    """
    Test Class for list_load_balancer_listener_policies
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_load_balancer_listener_policies_all_params(self):
        """
        list_load_balancer_listener_policies()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies')
        mock_response = '{"policies": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "name": "my-policy", "priority": 5, "action": "forward", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "rules": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762"}], "target": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'

        # Invoke method
        response = service.list_load_balancer_listener_policies(
            load_balancer_id, listener_id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_load_balancer_listener_policies_value_error(self):
        """
        test_list_load_balancer_listener_policies_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies')
        mock_response = '{"policies": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "name": "my-policy", "priority": 5, "action": "forward", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "rules": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762"}], "target": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "listener_id": listener_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_load_balancer_listener_policies(**req_copy)


class TestCreateLoadBalancerListenerPolicy():
    """
    Test Class for create_load_balancer_listener_policy
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_load_balancer_listener_policy_all_params(self):
        """
        create_load_balancer_listener_policy()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "name": "my-policy", "priority": 5, "action": "forward", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "rules": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762"}], "target": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a LoadBalancerListenerPolicyRulePrototype model
        load_balancer_listener_policy_rule_prototype_model = {}
        load_balancer_listener_policy_rule_prototype_model[
            'condition'] = 'contains'
        load_balancer_listener_policy_rule_prototype_model[
            'field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_prototype_model['type'] = 'header'
        load_balancer_listener_policy_rule_prototype_model[
            'value'] = 'testString'

        # Construct a dict representation of a LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
        load_balancer_listener_policy_prototype_target_model = {}
        load_balancer_listener_policy_prototype_target_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        priority = 5
        action = 'forward'
        name = 'my-policy'
        rules = [load_balancer_listener_policy_rule_prototype_model]
        target = load_balancer_listener_policy_prototype_target_model

        # Invoke method
        response = service.create_load_balancer_listener_policy(
            load_balancer_id,
            listener_id,
            priority,
            action,
            name=name,
            rules=rules,
            target=target,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['priority'] == 5
        assert req_body['action'] == 'forward'
        assert req_body['name'] == 'my-policy'
        assert req_body['rules'] == [
            load_balancer_listener_policy_rule_prototype_model
        ]
        assert req_body[
            'target'] == load_balancer_listener_policy_prototype_target_model

    @responses.activate
    def test_create_load_balancer_listener_policy_value_error(self):
        """
        test_create_load_balancer_listener_policy_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "name": "my-policy", "priority": 5, "action": "forward", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "rules": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762"}], "target": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a LoadBalancerListenerPolicyRulePrototype model
        load_balancer_listener_policy_rule_prototype_model = {}
        load_balancer_listener_policy_rule_prototype_model[
            'condition'] = 'contains'
        load_balancer_listener_policy_rule_prototype_model[
            'field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_prototype_model['type'] = 'header'
        load_balancer_listener_policy_rule_prototype_model[
            'value'] = 'testString'

        # Construct a dict representation of a LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
        load_balancer_listener_policy_prototype_target_model = {}
        load_balancer_listener_policy_prototype_target_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        priority = 5
        action = 'forward'
        name = 'my-policy'
        rules = [load_balancer_listener_policy_rule_prototype_model]
        target = load_balancer_listener_policy_prototype_target_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "listener_id": listener_id,
            "priority": priority,
            "action": action,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_load_balancer_listener_policy(**req_copy)


class TestDeleteLoadBalancerListenerPolicy():
    """
    Test Class for delete_load_balancer_listener_policy
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_load_balancer_listener_policy_all_params(self):
        """
        delete_load_balancer_listener_policy()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_load_balancer_listener_policy(
            load_balancer_id, listener_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_load_balancer_listener_policy_value_error(self):
        """
        test_delete_load_balancer_listener_policy_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "listener_id": listener_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_load_balancer_listener_policy(**req_copy)


class TestGetLoadBalancerListenerPolicy():
    """
    Test Class for get_load_balancer_listener_policy
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_load_balancer_listener_policy_all_params(self):
        """
        get_load_balancer_listener_policy()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString'
        )
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "name": "my-policy", "priority": 5, "action": "forward", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "rules": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762"}], "target": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_load_balancer_listener_policy(load_balancer_id,
                                                             listener_id,
                                                             id,
                                                             headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_load_balancer_listener_policy_value_error(self):
        """
        test_get_load_balancer_listener_policy_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString'
        )
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "name": "my-policy", "priority": 5, "action": "forward", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "rules": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762"}], "target": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "listener_id": listener_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_load_balancer_listener_policy(**req_copy)


class TestUpdateLoadBalancerListenerPolicy():
    """
    Test Class for update_load_balancer_listener_policy
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_load_balancer_listener_policy_all_params(self):
        """
        update_load_balancer_listener_policy()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString'
        )
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "name": "my-policy", "priority": 5, "action": "forward", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "rules": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762"}], "target": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
        load_balancer_listener_policy_patch_target_model = {}
        load_balancer_listener_policy_patch_target_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a dict representation of a LoadBalancerListenerPolicyPatch model
        load_balancer_listener_policy_patch_model = {}
        load_balancer_listener_policy_patch_model['name'] = 'my-policy'
        load_balancer_listener_policy_patch_model['priority'] = 5
        load_balancer_listener_policy_patch_model[
            'target'] = load_balancer_listener_policy_patch_target_model

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        id = 'testString'
        load_balancer_listener_policy_patch = load_balancer_listener_policy_patch_model

        # Invoke method
        response = service.update_load_balancer_listener_policy(
            load_balancer_id,
            listener_id,
            id,
            load_balancer_listener_policy_patch,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == load_balancer_listener_policy_patch

    @responses.activate
    def test_update_load_balancer_listener_policy_value_error(self):
        """
        test_update_load_balancer_listener_policy_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString'
        )
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "name": "my-policy", "priority": 5, "action": "forward", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "rules": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762"}], "target": {"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
        load_balancer_listener_policy_patch_target_model = {}
        load_balancer_listener_policy_patch_target_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a dict representation of a LoadBalancerListenerPolicyPatch model
        load_balancer_listener_policy_patch_model = {}
        load_balancer_listener_policy_patch_model['name'] = 'my-policy'
        load_balancer_listener_policy_patch_model['priority'] = 5
        load_balancer_listener_policy_patch_model[
            'target'] = load_balancer_listener_policy_patch_target_model

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        id = 'testString'
        load_balancer_listener_policy_patch = load_balancer_listener_policy_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id":
                load_balancer_id,
            "listener_id":
                listener_id,
            "id":
                id,
            "load_balancer_listener_policy_patch":
                load_balancer_listener_policy_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_load_balancer_listener_policy(**req_copy)


class TestListLoadBalancerListenerPolicyRules():
    """
    Test Class for list_load_balancer_listener_policy_rules
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_load_balancer_listener_policy_rules_all_params(self):
        """
        list_load_balancer_listener_policy_rules()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules'
        )
        mock_response = '{"rules": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "condition": "contains", "field": "MY-APP-HEADER", "type": "header", "value": "value", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'

        # Invoke method
        response = service.list_load_balancer_listener_policy_rules(
            load_balancer_id, listener_id, policy_id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_load_balancer_listener_policy_rules_value_error(self):
        """
        test_list_load_balancer_listener_policy_rules_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules'
        )
        mock_response = '{"rules": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "condition": "contains", "field": "MY-APP-HEADER", "type": "header", "value": "value", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active"}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "listener_id": listener_id,
            "policy_id": policy_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_load_balancer_listener_policy_rules(**req_copy)


class TestCreateLoadBalancerListenerPolicyRule():
    """
    Test Class for create_load_balancer_listener_policy_rule
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_load_balancer_listener_policy_rule_all_params(self):
        """
        create_load_balancer_listener_policy_rule()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules'
        )
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "condition": "contains", "field": "MY-APP-HEADER", "type": "header", "value": "value", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'
        condition = 'contains'
        type = 'header'
        value = 'testString'
        field = 'MY-APP-HEADER'

        # Invoke method
        response = service.create_load_balancer_listener_policy_rule(
            load_balancer_id,
            listener_id,
            policy_id,
            condition,
            type,
            value,
            field=field,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['condition'] == 'contains'
        assert req_body['type'] == 'header'
        assert req_body['value'] == 'testString'
        assert req_body['field'] == 'MY-APP-HEADER'

    @responses.activate
    def test_create_load_balancer_listener_policy_rule_value_error(self):
        """
        test_create_load_balancer_listener_policy_rule_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules'
        )
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "condition": "contains", "field": "MY-APP-HEADER", "type": "header", "value": "value", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active"}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'
        condition = 'contains'
        type = 'header'
        value = 'testString'
        field = 'MY-APP-HEADER'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "listener_id": listener_id,
            "policy_id": policy_id,
            "condition": condition,
            "type": type,
            "value": value,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_load_balancer_listener_policy_rule(**req_copy)


class TestDeleteLoadBalancerListenerPolicyRule():
    """
    Test Class for delete_load_balancer_listener_policy_rule
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_load_balancer_listener_policy_rule_all_params(self):
        """
        delete_load_balancer_listener_policy_rule()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_load_balancer_listener_policy_rule(
            load_balancer_id, listener_id, policy_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_load_balancer_listener_policy_rule_value_error(self):
        """
        test_delete_load_balancer_listener_policy_rule_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules/testString'
        )
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "listener_id": listener_id,
            "policy_id": policy_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_load_balancer_listener_policy_rule(**req_copy)


class TestGetLoadBalancerListenerPolicyRule():
    """
    Test Class for get_load_balancer_listener_policy_rule
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_load_balancer_listener_policy_rule_all_params(self):
        """
        get_load_balancer_listener_policy_rule()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules/testString'
        )
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "condition": "contains", "field": "MY-APP-HEADER", "type": "header", "value": "value", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_load_balancer_listener_policy_rule(
            load_balancer_id, listener_id, policy_id, id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_load_balancer_listener_policy_rule_value_error(self):
        """
        test_get_load_balancer_listener_policy_rule_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules/testString'
        )
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "condition": "contains", "field": "MY-APP-HEADER", "type": "header", "value": "value", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active"}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "listener_id": listener_id,
            "policy_id": policy_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_load_balancer_listener_policy_rule(**req_copy)


class TestUpdateLoadBalancerListenerPolicyRule():
    """
    Test Class for update_load_balancer_listener_policy_rule
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_load_balancer_listener_policy_rule_all_params(self):
        """
        update_load_balancer_listener_policy_rule()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules/testString'
        )
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "condition": "contains", "field": "MY-APP-HEADER", "type": "header", "value": "value", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a LoadBalancerListenerPolicyRulePatch model
        load_balancer_listener_policy_rule_patch_model = {}
        load_balancer_listener_policy_rule_patch_model['condition'] = 'contains'
        load_balancer_listener_policy_rule_patch_model[
            'field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_patch_model['type'] = 'header'
        load_balancer_listener_policy_rule_patch_model['value'] = 'testString'

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'
        id = 'testString'
        load_balancer_listener_policy_rule_patch = load_balancer_listener_policy_rule_patch_model

        # Invoke method
        response = service.update_load_balancer_listener_policy_rule(
            load_balancer_id,
            listener_id,
            policy_id,
            id,
            load_balancer_listener_policy_rule_patch,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == load_balancer_listener_policy_rule_patch

    @responses.activate
    def test_update_load_balancer_listener_policy_rule_value_error(self):
        """
        test_update_load_balancer_listener_policy_rule_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/listeners/testString/policies/testString/rules/testString'
        )
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "condition": "contains", "field": "MY-APP-HEADER", "type": "header", "value": "value", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active"}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a LoadBalancerListenerPolicyRulePatch model
        load_balancer_listener_policy_rule_patch_model = {}
        load_balancer_listener_policy_rule_patch_model['condition'] = 'contains'
        load_balancer_listener_policy_rule_patch_model[
            'field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_patch_model['type'] = 'header'
        load_balancer_listener_policy_rule_patch_model['value'] = 'testString'

        # Set up parameter values
        load_balancer_id = 'testString'
        listener_id = 'testString'
        policy_id = 'testString'
        id = 'testString'
        load_balancer_listener_policy_rule_patch = load_balancer_listener_policy_rule_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id":
                load_balancer_id,
            "listener_id":
                listener_id,
            "policy_id":
                policy_id,
            "id":
                id,
            "load_balancer_listener_policy_rule_patch":
                load_balancer_listener_policy_rule_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_load_balancer_listener_policy_rule(**req_copy)


class TestListLoadBalancerPools():
    """
    Test Class for list_load_balancer_pools
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_load_balancer_pools_all_params(self):
        """
        list_load_balancer_pools()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString/pools')
        mock_response = '{"pools": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool", "algorithm": "least_connections", "protocol": "http", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "instance_group": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004"}], "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'

        # Invoke method
        response = service.list_load_balancer_pools(load_balancer_id,
                                                    headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_load_balancer_pools_value_error(self):
        """
        test_list_load_balancer_pools_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString/pools')
        mock_response = '{"pools": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool", "algorithm": "least_connections", "protocol": "http", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "instance_group": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004"}], "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_load_balancer_pools(**req_copy)


class TestCreateLoadBalancerPool():
    """
    Test Class for create_load_balancer_pool
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_load_balancer_pool_all_params(self):
        """
        create_load_balancer_pool()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString/pools')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool", "algorithm": "least_connections", "protocol": "http", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "instance_group": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004"}], "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a LoadBalancerPoolHealthMonitorPrototype model
        load_balancer_pool_health_monitor_prototype_model = {}
        load_balancer_pool_health_monitor_prototype_model['delay'] = 5
        load_balancer_pool_health_monitor_prototype_model['max_retries'] = 2
        load_balancer_pool_health_monitor_prototype_model['port'] = 22
        load_balancer_pool_health_monitor_prototype_model['timeout'] = 2
        load_balancer_pool_health_monitor_prototype_model['type'] = 'http'
        load_balancer_pool_health_monitor_prototype_model['url_path'] = '/'

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a dict representation of a LoadBalancerPoolMemberPrototype model
        load_balancer_pool_member_prototype_model = {}
        load_balancer_pool_member_prototype_model['port'] = 80
        load_balancer_pool_member_prototype_model['weight'] = 50
        load_balancer_pool_member_prototype_model[
            'target'] = load_balancer_pool_member_target_prototype_model

        # Construct a dict representation of a LoadBalancerPoolSessionPersistencePrototype model
        load_balancer_pool_session_persistence_prototype_model = {}
        load_balancer_pool_session_persistence_prototype_model[
            'type'] = 'source_ip'

        # Set up parameter values
        load_balancer_id = 'testString'
        algorithm = 'least_connections'
        protocol = 'http'
        health_monitor = load_balancer_pool_health_monitor_prototype_model
        name = 'my-load-balancer-pool'
        members = [load_balancer_pool_member_prototype_model]
        session_persistence = load_balancer_pool_session_persistence_prototype_model

        # Invoke method
        response = service.create_load_balancer_pool(
            load_balancer_id,
            algorithm,
            protocol,
            health_monitor,
            name=name,
            members=members,
            session_persistence=session_persistence,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['algorithm'] == 'least_connections'
        assert req_body['protocol'] == 'http'
        assert req_body[
            'health_monitor'] == load_balancer_pool_health_monitor_prototype_model
        assert req_body['name'] == 'my-load-balancer-pool'
        assert req_body['members'] == [
            load_balancer_pool_member_prototype_model
        ]
        assert req_body[
            'session_persistence'] == load_balancer_pool_session_persistence_prototype_model

    @responses.activate
    def test_create_load_balancer_pool_value_error(self):
        """
        test_create_load_balancer_pool_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/load_balancers/testString/pools')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool", "algorithm": "least_connections", "protocol": "http", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "instance_group": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004"}], "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a LoadBalancerPoolHealthMonitorPrototype model
        load_balancer_pool_health_monitor_prototype_model = {}
        load_balancer_pool_health_monitor_prototype_model['delay'] = 5
        load_balancer_pool_health_monitor_prototype_model['max_retries'] = 2
        load_balancer_pool_health_monitor_prototype_model['port'] = 22
        load_balancer_pool_health_monitor_prototype_model['timeout'] = 2
        load_balancer_pool_health_monitor_prototype_model['type'] = 'http'
        load_balancer_pool_health_monitor_prototype_model['url_path'] = '/'

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a dict representation of a LoadBalancerPoolMemberPrototype model
        load_balancer_pool_member_prototype_model = {}
        load_balancer_pool_member_prototype_model['port'] = 80
        load_balancer_pool_member_prototype_model['weight'] = 50
        load_balancer_pool_member_prototype_model[
            'target'] = load_balancer_pool_member_target_prototype_model

        # Construct a dict representation of a LoadBalancerPoolSessionPersistencePrototype model
        load_balancer_pool_session_persistence_prototype_model = {}
        load_balancer_pool_session_persistence_prototype_model[
            'type'] = 'source_ip'

        # Set up parameter values
        load_balancer_id = 'testString'
        algorithm = 'least_connections'
        protocol = 'http'
        health_monitor = load_balancer_pool_health_monitor_prototype_model
        name = 'my-load-balancer-pool'
        members = [load_balancer_pool_member_prototype_model]
        session_persistence = load_balancer_pool_session_persistence_prototype_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "algorithm": algorithm,
            "protocol": protocol,
            "health_monitor": health_monitor,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_load_balancer_pool(**req_copy)


class TestDeleteLoadBalancerPool():
    """
    Test Class for delete_load_balancer_pool
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_load_balancer_pool_all_params(self):
        """
        delete_load_balancer_pool()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/pools/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_load_balancer_pool(load_balancer_id,
                                                     id,
                                                     headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_load_balancer_pool_value_error(self):
        """
        test_delete_load_balancer_pool_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/pools/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_load_balancer_pool(**req_copy)


class TestGetLoadBalancerPool():
    """
    Test Class for get_load_balancer_pool
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_load_balancer_pool_all_params(self):
        """
        get_load_balancer_pool()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/pools/testString')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool", "algorithm": "least_connections", "protocol": "http", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "instance_group": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004"}], "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_load_balancer_pool(load_balancer_id,
                                                  id,
                                                  headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_load_balancer_pool_value_error(self):
        """
        test_get_load_balancer_pool_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/pools/testString')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool", "algorithm": "least_connections", "protocol": "http", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "instance_group": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004"}], "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_load_balancer_pool(**req_copy)


class TestUpdateLoadBalancerPool():
    """
    Test Class for update_load_balancer_pool
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_load_balancer_pool_all_params(self):
        """
        update_load_balancer_pool()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/pools/testString')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool", "algorithm": "least_connections", "protocol": "http", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "instance_group": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004"}], "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a LoadBalancerPoolHealthMonitorPatch model
        load_balancer_pool_health_monitor_patch_model = {}
        load_balancer_pool_health_monitor_patch_model['delay'] = 5
        load_balancer_pool_health_monitor_patch_model['max_retries'] = 2
        load_balancer_pool_health_monitor_patch_model['port'] = 22
        load_balancer_pool_health_monitor_patch_model['timeout'] = 2
        load_balancer_pool_health_monitor_patch_model['type'] = 'http'
        load_balancer_pool_health_monitor_patch_model['url_path'] = '/'

        # Construct a dict representation of a LoadBalancerPoolSessionPersistencePatch model
        load_balancer_pool_session_persistence_patch_model = {}
        load_balancer_pool_session_persistence_patch_model['type'] = 'source_ip'

        # Construct a dict representation of a LoadBalancerPoolPatch model
        load_balancer_pool_patch_model = {}
        load_balancer_pool_patch_model['name'] = 'my-load-balancer-pool'
        load_balancer_pool_patch_model['algorithm'] = 'least_connections'
        load_balancer_pool_patch_model['protocol'] = 'http'
        load_balancer_pool_patch_model[
            'health_monitor'] = load_balancer_pool_health_monitor_patch_model
        load_balancer_pool_patch_model[
            'session_persistence'] = load_balancer_pool_session_persistence_patch_model

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'
        load_balancer_pool_patch = load_balancer_pool_patch_model

        # Invoke method
        response = service.update_load_balancer_pool(load_balancer_id,
                                                     id,
                                                     load_balancer_pool_patch,
                                                     headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == load_balancer_pool_patch

    @responses.activate
    def test_update_load_balancer_pool_value_error(self):
        """
        test_update_load_balancer_pool_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url +
                                  '/load_balancers/testString/pools/testString')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool", "algorithm": "least_connections", "protocol": "http", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "instance_group": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004"}], "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a LoadBalancerPoolHealthMonitorPatch model
        load_balancer_pool_health_monitor_patch_model = {}
        load_balancer_pool_health_monitor_patch_model['delay'] = 5
        load_balancer_pool_health_monitor_patch_model['max_retries'] = 2
        load_balancer_pool_health_monitor_patch_model['port'] = 22
        load_balancer_pool_health_monitor_patch_model['timeout'] = 2
        load_balancer_pool_health_monitor_patch_model['type'] = 'http'
        load_balancer_pool_health_monitor_patch_model['url_path'] = '/'

        # Construct a dict representation of a LoadBalancerPoolSessionPersistencePatch model
        load_balancer_pool_session_persistence_patch_model = {}
        load_balancer_pool_session_persistence_patch_model['type'] = 'source_ip'

        # Construct a dict representation of a LoadBalancerPoolPatch model
        load_balancer_pool_patch_model = {}
        load_balancer_pool_patch_model['name'] = 'my-load-balancer-pool'
        load_balancer_pool_patch_model['algorithm'] = 'least_connections'
        load_balancer_pool_patch_model['protocol'] = 'http'
        load_balancer_pool_patch_model[
            'health_monitor'] = load_balancer_pool_health_monitor_patch_model
        load_balancer_pool_patch_model[
            'session_persistence'] = load_balancer_pool_session_persistence_patch_model

        # Set up parameter values
        load_balancer_id = 'testString'
        id = 'testString'
        load_balancer_pool_patch = load_balancer_pool_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "id": id,
            "load_balancer_pool_patch": load_balancer_pool_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_load_balancer_pool(**req_copy)


class TestListLoadBalancerPoolMembers():
    """
    Test Class for list_load_balancer_pool_members
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_load_balancer_pool_members_all_params(self):
        """
        list_load_balancer_pool_members()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/pools/testString/members')
        mock_response = '{"members": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "weight": 50, "health": "faulted", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'

        # Invoke method
        response = service.list_load_balancer_pool_members(load_balancer_id,
                                                           pool_id,
                                                           headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_load_balancer_pool_members_value_error(self):
        """
        test_list_load_balancer_pool_members_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/pools/testString/members')
        mock_response = '{"members": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "weight": 50, "health": "faulted", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "pool_id": pool_id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_load_balancer_pool_members(**req_copy)


class TestCreateLoadBalancerPoolMember():
    """
    Test Class for create_load_balancer_pool_member
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_load_balancer_pool_member_all_params(self):
        """
        create_load_balancer_pool_member()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/pools/testString/members')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "weight": 50, "health": "faulted", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        port = 80
        target = load_balancer_pool_member_target_prototype_model
        weight = 50

        # Invoke method
        response = service.create_load_balancer_pool_member(load_balancer_id,
                                                            pool_id,
                                                            port,
                                                            target,
                                                            weight=weight,
                                                            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['port'] == 80
        assert req_body[
            'target'] == load_balancer_pool_member_target_prototype_model
        assert req_body['weight'] == 50

    @responses.activate
    def test_create_load_balancer_pool_member_value_error(self):
        """
        test_create_load_balancer_pool_member_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/pools/testString/members')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "weight": 50, "health": "faulted", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        port = 80
        target = load_balancer_pool_member_target_prototype_model
        weight = 50

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "pool_id": pool_id,
            "port": port,
            "target": target,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_load_balancer_pool_member(**req_copy)


class TestReplaceLoadBalancerPoolMembers():
    """
    Test Class for replace_load_balancer_pool_members
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_replace_load_balancer_pool_members_all_params(self):
        """
        replace_load_balancer_pool_members()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/pools/testString/members')
        mock_response = '{"members": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "weight": 50, "health": "faulted", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}}]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=202)

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a dict representation of a LoadBalancerPoolMemberPrototype model
        load_balancer_pool_member_prototype_model = {}
        load_balancer_pool_member_prototype_model['port'] = 80
        load_balancer_pool_member_prototype_model['weight'] = 50
        load_balancer_pool_member_prototype_model[
            'target'] = load_balancer_pool_member_target_prototype_model

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        members = [load_balancer_pool_member_prototype_model]

        # Invoke method
        response = service.replace_load_balancer_pool_members(load_balancer_id,
                                                              pool_id,
                                                              members,
                                                              headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 202
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body['members'] == [
            load_balancer_pool_member_prototype_model
        ]

    @responses.activate
    def test_replace_load_balancer_pool_members_value_error(self):
        """
        test_replace_load_balancer_pool_members_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url + '/load_balancers/testString/pools/testString/members')
        mock_response = '{"members": [{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "weight": 50, "health": "faulted", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}}]}'
        responses.add(responses.PUT,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=202)

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a dict representation of a LoadBalancerPoolMemberPrototype model
        load_balancer_pool_member_prototype_model = {}
        load_balancer_pool_member_prototype_model['port'] = 80
        load_balancer_pool_member_prototype_model['weight'] = 50
        load_balancer_pool_member_prototype_model[
            'target'] = load_balancer_pool_member_target_prototype_model

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        members = [load_balancer_pool_member_prototype_model]

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "pool_id": pool_id,
            "members": members,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.replace_load_balancer_pool_members(**req_copy)


class TestDeleteLoadBalancerPoolMember():
    """
    Test Class for delete_load_balancer_pool_member
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_load_balancer_pool_member_all_params(self):
        """
        delete_load_balancer_pool_member()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/pools/testString/members/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.delete_load_balancer_pool_member(load_balancer_id,
                                                            pool_id,
                                                            id,
                                                            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_load_balancer_pool_member_value_error(self):
        """
        test_delete_load_balancer_pool_member_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/pools/testString/members/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "pool_id": pool_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_load_balancer_pool_member(**req_copy)


class TestGetLoadBalancerPoolMember():
    """
    Test Class for get_load_balancer_pool_member
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_load_balancer_pool_member_all_params(self):
        """
        get_load_balancer_pool_member()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/pools/testString/members/testString')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "weight": 50, "health": "faulted", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        id = 'testString'

        # Invoke method
        response = service.get_load_balancer_pool_member(load_balancer_id,
                                                         pool_id,
                                                         id,
                                                         headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_load_balancer_pool_member_value_error(self):
        """
        test_get_load_balancer_pool_member_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/pools/testString/members/testString')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "weight": 50, "health": "faulted", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "pool_id": pool_id,
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_load_balancer_pool_member(**req_copy)


class TestUpdateLoadBalancerPoolMember():
    """
    Test Class for update_load_balancer_pool_member
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_load_balancer_pool_member_all_params(self):
        """
        update_load_balancer_pool_member()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/pools/testString/members/testString')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "weight": 50, "health": "faulted", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a dict representation of a LoadBalancerPoolMemberPatch model
        load_balancer_pool_member_patch_model = {}
        load_balancer_pool_member_patch_model['port'] = 80
        load_balancer_pool_member_patch_model['weight'] = 50
        load_balancer_pool_member_patch_model[
            'target'] = load_balancer_pool_member_target_prototype_model

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        id = 'testString'
        load_balancer_pool_member_patch = load_balancer_pool_member_patch_model

        # Invoke method
        response = service.update_load_balancer_pool_member(
            load_balancer_id,
            pool_id,
            id,
            load_balancer_pool_member_patch,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == load_balancer_pool_member_patch

    @responses.activate
    def test_update_load_balancer_pool_member_value_error(self):
        """
        test_update_load_balancer_pool_member_value_error()
        """
        # Set up mock
        url = self.preprocess_url(
            base_url +
            '/load_balancers/testString/pools/testString/members/testString')
        mock_response = '{"id": "70294e14-4e61-11e8-bcf4-0242ac110004", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "weight": 50, "health": "faulted", "created_at": "2019-01-01T12:00:00", "provisioning_status": "active", "target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
        load_balancer_pool_member_target_prototype_model = {}
        load_balancer_pool_member_target_prototype_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a dict representation of a LoadBalancerPoolMemberPatch model
        load_balancer_pool_member_patch_model = {}
        load_balancer_pool_member_patch_model['port'] = 80
        load_balancer_pool_member_patch_model['weight'] = 50
        load_balancer_pool_member_patch_model[
            'target'] = load_balancer_pool_member_target_prototype_model

        # Set up parameter values
        load_balancer_id = 'testString'
        pool_id = 'testString'
        id = 'testString'
        load_balancer_pool_member_patch = load_balancer_pool_member_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "load_balancer_id": load_balancer_id,
            "pool_id": pool_id,
            "id": id,
            "load_balancer_pool_member_patch": load_balancer_pool_member_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_load_balancer_pool_member(**req_copy)


# endregion
##############################################################################
# End of Service: LoadBalancers
##############################################################################

##############################################################################
# Start of Service: FlowLogCollectors
##############################################################################
# region


class TestListFlowLogCollectors():
    """
    Test Class for list_flow_log_collectors
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_list_flow_log_collectors_all_params(self):
        """
        list_flow_log_collectors()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "flow_log_collectors": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-flow-log-collector", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "active": true, "auto_delete": true, "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        start = 'testString'
        limit = 1
        resource_group_id = 'testString'
        name = 'testString'
        vpc_id = 'testString'
        vpc_crn = 'testString'
        vpc_name = 'testString'
        target_id = 'testString'
        target_resource_type = 'vpc'

        # Invoke method
        response = service.list_flow_log_collectors(
            start=start,
            limit=limit,
            resource_group_id=resource_group_id,
            name=name,
            vpc_id=vpc_id,
            vpc_crn=vpc_crn,
            vpc_name=vpc_name,
            target_id=target_id,
            target_resource_type=target_resource_type,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'start={}'.format(start) in query_string
        assert 'limit={}'.format(limit) in query_string
        assert 'resource_group.id={}'.format(resource_group_id) in query_string
        assert 'name={}'.format(name) in query_string
        assert 'vpc.id={}'.format(vpc_id) in query_string
        assert 'vpc.crn={}'.format(vpc_crn) in query_string
        assert 'vpc.name={}'.format(vpc_name) in query_string
        assert 'target.id={}'.format(target_id) in query_string
        assert 'target.resource_type={}'.format(
            target_resource_type) in query_string

    @responses.activate
    def test_list_flow_log_collectors_required_params(self):
        """
        test_list_flow_log_collectors_required_params()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "flow_log_collectors": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-flow-log-collector", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "active": true, "auto_delete": true, "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Invoke method
        response = service.list_flow_log_collectors()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_list_flow_log_collectors_value_error(self):
        """
        test_list_flow_log_collectors_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors')
        mock_response = '{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "flow_log_collectors": [{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-flow-log-collector", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "active": true, "auto_delete": true, "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}]}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {}
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.list_flow_log_collectors(**req_copy)


class TestCreateFlowLogCollector():
    """
    Test Class for create_flow_log_collector
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_create_flow_log_collector_all_params(self):
        """
        create_flow_log_collector()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors')
        mock_response = '{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-flow-log-collector", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "active": true, "auto_delete": true, "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a CloudObjectStorageBucketIdentityByName model
        cloud_object_storage_bucket_identity_model = {}
        cloud_object_storage_bucket_identity_model[
            'name'] = 'bucket-27200-lwx4cfvcue'

        # Construct a dict representation of a FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityById model
        flow_log_collector_prototype_target_model = {}
        flow_log_collector_prototype_target_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        storage_bucket = cloud_object_storage_bucket_identity_model
        target = flow_log_collector_prototype_target_model
        name = 'my-flow-log-collector'
        active = False
        resource_group = resource_group_identity_model

        # Invoke method
        response = service.create_flow_log_collector(
            storage_bucket,
            target,
            name=name,
            active=active,
            resource_group=resource_group,
            headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body[
            'storage_bucket'] == cloud_object_storage_bucket_identity_model
        assert req_body['target'] == flow_log_collector_prototype_target_model
        assert req_body['name'] == 'my-flow-log-collector'
        assert req_body['active'] == False
        assert req_body['resource_group'] == resource_group_identity_model

    @responses.activate
    def test_create_flow_log_collector_value_error(self):
        """
        test_create_flow_log_collector_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors')
        mock_response = '{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-flow-log-collector", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "active": true, "auto_delete": true, "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.POST,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=201)

        # Construct a dict representation of a CloudObjectStorageBucketIdentityByName model
        cloud_object_storage_bucket_identity_model = {}
        cloud_object_storage_bucket_identity_model[
            'name'] = 'bucket-27200-lwx4cfvcue'

        # Construct a dict representation of a FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityById model
        flow_log_collector_prototype_target_model = {}
        flow_log_collector_prototype_target_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'

        # Construct a dict representation of a ResourceGroupIdentityById model
        resource_group_identity_model = {}
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Set up parameter values
        storage_bucket = cloud_object_storage_bucket_identity_model
        target = flow_log_collector_prototype_target_model
        name = 'my-flow-log-collector'
        active = False
        resource_group = resource_group_identity_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "storage_bucket": storage_bucket,
            "target": target,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.create_flow_log_collector(**req_copy)


class TestDeleteFlowLogCollector():
    """
    Test Class for delete_flow_log_collector
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_delete_flow_log_collector_all_params(self):
        """
        delete_flow_log_collector()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.delete_flow_log_collector(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 204

    @responses.activate
    def test_delete_flow_log_collector_value_error(self):
        """
        test_delete_flow_log_collector_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors/testString')
        responses.add(responses.DELETE, url, status=204)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.delete_flow_log_collector(**req_copy)


class TestGetFlowLogCollector():
    """
    Test Class for get_flow_log_collector
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_get_flow_log_collector_all_params(self):
        """
        get_flow_log_collector()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors/testString')
        mock_response = '{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-flow-log-collector", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "active": true, "auto_delete": true, "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Invoke method
        response = service.get_flow_log_collector(id, headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    @responses.activate
    def test_get_flow_log_collector_value_error(self):
        """
        test_get_flow_log_collector_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors/testString')
        mock_response = '{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-flow-log-collector", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "active": true, "auto_delete": true, "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.GET,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Set up parameter values
        id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.get_flow_log_collector(**req_copy)


class TestUpdateFlowLogCollector():
    """
    Test Class for update_flow_log_collector
    """

    def preprocess_url(self, request_url: str):
        """
        Preprocess the request URL to ensure the mock response will be found.
        """
        if re.fullmatch('.*/+', request_url) is None:
            return request_url
        else:
            return re.compile(request_url.rstrip('/') + '/+')

    @responses.activate
    def test_update_flow_log_collector_all_params(self):
        """
        update_flow_log_collector()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors/testString')
        mock_response = '{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-flow-log-collector", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "active": true, "auto_delete": true, "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a FlowLogCollectorPatch model
        flow_log_collector_patch_model = {}
        flow_log_collector_patch_model['name'] = 'my-flow-log-collector'
        flow_log_collector_patch_model['active'] = True

        # Set up parameter values
        id = 'testString'
        flow_log_collector_patch = flow_log_collector_patch_model

        # Invoke method
        response = service.update_flow_log_collector(id,
                                                     flow_log_collector_patch,
                                                     headers={})

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == flow_log_collector_patch

    @responses.activate
    def test_update_flow_log_collector_value_error(self):
        """
        test_update_flow_log_collector_value_error()
        """
        # Set up mock
        url = self.preprocess_url(base_url + '/flow_log_collectors/testString')
        mock_response = '{"id": "39300233-9995-4806-89a5-3c1b6eb88689", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-flow-log-collector", "resource_group": {"id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group", "href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345"}, "active": true, "auto_delete": true, "created_at": "2019-01-01T12:00:00", "lifecycle_state": "stable", "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}'
        responses.add(responses.PATCH,
                      url,
                      body=mock_response,
                      content_type='application/json',
                      status=200)

        # Construct a dict representation of a FlowLogCollectorPatch model
        flow_log_collector_patch_model = {}
        flow_log_collector_patch_model['name'] = 'my-flow-log-collector'
        flow_log_collector_patch_model['active'] = True

        # Set up parameter values
        id = 'testString'
        flow_log_collector_patch = flow_log_collector_patch_model

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "id": id,
            "flow_log_collector_patch": flow_log_collector_patch,
        }
        for param in req_param_dict.keys():
            req_copy = {
                key: val if key is not param else None
                for (key, val) in req_param_dict.items()
            }
            with pytest.raises(ValueError):
                service.update_flow_log_collector(**req_copy)


# endregion
##############################################################################
# End of Service: FlowLogCollectors
##############################################################################


##############################################################################
# Start of Model Tests
##############################################################################
# region
class TestAddressPrefix():
    """
    Test Class for AddressPrefix
    """

    def test_address_prefix_serialization(self):
        """
        Test serialization/deserialization for AddressPrefix
        """

        # Construct dict forms of any model objects needed in order to build this model.

        zone_reference_model = {}  # ZoneReference
        zone_reference_model['name'] = 'us-south-1'
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        # Construct a json representation of a AddressPrefix model
        address_prefix_model_json = {}
        address_prefix_model_json['id'] = '1a15dca5-7e33-45e1-b7c5-bc690e569531'
        address_prefix_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531'
        address_prefix_model_json['name'] = 'my-address-prefix-2'
        address_prefix_model_json['is_default'] = False
        address_prefix_model_json['cidr'] = '192.168.3.0/24'
        address_prefix_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        address_prefix_model_json['has_subnets'] = True
        address_prefix_model_json['zone'] = zone_reference_model

        # Construct a model instance of AddressPrefix by calling from_dict on the json representation
        address_prefix_model = AddressPrefix.from_dict(
            address_prefix_model_json)
        assert address_prefix_model != False

        # Construct a model instance of AddressPrefix by calling from_dict on the json representation
        address_prefix_model_dict = AddressPrefix.from_dict(
            address_prefix_model_json).__dict__
        address_prefix_model2 = AddressPrefix(**address_prefix_model_dict)

        # Verify the model instances are equivalent
        assert address_prefix_model == address_prefix_model2

        # Convert model instance back to dict and verify no loss of data
        address_prefix_model_json2 = address_prefix_model.to_dict()
        assert address_prefix_model_json2 == address_prefix_model_json


class TestAddressPrefixCollection():
    """
    Test Class for AddressPrefixCollection
    """

    def test_address_prefix_collection_serialization(self):
        """
        Test serialization/deserialization for AddressPrefixCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        address_prefix_collection_first_model = {
        }  # AddressPrefixCollectionFirst
        address_prefix_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/a4e28308-8ee7-46ab-8108-9f881f22bdbf/address_prefixes?limit=20'

        address_prefix_collection_next_model = {}  # AddressPrefixCollectionNext
        address_prefix_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/a4e28308-8ee7-46ab-8108-9f881f22bdbf/address_prefixes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model['name'] = 'us-south-1'
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        address_prefix_model = {}  # AddressPrefix
        address_prefix_model['id'] = '1a15dca5-7e33-45e1-b7c5-bc690e569531'
        address_prefix_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531'
        address_prefix_model['name'] = 'my-address-prefix-2'
        address_prefix_model['is_default'] = False
        address_prefix_model['cidr'] = '192.168.3.0/24'
        address_prefix_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        address_prefix_model['has_subnets'] = True
        address_prefix_model['zone'] = zone_reference_model

        # Construct a json representation of a AddressPrefixCollection model
        address_prefix_collection_model_json = {}
        address_prefix_collection_model_json[
            'first'] = address_prefix_collection_first_model
        address_prefix_collection_model_json['limit'] = 20
        address_prefix_collection_model_json[
            'next'] = address_prefix_collection_next_model
        address_prefix_collection_model_json['total_count'] = 132
        address_prefix_collection_model_json['address_prefixes'] = [
            address_prefix_model
        ]

        # Construct a model instance of AddressPrefixCollection by calling from_dict on the json representation
        address_prefix_collection_model = AddressPrefixCollection.from_dict(
            address_prefix_collection_model_json)
        assert address_prefix_collection_model != False

        # Construct a model instance of AddressPrefixCollection by calling from_dict on the json representation
        address_prefix_collection_model_dict = AddressPrefixCollection.from_dict(
            address_prefix_collection_model_json).__dict__
        address_prefix_collection_model2 = AddressPrefixCollection(
            **address_prefix_collection_model_dict)

        # Verify the model instances are equivalent
        assert address_prefix_collection_model == address_prefix_collection_model2

        # Convert model instance back to dict and verify no loss of data
        address_prefix_collection_model_json2 = address_prefix_collection_model.to_dict(
        )
        assert address_prefix_collection_model_json2 == address_prefix_collection_model_json


class TestAddressPrefixCollectionFirst():
    """
    Test Class for AddressPrefixCollectionFirst
    """

    def test_address_prefix_collection_first_serialization(self):
        """
        Test serialization/deserialization for AddressPrefixCollectionFirst
        """

        # Construct a json representation of a AddressPrefixCollectionFirst model
        address_prefix_collection_first_model_json = {}
        address_prefix_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/a4e28308-8ee7-46ab-8108-9f881f22bdbf/address_prefixes?limit=20'

        # Construct a model instance of AddressPrefixCollectionFirst by calling from_dict on the json representation
        address_prefix_collection_first_model = AddressPrefixCollectionFirst.from_dict(
            address_prefix_collection_first_model_json)
        assert address_prefix_collection_first_model != False

        # Construct a model instance of AddressPrefixCollectionFirst by calling from_dict on the json representation
        address_prefix_collection_first_model_dict = AddressPrefixCollectionFirst.from_dict(
            address_prefix_collection_first_model_json).__dict__
        address_prefix_collection_first_model2 = AddressPrefixCollectionFirst(
            **address_prefix_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert address_prefix_collection_first_model == address_prefix_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        address_prefix_collection_first_model_json2 = address_prefix_collection_first_model.to_dict(
        )
        assert address_prefix_collection_first_model_json2 == address_prefix_collection_first_model_json


class TestAddressPrefixCollectionNext():
    """
    Test Class for AddressPrefixCollectionNext
    """

    def test_address_prefix_collection_next_serialization(self):
        """
        Test serialization/deserialization for AddressPrefixCollectionNext
        """

        # Construct a json representation of a AddressPrefixCollectionNext model
        address_prefix_collection_next_model_json = {}
        address_prefix_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/a4e28308-8ee7-46ab-8108-9f881f22bdbf/address_prefixes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of AddressPrefixCollectionNext by calling from_dict on the json representation
        address_prefix_collection_next_model = AddressPrefixCollectionNext.from_dict(
            address_prefix_collection_next_model_json)
        assert address_prefix_collection_next_model != False

        # Construct a model instance of AddressPrefixCollectionNext by calling from_dict on the json representation
        address_prefix_collection_next_model_dict = AddressPrefixCollectionNext.from_dict(
            address_prefix_collection_next_model_json).__dict__
        address_prefix_collection_next_model2 = AddressPrefixCollectionNext(
            **address_prefix_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert address_prefix_collection_next_model == address_prefix_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        address_prefix_collection_next_model_json2 = address_prefix_collection_next_model.to_dict(
        )
        assert address_prefix_collection_next_model_json2 == address_prefix_collection_next_model_json


class TestAddressPrefixPatch():
    """
    Test Class for AddressPrefixPatch
    """

    def test_address_prefix_patch_serialization(self):
        """
        Test serialization/deserialization for AddressPrefixPatch
        """

        # Construct a json representation of a AddressPrefixPatch model
        address_prefix_patch_model_json = {}
        address_prefix_patch_model_json['name'] = 'my-address-prefix-2'
        address_prefix_patch_model_json['is_default'] = False

        # Construct a model instance of AddressPrefixPatch by calling from_dict on the json representation
        address_prefix_patch_model = AddressPrefixPatch.from_dict(
            address_prefix_patch_model_json)
        assert address_prefix_patch_model != False

        # Construct a model instance of AddressPrefixPatch by calling from_dict on the json representation
        address_prefix_patch_model_dict = AddressPrefixPatch.from_dict(
            address_prefix_patch_model_json).__dict__
        address_prefix_patch_model2 = AddressPrefixPatch(
            **address_prefix_patch_model_dict)

        # Verify the model instances are equivalent
        assert address_prefix_patch_model == address_prefix_patch_model2

        # Convert model instance back to dict and verify no loss of data
        address_prefix_patch_model_json2 = address_prefix_patch_model.to_dict()
        assert address_prefix_patch_model_json2 == address_prefix_patch_model_json


class TestCertificateInstanceReference():
    """
    Test Class for CertificateInstanceReference
    """

    def test_certificate_instance_reference_serialization(self):
        """
        Test serialization/deserialization for CertificateInstanceReference
        """

        # Construct a json representation of a CertificateInstanceReference model
        certificate_instance_reference_model_json = {}
        certificate_instance_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758'

        # Construct a model instance of CertificateInstanceReference by calling from_dict on the json representation
        certificate_instance_reference_model = CertificateInstanceReference.from_dict(
            certificate_instance_reference_model_json)
        assert certificate_instance_reference_model != False

        # Construct a model instance of CertificateInstanceReference by calling from_dict on the json representation
        certificate_instance_reference_model_dict = CertificateInstanceReference.from_dict(
            certificate_instance_reference_model_json).__dict__
        certificate_instance_reference_model2 = CertificateInstanceReference(
            **certificate_instance_reference_model_dict)

        # Verify the model instances are equivalent
        assert certificate_instance_reference_model == certificate_instance_reference_model2

        # Convert model instance back to dict and verify no loss of data
        certificate_instance_reference_model_json2 = certificate_instance_reference_model.to_dict(
        )
        assert certificate_instance_reference_model_json2 == certificate_instance_reference_model_json


class TestCloudObjectStorageBucketReference():
    """
    Test Class for CloudObjectStorageBucketReference
    """

    def test_cloud_object_storage_bucket_reference_serialization(self):
        """
        Test serialization/deserialization for CloudObjectStorageBucketReference
        """

        # Construct a json representation of a CloudObjectStorageBucketReference model
        cloud_object_storage_bucket_reference_model_json = {}
        cloud_object_storage_bucket_reference_model_json[
            'name'] = 'bucket-27200-lwx4cfvcue'

        # Construct a model instance of CloudObjectStorageBucketReference by calling from_dict on the json representation
        cloud_object_storage_bucket_reference_model = CloudObjectStorageBucketReference.from_dict(
            cloud_object_storage_bucket_reference_model_json)
        assert cloud_object_storage_bucket_reference_model != False

        # Construct a model instance of CloudObjectStorageBucketReference by calling from_dict on the json representation
        cloud_object_storage_bucket_reference_model_dict = CloudObjectStorageBucketReference.from_dict(
            cloud_object_storage_bucket_reference_model_json).__dict__
        cloud_object_storage_bucket_reference_model2 = CloudObjectStorageBucketReference(
            **cloud_object_storage_bucket_reference_model_dict)

        # Verify the model instances are equivalent
        assert cloud_object_storage_bucket_reference_model == cloud_object_storage_bucket_reference_model2

        # Convert model instance back to dict and verify no loss of data
        cloud_object_storage_bucket_reference_model_json2 = cloud_object_storage_bucket_reference_model.to_dict(
        )
        assert cloud_object_storage_bucket_reference_model_json2 == cloud_object_storage_bucket_reference_model_json


class TestDefaultNetworkACL():
    """
    Test Class for DefaultNetworkACL
    """

    def test_default_network_acl_serialization(self):
        """
        Test serialization/deserialization for DefaultNetworkACL
        """

        # Construct dict forms of any model objects needed in order to build this model.

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        network_acl_rule_item_model = {
        }  # NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP
        network_acl_rule_item_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_model['name'] = 'my-rule-2'
        network_acl_rule_item_model['action'] = 'allow'
        network_acl_rule_item_model['destination'] = '192.168.3.0/24'
        network_acl_rule_item_model['direction'] = 'inbound'
        network_acl_rule_item_model['source'] = '192.168.3.0/24'
        network_acl_rule_item_model['protocol'] = 'udp'
        network_acl_rule_item_model['before'] = network_acl_rule_reference_model
        network_acl_rule_item_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_item_model['ip_version'] = 'ipv4'
        network_acl_rule_item_model['destination_port_max'] = 22
        network_acl_rule_item_model['destination_port_min'] = 22
        network_acl_rule_item_model['source_port_max'] = 65535
        network_acl_rule_item_model['source_port_min'] = 49152

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        # Construct a json representation of a DefaultNetworkACL model
        default_network_acl_model_json = {}
        default_network_acl_model_json[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        default_network_acl_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        default_network_acl_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        default_network_acl_model_json[
            'name'] = 'mnemonic-ersatz-eatery-malaise'
        default_network_acl_model_json['vpc'] = vpc_reference_model
        default_network_acl_model_json[
            'resource_group'] = resource_group_reference_model
        default_network_acl_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        default_network_acl_model_json['rules'] = [network_acl_rule_item_model]
        default_network_acl_model_json['subnets'] = [subnet_reference_model]

        # Construct a model instance of DefaultNetworkACL by calling from_dict on the json representation
        default_network_acl_model = DefaultNetworkACL.from_dict(
            default_network_acl_model_json)
        assert default_network_acl_model != False

        # Construct a model instance of DefaultNetworkACL by calling from_dict on the json representation
        default_network_acl_model_dict = DefaultNetworkACL.from_dict(
            default_network_acl_model_json).__dict__
        default_network_acl_model2 = DefaultNetworkACL(
            **default_network_acl_model_dict)

        # Verify the model instances are equivalent
        assert default_network_acl_model == default_network_acl_model2

        # Convert model instance back to dict and verify no loss of data
        default_network_acl_model_json2 = default_network_acl_model.to_dict()
        assert default_network_acl_model_json2 == default_network_acl_model_json


class TestDefaultSecurityGroup():
    """
    Test Class for DefaultSecurityGroup
    """

    def test_default_security_group_serialization(self):
        """
        Test serialization/deserialization for DefaultSecurityGroup
        """

        # Construct dict forms of any model objects needed in order to build this model.

        security_group_rule_remote_model = {}  # SecurityGroupRuleRemoteIP
        security_group_rule_remote_model['address'] = '192.168.3.4'

        security_group_rule_model = {
        }  # SecurityGroupRuleSecurityGroupRuleProtocolTCPUDP
        security_group_rule_model['id'] = '2ca703ed-3c1a-4873-aabe-ce730d279b72'
        security_group_rule_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_model['direction'] = 'outbound'
        security_group_rule_model['ip_version'] = 'ipv4'
        security_group_rule_model['protocol'] = 'udp'
        security_group_rule_model['remote'] = security_group_rule_remote_model
        security_group_rule_model['port_max'] = 22
        security_group_rule_model['port_min'] = 22

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        # Construct a json representation of a DefaultSecurityGroup model
        default_security_group_model_json = {}
        default_security_group_model_json[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        default_security_group_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        default_security_group_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        default_security_group_model_json[
            'name'] = 'observant-chip-emphatic-engraver'
        default_security_group_model_json['rules'] = [security_group_rule_model]
        default_security_group_model_json[
            'resource_group'] = resource_group_reference_model
        default_security_group_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        default_security_group_model_json['vpc'] = vpc_reference_model

        # Construct a model instance of DefaultSecurityGroup by calling from_dict on the json representation
        default_security_group_model = DefaultSecurityGroup.from_dict(
            default_security_group_model_json)
        assert default_security_group_model != False

        # Construct a model instance of DefaultSecurityGroup by calling from_dict on the json representation
        default_security_group_model_dict = DefaultSecurityGroup.from_dict(
            default_security_group_model_json).__dict__
        default_security_group_model2 = DefaultSecurityGroup(
            **default_security_group_model_dict)

        # Verify the model instances are equivalent
        assert default_security_group_model == default_security_group_model2

        # Convert model instance back to dict and verify no loss of data
        default_security_group_model_json2 = default_security_group_model.to_dict(
        )
        assert default_security_group_model_json2 == default_security_group_model_json


class TestEncryptionKeyReference():
    """
    Test Class for EncryptionKeyReference
    """

    def test_encryption_key_reference_serialization(self):
        """
        Test serialization/deserialization for EncryptionKeyReference
        """

        # Construct a json representation of a EncryptionKeyReference model
        encryption_key_reference_model_json = {}
        encryption_key_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        # Construct a model instance of EncryptionKeyReference by calling from_dict on the json representation
        encryption_key_reference_model = EncryptionKeyReference.from_dict(
            encryption_key_reference_model_json)
        assert encryption_key_reference_model != False

        # Construct a model instance of EncryptionKeyReference by calling from_dict on the json representation
        encryption_key_reference_model_dict = EncryptionKeyReference.from_dict(
            encryption_key_reference_model_json).__dict__
        encryption_key_reference_model2 = EncryptionKeyReference(
            **encryption_key_reference_model_dict)

        # Verify the model instances are equivalent
        assert encryption_key_reference_model == encryption_key_reference_model2

        # Convert model instance back to dict and verify no loss of data
        encryption_key_reference_model_json2 = encryption_key_reference_model.to_dict(
        )
        assert encryption_key_reference_model_json2 == encryption_key_reference_model_json


class TestFloatingIP():
    """
    Test Class for FloatingIP
    """

    def test_floating_ip_serialization(self):
        """
        Test serialization/deserialization for FloatingIP
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        floating_ip_target_model = {
        }  # FloatingIPTargetNetworkInterfaceReference
        floating_ip_target_model['name'] = 'my-network-interface'
        floating_ip_target_model['id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        floating_ip_target_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        floating_ip_target_model['primary_ipv4_address'] = '192.168.3.4'
        floating_ip_target_model['resource_type'] = 'network_interface'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model['name'] = 'us-south-1'
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        # Construct a json representation of a FloatingIP model
        floating_ip_model_json = {}
        floating_ip_model_json['id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_model_json['address'] = '203.0.113.1'
        floating_ip_model_json['name'] = 'my-floating-ip'
        floating_ip_model_json[
            'resource_group'] = resource_group_reference_model
        floating_ip_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        floating_ip_model_json['status'] = 'available'
        floating_ip_model_json['target'] = floating_ip_target_model
        floating_ip_model_json['zone'] = zone_reference_model

        # Construct a model instance of FloatingIP by calling from_dict on the json representation
        floating_ip_model = FloatingIP.from_dict(floating_ip_model_json)
        assert floating_ip_model != False

        # Construct a model instance of FloatingIP by calling from_dict on the json representation
        floating_ip_model_dict = FloatingIP.from_dict(
            floating_ip_model_json).__dict__
        floating_ip_model2 = FloatingIP(**floating_ip_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_model == floating_ip_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_model_json2 = floating_ip_model.to_dict()
        assert floating_ip_model_json2 == floating_ip_model_json


class TestFloatingIPCollection():
    """
    Test Class for FloatingIPCollection
    """

    def test_floating_ip_collection_serialization(self):
        """
        Test serialization/deserialization for FloatingIPCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        floating_ip_collection_first_model = {}  # FloatingIPCollectionFirst
        floating_ip_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips?limit=20'

        floating_ip_collection_next_model = {}  # FloatingIPCollectionNext
        floating_ip_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        floating_ip_target_model = {
        }  # FloatingIPTargetNetworkInterfaceReference
        floating_ip_target_model['name'] = 'my-network-interface'
        floating_ip_target_model['id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        floating_ip_target_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        floating_ip_target_model['primary_ipv4_address'] = '192.168.3.4'
        floating_ip_target_model['resource_type'] = 'network_interface'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model['name'] = 'us-south-1'
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        floating_ip_model = {}  # FloatingIP
        floating_ip_model['id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_model['address'] = '203.0.113.1'
        floating_ip_model['name'] = 'my-floating-ip'
        floating_ip_model['resource_group'] = resource_group_reference_model
        floating_ip_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        floating_ip_model['status'] = 'available'
        floating_ip_model['target'] = floating_ip_target_model
        floating_ip_model['zone'] = zone_reference_model

        # Construct a json representation of a FloatingIPCollection model
        floating_ip_collection_model_json = {}
        floating_ip_collection_model_json[
            'first'] = floating_ip_collection_first_model
        floating_ip_collection_model_json['limit'] = 20
        floating_ip_collection_model_json[
            'next'] = floating_ip_collection_next_model
        floating_ip_collection_model_json['total_count'] = 132
        floating_ip_collection_model_json['floating_ips'] = [floating_ip_model]

        # Construct a model instance of FloatingIPCollection by calling from_dict on the json representation
        floating_ip_collection_model = FloatingIPCollection.from_dict(
            floating_ip_collection_model_json)
        assert floating_ip_collection_model != False

        # Construct a model instance of FloatingIPCollection by calling from_dict on the json representation
        floating_ip_collection_model_dict = FloatingIPCollection.from_dict(
            floating_ip_collection_model_json).__dict__
        floating_ip_collection_model2 = FloatingIPCollection(
            **floating_ip_collection_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_collection_model == floating_ip_collection_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_collection_model_json2 = floating_ip_collection_model.to_dict(
        )
        assert floating_ip_collection_model_json2 == floating_ip_collection_model_json


class TestFloatingIPCollectionFirst():
    """
    Test Class for FloatingIPCollectionFirst
    """

    def test_floating_ip_collection_first_serialization(self):
        """
        Test serialization/deserialization for FloatingIPCollectionFirst
        """

        # Construct a json representation of a FloatingIPCollectionFirst model
        floating_ip_collection_first_model_json = {}
        floating_ip_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips?limit=20'

        # Construct a model instance of FloatingIPCollectionFirst by calling from_dict on the json representation
        floating_ip_collection_first_model = FloatingIPCollectionFirst.from_dict(
            floating_ip_collection_first_model_json)
        assert floating_ip_collection_first_model != False

        # Construct a model instance of FloatingIPCollectionFirst by calling from_dict on the json representation
        floating_ip_collection_first_model_dict = FloatingIPCollectionFirst.from_dict(
            floating_ip_collection_first_model_json).__dict__
        floating_ip_collection_first_model2 = FloatingIPCollectionFirst(
            **floating_ip_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_collection_first_model == floating_ip_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_collection_first_model_json2 = floating_ip_collection_first_model.to_dict(
        )
        assert floating_ip_collection_first_model_json2 == floating_ip_collection_first_model_json


class TestFloatingIPCollectionNext():
    """
    Test Class for FloatingIPCollectionNext
    """

    def test_floating_ip_collection_next_serialization(self):
        """
        Test serialization/deserialization for FloatingIPCollectionNext
        """

        # Construct a json representation of a FloatingIPCollectionNext model
        floating_ip_collection_next_model_json = {}
        floating_ip_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of FloatingIPCollectionNext by calling from_dict on the json representation
        floating_ip_collection_next_model = FloatingIPCollectionNext.from_dict(
            floating_ip_collection_next_model_json)
        assert floating_ip_collection_next_model != False

        # Construct a model instance of FloatingIPCollectionNext by calling from_dict on the json representation
        floating_ip_collection_next_model_dict = FloatingIPCollectionNext.from_dict(
            floating_ip_collection_next_model_json).__dict__
        floating_ip_collection_next_model2 = FloatingIPCollectionNext(
            **floating_ip_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_collection_next_model == floating_ip_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_collection_next_model_json2 = floating_ip_collection_next_model.to_dict(
        )
        assert floating_ip_collection_next_model_json2 == floating_ip_collection_next_model_json


class TestFloatingIPPatch():
    """
    Test Class for FloatingIPPatch
    """

    def test_floating_ip_patch_serialization(self):
        """
        Test serialization/deserialization for FloatingIPPatch
        """

        # Construct dict forms of any model objects needed in order to build this model.

        floating_ip_patch_target_network_interface_identity_model = {
        }  # FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById
        floating_ip_patch_target_network_interface_identity_model[
            'id'] = '69e55145-cc7d-4d8e-9e1f-cc3fb60b1793'

        # Construct a json representation of a FloatingIPPatch model
        floating_ip_patch_model_json = {}
        floating_ip_patch_model_json['name'] = 'my-floating-ip'
        floating_ip_patch_model_json[
            'target'] = floating_ip_patch_target_network_interface_identity_model

        # Construct a model instance of FloatingIPPatch by calling from_dict on the json representation
        floating_ip_patch_model = FloatingIPPatch.from_dict(
            floating_ip_patch_model_json)
        assert floating_ip_patch_model != False

        # Construct a model instance of FloatingIPPatch by calling from_dict on the json representation
        floating_ip_patch_model_dict = FloatingIPPatch.from_dict(
            floating_ip_patch_model_json).__dict__
        floating_ip_patch_model2 = FloatingIPPatch(
            **floating_ip_patch_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_patch_model == floating_ip_patch_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_patch_model_json2 = floating_ip_patch_model.to_dict()
        assert floating_ip_patch_model_json2 == floating_ip_patch_model_json


class TestFloatingIPReference():
    """
    Test Class for FloatingIPReference
    """

    def test_floating_ip_reference_serialization(self):
        """
        Test serialization/deserialization for FloatingIPReference
        """

        # Construct a json representation of a FloatingIPReference model
        floating_ip_reference_model_json = {}
        floating_ip_reference_model_json[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model_json['address'] = '203.0.113.1'
        floating_ip_reference_model_json['name'] = 'my-floating-ip'

        # Construct a model instance of FloatingIPReference by calling from_dict on the json representation
        floating_ip_reference_model = FloatingIPReference.from_dict(
            floating_ip_reference_model_json)
        assert floating_ip_reference_model != False

        # Construct a model instance of FloatingIPReference by calling from_dict on the json representation
        floating_ip_reference_model_dict = FloatingIPReference.from_dict(
            floating_ip_reference_model_json).__dict__
        floating_ip_reference_model2 = FloatingIPReference(
            **floating_ip_reference_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_reference_model == floating_ip_reference_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_reference_model_json2 = floating_ip_reference_model.to_dict(
        )
        assert floating_ip_reference_model_json2 == floating_ip_reference_model_json


class TestFloatingIPUnpaginatedCollection():
    """
    Test Class for FloatingIPUnpaginatedCollection
    """

    def test_floating_ip_unpaginated_collection_serialization(self):
        """
        Test serialization/deserialization for FloatingIPUnpaginatedCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        floating_ip_target_model = {
        }  # FloatingIPTargetNetworkInterfaceReference
        floating_ip_target_model['name'] = 'my-network-interface'
        floating_ip_target_model['id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        floating_ip_target_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        floating_ip_target_model['primary_ipv4_address'] = '192.168.3.4'
        floating_ip_target_model['resource_type'] = 'network_interface'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model['name'] = 'us-south-1'
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        floating_ip_model = {}  # FloatingIP
        floating_ip_model['id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_model['address'] = '203.0.113.1'
        floating_ip_model['name'] = 'my-floating-ip'
        floating_ip_model['resource_group'] = resource_group_reference_model
        floating_ip_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        floating_ip_model['status'] = 'available'
        floating_ip_model['target'] = floating_ip_target_model
        floating_ip_model['zone'] = zone_reference_model

        # Construct a json representation of a FloatingIPUnpaginatedCollection model
        floating_ip_unpaginated_collection_model_json = {}
        floating_ip_unpaginated_collection_model_json['floating_ips'] = [
            floating_ip_model
        ]

        # Construct a model instance of FloatingIPUnpaginatedCollection by calling from_dict on the json representation
        floating_ip_unpaginated_collection_model = FloatingIPUnpaginatedCollection.from_dict(
            floating_ip_unpaginated_collection_model_json)
        assert floating_ip_unpaginated_collection_model != False

        # Construct a model instance of FloatingIPUnpaginatedCollection by calling from_dict on the json representation
        floating_ip_unpaginated_collection_model_dict = FloatingIPUnpaginatedCollection.from_dict(
            floating_ip_unpaginated_collection_model_json).__dict__
        floating_ip_unpaginated_collection_model2 = FloatingIPUnpaginatedCollection(
            **floating_ip_unpaginated_collection_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_unpaginated_collection_model == floating_ip_unpaginated_collection_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_unpaginated_collection_model_json2 = floating_ip_unpaginated_collection_model.to_dict(
        )
        assert floating_ip_unpaginated_collection_model_json2 == floating_ip_unpaginated_collection_model_json


class TestFlowLogCollector():
    """
    Test Class for FlowLogCollector
    """

    def test_flow_log_collector_serialization(self):
        """
        Test serialization/deserialization for FlowLogCollector
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        cloud_object_storage_bucket_reference_model = {
        }  # CloudObjectStorageBucketReference
        cloud_object_storage_bucket_reference_model[
            'name'] = 'bucket-27200-lwx4cfvcue'

        flow_log_collector_target_model = {
        }  # FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext
        flow_log_collector_target_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        flow_log_collector_target_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        flow_log_collector_target_model['name'] = 'my-network-interface'
        flow_log_collector_target_model['resource_type'] = 'network_interface'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        # Construct a json representation of a FlowLogCollector model
        flow_log_collector_model_json = {}
        flow_log_collector_model_json[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        flow_log_collector_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689'
        flow_log_collector_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689'
        flow_log_collector_model_json['name'] = 'my-flow-log-collector'
        flow_log_collector_model_json[
            'resource_group'] = resource_group_reference_model
        flow_log_collector_model_json['active'] = True
        flow_log_collector_model_json['auto_delete'] = True
        flow_log_collector_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        flow_log_collector_model_json['lifecycle_state'] = 'stable'
        flow_log_collector_model_json[
            'storage_bucket'] = cloud_object_storage_bucket_reference_model
        flow_log_collector_model_json[
            'target'] = flow_log_collector_target_model
        flow_log_collector_model_json['vpc'] = vpc_reference_model

        # Construct a model instance of FlowLogCollector by calling from_dict on the json representation
        flow_log_collector_model = FlowLogCollector.from_dict(
            flow_log_collector_model_json)
        assert flow_log_collector_model != False

        # Construct a model instance of FlowLogCollector by calling from_dict on the json representation
        flow_log_collector_model_dict = FlowLogCollector.from_dict(
            flow_log_collector_model_json).__dict__
        flow_log_collector_model2 = FlowLogCollector(
            **flow_log_collector_model_dict)

        # Verify the model instances are equivalent
        assert flow_log_collector_model == flow_log_collector_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_model_json2 = flow_log_collector_model.to_dict()
        assert flow_log_collector_model_json2 == flow_log_collector_model_json


class TestFlowLogCollectorCollection():
    """
    Test Class for FlowLogCollectorCollection
    """

    def test_flow_log_collector_collection_serialization(self):
        """
        Test serialization/deserialization for FlowLogCollectorCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        flow_log_collector_collection_first_model = {
        }  # FlowLogCollectorCollectionFirst
        flow_log_collector_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?limit=20'

        flow_log_collector_collection_next_model = {
        }  # FlowLogCollectorCollectionNext
        flow_log_collector_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        cloud_object_storage_bucket_reference_model = {
        }  # CloudObjectStorageBucketReference
        cloud_object_storage_bucket_reference_model[
            'name'] = 'bucket-27200-lwx4cfvcue'

        flow_log_collector_target_model = {
        }  # FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext
        flow_log_collector_target_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        flow_log_collector_target_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        flow_log_collector_target_model['name'] = 'my-network-interface'
        flow_log_collector_target_model['resource_type'] = 'network_interface'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        flow_log_collector_model = {}  # FlowLogCollector
        flow_log_collector_model['id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        flow_log_collector_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689'
        flow_log_collector_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689'
        flow_log_collector_model['name'] = 'my-flow-log-collector'
        flow_log_collector_model[
            'resource_group'] = resource_group_reference_model
        flow_log_collector_model['active'] = True
        flow_log_collector_model['auto_delete'] = True
        flow_log_collector_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        flow_log_collector_model['lifecycle_state'] = 'stable'
        flow_log_collector_model[
            'storage_bucket'] = cloud_object_storage_bucket_reference_model
        flow_log_collector_model['target'] = flow_log_collector_target_model
        flow_log_collector_model['vpc'] = vpc_reference_model

        # Construct a json representation of a FlowLogCollectorCollection model
        flow_log_collector_collection_model_json = {}
        flow_log_collector_collection_model_json[
            'first'] = flow_log_collector_collection_first_model
        flow_log_collector_collection_model_json['limit'] = 20
        flow_log_collector_collection_model_json[
            'next'] = flow_log_collector_collection_next_model
        flow_log_collector_collection_model_json['total_count'] = 132
        flow_log_collector_collection_model_json['flow_log_collectors'] = [
            flow_log_collector_model
        ]

        # Construct a model instance of FlowLogCollectorCollection by calling from_dict on the json representation
        flow_log_collector_collection_model = FlowLogCollectorCollection.from_dict(
            flow_log_collector_collection_model_json)
        assert flow_log_collector_collection_model != False

        # Construct a model instance of FlowLogCollectorCollection by calling from_dict on the json representation
        flow_log_collector_collection_model_dict = FlowLogCollectorCollection.from_dict(
            flow_log_collector_collection_model_json).__dict__
        flow_log_collector_collection_model2 = FlowLogCollectorCollection(
            **flow_log_collector_collection_model_dict)

        # Verify the model instances are equivalent
        assert flow_log_collector_collection_model == flow_log_collector_collection_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_collection_model_json2 = flow_log_collector_collection_model.to_dict(
        )
        assert flow_log_collector_collection_model_json2 == flow_log_collector_collection_model_json


class TestFlowLogCollectorCollectionFirst():
    """
    Test Class for FlowLogCollectorCollectionFirst
    """

    def test_flow_log_collector_collection_first_serialization(self):
        """
        Test serialization/deserialization for FlowLogCollectorCollectionFirst
        """

        # Construct a json representation of a FlowLogCollectorCollectionFirst model
        flow_log_collector_collection_first_model_json = {}
        flow_log_collector_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?limit=20'

        # Construct a model instance of FlowLogCollectorCollectionFirst by calling from_dict on the json representation
        flow_log_collector_collection_first_model = FlowLogCollectorCollectionFirst.from_dict(
            flow_log_collector_collection_first_model_json)
        assert flow_log_collector_collection_first_model != False

        # Construct a model instance of FlowLogCollectorCollectionFirst by calling from_dict on the json representation
        flow_log_collector_collection_first_model_dict = FlowLogCollectorCollectionFirst.from_dict(
            flow_log_collector_collection_first_model_json).__dict__
        flow_log_collector_collection_first_model2 = FlowLogCollectorCollectionFirst(
            **flow_log_collector_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert flow_log_collector_collection_first_model == flow_log_collector_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_collection_first_model_json2 = flow_log_collector_collection_first_model.to_dict(
        )
        assert flow_log_collector_collection_first_model_json2 == flow_log_collector_collection_first_model_json


class TestFlowLogCollectorCollectionNext():
    """
    Test Class for FlowLogCollectorCollectionNext
    """

    def test_flow_log_collector_collection_next_serialization(self):
        """
        Test serialization/deserialization for FlowLogCollectorCollectionNext
        """

        # Construct a json representation of a FlowLogCollectorCollectionNext model
        flow_log_collector_collection_next_model_json = {}
        flow_log_collector_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of FlowLogCollectorCollectionNext by calling from_dict on the json representation
        flow_log_collector_collection_next_model = FlowLogCollectorCollectionNext.from_dict(
            flow_log_collector_collection_next_model_json)
        assert flow_log_collector_collection_next_model != False

        # Construct a model instance of FlowLogCollectorCollectionNext by calling from_dict on the json representation
        flow_log_collector_collection_next_model_dict = FlowLogCollectorCollectionNext.from_dict(
            flow_log_collector_collection_next_model_json).__dict__
        flow_log_collector_collection_next_model2 = FlowLogCollectorCollectionNext(
            **flow_log_collector_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert flow_log_collector_collection_next_model == flow_log_collector_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_collection_next_model_json2 = flow_log_collector_collection_next_model.to_dict(
        )
        assert flow_log_collector_collection_next_model_json2 == flow_log_collector_collection_next_model_json


class TestFlowLogCollectorPatch():
    """
    Test Class for FlowLogCollectorPatch
    """

    def test_flow_log_collector_patch_serialization(self):
        """
        Test serialization/deserialization for FlowLogCollectorPatch
        """

        # Construct a json representation of a FlowLogCollectorPatch model
        flow_log_collector_patch_model_json = {}
        flow_log_collector_patch_model_json['name'] = 'my-flow-log-collector'
        flow_log_collector_patch_model_json['active'] = True

        # Construct a model instance of FlowLogCollectorPatch by calling from_dict on the json representation
        flow_log_collector_patch_model = FlowLogCollectorPatch.from_dict(
            flow_log_collector_patch_model_json)
        assert flow_log_collector_patch_model != False

        # Construct a model instance of FlowLogCollectorPatch by calling from_dict on the json representation
        flow_log_collector_patch_model_dict = FlowLogCollectorPatch.from_dict(
            flow_log_collector_patch_model_json).__dict__
        flow_log_collector_patch_model2 = FlowLogCollectorPatch(
            **flow_log_collector_patch_model_dict)

        # Verify the model instances are equivalent
        assert flow_log_collector_patch_model == flow_log_collector_patch_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_patch_model_json2 = flow_log_collector_patch_model.to_dict(
        )
        assert flow_log_collector_patch_model_json2 == flow_log_collector_patch_model_json


class TestIKEPolicy():
    """
    Test Class for IKEPolicy
    """

    def test_ike_policy_serialization(self):
        """
        Test serialization/deserialization for IKEPolicy
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        vpn_gateway_connection_reference_model = {
        }  # VPNGatewayConnectionReference
        vpn_gateway_connection_reference_model[
            'id'] = 'a10a5771-dc23-442c-8460-c3601d8542f7'
        vpn_gateway_connection_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b'
        vpn_gateway_connection_reference_model['name'] = 'my-vpn-connection'
        vpn_gateway_connection_reference_model[
            'resource_type'] = 'vpn_gateway_connection'

        # Construct a json representation of a IKEPolicy model
        ike_policy_model_json = {}
        ike_policy_model_json['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'
        ike_policy_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b'
        ike_policy_model_json['name'] = 'my-ike-policy'
        ike_policy_model_json['resource_type'] = 'ike_policy'
        ike_policy_model_json['authentication_algorithm'] = 'md5'
        ike_policy_model_json['dh_group'] = 2
        ike_policy_model_json['encryption_algorithm'] = 'triple_des'
        ike_policy_model_json['ike_version'] = 1
        ike_policy_model_json['key_lifetime'] = 28800
        ike_policy_model_json['resource_group'] = resource_group_reference_model
        ike_policy_model_json['connections'] = [
            vpn_gateway_connection_reference_model
        ]
        ike_policy_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        ike_policy_model_json['negotiation_mode'] = 'main'

        # Construct a model instance of IKEPolicy by calling from_dict on the json representation
        ike_policy_model = IKEPolicy.from_dict(ike_policy_model_json)
        assert ike_policy_model != False

        # Construct a model instance of IKEPolicy by calling from_dict on the json representation
        ike_policy_model_dict = IKEPolicy.from_dict(
            ike_policy_model_json).__dict__
        ike_policy_model2 = IKEPolicy(**ike_policy_model_dict)

        # Verify the model instances are equivalent
        assert ike_policy_model == ike_policy_model2

        # Convert model instance back to dict and verify no loss of data
        ike_policy_model_json2 = ike_policy_model.to_dict()
        assert ike_policy_model_json2 == ike_policy_model_json


class TestIKEPolicyCollection():
    """
    Test Class for IKEPolicyCollection
    """

    def test_ike_policy_collection_serialization(self):
        """
        Test serialization/deserialization for IKEPolicyCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        ike_policy_collection_first_model = {}  # IKEPolicyCollectionFirst
        ike_policy_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ike_policies?limit=20'

        ike_policy_collection_next_model = {}  # IKEPolicyCollectionNext
        ike_policy_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ike_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        vpn_gateway_connection_reference_model = {
        }  # VPNGatewayConnectionReference
        vpn_gateway_connection_reference_model[
            'id'] = 'a10a5771-dc23-442c-8460-c3601d8542f7'
        vpn_gateway_connection_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b'
        vpn_gateway_connection_reference_model['name'] = 'my-vpn-connection'
        vpn_gateway_connection_reference_model[
            'resource_type'] = 'vpn_gateway_connection'

        ike_policy_model = {}  # IKEPolicy
        ike_policy_model['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'
        ike_policy_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b'
        ike_policy_model['name'] = 'my-ike-policy'
        ike_policy_model['resource_type'] = 'ike_policy'
        ike_policy_model['authentication_algorithm'] = 'md5'
        ike_policy_model['dh_group'] = 2
        ike_policy_model['encryption_algorithm'] = 'triple_des'
        ike_policy_model['ike_version'] = 1
        ike_policy_model['key_lifetime'] = 28800
        ike_policy_model['resource_group'] = resource_group_reference_model
        ike_policy_model['connections'] = [
            vpn_gateway_connection_reference_model
        ]
        ike_policy_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        ike_policy_model['negotiation_mode'] = 'main'

        # Construct a json representation of a IKEPolicyCollection model
        ike_policy_collection_model_json = {}
        ike_policy_collection_model_json[
            'first'] = ike_policy_collection_first_model
        ike_policy_collection_model_json['limit'] = 20
        ike_policy_collection_model_json[
            'next'] = ike_policy_collection_next_model
        ike_policy_collection_model_json['total_count'] = 132
        ike_policy_collection_model_json['ike_policies'] = [ike_policy_model]

        # Construct a model instance of IKEPolicyCollection by calling from_dict on the json representation
        ike_policy_collection_model = IKEPolicyCollection.from_dict(
            ike_policy_collection_model_json)
        assert ike_policy_collection_model != False

        # Construct a model instance of IKEPolicyCollection by calling from_dict on the json representation
        ike_policy_collection_model_dict = IKEPolicyCollection.from_dict(
            ike_policy_collection_model_json).__dict__
        ike_policy_collection_model2 = IKEPolicyCollection(
            **ike_policy_collection_model_dict)

        # Verify the model instances are equivalent
        assert ike_policy_collection_model == ike_policy_collection_model2

        # Convert model instance back to dict and verify no loss of data
        ike_policy_collection_model_json2 = ike_policy_collection_model.to_dict(
        )
        assert ike_policy_collection_model_json2 == ike_policy_collection_model_json


class TestIKEPolicyCollectionFirst():
    """
    Test Class for IKEPolicyCollectionFirst
    """

    def test_ike_policy_collection_first_serialization(self):
        """
        Test serialization/deserialization for IKEPolicyCollectionFirst
        """

        # Construct a json representation of a IKEPolicyCollectionFirst model
        ike_policy_collection_first_model_json = {}
        ike_policy_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ike_policies?limit=20'

        # Construct a model instance of IKEPolicyCollectionFirst by calling from_dict on the json representation
        ike_policy_collection_first_model = IKEPolicyCollectionFirst.from_dict(
            ike_policy_collection_first_model_json)
        assert ike_policy_collection_first_model != False

        # Construct a model instance of IKEPolicyCollectionFirst by calling from_dict on the json representation
        ike_policy_collection_first_model_dict = IKEPolicyCollectionFirst.from_dict(
            ike_policy_collection_first_model_json).__dict__
        ike_policy_collection_first_model2 = IKEPolicyCollectionFirst(
            **ike_policy_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert ike_policy_collection_first_model == ike_policy_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        ike_policy_collection_first_model_json2 = ike_policy_collection_first_model.to_dict(
        )
        assert ike_policy_collection_first_model_json2 == ike_policy_collection_first_model_json


class TestIKEPolicyCollectionNext():
    """
    Test Class for IKEPolicyCollectionNext
    """

    def test_ike_policy_collection_next_serialization(self):
        """
        Test serialization/deserialization for IKEPolicyCollectionNext
        """

        # Construct a json representation of a IKEPolicyCollectionNext model
        ike_policy_collection_next_model_json = {}
        ike_policy_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ike_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20'

        # Construct a model instance of IKEPolicyCollectionNext by calling from_dict on the json representation
        ike_policy_collection_next_model = IKEPolicyCollectionNext.from_dict(
            ike_policy_collection_next_model_json)
        assert ike_policy_collection_next_model != False

        # Construct a model instance of IKEPolicyCollectionNext by calling from_dict on the json representation
        ike_policy_collection_next_model_dict = IKEPolicyCollectionNext.from_dict(
            ike_policy_collection_next_model_json).__dict__
        ike_policy_collection_next_model2 = IKEPolicyCollectionNext(
            **ike_policy_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert ike_policy_collection_next_model == ike_policy_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        ike_policy_collection_next_model_json2 = ike_policy_collection_next_model.to_dict(
        )
        assert ike_policy_collection_next_model_json2 == ike_policy_collection_next_model_json


class TestIKEPolicyPatch():
    """
    Test Class for IKEPolicyPatch
    """

    def test_ike_policy_patch_serialization(self):
        """
        Test serialization/deserialization for IKEPolicyPatch
        """

        # Construct a json representation of a IKEPolicyPatch model
        ike_policy_patch_model_json = {}
        ike_policy_patch_model_json['name'] = 'my-ike-policy'
        ike_policy_patch_model_json['authentication_algorithm'] = 'md5'
        ike_policy_patch_model_json['dh_group'] = 2
        ike_policy_patch_model_json['encryption_algorithm'] = 'triple_des'
        ike_policy_patch_model_json['ike_version'] = 1
        ike_policy_patch_model_json['key_lifetime'] = 28800

        # Construct a model instance of IKEPolicyPatch by calling from_dict on the json representation
        ike_policy_patch_model = IKEPolicyPatch.from_dict(
            ike_policy_patch_model_json)
        assert ike_policy_patch_model != False

        # Construct a model instance of IKEPolicyPatch by calling from_dict on the json representation
        ike_policy_patch_model_dict = IKEPolicyPatch.from_dict(
            ike_policy_patch_model_json).__dict__
        ike_policy_patch_model2 = IKEPolicyPatch(**ike_policy_patch_model_dict)

        # Verify the model instances are equivalent
        assert ike_policy_patch_model == ike_policy_patch_model2

        # Convert model instance back to dict and verify no loss of data
        ike_policy_patch_model_json2 = ike_policy_patch_model.to_dict()
        assert ike_policy_patch_model_json2 == ike_policy_patch_model_json


class TestIKEPolicyReference():
    """
    Test Class for IKEPolicyReference
    """

    def test_ike_policy_reference_serialization(self):
        """
        Test serialization/deserialization for IKEPolicyReference
        """

        # Construct a json representation of a IKEPolicyReference model
        ike_policy_reference_model_json = {}
        ike_policy_reference_model_json[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'
        ike_policy_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b'
        ike_policy_reference_model_json['name'] = 'my-ike-policy'
        ike_policy_reference_model_json['resource_type'] = 'ike_policy'

        # Construct a model instance of IKEPolicyReference by calling from_dict on the json representation
        ike_policy_reference_model = IKEPolicyReference.from_dict(
            ike_policy_reference_model_json)
        assert ike_policy_reference_model != False

        # Construct a model instance of IKEPolicyReference by calling from_dict on the json representation
        ike_policy_reference_model_dict = IKEPolicyReference.from_dict(
            ike_policy_reference_model_json).__dict__
        ike_policy_reference_model2 = IKEPolicyReference(
            **ike_policy_reference_model_dict)

        # Verify the model instances are equivalent
        assert ike_policy_reference_model == ike_policy_reference_model2

        # Convert model instance back to dict and verify no loss of data
        ike_policy_reference_model_json2 = ike_policy_reference_model.to_dict()
        assert ike_policy_reference_model_json2 == ike_policy_reference_model_json


class TestIP():
    """
    Test Class for IP
    """

    def test_ip_serialization(self):
        """
        Test serialization/deserialization for IP
        """

        # Construct a json representation of a IP model
        ip_model_json = {}
        ip_model_json['address'] = '192.168.3.4'

        # Construct a model instance of IP by calling from_dict on the json representation
        ip_model = IP.from_dict(ip_model_json)
        assert ip_model != False

        # Construct a model instance of IP by calling from_dict on the json representation
        ip_model_dict = IP.from_dict(ip_model_json).__dict__
        ip_model2 = IP(**ip_model_dict)

        # Verify the model instances are equivalent
        assert ip_model == ip_model2

        # Convert model instance back to dict and verify no loss of data
        ip_model_json2 = ip_model.to_dict()
        assert ip_model_json2 == ip_model_json


class TestIPsecPolicy():
    """
    Test Class for IPsecPolicy
    """

    def test_i_psec_policy_serialization(self):
        """
        Test serialization/deserialization for IPsecPolicy
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        vpn_gateway_connection_reference_model = {
        }  # VPNGatewayConnectionReference
        vpn_gateway_connection_reference_model[
            'id'] = 'a10a5771-dc23-442c-8460-c3601d8542f7'
        vpn_gateway_connection_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b'
        vpn_gateway_connection_reference_model['name'] = 'my-vpn-connection'
        vpn_gateway_connection_reference_model[
            'resource_type'] = 'vpn_gateway_connection'

        # Construct a json representation of a IPsecPolicy model
        i_psec_policy_model_json = {}
        i_psec_policy_model_json['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'
        i_psec_policy_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b'
        i_psec_policy_model_json['name'] = 'my-ipsec-policy'
        i_psec_policy_model_json['resource_type'] = 'ipsec_policy'
        i_psec_policy_model_json['authentication_algorithm'] = 'md5'
        i_psec_policy_model_json['encryption_algorithm'] = 'triple_des'
        i_psec_policy_model_json['key_lifetime'] = 3600
        i_psec_policy_model_json['pfs'] = 'disabled'
        i_psec_policy_model_json[
            'resource_group'] = resource_group_reference_model
        i_psec_policy_model_json['connections'] = [
            vpn_gateway_connection_reference_model
        ]
        i_psec_policy_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        i_psec_policy_model_json['encapsulation_mode'] = 'tunnel'
        i_psec_policy_model_json['transform_protocol'] = 'esp'

        # Construct a model instance of IPsecPolicy by calling from_dict on the json representation
        i_psec_policy_model = IPsecPolicy.from_dict(i_psec_policy_model_json)
        assert i_psec_policy_model != False

        # Construct a model instance of IPsecPolicy by calling from_dict on the json representation
        i_psec_policy_model_dict = IPsecPolicy.from_dict(
            i_psec_policy_model_json).__dict__
        i_psec_policy_model2 = IPsecPolicy(**i_psec_policy_model_dict)

        # Verify the model instances are equivalent
        assert i_psec_policy_model == i_psec_policy_model2

        # Convert model instance back to dict and verify no loss of data
        i_psec_policy_model_json2 = i_psec_policy_model.to_dict()
        assert i_psec_policy_model_json2 == i_psec_policy_model_json


class TestIPsecPolicyCollection():
    """
    Test Class for IPsecPolicyCollection
    """

    def test_i_psec_policy_collection_serialization(self):
        """
        Test serialization/deserialization for IPsecPolicyCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        i_psec_policy_collection_first_model = {}  # IPsecPolicyCollectionFirst
        i_psec_policy_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?limit=20'

        i_psec_policy_collection_next_model = {}  # IPsecPolicyCollectionNext
        i_psec_policy_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        vpn_gateway_connection_reference_model = {
        }  # VPNGatewayConnectionReference
        vpn_gateway_connection_reference_model[
            'id'] = 'a10a5771-dc23-442c-8460-c3601d8542f7'
        vpn_gateway_connection_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b'
        vpn_gateway_connection_reference_model['name'] = 'my-vpn-connection'
        vpn_gateway_connection_reference_model[
            'resource_type'] = 'vpn_gateway_connection'

        i_psec_policy_model = {}  # IPsecPolicy
        i_psec_policy_model['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'
        i_psec_policy_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b'
        i_psec_policy_model['name'] = 'my-ipsec-policy'
        i_psec_policy_model['resource_type'] = 'ipsec_policy'
        i_psec_policy_model['authentication_algorithm'] = 'md5'
        i_psec_policy_model['encryption_algorithm'] = 'triple_des'
        i_psec_policy_model['key_lifetime'] = 3600
        i_psec_policy_model['pfs'] = 'disabled'
        i_psec_policy_model['resource_group'] = resource_group_reference_model
        i_psec_policy_model['connections'] = [
            vpn_gateway_connection_reference_model
        ]
        i_psec_policy_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        i_psec_policy_model['encapsulation_mode'] = 'tunnel'
        i_psec_policy_model['transform_protocol'] = 'esp'

        # Construct a json representation of a IPsecPolicyCollection model
        i_psec_policy_collection_model_json = {}
        i_psec_policy_collection_model_json[
            'first'] = i_psec_policy_collection_first_model
        i_psec_policy_collection_model_json['limit'] = 20
        i_psec_policy_collection_model_json[
            'next'] = i_psec_policy_collection_next_model
        i_psec_policy_collection_model_json['total_count'] = 132
        i_psec_policy_collection_model_json['ipsec_policies'] = [
            i_psec_policy_model
        ]

        # Construct a model instance of IPsecPolicyCollection by calling from_dict on the json representation
        i_psec_policy_collection_model = IPsecPolicyCollection.from_dict(
            i_psec_policy_collection_model_json)
        assert i_psec_policy_collection_model != False

        # Construct a model instance of IPsecPolicyCollection by calling from_dict on the json representation
        i_psec_policy_collection_model_dict = IPsecPolicyCollection.from_dict(
            i_psec_policy_collection_model_json).__dict__
        i_psec_policy_collection_model2 = IPsecPolicyCollection(
            **i_psec_policy_collection_model_dict)

        # Verify the model instances are equivalent
        assert i_psec_policy_collection_model == i_psec_policy_collection_model2

        # Convert model instance back to dict and verify no loss of data
        i_psec_policy_collection_model_json2 = i_psec_policy_collection_model.to_dict(
        )
        assert i_psec_policy_collection_model_json2 == i_psec_policy_collection_model_json


class TestIPsecPolicyCollectionFirst():
    """
    Test Class for IPsecPolicyCollectionFirst
    """

    def test_i_psec_policy_collection_first_serialization(self):
        """
        Test serialization/deserialization for IPsecPolicyCollectionFirst
        """

        # Construct a json representation of a IPsecPolicyCollectionFirst model
        i_psec_policy_collection_first_model_json = {}
        i_psec_policy_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?limit=20'

        # Construct a model instance of IPsecPolicyCollectionFirst by calling from_dict on the json representation
        i_psec_policy_collection_first_model = IPsecPolicyCollectionFirst.from_dict(
            i_psec_policy_collection_first_model_json)
        assert i_psec_policy_collection_first_model != False

        # Construct a model instance of IPsecPolicyCollectionFirst by calling from_dict on the json representation
        i_psec_policy_collection_first_model_dict = IPsecPolicyCollectionFirst.from_dict(
            i_psec_policy_collection_first_model_json).__dict__
        i_psec_policy_collection_first_model2 = IPsecPolicyCollectionFirst(
            **i_psec_policy_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert i_psec_policy_collection_first_model == i_psec_policy_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        i_psec_policy_collection_first_model_json2 = i_psec_policy_collection_first_model.to_dict(
        )
        assert i_psec_policy_collection_first_model_json2 == i_psec_policy_collection_first_model_json


class TestIPsecPolicyCollectionNext():
    """
    Test Class for IPsecPolicyCollectionNext
    """

    def test_i_psec_policy_collection_next_serialization(self):
        """
        Test serialization/deserialization for IPsecPolicyCollectionNext
        """

        # Construct a json representation of a IPsecPolicyCollectionNext model
        i_psec_policy_collection_next_model_json = {}
        i_psec_policy_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20'

        # Construct a model instance of IPsecPolicyCollectionNext by calling from_dict on the json representation
        i_psec_policy_collection_next_model = IPsecPolicyCollectionNext.from_dict(
            i_psec_policy_collection_next_model_json)
        assert i_psec_policy_collection_next_model != False

        # Construct a model instance of IPsecPolicyCollectionNext by calling from_dict on the json representation
        i_psec_policy_collection_next_model_dict = IPsecPolicyCollectionNext.from_dict(
            i_psec_policy_collection_next_model_json).__dict__
        i_psec_policy_collection_next_model2 = IPsecPolicyCollectionNext(
            **i_psec_policy_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert i_psec_policy_collection_next_model == i_psec_policy_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        i_psec_policy_collection_next_model_json2 = i_psec_policy_collection_next_model.to_dict(
        )
        assert i_psec_policy_collection_next_model_json2 == i_psec_policy_collection_next_model_json


class TestIPsecPolicyPatch():
    """
    Test Class for IPsecPolicyPatch
    """

    def test_i_psec_policy_patch_serialization(self):
        """
        Test serialization/deserialization for IPsecPolicyPatch
        """

        # Construct a json representation of a IPsecPolicyPatch model
        i_psec_policy_patch_model_json = {}
        i_psec_policy_patch_model_json['name'] = 'my-ipsec-policy'
        i_psec_policy_patch_model_json['authentication_algorithm'] = 'md5'
        i_psec_policy_patch_model_json['encryption_algorithm'] = 'triple_des'
        i_psec_policy_patch_model_json['key_lifetime'] = 3600
        i_psec_policy_patch_model_json['pfs'] = 'disabled'

        # Construct a model instance of IPsecPolicyPatch by calling from_dict on the json representation
        i_psec_policy_patch_model = IPsecPolicyPatch.from_dict(
            i_psec_policy_patch_model_json)
        assert i_psec_policy_patch_model != False

        # Construct a model instance of IPsecPolicyPatch by calling from_dict on the json representation
        i_psec_policy_patch_model_dict = IPsecPolicyPatch.from_dict(
            i_psec_policy_patch_model_json).__dict__
        i_psec_policy_patch_model2 = IPsecPolicyPatch(
            **i_psec_policy_patch_model_dict)

        # Verify the model instances are equivalent
        assert i_psec_policy_patch_model == i_psec_policy_patch_model2

        # Convert model instance back to dict and verify no loss of data
        i_psec_policy_patch_model_json2 = i_psec_policy_patch_model.to_dict()
        assert i_psec_policy_patch_model_json2 == i_psec_policy_patch_model_json


class TestIPsecPolicyReference():
    """
    Test Class for IPsecPolicyReference
    """

    def test_i_psec_policy_reference_serialization(self):
        """
        Test serialization/deserialization for IPsecPolicyReference
        """

        # Construct a json representation of a IPsecPolicyReference model
        i_psec_policy_reference_model_json = {}
        i_psec_policy_reference_model_json[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'
        i_psec_policy_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b'
        i_psec_policy_reference_model_json['name'] = 'my-ipsec-policy'
        i_psec_policy_reference_model_json['resource_type'] = 'ipsec_policy'

        # Construct a model instance of IPsecPolicyReference by calling from_dict on the json representation
        i_psec_policy_reference_model = IPsecPolicyReference.from_dict(
            i_psec_policy_reference_model_json)
        assert i_psec_policy_reference_model != False

        # Construct a model instance of IPsecPolicyReference by calling from_dict on the json representation
        i_psec_policy_reference_model_dict = IPsecPolicyReference.from_dict(
            i_psec_policy_reference_model_json).__dict__
        i_psec_policy_reference_model2 = IPsecPolicyReference(
            **i_psec_policy_reference_model_dict)

        # Verify the model instances are equivalent
        assert i_psec_policy_reference_model == i_psec_policy_reference_model2

        # Convert model instance back to dict and verify no loss of data
        i_psec_policy_reference_model_json2 = i_psec_policy_reference_model.to_dict(
        )
        assert i_psec_policy_reference_model_json2 == i_psec_policy_reference_model_json


class TestImage():
    """
    Test Class for Image
    """

    def test_image_serialization(self):
        """
        Test serialization/deserialization for Image
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        encryption_key_reference_model = {}  # EncryptionKeyReference
        encryption_key_reference_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        image_file_model = {}  # ImageFile
        image_file_model['size'] = 1

        operating_system_model = {}  # OperatingSystem
        operating_system_model['name'] = 'ubuntu-16-amd64'
        operating_system_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64'
        operating_system_model['architecture'] = 'amd64'
        operating_system_model['display_name'] = 'Ubuntu Server 16.04 LTS amd64'
        operating_system_model['family'] = 'Ubuntu Server'
        operating_system_model['vendor'] = 'Canonical'
        operating_system_model['version'] = '16.04 LTS'

        # Construct a json representation of a Image model
        image_model_json = {}
        image_model_json['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_model_json['name'] = 'my-image'
        image_model_json['minimum_provisioned_size'] = 38
        image_model_json['resource_group'] = resource_group_reference_model
        image_model_json['encryption'] = 'user_managed'
        image_model_json['encryption_key'] = encryption_key_reference_model
        image_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        image_model_json['file'] = image_file_model
        image_model_json['operating_system'] = operating_system_model
        image_model_json['status'] = 'available'
        image_model_json['visibility'] = 'private'

        # Construct a model instance of Image by calling from_dict on the json representation
        image_model = Image.from_dict(image_model_json)
        assert image_model != False

        # Construct a model instance of Image by calling from_dict on the json representation
        image_model_dict = Image.from_dict(image_model_json).__dict__
        image_model2 = Image(**image_model_dict)

        # Verify the model instances are equivalent
        assert image_model == image_model2

        # Convert model instance back to dict and verify no loss of data
        image_model_json2 = image_model.to_dict()
        assert image_model_json2 == image_model_json


class TestImageCollection():
    """
    Test Class for ImageCollection
    """

    def test_image_collection_serialization(self):
        """
        Test serialization/deserialization for ImageCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        image_collection_first_model = {}  # ImageCollectionFirst
        image_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images?limit=20'

        image_collection_next_model = {}  # ImageCollectionNext
        image_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        encryption_key_reference_model = {}  # EncryptionKeyReference
        encryption_key_reference_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        image_file_model = {}  # ImageFile
        image_file_model['size'] = 1

        operating_system_model = {}  # OperatingSystem
        operating_system_model['name'] = 'ubuntu-16-amd64'
        operating_system_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64'
        operating_system_model['architecture'] = 'amd64'
        operating_system_model['display_name'] = 'Ubuntu Server 16.04 LTS amd64'
        operating_system_model['family'] = 'Ubuntu Server'
        operating_system_model['vendor'] = 'Canonical'
        operating_system_model['version'] = '16.04 LTS'

        image_model = {}  # Image
        image_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_model['name'] = 'my-image'
        image_model['minimum_provisioned_size'] = 38
        image_model['resource_group'] = resource_group_reference_model
        image_model['encryption'] = 'user_managed'
        image_model['encryption_key'] = encryption_key_reference_model
        image_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        image_model['file'] = image_file_model
        image_model['operating_system'] = operating_system_model
        image_model['status'] = 'available'
        image_model['visibility'] = 'private'

        # Construct a json representation of a ImageCollection model
        image_collection_model_json = {}
        image_collection_model_json['first'] = image_collection_first_model
        image_collection_model_json['limit'] = 20
        image_collection_model_json['next'] = image_collection_next_model
        image_collection_model_json['images'] = [image_model]

        # Construct a model instance of ImageCollection by calling from_dict on the json representation
        image_collection_model = ImageCollection.from_dict(
            image_collection_model_json)
        assert image_collection_model != False

        # Construct a model instance of ImageCollection by calling from_dict on the json representation
        image_collection_model_dict = ImageCollection.from_dict(
            image_collection_model_json).__dict__
        image_collection_model2 = ImageCollection(**image_collection_model_dict)

        # Verify the model instances are equivalent
        assert image_collection_model == image_collection_model2

        # Convert model instance back to dict and verify no loss of data
        image_collection_model_json2 = image_collection_model.to_dict()
        assert image_collection_model_json2 == image_collection_model_json


class TestImageCollectionFirst():
    """
    Test Class for ImageCollectionFirst
    """

    def test_image_collection_first_serialization(self):
        """
        Test serialization/deserialization for ImageCollectionFirst
        """

        # Construct a json representation of a ImageCollectionFirst model
        image_collection_first_model_json = {}
        image_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images?limit=20'

        # Construct a model instance of ImageCollectionFirst by calling from_dict on the json representation
        image_collection_first_model = ImageCollectionFirst.from_dict(
            image_collection_first_model_json)
        assert image_collection_first_model != False

        # Construct a model instance of ImageCollectionFirst by calling from_dict on the json representation
        image_collection_first_model_dict = ImageCollectionFirst.from_dict(
            image_collection_first_model_json).__dict__
        image_collection_first_model2 = ImageCollectionFirst(
            **image_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert image_collection_first_model == image_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        image_collection_first_model_json2 = image_collection_first_model.to_dict(
        )
        assert image_collection_first_model_json2 == image_collection_first_model_json


class TestImageCollectionNext():
    """
    Test Class for ImageCollectionNext
    """

    def test_image_collection_next_serialization(self):
        """
        Test serialization/deserialization for ImageCollectionNext
        """

        # Construct a json representation of a ImageCollectionNext model
        image_collection_next_model_json = {}
        image_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of ImageCollectionNext by calling from_dict on the json representation
        image_collection_next_model = ImageCollectionNext.from_dict(
            image_collection_next_model_json)
        assert image_collection_next_model != False

        # Construct a model instance of ImageCollectionNext by calling from_dict on the json representation
        image_collection_next_model_dict = ImageCollectionNext.from_dict(
            image_collection_next_model_json).__dict__
        image_collection_next_model2 = ImageCollectionNext(
            **image_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert image_collection_next_model == image_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        image_collection_next_model_json2 = image_collection_next_model.to_dict(
        )
        assert image_collection_next_model_json2 == image_collection_next_model_json


class TestImageFile():
    """
    Test Class for ImageFile
    """

    def test_image_file_serialization(self):
        """
        Test serialization/deserialization for ImageFile
        """

        # Construct a json representation of a ImageFile model
        image_file_model_json = {}
        image_file_model_json['size'] = 1

        # Construct a model instance of ImageFile by calling from_dict on the json representation
        image_file_model = ImageFile.from_dict(image_file_model_json)
        assert image_file_model != False

        # Construct a model instance of ImageFile by calling from_dict on the json representation
        image_file_model_dict = ImageFile.from_dict(
            image_file_model_json).__dict__
        image_file_model2 = ImageFile(**image_file_model_dict)

        # Verify the model instances are equivalent
        assert image_file_model == image_file_model2

        # Convert model instance back to dict and verify no loss of data
        image_file_model_json2 = image_file_model.to_dict()
        assert image_file_model_json2 == image_file_model_json


class TestImageFilePrototype():
    """
    Test Class for ImageFilePrototype
    """

    def test_image_file_prototype_serialization(self):
        """
        Test serialization/deserialization for ImageFilePrototype
        """

        # Construct a json representation of a ImageFilePrototype model
        image_file_prototype_model_json = {}
        image_file_prototype_model_json[
            'href'] = 'cos://us-south/custom-image-vpc-bucket/customImage-0.vhd'

        # Construct a model instance of ImageFilePrototype by calling from_dict on the json representation
        image_file_prototype_model = ImageFilePrototype.from_dict(
            image_file_prototype_model_json)
        assert image_file_prototype_model != False

        # Construct a model instance of ImageFilePrototype by calling from_dict on the json representation
        image_file_prototype_model_dict = ImageFilePrototype.from_dict(
            image_file_prototype_model_json).__dict__
        image_file_prototype_model2 = ImageFilePrototype(
            **image_file_prototype_model_dict)

        # Verify the model instances are equivalent
        assert image_file_prototype_model == image_file_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        image_file_prototype_model_json2 = image_file_prototype_model.to_dict()
        assert image_file_prototype_model_json2 == image_file_prototype_model_json


class TestImagePatch():
    """
    Test Class for ImagePatch
    """

    def test_image_patch_serialization(self):
        """
        Test serialization/deserialization for ImagePatch
        """

        # Construct a json representation of a ImagePatch model
        image_patch_model_json = {}
        image_patch_model_json['name'] = 'my-image'

        # Construct a model instance of ImagePatch by calling from_dict on the json representation
        image_patch_model = ImagePatch.from_dict(image_patch_model_json)
        assert image_patch_model != False

        # Construct a model instance of ImagePatch by calling from_dict on the json representation
        image_patch_model_dict = ImagePatch.from_dict(
            image_patch_model_json).__dict__
        image_patch_model2 = ImagePatch(**image_patch_model_dict)

        # Verify the model instances are equivalent
        assert image_patch_model == image_patch_model2

        # Convert model instance back to dict and verify no loss of data
        image_patch_model_json2 = image_patch_model.to_dict()
        assert image_patch_model_json2 == image_patch_model_json


class TestImageReference():
    """
    Test Class for ImageReference
    """

    def test_image_reference_serialization(self):
        """
        Test serialization/deserialization for ImageReference
        """

        # Construct a json representation of a ImageReference model
        image_reference_model_json = {}
        image_reference_model_json[
            'id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_reference_model_json['name'] = 'my-image'

        # Construct a model instance of ImageReference by calling from_dict on the json representation
        image_reference_model = ImageReference.from_dict(
            image_reference_model_json)
        assert image_reference_model != False

        # Construct a model instance of ImageReference by calling from_dict on the json representation
        image_reference_model_dict = ImageReference.from_dict(
            image_reference_model_json).__dict__
        image_reference_model2 = ImageReference(**image_reference_model_dict)

        # Verify the model instances are equivalent
        assert image_reference_model == image_reference_model2

        # Convert model instance back to dict and verify no loss of data
        image_reference_model_json2 = image_reference_model.to_dict()
        assert image_reference_model_json2 == image_reference_model_json


class TestInstance():
    """
    Test Class for Instance
    """

    def test_instance_serialization(self):
        """
        Test serialization/deserialization for Instance
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        volume_attachment_device_model = {}  # VolumeAttachmentDevice
        volume_attachment_device_model[
            'id'] = '80b3e36e-41f4-40e9-bd56-beae81792a68'

        volume_reference_model = {}  # VolumeReference
        volume_reference_model['id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model['name'] = 'my-volume'

        volume_attachment_reference_instance_context_model = {
        }  # VolumeAttachmentReferenceInstanceContext
        volume_attachment_reference_instance_context_model[
            'id'] = '82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_instance_context_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_instance_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_reference_instance_context_model[
            'device'] = volume_attachment_device_model
        volume_attachment_reference_instance_context_model[
            'volume'] = volume_reference_model

        instance_gpu_model = {}  # InstanceGPU
        instance_gpu_model['count'] = 1
        instance_gpu_model['manufacturer'] = 'nvidia'
        instance_gpu_model['memory'] = 1
        instance_gpu_model['model'] = 'Tesla V100'

        image_reference_model = {}  # ImageReference
        image_reference_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_reference_model['name'] = 'my-image'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        network_interface_instance_context_reference_model = {
        }  # NetworkInterfaceInstanceContextReference
        network_interface_instance_context_reference_model[
            'name'] = 'my-network-interface'
        network_interface_instance_context_reference_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_instance_context_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_instance_context_reference_model[
            'primary_ipv4_address'] = '192.168.3.4'
        network_interface_instance_context_reference_model[
            'resource_type'] = 'network_interface'
        network_interface_instance_context_reference_model[
            'subnet'] = subnet_reference_model

        instance_profile_reference_model = {}  # InstanceProfileReference
        instance_profile_reference_model['name'] = 'bc1-4x16'
        instance_profile_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16'

        instance_vcpu_model = {}  # InstanceVCPU
        instance_vcpu_model['architecture'] = 'amd64'
        instance_vcpu_model['count'] = 4

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model['name'] = 'us-south-1'
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        # Construct a json representation of a Instance model
        instance_model_json = {}
        instance_model_json['id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_model_json['name'] = 'my-instance'
        instance_model_json['resource_group'] = resource_group_reference_model
        instance_model_json['bandwidth'] = 1000
        instance_model_json[
            'boot_volume_attachment'] = volume_attachment_reference_instance_context_model
        instance_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        instance_model_json['gpu'] = instance_gpu_model
        instance_model_json['image'] = image_reference_model
        instance_model_json['memory'] = 8
        instance_model_json['network_interfaces'] = [
            network_interface_instance_context_reference_model
        ]
        instance_model_json[
            'primary_network_interface'] = network_interface_instance_context_reference_model
        instance_model_json['profile'] = instance_profile_reference_model
        instance_model_json['status'] = 'failed'
        instance_model_json['vcpu'] = instance_vcpu_model
        instance_model_json['volume_attachments'] = [
            volume_attachment_reference_instance_context_model
        ]
        instance_model_json['vpc'] = vpc_reference_model
        instance_model_json['zone'] = zone_reference_model

        # Construct a model instance of Instance by calling from_dict on the json representation
        instance_model = Instance.from_dict(instance_model_json)
        assert instance_model != False

        # Construct a model instance of Instance by calling from_dict on the json representation
        instance_model_dict = Instance.from_dict(instance_model_json).__dict__
        instance_model2 = Instance(**instance_model_dict)

        # Verify the model instances are equivalent
        assert instance_model == instance_model2

        # Convert model instance back to dict and verify no loss of data
        instance_model_json2 = instance_model.to_dict()
        assert instance_model_json2 == instance_model_json


class TestInstanceAction():
    """
    Test Class for InstanceAction
    """

    def test_instance_action_serialization(self):
        """
        Test serialization/deserialization for InstanceAction
        """

        # Construct a json representation of a InstanceAction model
        instance_action_model_json = {}
        instance_action_model_json[
            'id'] = '109a1b6e-1242-4de1-be44-38705e9474ed'
        instance_action_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/actions/109a1b6e-1242-4de1-be44-38705e9474ed'
        instance_action_model_json['force'] = True
        instance_action_model_json['type'] = 'reboot'
        instance_action_model_json[
            'completed_at'] = '2020-01-28T18:40:40.123456Z'
        instance_action_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        instance_action_model_json['started_at'] = '2020-01-28T18:40:40.123456Z'
        instance_action_model_json['status'] = 'completed'

        # Construct a model instance of InstanceAction by calling from_dict on the json representation
        instance_action_model = InstanceAction.from_dict(
            instance_action_model_json)
        assert instance_action_model != False

        # Construct a model instance of InstanceAction by calling from_dict on the json representation
        instance_action_model_dict = InstanceAction.from_dict(
            instance_action_model_json).__dict__
        instance_action_model2 = InstanceAction(**instance_action_model_dict)

        # Verify the model instances are equivalent
        assert instance_action_model == instance_action_model2

        # Convert model instance back to dict and verify no loss of data
        instance_action_model_json2 = instance_action_model.to_dict()
        assert instance_action_model_json2 == instance_action_model_json


class TestInstanceCollection():
    """
    Test Class for InstanceCollection
    """

    def test_instance_collection_serialization(self):
        """
        Test serialization/deserialization for InstanceCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        instance_collection_first_model = {}  # InstanceCollectionFirst
        instance_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances?limit=20'

        instance_collection_next_model = {}  # InstanceCollectionNext
        instance_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        volume_attachment_device_model = {}  # VolumeAttachmentDevice
        volume_attachment_device_model[
            'id'] = '80b3e36e-41f4-40e9-bd56-beae81792a68'

        volume_reference_model = {}  # VolumeReference
        volume_reference_model['id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model['name'] = 'my-volume'

        volume_attachment_reference_instance_context_model = {
        }  # VolumeAttachmentReferenceInstanceContext
        volume_attachment_reference_instance_context_model[
            'id'] = '82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_instance_context_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_instance_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_reference_instance_context_model[
            'device'] = volume_attachment_device_model
        volume_attachment_reference_instance_context_model[
            'volume'] = volume_reference_model

        instance_gpu_model = {}  # InstanceGPU
        instance_gpu_model['count'] = 1
        instance_gpu_model['manufacturer'] = 'nvidia'
        instance_gpu_model['memory'] = 1
        instance_gpu_model['model'] = 'Tesla V100'

        image_reference_model = {}  # ImageReference
        image_reference_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'
        image_reference_model['name'] = 'my-image'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        network_interface_instance_context_reference_model = {
        }  # NetworkInterfaceInstanceContextReference
        network_interface_instance_context_reference_model[
            'name'] = 'my-network-interface'
        network_interface_instance_context_reference_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_instance_context_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_instance_context_reference_model[
            'primary_ipv4_address'] = '192.168.3.4'
        network_interface_instance_context_reference_model[
            'resource_type'] = 'network_interface'
        network_interface_instance_context_reference_model[
            'subnet'] = subnet_reference_model

        instance_profile_reference_model = {}  # InstanceProfileReference
        instance_profile_reference_model['name'] = 'bc1-4x16'
        instance_profile_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16'

        instance_vcpu_model = {}  # InstanceVCPU
        instance_vcpu_model['architecture'] = 'amd64'
        instance_vcpu_model['count'] = 4

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model['name'] = 'us-south-1'
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        instance_model = {}  # Instance
        instance_model['id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_model['name'] = 'my-instance'
        instance_model['resource_group'] = resource_group_reference_model
        instance_model['bandwidth'] = 1000
        instance_model[
            'boot_volume_attachment'] = volume_attachment_reference_instance_context_model
        instance_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        instance_model['gpu'] = instance_gpu_model
        instance_model['image'] = image_reference_model
        instance_model['memory'] = 8
        instance_model['network_interfaces'] = [
            network_interface_instance_context_reference_model
        ]
        instance_model[
            'primary_network_interface'] = network_interface_instance_context_reference_model
        instance_model['profile'] = instance_profile_reference_model
        instance_model['status'] = 'failed'
        instance_model['vcpu'] = instance_vcpu_model
        instance_model['volume_attachments'] = [
            volume_attachment_reference_instance_context_model
        ]
        instance_model['vpc'] = vpc_reference_model
        instance_model['zone'] = zone_reference_model

        # Construct a json representation of a InstanceCollection model
        instance_collection_model_json = {}
        instance_collection_model_json[
            'first'] = instance_collection_first_model
        instance_collection_model_json['limit'] = 20
        instance_collection_model_json['next'] = instance_collection_next_model
        instance_collection_model_json['total_count'] = 132
        instance_collection_model_json['instances'] = [instance_model]

        # Construct a model instance of InstanceCollection by calling from_dict on the json representation
        instance_collection_model = InstanceCollection.from_dict(
            instance_collection_model_json)
        assert instance_collection_model != False

        # Construct a model instance of InstanceCollection by calling from_dict on the json representation
        instance_collection_model_dict = InstanceCollection.from_dict(
            instance_collection_model_json).__dict__
        instance_collection_model2 = InstanceCollection(
            **instance_collection_model_dict)

        # Verify the model instances are equivalent
        assert instance_collection_model == instance_collection_model2

        # Convert model instance back to dict and verify no loss of data
        instance_collection_model_json2 = instance_collection_model.to_dict()
        assert instance_collection_model_json2 == instance_collection_model_json


class TestInstanceCollectionFirst():
    """
    Test Class for InstanceCollectionFirst
    """

    def test_instance_collection_first_serialization(self):
        """
        Test serialization/deserialization for InstanceCollectionFirst
        """

        # Construct a json representation of a InstanceCollectionFirst model
        instance_collection_first_model_json = {}
        instance_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances?limit=20'

        # Construct a model instance of InstanceCollectionFirst by calling from_dict on the json representation
        instance_collection_first_model = InstanceCollectionFirst.from_dict(
            instance_collection_first_model_json)
        assert instance_collection_first_model != False

        # Construct a model instance of InstanceCollectionFirst by calling from_dict on the json representation
        instance_collection_first_model_dict = InstanceCollectionFirst.from_dict(
            instance_collection_first_model_json).__dict__
        instance_collection_first_model2 = InstanceCollectionFirst(
            **instance_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert instance_collection_first_model == instance_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        instance_collection_first_model_json2 = instance_collection_first_model.to_dict(
        )
        assert instance_collection_first_model_json2 == instance_collection_first_model_json


class TestInstanceCollectionNext():
    """
    Test Class for InstanceCollectionNext
    """

    def test_instance_collection_next_serialization(self):
        """
        Test serialization/deserialization for InstanceCollectionNext
        """

        # Construct a json representation of a InstanceCollectionNext model
        instance_collection_next_model_json = {}
        instance_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of InstanceCollectionNext by calling from_dict on the json representation
        instance_collection_next_model = InstanceCollectionNext.from_dict(
            instance_collection_next_model_json)
        assert instance_collection_next_model != False

        # Construct a model instance of InstanceCollectionNext by calling from_dict on the json representation
        instance_collection_next_model_dict = InstanceCollectionNext.from_dict(
            instance_collection_next_model_json).__dict__
        instance_collection_next_model2 = InstanceCollectionNext(
            **instance_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert instance_collection_next_model == instance_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        instance_collection_next_model_json2 = instance_collection_next_model.to_dict(
        )
        assert instance_collection_next_model_json2 == instance_collection_next_model_json


class TestInstanceGPU():
    """
    Test Class for InstanceGPU
    """

    def test_instance_gpu_serialization(self):
        """
        Test serialization/deserialization for InstanceGPU
        """

        # Construct a json representation of a InstanceGPU model
        instance_gpu_model_json = {}
        instance_gpu_model_json['count'] = 1
        instance_gpu_model_json['manufacturer'] = 'nvidia'
        instance_gpu_model_json['memory'] = 1
        instance_gpu_model_json['model'] = 'Tesla V100'

        # Construct a model instance of InstanceGPU by calling from_dict on the json representation
        instance_gpu_model = InstanceGPU.from_dict(instance_gpu_model_json)
        assert instance_gpu_model != False

        # Construct a model instance of InstanceGPU by calling from_dict on the json representation
        instance_gpu_model_dict = InstanceGPU.from_dict(
            instance_gpu_model_json).__dict__
        instance_gpu_model2 = InstanceGPU(**instance_gpu_model_dict)

        # Verify the model instances are equivalent
        assert instance_gpu_model == instance_gpu_model2

        # Convert model instance back to dict and verify no loss of data
        instance_gpu_model_json2 = instance_gpu_model.to_dict()
        assert instance_gpu_model_json2 == instance_gpu_model_json


class TestInstanceGroup():
    """
    Test Class for InstanceGroup
    """

    def test_instance_group_serialization(self):
        """
        Test serialization/deserialization for InstanceGroup
        """

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_pool_reference_model = {}  # LoadBalancerPoolReference
        load_balancer_pool_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model['name'] = 'my-load-balancer-pool'

        instance_template_reference_model = {}  # InstanceTemplateReference
        instance_template_reference_model[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'
        instance_template_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_template_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a'

        instance_group_manager_reference_model = {
        }  # InstanceGroupManagerReference
        instance_group_manager_reference_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_manager_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727'
        instance_group_manager_reference_model[
            'name'] = 'my-instance-group-manager'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        # Construct a json representation of a InstanceGroup model
        instance_group_model_json = {}
        instance_group_model_json['id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_model_json['name'] = 'my-instance-group'
        instance_group_model_json['membership_count'] = 10
        instance_group_model_json['application_port'] = 22
        instance_group_model_json[
            'load_balancer_pool'] = load_balancer_pool_reference_model
        instance_group_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        instance_group_model_json[
            'instance_template'] = instance_template_reference_model
        instance_group_model_json['managers'] = [
            instance_group_manager_reference_model
        ]
        instance_group_model_json[
            'resource_group'] = resource_group_reference_model
        instance_group_model_json['status'] = 'deleting'
        instance_group_model_json['subnets'] = [subnet_reference_model]
        instance_group_model_json['vpc'] = vpc_reference_model

        # Construct a model instance of InstanceGroup by calling from_dict on the json representation
        instance_group_model = InstanceGroup.from_dict(
            instance_group_model_json)
        assert instance_group_model != False

        # Construct a model instance of InstanceGroup by calling from_dict on the json representation
        instance_group_model_dict = InstanceGroup.from_dict(
            instance_group_model_json).__dict__
        instance_group_model2 = InstanceGroup(**instance_group_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_model == instance_group_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_model_json2 = instance_group_model.to_dict()
        assert instance_group_model_json2 == instance_group_model_json


class TestInstanceGroupCollection():
    """
    Test Class for InstanceGroupCollection
    """

    def test_instance_group_collection_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        instance_group_collection_first_model = {
        }  # InstanceGroupCollectionFirst
        instance_group_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups?limit=20'

        instance_group_collection_next_model = {}  # InstanceGroupCollectionNext
        instance_group_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        load_balancer_pool_reference_model = {}  # LoadBalancerPoolReference
        load_balancer_pool_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model['name'] = 'my-load-balancer-pool'

        instance_template_reference_model = {}  # InstanceTemplateReference
        instance_template_reference_model[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'
        instance_template_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_template_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a'

        instance_group_manager_reference_model = {
        }  # InstanceGroupManagerReference
        instance_group_manager_reference_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_manager_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727'
        instance_group_manager_reference_model[
            'name'] = 'my-instance-group-manager'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        instance_group_model = {}  # InstanceGroup
        instance_group_model['id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_model['name'] = 'my-instance-group'
        instance_group_model['membership_count'] = 10
        instance_group_model['application_port'] = 22
        instance_group_model[
            'load_balancer_pool'] = load_balancer_pool_reference_model
        instance_group_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        instance_group_model[
            'instance_template'] = instance_template_reference_model
        instance_group_model['managers'] = [
            instance_group_manager_reference_model
        ]
        instance_group_model['resource_group'] = resource_group_reference_model
        instance_group_model['status'] = 'deleting'
        instance_group_model['subnets'] = [subnet_reference_model]
        instance_group_model['vpc'] = vpc_reference_model

        # Construct a json representation of a InstanceGroupCollection model
        instance_group_collection_model_json = {}
        instance_group_collection_model_json[
            'first'] = instance_group_collection_first_model
        instance_group_collection_model_json['limit'] = 20
        instance_group_collection_model_json[
            'next'] = instance_group_collection_next_model
        instance_group_collection_model_json['total_count'] = 132
        instance_group_collection_model_json['instance_groups'] = [
            instance_group_model
        ]

        # Construct a model instance of InstanceGroupCollection by calling from_dict on the json representation
        instance_group_collection_model = InstanceGroupCollection.from_dict(
            instance_group_collection_model_json)
        assert instance_group_collection_model != False

        # Construct a model instance of InstanceGroupCollection by calling from_dict on the json representation
        instance_group_collection_model_dict = InstanceGroupCollection.from_dict(
            instance_group_collection_model_json).__dict__
        instance_group_collection_model2 = InstanceGroupCollection(
            **instance_group_collection_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_collection_model == instance_group_collection_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_collection_model_json2 = instance_group_collection_model.to_dict(
        )
        assert instance_group_collection_model_json2 == instance_group_collection_model_json


class TestInstanceGroupCollectionFirst():
    """
    Test Class for InstanceGroupCollectionFirst
    """

    def test_instance_group_collection_first_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupCollectionFirst
        """

        # Construct a json representation of a InstanceGroupCollectionFirst model
        instance_group_collection_first_model_json = {}
        instance_group_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups?limit=20'

        # Construct a model instance of InstanceGroupCollectionFirst by calling from_dict on the json representation
        instance_group_collection_first_model = InstanceGroupCollectionFirst.from_dict(
            instance_group_collection_first_model_json)
        assert instance_group_collection_first_model != False

        # Construct a model instance of InstanceGroupCollectionFirst by calling from_dict on the json representation
        instance_group_collection_first_model_dict = InstanceGroupCollectionFirst.from_dict(
            instance_group_collection_first_model_json).__dict__
        instance_group_collection_first_model2 = InstanceGroupCollectionFirst(
            **instance_group_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_collection_first_model == instance_group_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_collection_first_model_json2 = instance_group_collection_first_model.to_dict(
        )
        assert instance_group_collection_first_model_json2 == instance_group_collection_first_model_json


class TestInstanceGroupCollectionNext():
    """
    Test Class for InstanceGroupCollectionNext
    """

    def test_instance_group_collection_next_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupCollectionNext
        """

        # Construct a json representation of a InstanceGroupCollectionNext model
        instance_group_collection_next_model_json = {}
        instance_group_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of InstanceGroupCollectionNext by calling from_dict on the json representation
        instance_group_collection_next_model = InstanceGroupCollectionNext.from_dict(
            instance_group_collection_next_model_json)
        assert instance_group_collection_next_model != False

        # Construct a model instance of InstanceGroupCollectionNext by calling from_dict on the json representation
        instance_group_collection_next_model_dict = InstanceGroupCollectionNext.from_dict(
            instance_group_collection_next_model_json).__dict__
        instance_group_collection_next_model2 = InstanceGroupCollectionNext(
            **instance_group_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_collection_next_model == instance_group_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_collection_next_model_json2 = instance_group_collection_next_model.to_dict(
        )
        assert instance_group_collection_next_model_json2 == instance_group_collection_next_model_json


class TestInstanceGroupManager():
    """
    Test Class for InstanceGroupManager
    """

    def test_instance_group_manager_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupManager
        """

        # Construct dict forms of any model objects needed in order to build this model.

        instance_group_manager_policy_reference_model = {
        }  # InstanceGroupManagerPolicyReference
        instance_group_manager_policy_reference_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_manager_policy_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_manager_policy_reference_model[
            'name'] = 'my-instance-group-manager-policy'

        # Construct a json representation of a InstanceGroupManager model
        instance_group_manager_model_json = {}
        instance_group_manager_model_json[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_manager_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727'
        instance_group_manager_model_json['name'] = 'my-instance-group-manager'
        instance_group_manager_model_json['management_enabled'] = True
        instance_group_manager_model_json['aggregation_window'] = 120
        instance_group_manager_model_json['cooldown'] = 210
        instance_group_manager_model_json['max_membership_count'] = 10
        instance_group_manager_model_json['min_membership_count'] = 10
        instance_group_manager_model_json['manager_type'] = 'autoscale'
        instance_group_manager_model_json['policies'] = [
            instance_group_manager_policy_reference_model
        ]

        # Construct a model instance of InstanceGroupManager by calling from_dict on the json representation
        instance_group_manager_model = InstanceGroupManager.from_dict(
            instance_group_manager_model_json)
        assert instance_group_manager_model != False

        # Construct a model instance of InstanceGroupManager by calling from_dict on the json representation
        instance_group_manager_model_dict = InstanceGroupManager.from_dict(
            instance_group_manager_model_json).__dict__
        instance_group_manager_model2 = InstanceGroupManager(
            **instance_group_manager_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_manager_model == instance_group_manager_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_manager_model_json2 = instance_group_manager_model.to_dict(
        )
        assert instance_group_manager_model_json2 == instance_group_manager_model_json


class TestInstanceGroupManagerCollection():
    """
    Test Class for InstanceGroupManagerCollection
    """

    def test_instance_group_manager_collection_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupManagerCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        instance_group_manager_collection_first_model = {
        }  # InstanceGroupManagerCollectionFirst
        instance_group_manager_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers?limit=20'

        instance_group_manager_collection_next_model = {
        }  # InstanceGroupManagerCollectionNext
        instance_group_manager_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        instance_group_manager_policy_reference_model = {
        }  # InstanceGroupManagerPolicyReference
        instance_group_manager_policy_reference_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_manager_policy_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_manager_policy_reference_model[
            'name'] = 'my-instance-group-manager-policy'

        instance_group_manager_model = {}  # InstanceGroupManager
        instance_group_manager_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_manager_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727'
        instance_group_manager_model['name'] = 'my-instance-group-manager'
        instance_group_manager_model['management_enabled'] = True
        instance_group_manager_model['aggregation_window'] = 120
        instance_group_manager_model['cooldown'] = 210
        instance_group_manager_model['max_membership_count'] = 10
        instance_group_manager_model['min_membership_count'] = 10
        instance_group_manager_model['manager_type'] = 'autoscale'
        instance_group_manager_model['policies'] = [
            instance_group_manager_policy_reference_model
        ]

        # Construct a json representation of a InstanceGroupManagerCollection model
        instance_group_manager_collection_model_json = {}
        instance_group_manager_collection_model_json[
            'first'] = instance_group_manager_collection_first_model
        instance_group_manager_collection_model_json['limit'] = 20
        instance_group_manager_collection_model_json[
            'next'] = instance_group_manager_collection_next_model
        instance_group_manager_collection_model_json['total_count'] = 132
        instance_group_manager_collection_model_json['managers'] = [
            instance_group_manager_model
        ]

        # Construct a model instance of InstanceGroupManagerCollection by calling from_dict on the json representation
        instance_group_manager_collection_model = InstanceGroupManagerCollection.from_dict(
            instance_group_manager_collection_model_json)
        assert instance_group_manager_collection_model != False

        # Construct a model instance of InstanceGroupManagerCollection by calling from_dict on the json representation
        instance_group_manager_collection_model_dict = InstanceGroupManagerCollection.from_dict(
            instance_group_manager_collection_model_json).__dict__
        instance_group_manager_collection_model2 = InstanceGroupManagerCollection(
            **instance_group_manager_collection_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_manager_collection_model == instance_group_manager_collection_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_manager_collection_model_json2 = instance_group_manager_collection_model.to_dict(
        )
        assert instance_group_manager_collection_model_json2 == instance_group_manager_collection_model_json


class TestInstanceGroupManagerCollectionFirst():
    """
    Test Class for InstanceGroupManagerCollectionFirst
    """

    def test_instance_group_manager_collection_first_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupManagerCollectionFirst
        """

        # Construct a json representation of a InstanceGroupManagerCollectionFirst model
        instance_group_manager_collection_first_model_json = {}
        instance_group_manager_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers?limit=20'

        # Construct a model instance of InstanceGroupManagerCollectionFirst by calling from_dict on the json representation
        instance_group_manager_collection_first_model = InstanceGroupManagerCollectionFirst.from_dict(
            instance_group_manager_collection_first_model_json)
        assert instance_group_manager_collection_first_model != False

        # Construct a model instance of InstanceGroupManagerCollectionFirst by calling from_dict on the json representation
        instance_group_manager_collection_first_model_dict = InstanceGroupManagerCollectionFirst.from_dict(
            instance_group_manager_collection_first_model_json).__dict__
        instance_group_manager_collection_first_model2 = InstanceGroupManagerCollectionFirst(
            **instance_group_manager_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_manager_collection_first_model == instance_group_manager_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_manager_collection_first_model_json2 = instance_group_manager_collection_first_model.to_dict(
        )
        assert instance_group_manager_collection_first_model_json2 == instance_group_manager_collection_first_model_json


class TestInstanceGroupManagerCollectionNext():
    """
    Test Class for InstanceGroupManagerCollectionNext
    """

    def test_instance_group_manager_collection_next_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupManagerCollectionNext
        """

        # Construct a json representation of a InstanceGroupManagerCollectionNext model
        instance_group_manager_collection_next_model_json = {}
        instance_group_manager_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of InstanceGroupManagerCollectionNext by calling from_dict on the json representation
        instance_group_manager_collection_next_model = InstanceGroupManagerCollectionNext.from_dict(
            instance_group_manager_collection_next_model_json)
        assert instance_group_manager_collection_next_model != False

        # Construct a model instance of InstanceGroupManagerCollectionNext by calling from_dict on the json representation
        instance_group_manager_collection_next_model_dict = InstanceGroupManagerCollectionNext.from_dict(
            instance_group_manager_collection_next_model_json).__dict__
        instance_group_manager_collection_next_model2 = InstanceGroupManagerCollectionNext(
            **instance_group_manager_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_manager_collection_next_model == instance_group_manager_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_manager_collection_next_model_json2 = instance_group_manager_collection_next_model.to_dict(
        )
        assert instance_group_manager_collection_next_model_json2 == instance_group_manager_collection_next_model_json


class TestInstanceGroupManagerPatch():
    """
    Test Class for InstanceGroupManagerPatch
    """

    def test_instance_group_manager_patch_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupManagerPatch
        """

        # Construct a json representation of a InstanceGroupManagerPatch model
        instance_group_manager_patch_model_json = {}
        instance_group_manager_patch_model_json[
            'name'] = 'my-instance-group-manager'
        instance_group_manager_patch_model_json['management_enabled'] = True
        instance_group_manager_patch_model_json['aggregation_window'] = 120
        instance_group_manager_patch_model_json['cooldown'] = 210
        instance_group_manager_patch_model_json['max_membership_count'] = 10
        instance_group_manager_patch_model_json['min_membership_count'] = 10

        # Construct a model instance of InstanceGroupManagerPatch by calling from_dict on the json representation
        instance_group_manager_patch_model = InstanceGroupManagerPatch.from_dict(
            instance_group_manager_patch_model_json)
        assert instance_group_manager_patch_model != False

        # Construct a model instance of InstanceGroupManagerPatch by calling from_dict on the json representation
        instance_group_manager_patch_model_dict = InstanceGroupManagerPatch.from_dict(
            instance_group_manager_patch_model_json).__dict__
        instance_group_manager_patch_model2 = InstanceGroupManagerPatch(
            **instance_group_manager_patch_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_manager_patch_model == instance_group_manager_patch_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_manager_patch_model_json2 = instance_group_manager_patch_model.to_dict(
        )
        assert instance_group_manager_patch_model_json2 == instance_group_manager_patch_model_json


class TestInstanceGroupManagerPolicyCollection():
    """
    Test Class for InstanceGroupManagerPolicyCollection
    """

    def test_instance_group_manager_policy_collection_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupManagerPolicyCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        instance_group_manager_policy_collection_first_model = {
        }  # InstanceGroupManagerPolicyCollectionFirst
        instance_group_manager_policy_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies?limit=20'

        instance_group_manager_policy_collection_next_model = {
        }  # InstanceGroupManagerPolicyCollectionNext
        instance_group_manager_policy_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        instance_group_manager_policy_model = {
        }  # InstanceGroupManagerPolicyInstanceGroupManagerTargetPolicy
        instance_group_manager_policy_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_manager_policy_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_manager_policy_model[
            'name'] = 'my-instance-group-manager-policy'
        instance_group_manager_policy_model['metric_type'] = 'cpu'
        instance_group_manager_policy_model['metric_value'] = 38
        instance_group_manager_policy_model['policy_type'] = 'target'

        # Construct a json representation of a InstanceGroupManagerPolicyCollection model
        instance_group_manager_policy_collection_model_json = {}
        instance_group_manager_policy_collection_model_json[
            'first'] = instance_group_manager_policy_collection_first_model
        instance_group_manager_policy_collection_model_json['limit'] = 20
        instance_group_manager_policy_collection_model_json[
            'next'] = instance_group_manager_policy_collection_next_model
        instance_group_manager_policy_collection_model_json['total_count'] = 132
        instance_group_manager_policy_collection_model_json['policies'] = [
            instance_group_manager_policy_model
        ]

        # Construct a model instance of InstanceGroupManagerPolicyCollection by calling from_dict on the json representation
        instance_group_manager_policy_collection_model = InstanceGroupManagerPolicyCollection.from_dict(
            instance_group_manager_policy_collection_model_json)
        assert instance_group_manager_policy_collection_model != False

        # Construct a model instance of InstanceGroupManagerPolicyCollection by calling from_dict on the json representation
        instance_group_manager_policy_collection_model_dict = InstanceGroupManagerPolicyCollection.from_dict(
            instance_group_manager_policy_collection_model_json).__dict__
        instance_group_manager_policy_collection_model2 = InstanceGroupManagerPolicyCollection(
            **instance_group_manager_policy_collection_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_manager_policy_collection_model == instance_group_manager_policy_collection_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_manager_policy_collection_model_json2 = instance_group_manager_policy_collection_model.to_dict(
        )
        assert instance_group_manager_policy_collection_model_json2 == instance_group_manager_policy_collection_model_json


class TestInstanceGroupManagerPolicyCollectionFirst():
    """
    Test Class for InstanceGroupManagerPolicyCollectionFirst
    """

    def test_instance_group_manager_policy_collection_first_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupManagerPolicyCollectionFirst
        """

        # Construct a json representation of a InstanceGroupManagerPolicyCollectionFirst model
        instance_group_manager_policy_collection_first_model_json = {}
        instance_group_manager_policy_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies?limit=20'

        # Construct a model instance of InstanceGroupManagerPolicyCollectionFirst by calling from_dict on the json representation
        instance_group_manager_policy_collection_first_model = InstanceGroupManagerPolicyCollectionFirst.from_dict(
            instance_group_manager_policy_collection_first_model_json)
        assert instance_group_manager_policy_collection_first_model != False

        # Construct a model instance of InstanceGroupManagerPolicyCollectionFirst by calling from_dict on the json representation
        instance_group_manager_policy_collection_first_model_dict = InstanceGroupManagerPolicyCollectionFirst.from_dict(
            instance_group_manager_policy_collection_first_model_json).__dict__
        instance_group_manager_policy_collection_first_model2 = InstanceGroupManagerPolicyCollectionFirst(
            **instance_group_manager_policy_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_manager_policy_collection_first_model == instance_group_manager_policy_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_manager_policy_collection_first_model_json2 = instance_group_manager_policy_collection_first_model.to_dict(
        )
        assert instance_group_manager_policy_collection_first_model_json2 == instance_group_manager_policy_collection_first_model_json


class TestInstanceGroupManagerPolicyCollectionNext():
    """
    Test Class for InstanceGroupManagerPolicyCollectionNext
    """

    def test_instance_group_manager_policy_collection_next_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupManagerPolicyCollectionNext
        """

        # Construct a json representation of a InstanceGroupManagerPolicyCollectionNext model
        instance_group_manager_policy_collection_next_model_json = {}
        instance_group_manager_policy_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of InstanceGroupManagerPolicyCollectionNext by calling from_dict on the json representation
        instance_group_manager_policy_collection_next_model = InstanceGroupManagerPolicyCollectionNext.from_dict(
            instance_group_manager_policy_collection_next_model_json)
        assert instance_group_manager_policy_collection_next_model != False

        # Construct a model instance of InstanceGroupManagerPolicyCollectionNext by calling from_dict on the json representation
        instance_group_manager_policy_collection_next_model_dict = InstanceGroupManagerPolicyCollectionNext.from_dict(
            instance_group_manager_policy_collection_next_model_json).__dict__
        instance_group_manager_policy_collection_next_model2 = InstanceGroupManagerPolicyCollectionNext(
            **instance_group_manager_policy_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_manager_policy_collection_next_model == instance_group_manager_policy_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_manager_policy_collection_next_model_json2 = instance_group_manager_policy_collection_next_model.to_dict(
        )
        assert instance_group_manager_policy_collection_next_model_json2 == instance_group_manager_policy_collection_next_model_json


class TestInstanceGroupManagerPolicyPatch():
    """
    Test Class for InstanceGroupManagerPolicyPatch
    """

    def test_instance_group_manager_policy_patch_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupManagerPolicyPatch
        """

        # Construct a json representation of a InstanceGroupManagerPolicyPatch model
        instance_group_manager_policy_patch_model_json = {}
        instance_group_manager_policy_patch_model_json[
            'name'] = 'my-instance-group-manager-policy'
        instance_group_manager_policy_patch_model_json['metric_type'] = 'cpu'
        instance_group_manager_policy_patch_model_json['metric_value'] = 38

        # Construct a model instance of InstanceGroupManagerPolicyPatch by calling from_dict on the json representation
        instance_group_manager_policy_patch_model = InstanceGroupManagerPolicyPatch.from_dict(
            instance_group_manager_policy_patch_model_json)
        assert instance_group_manager_policy_patch_model != False

        # Construct a model instance of InstanceGroupManagerPolicyPatch by calling from_dict on the json representation
        instance_group_manager_policy_patch_model_dict = InstanceGroupManagerPolicyPatch.from_dict(
            instance_group_manager_policy_patch_model_json).__dict__
        instance_group_manager_policy_patch_model2 = InstanceGroupManagerPolicyPatch(
            **instance_group_manager_policy_patch_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_manager_policy_patch_model == instance_group_manager_policy_patch_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_manager_policy_patch_model_json2 = instance_group_manager_policy_patch_model.to_dict(
        )
        assert instance_group_manager_policy_patch_model_json2 == instance_group_manager_policy_patch_model_json


class TestInstanceGroupManagerPolicyReference():
    """
    Test Class for InstanceGroupManagerPolicyReference
    """

    def test_instance_group_manager_policy_reference_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupManagerPolicyReference
        """

        # Construct a json representation of a InstanceGroupManagerPolicyReference model
        instance_group_manager_policy_reference_model_json = {}
        instance_group_manager_policy_reference_model_json[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_manager_policy_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_manager_policy_reference_model_json[
            'name'] = 'my-instance-group-manager-policy'

        # Construct a model instance of InstanceGroupManagerPolicyReference by calling from_dict on the json representation
        instance_group_manager_policy_reference_model = InstanceGroupManagerPolicyReference.from_dict(
            instance_group_manager_policy_reference_model_json)
        assert instance_group_manager_policy_reference_model != False

        # Construct a model instance of InstanceGroupManagerPolicyReference by calling from_dict on the json representation
        instance_group_manager_policy_reference_model_dict = InstanceGroupManagerPolicyReference.from_dict(
            instance_group_manager_policy_reference_model_json).__dict__
        instance_group_manager_policy_reference_model2 = InstanceGroupManagerPolicyReference(
            **instance_group_manager_policy_reference_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_manager_policy_reference_model == instance_group_manager_policy_reference_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_manager_policy_reference_model_json2 = instance_group_manager_policy_reference_model.to_dict(
        )
        assert instance_group_manager_policy_reference_model_json2 == instance_group_manager_policy_reference_model_json


class TestInstanceGroupManagerReference():
    """
    Test Class for InstanceGroupManagerReference
    """

    def test_instance_group_manager_reference_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupManagerReference
        """

        # Construct a json representation of a InstanceGroupManagerReference model
        instance_group_manager_reference_model_json = {}
        instance_group_manager_reference_model_json[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_manager_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727'
        instance_group_manager_reference_model_json[
            'name'] = 'my-instance-group-manager'

        # Construct a model instance of InstanceGroupManagerReference by calling from_dict on the json representation
        instance_group_manager_reference_model = InstanceGroupManagerReference.from_dict(
            instance_group_manager_reference_model_json)
        assert instance_group_manager_reference_model != False

        # Construct a model instance of InstanceGroupManagerReference by calling from_dict on the json representation
        instance_group_manager_reference_model_dict = InstanceGroupManagerReference.from_dict(
            instance_group_manager_reference_model_json).__dict__
        instance_group_manager_reference_model2 = InstanceGroupManagerReference(
            **instance_group_manager_reference_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_manager_reference_model == instance_group_manager_reference_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_manager_reference_model_json2 = instance_group_manager_reference_model.to_dict(
        )
        assert instance_group_manager_reference_model_json2 == instance_group_manager_reference_model_json


class TestInstanceGroupMembership():
    """
    Test Class for InstanceGroupMembership
    """

    def test_instance_group_membership_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupMembership
        """

        # Construct dict forms of any model objects needed in order to build this model.

        instance_reference_model = {}  # InstanceReference
        instance_reference_model['id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model['name'] = 'my-instance'

        instance_template_reference_model = {}  # InstanceTemplateReference
        instance_template_reference_model[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'
        instance_template_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_template_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a'

        load_balancer_pool_member_reference_model = {
        }  # LoadBalancerPoolMemberReference
        load_balancer_pool_member_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_member_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a json representation of a InstanceGroupMembership model
        instance_group_membership_model_json = {}
        instance_group_membership_model_json[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_membership_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed'
        instance_group_membership_model_json[
            'name'] = 'my-instance-group-membership'
        instance_group_membership_model_json[
            'delete_instance_on_membership_delete'] = True
        instance_group_membership_model_json[
            'instance'] = instance_reference_model
        instance_group_membership_model_json[
            'instance_template'] = instance_template_reference_model
        instance_group_membership_model_json[
            'pool_member'] = load_balancer_pool_member_reference_model
        instance_group_membership_model_json['status'] = 'deleting'

        # Construct a model instance of InstanceGroupMembership by calling from_dict on the json representation
        instance_group_membership_model = InstanceGroupMembership.from_dict(
            instance_group_membership_model_json)
        assert instance_group_membership_model != False

        # Construct a model instance of InstanceGroupMembership by calling from_dict on the json representation
        instance_group_membership_model_dict = InstanceGroupMembership.from_dict(
            instance_group_membership_model_json).__dict__
        instance_group_membership_model2 = InstanceGroupMembership(
            **instance_group_membership_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_membership_model == instance_group_membership_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_membership_model_json2 = instance_group_membership_model.to_dict(
        )
        assert instance_group_membership_model_json2 == instance_group_membership_model_json


class TestInstanceGroupMembershipCollection():
    """
    Test Class for InstanceGroupMembershipCollection
    """

    def test_instance_group_membership_collection_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupMembershipCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        instance_group_membership_collection_first_model = {
        }  # InstanceGroupMembershipCollectionFirst
        instance_group_membership_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/7241e2a8-601f-11ea-8503-000c29475bed/memberships?limit=20'

        instance_group_membership_collection_next_model = {
        }  # InstanceGroupMembershipCollectionNext
        instance_group_membership_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/7241e2a8-601f-11ea-8503-000c29475bed/memberships?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        instance_reference_model = {}  # InstanceReference
        instance_reference_model['id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model['name'] = 'my-instance'

        instance_template_reference_model = {}  # InstanceTemplateReference
        instance_template_reference_model[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'
        instance_template_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_template_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a'

        load_balancer_pool_member_reference_model = {
        }  # LoadBalancerPoolMemberReference
        load_balancer_pool_member_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_member_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004'

        instance_group_membership_model = {}  # InstanceGroupMembership
        instance_group_membership_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_membership_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed'
        instance_group_membership_model['name'] = 'my-instance-group-membership'
        instance_group_membership_model[
            'delete_instance_on_membership_delete'] = True
        instance_group_membership_model['instance'] = instance_reference_model
        instance_group_membership_model[
            'instance_template'] = instance_template_reference_model
        instance_group_membership_model[
            'pool_member'] = load_balancer_pool_member_reference_model
        instance_group_membership_model['status'] = 'deleting'

        # Construct a json representation of a InstanceGroupMembershipCollection model
        instance_group_membership_collection_model_json = {}
        instance_group_membership_collection_model_json[
            'first'] = instance_group_membership_collection_first_model
        instance_group_membership_collection_model_json['limit'] = 20
        instance_group_membership_collection_model_json[
            'next'] = instance_group_membership_collection_next_model
        instance_group_membership_collection_model_json['total_count'] = 132
        instance_group_membership_collection_model_json['memberships'] = [
            instance_group_membership_model
        ]

        # Construct a model instance of InstanceGroupMembershipCollection by calling from_dict on the json representation
        instance_group_membership_collection_model = InstanceGroupMembershipCollection.from_dict(
            instance_group_membership_collection_model_json)
        assert instance_group_membership_collection_model != False

        # Construct a model instance of InstanceGroupMembershipCollection by calling from_dict on the json representation
        instance_group_membership_collection_model_dict = InstanceGroupMembershipCollection.from_dict(
            instance_group_membership_collection_model_json).__dict__
        instance_group_membership_collection_model2 = InstanceGroupMembershipCollection(
            **instance_group_membership_collection_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_membership_collection_model == instance_group_membership_collection_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_membership_collection_model_json2 = instance_group_membership_collection_model.to_dict(
        )
        assert instance_group_membership_collection_model_json2 == instance_group_membership_collection_model_json


class TestInstanceGroupMembershipCollectionFirst():
    """
    Test Class for InstanceGroupMembershipCollectionFirst
    """

    def test_instance_group_membership_collection_first_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupMembershipCollectionFirst
        """

        # Construct a json representation of a InstanceGroupMembershipCollectionFirst model
        instance_group_membership_collection_first_model_json = {}
        instance_group_membership_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/7241e2a8-601f-11ea-8503-000c29475bed/memberships?limit=20'

        # Construct a model instance of InstanceGroupMembershipCollectionFirst by calling from_dict on the json representation
        instance_group_membership_collection_first_model = InstanceGroupMembershipCollectionFirst.from_dict(
            instance_group_membership_collection_first_model_json)
        assert instance_group_membership_collection_first_model != False

        # Construct a model instance of InstanceGroupMembershipCollectionFirst by calling from_dict on the json representation
        instance_group_membership_collection_first_model_dict = InstanceGroupMembershipCollectionFirst.from_dict(
            instance_group_membership_collection_first_model_json).__dict__
        instance_group_membership_collection_first_model2 = InstanceGroupMembershipCollectionFirst(
            **instance_group_membership_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_membership_collection_first_model == instance_group_membership_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_membership_collection_first_model_json2 = instance_group_membership_collection_first_model.to_dict(
        )
        assert instance_group_membership_collection_first_model_json2 == instance_group_membership_collection_first_model_json


class TestInstanceGroupMembershipCollectionNext():
    """
    Test Class for InstanceGroupMembershipCollectionNext
    """

    def test_instance_group_membership_collection_next_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupMembershipCollectionNext
        """

        # Construct a json representation of a InstanceGroupMembershipCollectionNext model
        instance_group_membership_collection_next_model_json = {}
        instance_group_membership_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/7241e2a8-601f-11ea-8503-000c29475bed/memberships?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of InstanceGroupMembershipCollectionNext by calling from_dict on the json representation
        instance_group_membership_collection_next_model = InstanceGroupMembershipCollectionNext.from_dict(
            instance_group_membership_collection_next_model_json)
        assert instance_group_membership_collection_next_model != False

        # Construct a model instance of InstanceGroupMembershipCollectionNext by calling from_dict on the json representation
        instance_group_membership_collection_next_model_dict = InstanceGroupMembershipCollectionNext.from_dict(
            instance_group_membership_collection_next_model_json).__dict__
        instance_group_membership_collection_next_model2 = InstanceGroupMembershipCollectionNext(
            **instance_group_membership_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_membership_collection_next_model == instance_group_membership_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_membership_collection_next_model_json2 = instance_group_membership_collection_next_model.to_dict(
        )
        assert instance_group_membership_collection_next_model_json2 == instance_group_membership_collection_next_model_json


class TestInstanceGroupMembershipPatch():
    """
    Test Class for InstanceGroupMembershipPatch
    """

    def test_instance_group_membership_patch_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupMembershipPatch
        """

        # Construct a json representation of a InstanceGroupMembershipPatch model
        instance_group_membership_patch_model_json = {}
        instance_group_membership_patch_model_json[
            'name'] = 'my-instance-group-membership'

        # Construct a model instance of InstanceGroupMembershipPatch by calling from_dict on the json representation
        instance_group_membership_patch_model = InstanceGroupMembershipPatch.from_dict(
            instance_group_membership_patch_model_json)
        assert instance_group_membership_patch_model != False

        # Construct a model instance of InstanceGroupMembershipPatch by calling from_dict on the json representation
        instance_group_membership_patch_model_dict = InstanceGroupMembershipPatch.from_dict(
            instance_group_membership_patch_model_json).__dict__
        instance_group_membership_patch_model2 = InstanceGroupMembershipPatch(
            **instance_group_membership_patch_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_membership_patch_model == instance_group_membership_patch_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_membership_patch_model_json2 = instance_group_membership_patch_model.to_dict(
        )
        assert instance_group_membership_patch_model_json2 == instance_group_membership_patch_model_json


class TestInstanceGroupPatch():
    """
    Test Class for InstanceGroupPatch
    """

    def test_instance_group_patch_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupPatch
        """

        # Construct dict forms of any model objects needed in order to build this model.

        instance_template_identity_model = {}  # InstanceTemplateIdentityById
        instance_template_identity_model[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        subnet_identity_model = {}  # SubnetIdentityById
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        load_balancer_identity_model = {}  # LoadBalancerIdentityById
        load_balancer_identity_model[
            'id'] = 'dd754295-e9e0-4c9d-bf6c-58fbc59e5727'

        load_balancer_pool_identity_model = {}  # LoadBalancerPoolIdentityById
        load_balancer_pool_identity_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a json representation of a InstanceGroupPatch model
        instance_group_patch_model_json = {}
        instance_group_patch_model_json['name'] = 'my-instance-group'
        instance_group_patch_model_json['membership_count'] = 10
        instance_group_patch_model_json[
            'instance_template'] = instance_template_identity_model
        instance_group_patch_model_json['subnets'] = [subnet_identity_model]
        instance_group_patch_model_json['application_port'] = 22
        instance_group_patch_model_json[
            'load_balancer'] = load_balancer_identity_model
        instance_group_patch_model_json[
            'load_balancer_pool'] = load_balancer_pool_identity_model

        # Construct a model instance of InstanceGroupPatch by calling from_dict on the json representation
        instance_group_patch_model = InstanceGroupPatch.from_dict(
            instance_group_patch_model_json)
        assert instance_group_patch_model != False

        # Construct a model instance of InstanceGroupPatch by calling from_dict on the json representation
        instance_group_patch_model_dict = InstanceGroupPatch.from_dict(
            instance_group_patch_model_json).__dict__
        instance_group_patch_model2 = InstanceGroupPatch(
            **instance_group_patch_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_patch_model == instance_group_patch_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_patch_model_json2 = instance_group_patch_model.to_dict()
        assert instance_group_patch_model_json2 == instance_group_patch_model_json


class TestInstanceGroupReference():
    """
    Test Class for InstanceGroupReference
    """

    def test_instance_group_reference_serialization(self):
        """
        Test serialization/deserialization for InstanceGroupReference
        """

        # Construct a json representation of a InstanceGroupReference model
        instance_group_reference_model_json = {}
        instance_group_reference_model_json[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_reference_model_json['name'] = 'my-instance-group'

        # Construct a model instance of InstanceGroupReference by calling from_dict on the json representation
        instance_group_reference_model = InstanceGroupReference.from_dict(
            instance_group_reference_model_json)
        assert instance_group_reference_model != False

        # Construct a model instance of InstanceGroupReference by calling from_dict on the json representation
        instance_group_reference_model_dict = InstanceGroupReference.from_dict(
            instance_group_reference_model_json).__dict__
        instance_group_reference_model2 = InstanceGroupReference(
            **instance_group_reference_model_dict)

        # Verify the model instances are equivalent
        assert instance_group_reference_model == instance_group_reference_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_reference_model_json2 = instance_group_reference_model.to_dict(
        )
        assert instance_group_reference_model_json2 == instance_group_reference_model_json


class TestInstanceInitialization():
    """
    Test Class for InstanceInitialization
    """

    def test_instance_initialization_serialization(self):
        """
        Test serialization/deserialization for InstanceInitialization
        """

        # Construct dict forms of any model objects needed in order to build this model.

        key_reference_instance_initialization_context_model = {
        }  # KeyReferenceInstanceInitializationContextKeyReference
        key_reference_instance_initialization_context_model[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_reference_instance_initialization_context_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_reference_instance_initialization_context_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_reference_instance_initialization_context_model[
            'fingerprint'] = 'SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY'
        key_reference_instance_initialization_context_model['name'] = 'my-key'

        instance_initialization_password_model = {
        }  # InstanceInitializationPassword
        instance_initialization_password_model[
            'encrypted_password'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        instance_initialization_password_model[
            'encryption_key'] = key_reference_instance_initialization_context_model

        # Construct a json representation of a InstanceInitialization model
        instance_initialization_model_json = {}
        instance_initialization_model_json['keys'] = [
            key_reference_instance_initialization_context_model
        ]
        instance_initialization_model_json[
            'password'] = instance_initialization_password_model

        # Construct a model instance of InstanceInitialization by calling from_dict on the json representation
        instance_initialization_model = InstanceInitialization.from_dict(
            instance_initialization_model_json)
        assert instance_initialization_model != False

        # Construct a model instance of InstanceInitialization by calling from_dict on the json representation
        instance_initialization_model_dict = InstanceInitialization.from_dict(
            instance_initialization_model_json).__dict__
        instance_initialization_model2 = InstanceInitialization(
            **instance_initialization_model_dict)

        # Verify the model instances are equivalent
        assert instance_initialization_model == instance_initialization_model2

        # Convert model instance back to dict and verify no loss of data
        instance_initialization_model_json2 = instance_initialization_model.to_dict(
        )
        assert instance_initialization_model_json2 == instance_initialization_model_json


class TestInstanceInitializationPassword():
    """
    Test Class for InstanceInitializationPassword
    """

    def test_instance_initialization_password_serialization(self):
        """
        Test serialization/deserialization for InstanceInitializationPassword
        """

        # Construct dict forms of any model objects needed in order to build this model.

        key_reference_instance_initialization_context_model = {
        }  # KeyReferenceInstanceInitializationContextKeyReference
        key_reference_instance_initialization_context_model[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_reference_instance_initialization_context_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_reference_instance_initialization_context_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_reference_instance_initialization_context_model[
            'fingerprint'] = 'SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY'
        key_reference_instance_initialization_context_model['name'] = 'my-key'

        # Construct a json representation of a InstanceInitializationPassword model
        instance_initialization_password_model_json = {}
        instance_initialization_password_model_json[
            'encrypted_password'] = 'VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4='
        instance_initialization_password_model_json[
            'encryption_key'] = key_reference_instance_initialization_context_model

        # Construct a model instance of InstanceInitializationPassword by calling from_dict on the json representation
        instance_initialization_password_model = InstanceInitializationPassword.from_dict(
            instance_initialization_password_model_json)
        assert instance_initialization_password_model != False

        # Construct a model instance of InstanceInitializationPassword by calling from_dict on the json representation
        instance_initialization_password_model_dict = InstanceInitializationPassword.from_dict(
            instance_initialization_password_model_json).__dict__
        instance_initialization_password_model2 = InstanceInitializationPassword(
            **instance_initialization_password_model_dict)

        # Verify the model instances are equivalent
        assert instance_initialization_password_model == instance_initialization_password_model2

        # Convert model instance back to dict and verify no loss of data
        instance_initialization_password_model_json2 = instance_initialization_password_model.to_dict(
        )
        assert instance_initialization_password_model_json2 == instance_initialization_password_model_json


class TestInstancePatch():
    """
    Test Class for InstancePatch
    """

    def test_instance_patch_serialization(self):
        """
        Test serialization/deserialization for InstancePatch
        """

        # Construct a json representation of a InstancePatch model
        instance_patch_model_json = {}
        instance_patch_model_json['name'] = 'my-instance'

        # Construct a model instance of InstancePatch by calling from_dict on the json representation
        instance_patch_model = InstancePatch.from_dict(
            instance_patch_model_json)
        assert instance_patch_model != False

        # Construct a model instance of InstancePatch by calling from_dict on the json representation
        instance_patch_model_dict = InstancePatch.from_dict(
            instance_patch_model_json).__dict__
        instance_patch_model2 = InstancePatch(**instance_patch_model_dict)

        # Verify the model instances are equivalent
        assert instance_patch_model == instance_patch_model2

        # Convert model instance back to dict and verify no loss of data
        instance_patch_model_json2 = instance_patch_model.to_dict()
        assert instance_patch_model_json2 == instance_patch_model_json


class TestInstanceProfile():
    """
    Test Class for InstanceProfile
    """

    def test_instance_profile_serialization(self):
        """
        Test serialization/deserialization for InstanceProfile
        """

        # Construct dict forms of any model objects needed in order to build this model.

        instance_profile_bandwidth_model = {}  # InstanceProfileBandwidthFixed
        instance_profile_bandwidth_model['type'] = 'fixed'
        instance_profile_bandwidth_model['value'] = 20000

        instance_profile_port_speed_model = {}  # InstanceProfilePortSpeedFixed
        instance_profile_port_speed_model['type'] = 'fixed'
        instance_profile_port_speed_model['value'] = 1000

        instance_profile_memory_model = {}  # InstanceProfileMemoryFixed
        instance_profile_memory_model['type'] = 'fixed'
        instance_profile_memory_model['value'] = 16

        instance_profile_os_architecture_model = {
        }  # InstanceProfileOSArchitecture
        instance_profile_os_architecture_model['type'] = 'enum'
        instance_profile_os_architecture_model['default'] = 'testString'
        instance_profile_os_architecture_model['values'] = ['amd64']

        instance_profile_vcpu_architecture_model = {
        }  # InstanceProfileVCPUArchitecture
        instance_profile_vcpu_architecture_model['type'] = 'fixed'
        instance_profile_vcpu_architecture_model['value'] = 'amd64'
        instance_profile_vcpu_architecture_model['default'] = 'testString'

        instance_profile_vcpu_model = {}  # InstanceProfileVCPUFixed
        instance_profile_vcpu_model['type'] = 'fixed'
        instance_profile_vcpu_model['value'] = 16

        # Construct a json representation of a InstanceProfile model
        instance_profile_model_json = {}
        instance_profile_model_json['name'] = 'bc1-4x16'
        instance_profile_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16'
        instance_profile_model_json[
            'bandwidth'] = instance_profile_bandwidth_model
        instance_profile_model_json[
            'port_speed'] = instance_profile_port_speed_model
        instance_profile_model_json['memory'] = instance_profile_memory_model
        instance_profile_model_json[
            'os_architecture'] = instance_profile_os_architecture_model
        instance_profile_model_json[
            'vcpu_architecture'] = instance_profile_vcpu_architecture_model
        instance_profile_model_json['vcpu_count'] = instance_profile_vcpu_model
        instance_profile_model_json['family'] = 'balanced'

        # Construct a model instance of InstanceProfile by calling from_dict on the json representation
        instance_profile_model = InstanceProfile.from_dict(
            instance_profile_model_json)
        assert instance_profile_model != False

        # Construct a model instance of InstanceProfile by calling from_dict on the json representation
        instance_profile_model_dict = InstanceProfile.from_dict(
            instance_profile_model_json).__dict__
        instance_profile_model2 = InstanceProfile(**instance_profile_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_model == instance_profile_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_model_json2 = instance_profile_model.to_dict()
        assert instance_profile_model_json2 == instance_profile_model_json


class TestInstanceProfileCollection():
    """
    Test Class for InstanceProfileCollection
    """

    def test_instance_profile_collection_serialization(self):
        """
        Test serialization/deserialization for InstanceProfileCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        instance_profile_bandwidth_model = {}  # InstanceProfileBandwidthFixed
        instance_profile_bandwidth_model['type'] = 'fixed'
        instance_profile_bandwidth_model['value'] = 20000

        instance_profile_port_speed_model = {}  # InstanceProfilePortSpeedFixed
        instance_profile_port_speed_model['type'] = 'fixed'
        instance_profile_port_speed_model['value'] = 1000

        instance_profile_memory_model = {}  # InstanceProfileMemoryFixed
        instance_profile_memory_model['type'] = 'fixed'
        instance_profile_memory_model['value'] = 16

        instance_profile_os_architecture_model = {
        }  # InstanceProfileOSArchitecture
        instance_profile_os_architecture_model['type'] = 'enum'
        instance_profile_os_architecture_model['default'] = 'testString'
        instance_profile_os_architecture_model['values'] = ['amd64']

        instance_profile_vcpu_architecture_model = {
        }  # InstanceProfileVCPUArchitecture
        instance_profile_vcpu_architecture_model['type'] = 'fixed'
        instance_profile_vcpu_architecture_model['value'] = 'amd64'
        instance_profile_vcpu_architecture_model['default'] = 'testString'

        instance_profile_vcpu_model = {}  # InstanceProfileVCPUFixed
        instance_profile_vcpu_model['type'] = 'fixed'
        instance_profile_vcpu_model['value'] = 16

        instance_profile_model = {}  # InstanceProfile
        instance_profile_model['name'] = 'bc1-4x16'
        instance_profile_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16'
        instance_profile_model['bandwidth'] = instance_profile_bandwidth_model
        instance_profile_model['port_speed'] = instance_profile_port_speed_model
        instance_profile_model['memory'] = instance_profile_memory_model
        instance_profile_model[
            'os_architecture'] = instance_profile_os_architecture_model
        instance_profile_model[
            'vcpu_architecture'] = instance_profile_vcpu_architecture_model
        instance_profile_model['vcpu_count'] = instance_profile_vcpu_model
        instance_profile_model['family'] = 'balanced'

        # Construct a json representation of a InstanceProfileCollection model
        instance_profile_collection_model_json = {}
        instance_profile_collection_model_json['profiles'] = [
            instance_profile_model
        ]

        # Construct a model instance of InstanceProfileCollection by calling from_dict on the json representation
        instance_profile_collection_model = InstanceProfileCollection.from_dict(
            instance_profile_collection_model_json)
        assert instance_profile_collection_model != False

        # Construct a model instance of InstanceProfileCollection by calling from_dict on the json representation
        instance_profile_collection_model_dict = InstanceProfileCollection.from_dict(
            instance_profile_collection_model_json).__dict__
        instance_profile_collection_model2 = InstanceProfileCollection(
            **instance_profile_collection_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_collection_model == instance_profile_collection_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_collection_model_json2 = instance_profile_collection_model.to_dict(
        )
        assert instance_profile_collection_model_json2 == instance_profile_collection_model_json


class TestInstanceProfileOSArchitecture():
    """
    Test Class for InstanceProfileOSArchitecture
    """

    def test_instance_profile_os_architecture_serialization(self):
        """
        Test serialization/deserialization for InstanceProfileOSArchitecture
        """

        # Construct a json representation of a InstanceProfileOSArchitecture model
        instance_profile_os_architecture_model_json = {}
        instance_profile_os_architecture_model_json['type'] = 'enum'
        instance_profile_os_architecture_model_json['default'] = 'testString'
        instance_profile_os_architecture_model_json['values'] = ['amd64']

        # Construct a model instance of InstanceProfileOSArchitecture by calling from_dict on the json representation
        instance_profile_os_architecture_model = InstanceProfileOSArchitecture.from_dict(
            instance_profile_os_architecture_model_json)
        assert instance_profile_os_architecture_model != False

        # Construct a model instance of InstanceProfileOSArchitecture by calling from_dict on the json representation
        instance_profile_os_architecture_model_dict = InstanceProfileOSArchitecture.from_dict(
            instance_profile_os_architecture_model_json).__dict__
        instance_profile_os_architecture_model2 = InstanceProfileOSArchitecture(
            **instance_profile_os_architecture_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_os_architecture_model == instance_profile_os_architecture_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_os_architecture_model_json2 = instance_profile_os_architecture_model.to_dict(
        )
        assert instance_profile_os_architecture_model_json2 == instance_profile_os_architecture_model_json


class TestInstanceProfileReference():
    """
    Test Class for InstanceProfileReference
    """

    def test_instance_profile_reference_serialization(self):
        """
        Test serialization/deserialization for InstanceProfileReference
        """

        # Construct a json representation of a InstanceProfileReference model
        instance_profile_reference_model_json = {}
        instance_profile_reference_model_json['name'] = 'bc1-4x16'
        instance_profile_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16'

        # Construct a model instance of InstanceProfileReference by calling from_dict on the json representation
        instance_profile_reference_model = InstanceProfileReference.from_dict(
            instance_profile_reference_model_json)
        assert instance_profile_reference_model != False

        # Construct a model instance of InstanceProfileReference by calling from_dict on the json representation
        instance_profile_reference_model_dict = InstanceProfileReference.from_dict(
            instance_profile_reference_model_json).__dict__
        instance_profile_reference_model2 = InstanceProfileReference(
            **instance_profile_reference_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_reference_model == instance_profile_reference_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_reference_model_json2 = instance_profile_reference_model.to_dict(
        )
        assert instance_profile_reference_model_json2 == instance_profile_reference_model_json


class TestInstanceProfileVCPUArchitecture():
    """
    Test Class for InstanceProfileVCPUArchitecture
    """

    def test_instance_profile_vcpu_architecture_serialization(self):
        """
        Test serialization/deserialization for InstanceProfileVCPUArchitecture
        """

        # Construct a json representation of a InstanceProfileVCPUArchitecture model
        instance_profile_vcpu_architecture_model_json = {}
        instance_profile_vcpu_architecture_model_json['type'] = 'fixed'
        instance_profile_vcpu_architecture_model_json['value'] = 'amd64'
        instance_profile_vcpu_architecture_model_json['default'] = 'testString'

        # Construct a model instance of InstanceProfileVCPUArchitecture by calling from_dict on the json representation
        instance_profile_vcpu_architecture_model = InstanceProfileVCPUArchitecture.from_dict(
            instance_profile_vcpu_architecture_model_json)
        assert instance_profile_vcpu_architecture_model != False

        # Construct a model instance of InstanceProfileVCPUArchitecture by calling from_dict on the json representation
        instance_profile_vcpu_architecture_model_dict = InstanceProfileVCPUArchitecture.from_dict(
            instance_profile_vcpu_architecture_model_json).__dict__
        instance_profile_vcpu_architecture_model2 = InstanceProfileVCPUArchitecture(
            **instance_profile_vcpu_architecture_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_vcpu_architecture_model == instance_profile_vcpu_architecture_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_vcpu_architecture_model_json2 = instance_profile_vcpu_architecture_model.to_dict(
        )
        assert instance_profile_vcpu_architecture_model_json2 == instance_profile_vcpu_architecture_model_json


class TestInstanceReference():
    """
    Test Class for InstanceReference
    """

    def test_instance_reference_serialization(self):
        """
        Test serialization/deserialization for InstanceReference
        """

        # Construct a json representation of a InstanceReference model
        instance_reference_model_json = {}
        instance_reference_model_json[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model_json['name'] = 'my-instance'

        # Construct a model instance of InstanceReference by calling from_dict on the json representation
        instance_reference_model = InstanceReference.from_dict(
            instance_reference_model_json)
        assert instance_reference_model != False

        # Construct a model instance of InstanceReference by calling from_dict on the json representation
        instance_reference_model_dict = InstanceReference.from_dict(
            instance_reference_model_json).__dict__
        instance_reference_model2 = InstanceReference(
            **instance_reference_model_dict)

        # Verify the model instances are equivalent
        assert instance_reference_model == instance_reference_model2

        # Convert model instance back to dict and verify no loss of data
        instance_reference_model_json2 = instance_reference_model.to_dict()
        assert instance_reference_model_json2 == instance_reference_model_json


class TestInstanceTemplateCollection():
    """
    Test Class for InstanceTemplateCollection
    """

    def test_instance_template_collection_serialization(self):
        """
        Test serialization/deserialization for InstanceTemplateCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        instance_template_collection_first_model = {
        }  # InstanceTemplateCollectionFirst
        instance_template_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/templates?limit=20'

        instance_template_collection_next_model = {
        }  # InstanceTemplateCollectionNext
        instance_template_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/templates?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        key_identity_model = {}  # KeyIdentityById
        key_identity_model['id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        security_group_identity_model = {}  # SecurityGroupIdentityById
        security_group_identity_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        subnet_identity_model = {}  # SubnetIdentityById
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        network_interface_prototype_model = {}  # NetworkInterfacePrototype
        network_interface_prototype_model['name'] = 'my-network-interface'
        network_interface_prototype_model['primary_ipv4_address'] = '10.0.0.5'
        network_interface_prototype_model['security_groups'] = [
            security_group_identity_model
        ]
        network_interface_prototype_model['subnet'] = subnet_identity_model

        instance_profile_identity_model = {}  # InstanceProfileIdentityByName
        instance_profile_identity_model['name'] = 'cc1-16x32'

        volume_attachment_prototype_instance_context_volume_model = {
        }  # VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById
        volume_attachment_prototype_instance_context_volume_model[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        volume_attachment_prototype_instance_context_model = {
        }  # VolumeAttachmentPrototypeInstanceContext
        volume_attachment_prototype_instance_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_context_model[
            'volume'] = volume_attachment_prototype_instance_context_volume_model

        vpc_identity_model = {}  # VPCIdentityById
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        zone_identity_model = {}  # ZoneIdentityByName
        zone_identity_model['name'] = 'us-south-1'

        volume_profile_identity_model = {}  # VolumeProfileIdentityByName
        volume_profile_identity_model['name'] = 'general-purpose'

        encryption_key_identity_model = {}  # EncryptionKeyIdentityByCRN
        encryption_key_identity_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        volume_prototype_instance_by_image_context_model = {
        }  # VolumePrototypeInstanceByImageContext
        volume_prototype_instance_by_image_context_model['name'] = 'my-volume'
        volume_prototype_instance_by_image_context_model[
            'profile'] = volume_profile_identity_model
        volume_prototype_instance_by_image_context_model[
            'encryption_key'] = encryption_key_identity_model
        volume_prototype_instance_by_image_context_model['capacity'] = 100
        volume_prototype_instance_by_image_context_model['iops'] = 10000

        volume_attachment_prototype_instance_by_image_context_model = {
        }  # VolumeAttachmentPrototypeInstanceByImageContext
        volume_attachment_prototype_instance_by_image_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_by_image_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_by_image_context_model[
            'volume'] = volume_prototype_instance_by_image_context_model

        image_identity_model = {}  # ImageIdentityById
        image_identity_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        instance_template_model = {}  # InstanceTemplateInstanceByImage
        instance_template_model['id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'
        instance_template_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_template_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_template_model['name'] = 'my-instance-template'
        instance_template_model['keys'] = [key_identity_model]
        instance_template_model['network_interfaces'] = [
            network_interface_prototype_model
        ]
        instance_template_model['profile'] = instance_profile_identity_model
        instance_template_model['user_data'] = 'testString'
        instance_template_model['volume_attachments'] = [
            volume_attachment_prototype_instance_context_model
        ]
        instance_template_model['vpc'] = vpc_identity_model
        instance_template_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        instance_template_model[
            'resource_group'] = resource_group_reference_model
        instance_template_model[
            'primary_network_interface'] = network_interface_prototype_model
        instance_template_model['zone'] = zone_identity_model
        instance_template_model[
            'boot_volume_attachment'] = volume_attachment_prototype_instance_by_image_context_model
        instance_template_model['image'] = image_identity_model

        # Construct a json representation of a InstanceTemplateCollection model
        instance_template_collection_model_json = {}
        instance_template_collection_model_json[
            'first'] = instance_template_collection_first_model
        instance_template_collection_model_json['limit'] = 20
        instance_template_collection_model_json[
            'next'] = instance_template_collection_next_model
        instance_template_collection_model_json['total_count'] = 132
        instance_template_collection_model_json['templates'] = [
            instance_template_model
        ]

        # Construct a model instance of InstanceTemplateCollection by calling from_dict on the json representation
        instance_template_collection_model = InstanceTemplateCollection.from_dict(
            instance_template_collection_model_json)
        assert instance_template_collection_model != False

        # Construct a model instance of InstanceTemplateCollection by calling from_dict on the json representation
        instance_template_collection_model_dict = InstanceTemplateCollection.from_dict(
            instance_template_collection_model_json).__dict__
        instance_template_collection_model2 = InstanceTemplateCollection(
            **instance_template_collection_model_dict)

        # Verify the model instances are equivalent
        assert instance_template_collection_model == instance_template_collection_model2

        # Convert model instance back to dict and verify no loss of data
        instance_template_collection_model_json2 = instance_template_collection_model.to_dict(
        )
        assert instance_template_collection_model_json2 == instance_template_collection_model_json


class TestInstanceTemplateCollectionFirst():
    """
    Test Class for InstanceTemplateCollectionFirst
    """

    def test_instance_template_collection_first_serialization(self):
        """
        Test serialization/deserialization for InstanceTemplateCollectionFirst
        """

        # Construct a json representation of a InstanceTemplateCollectionFirst model
        instance_template_collection_first_model_json = {}
        instance_template_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/templates?limit=20'

        # Construct a model instance of InstanceTemplateCollectionFirst by calling from_dict on the json representation
        instance_template_collection_first_model = InstanceTemplateCollectionFirst.from_dict(
            instance_template_collection_first_model_json)
        assert instance_template_collection_first_model != False

        # Construct a model instance of InstanceTemplateCollectionFirst by calling from_dict on the json representation
        instance_template_collection_first_model_dict = InstanceTemplateCollectionFirst.from_dict(
            instance_template_collection_first_model_json).__dict__
        instance_template_collection_first_model2 = InstanceTemplateCollectionFirst(
            **instance_template_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert instance_template_collection_first_model == instance_template_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        instance_template_collection_first_model_json2 = instance_template_collection_first_model.to_dict(
        )
        assert instance_template_collection_first_model_json2 == instance_template_collection_first_model_json


class TestInstanceTemplateCollectionNext():
    """
    Test Class for InstanceTemplateCollectionNext
    """

    def test_instance_template_collection_next_serialization(self):
        """
        Test serialization/deserialization for InstanceTemplateCollectionNext
        """

        # Construct a json representation of a InstanceTemplateCollectionNext model
        instance_template_collection_next_model_json = {}
        instance_template_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/templates?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of InstanceTemplateCollectionNext by calling from_dict on the json representation
        instance_template_collection_next_model = InstanceTemplateCollectionNext.from_dict(
            instance_template_collection_next_model_json)
        assert instance_template_collection_next_model != False

        # Construct a model instance of InstanceTemplateCollectionNext by calling from_dict on the json representation
        instance_template_collection_next_model_dict = InstanceTemplateCollectionNext.from_dict(
            instance_template_collection_next_model_json).__dict__
        instance_template_collection_next_model2 = InstanceTemplateCollectionNext(
            **instance_template_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert instance_template_collection_next_model == instance_template_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        instance_template_collection_next_model_json2 = instance_template_collection_next_model.to_dict(
        )
        assert instance_template_collection_next_model_json2 == instance_template_collection_next_model_json


class TestInstanceTemplatePatch():
    """
    Test Class for InstanceTemplatePatch
    """

    def test_instance_template_patch_serialization(self):
        """
        Test serialization/deserialization for InstanceTemplatePatch
        """

        # Construct a json representation of a InstanceTemplatePatch model
        instance_template_patch_model_json = {}
        instance_template_patch_model_json['name'] = 'my-instance-template'

        # Construct a model instance of InstanceTemplatePatch by calling from_dict on the json representation
        instance_template_patch_model = InstanceTemplatePatch.from_dict(
            instance_template_patch_model_json)
        assert instance_template_patch_model != False

        # Construct a model instance of InstanceTemplatePatch by calling from_dict on the json representation
        instance_template_patch_model_dict = InstanceTemplatePatch.from_dict(
            instance_template_patch_model_json).__dict__
        instance_template_patch_model2 = InstanceTemplatePatch(
            **instance_template_patch_model_dict)

        # Verify the model instances are equivalent
        assert instance_template_patch_model == instance_template_patch_model2

        # Convert model instance back to dict and verify no loss of data
        instance_template_patch_model_json2 = instance_template_patch_model.to_dict(
        )
        assert instance_template_patch_model_json2 == instance_template_patch_model_json


class TestInstanceTemplateReference():
    """
    Test Class for InstanceTemplateReference
    """

    def test_instance_template_reference_serialization(self):
        """
        Test serialization/deserialization for InstanceTemplateReference
        """

        # Construct a json representation of a InstanceTemplateReference model
        instance_template_reference_model_json = {}
        instance_template_reference_model_json[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'
        instance_template_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_template_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a model instance of InstanceTemplateReference by calling from_dict on the json representation
        instance_template_reference_model = InstanceTemplateReference.from_dict(
            instance_template_reference_model_json)
        assert instance_template_reference_model != False

        # Construct a model instance of InstanceTemplateReference by calling from_dict on the json representation
        instance_template_reference_model_dict = InstanceTemplateReference.from_dict(
            instance_template_reference_model_json).__dict__
        instance_template_reference_model2 = InstanceTemplateReference(
            **instance_template_reference_model_dict)

        # Verify the model instances are equivalent
        assert instance_template_reference_model == instance_template_reference_model2

        # Convert model instance back to dict and verify no loss of data
        instance_template_reference_model_json2 = instance_template_reference_model.to_dict(
        )
        assert instance_template_reference_model_json2 == instance_template_reference_model_json


class TestInstanceVCPU():
    """
    Test Class for InstanceVCPU
    """

    def test_instance_vcpu_serialization(self):
        """
        Test serialization/deserialization for InstanceVCPU
        """

        # Construct a json representation of a InstanceVCPU model
        instance_vcpu_model_json = {}
        instance_vcpu_model_json['architecture'] = 'amd64'
        instance_vcpu_model_json['count'] = 4

        # Construct a model instance of InstanceVCPU by calling from_dict on the json representation
        instance_vcpu_model = InstanceVCPU.from_dict(instance_vcpu_model_json)
        assert instance_vcpu_model != False

        # Construct a model instance of InstanceVCPU by calling from_dict on the json representation
        instance_vcpu_model_dict = InstanceVCPU.from_dict(
            instance_vcpu_model_json).__dict__
        instance_vcpu_model2 = InstanceVCPU(**instance_vcpu_model_dict)

        # Verify the model instances are equivalent
        assert instance_vcpu_model == instance_vcpu_model2

        # Convert model instance back to dict and verify no loss of data
        instance_vcpu_model_json2 = instance_vcpu_model.to_dict()
        assert instance_vcpu_model_json2 == instance_vcpu_model_json


class TestKey():
    """
    Test Class for Key
    """

    def test_key_serialization(self):
        """
        Test serialization/deserialization for Key
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a json representation of a Key model
        key_model_json = {}
        key_model_json['id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_model_json[
            'fingerprint'] = 'SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY'
        key_model_json['name'] = 'my-key'
        key_model_json[
            'public_key'] = 'AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En'
        key_model_json['type'] = 'rsa'
        key_model_json['resource_group'] = resource_group_reference_model
        key_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        key_model_json['length'] = 2048

        # Construct a model instance of Key by calling from_dict on the json representation
        key_model = Key.from_dict(key_model_json)
        assert key_model != False

        # Construct a model instance of Key by calling from_dict on the json representation
        key_model_dict = Key.from_dict(key_model_json).__dict__
        key_model2 = Key(**key_model_dict)

        # Verify the model instances are equivalent
        assert key_model == key_model2

        # Convert model instance back to dict and verify no loss of data
        key_model_json2 = key_model.to_dict()
        assert key_model_json2 == key_model_json


class TestKeyCollection():
    """
    Test Class for KeyCollection
    """

    def test_key_collection_serialization(self):
        """
        Test serialization/deserialization for KeyCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        key_model = {}  # Key
        key_model['id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_model[
            'fingerprint'] = 'SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY'
        key_model['name'] = 'my-key'
        key_model[
            'public_key'] = 'AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En'
        key_model['type'] = 'rsa'
        key_model['resource_group'] = resource_group_reference_model
        key_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        key_model['length'] = 2048

        # Construct a json representation of a KeyCollection model
        key_collection_model_json = {}
        key_collection_model_json['keys'] = [key_model]

        # Construct a model instance of KeyCollection by calling from_dict on the json representation
        key_collection_model = KeyCollection.from_dict(
            key_collection_model_json)
        assert key_collection_model != False

        # Construct a model instance of KeyCollection by calling from_dict on the json representation
        key_collection_model_dict = KeyCollection.from_dict(
            key_collection_model_json).__dict__
        key_collection_model2 = KeyCollection(**key_collection_model_dict)

        # Verify the model instances are equivalent
        assert key_collection_model == key_collection_model2

        # Convert model instance back to dict and verify no loss of data
        key_collection_model_json2 = key_collection_model.to_dict()
        assert key_collection_model_json2 == key_collection_model_json


class TestKeyPatch():
    """
    Test Class for KeyPatch
    """

    def test_key_patch_serialization(self):
        """
        Test serialization/deserialization for KeyPatch
        """

        # Construct a json representation of a KeyPatch model
        key_patch_model_json = {}
        key_patch_model_json['name'] = 'my-key'

        # Construct a model instance of KeyPatch by calling from_dict on the json representation
        key_patch_model = KeyPatch.from_dict(key_patch_model_json)
        assert key_patch_model != False

        # Construct a model instance of KeyPatch by calling from_dict on the json representation
        key_patch_model_dict = KeyPatch.from_dict(key_patch_model_json).__dict__
        key_patch_model2 = KeyPatch(**key_patch_model_dict)

        # Verify the model instances are equivalent
        assert key_patch_model == key_patch_model2

        # Convert model instance back to dict and verify no loss of data
        key_patch_model_json2 = key_patch_model.to_dict()
        assert key_patch_model_json2 == key_patch_model_json


class TestLoadBalancer():
    """
    Test Class for LoadBalancer
    """

    def test_load_balancer_serialization(self):
        """
        Test serialization/deserialization for LoadBalancer
        """

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_profile_reference_model = {
        }  # LoadBalancerProfileReference
        load_balancer_profile_reference_model['name'] = 'network-fixed'
        load_balancer_profile_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed'
        load_balancer_profile_reference_model['family'] = 'network'

        load_balancer_listener_reference_model = {
        }  # LoadBalancerListenerReference
        load_balancer_listener_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004'

        load_balancer_pool_reference_model = {}  # LoadBalancerPoolReference
        load_balancer_pool_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model['name'] = 'my-load-balancer-pool'

        ip_model = {}  # IP
        ip_model['address'] = '192.168.3.4'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        # Construct a json representation of a LoadBalancer model
        load_balancer_model_json = {}
        load_balancer_model_json[
            'profile'] = load_balancer_profile_reference_model
        load_balancer_model_json['id'] = 'dd754295-e9e0-4c9d-bf6c-58fbc59e5727'
        load_balancer_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727'
        load_balancer_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727'
        load_balancer_model_json['name'] = 'my-load-balancer'
        load_balancer_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_model_json[
            'hostname'] = 'myloadbalancer-123456-us-south-1.lb.bluemix.net'
        load_balancer_model_json['is_public'] = True
        load_balancer_model_json['listeners'] = [
            load_balancer_listener_reference_model
        ]
        load_balancer_model_json['operating_status'] = 'offline'
        load_balancer_model_json['pools'] = [load_balancer_pool_reference_model]
        load_balancer_model_json['private_ips'] = [ip_model]
        load_balancer_model_json['provisioning_status'] = 'active'
        load_balancer_model_json['public_ips'] = [ip_model]
        load_balancer_model_json[
            'resource_group'] = resource_group_reference_model
        load_balancer_model_json['subnets'] = [subnet_reference_model]

        # Construct a model instance of LoadBalancer by calling from_dict on the json representation
        load_balancer_model = LoadBalancer.from_dict(load_balancer_model_json)
        assert load_balancer_model != False

        # Construct a model instance of LoadBalancer by calling from_dict on the json representation
        load_balancer_model_dict = LoadBalancer.from_dict(
            load_balancer_model_json).__dict__
        load_balancer_model2 = LoadBalancer(**load_balancer_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_model == load_balancer_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_model_json2 = load_balancer_model.to_dict()
        assert load_balancer_model_json2 == load_balancer_model_json


class TestLoadBalancerCollection():
    """
    Test Class for LoadBalancerCollection
    """

    def test_load_balancer_collection_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_profile_reference_model = {
        }  # LoadBalancerProfileReference
        load_balancer_profile_reference_model['name'] = 'network-fixed'
        load_balancer_profile_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed'
        load_balancer_profile_reference_model['family'] = 'network'

        load_balancer_listener_reference_model = {
        }  # LoadBalancerListenerReference
        load_balancer_listener_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004'

        load_balancer_pool_reference_model = {}  # LoadBalancerPoolReference
        load_balancer_pool_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model['name'] = 'my-load-balancer-pool'

        ip_model = {}  # IP
        ip_model['address'] = '192.168.3.4'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        load_balancer_model = {}  # LoadBalancer
        load_balancer_model['profile'] = load_balancer_profile_reference_model
        load_balancer_model['id'] = 'dd754295-e9e0-4c9d-bf6c-58fbc59e5727'
        load_balancer_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727'
        load_balancer_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727'
        load_balancer_model['name'] = 'my-load-balancer'
        load_balancer_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_model[
            'hostname'] = 'myloadbalancer-123456-us-south-1.lb.bluemix.net'
        load_balancer_model['is_public'] = True
        load_balancer_model['listeners'] = [
            load_balancer_listener_reference_model
        ]
        load_balancer_model['operating_status'] = 'offline'
        load_balancer_model['pools'] = [load_balancer_pool_reference_model]
        load_balancer_model['private_ips'] = [ip_model]
        load_balancer_model['provisioning_status'] = 'active'
        load_balancer_model['public_ips'] = [ip_model]
        load_balancer_model['resource_group'] = resource_group_reference_model
        load_balancer_model['subnets'] = [subnet_reference_model]

        # Construct a json representation of a LoadBalancerCollection model
        load_balancer_collection_model_json = {}
        load_balancer_collection_model_json['load_balancers'] = [
            load_balancer_model
        ]

        # Construct a model instance of LoadBalancerCollection by calling from_dict on the json representation
        load_balancer_collection_model = LoadBalancerCollection.from_dict(
            load_balancer_collection_model_json)
        assert load_balancer_collection_model != False

        # Construct a model instance of LoadBalancerCollection by calling from_dict on the json representation
        load_balancer_collection_model_dict = LoadBalancerCollection.from_dict(
            load_balancer_collection_model_json).__dict__
        load_balancer_collection_model2 = LoadBalancerCollection(
            **load_balancer_collection_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_collection_model == load_balancer_collection_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_collection_model_json2 = load_balancer_collection_model.to_dict(
        )
        assert load_balancer_collection_model_json2 == load_balancer_collection_model_json


class TestLoadBalancerListener():
    """
    Test Class for LoadBalancerListener
    """

    def test_load_balancer_listener_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerListener
        """

        # Construct dict forms of any model objects needed in order to build this model.

        certificate_instance_reference_model = {
        }  # CertificateInstanceReference
        certificate_instance_reference_model[
            'crn'] = 'crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758'

        load_balancer_pool_reference_model = {}  # LoadBalancerPoolReference
        load_balancer_pool_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model['name'] = 'my-load-balancer-pool'

        load_balancer_listener_policy_reference_model = {
        }  # LoadBalancerListenerPolicyReference
        load_balancer_listener_policy_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278'

        # Construct a json representation of a LoadBalancerListener model
        load_balancer_listener_model_json = {}
        load_balancer_listener_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_model_json['connection_limit'] = 2000
        load_balancer_listener_model_json['port'] = 443
        load_balancer_listener_model_json['protocol'] = 'http'
        load_balancer_listener_model_json[
            'certificate_instance'] = certificate_instance_reference_model
        load_balancer_listener_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_listener_model_json[
            'default_pool'] = load_balancer_pool_reference_model
        load_balancer_listener_model_json['policies'] = [
            load_balancer_listener_policy_reference_model
        ]
        load_balancer_listener_model_json['provisioning_status'] = 'active'

        # Construct a model instance of LoadBalancerListener by calling from_dict on the json representation
        load_balancer_listener_model = LoadBalancerListener.from_dict(
            load_balancer_listener_model_json)
        assert load_balancer_listener_model != False

        # Construct a model instance of LoadBalancerListener by calling from_dict on the json representation
        load_balancer_listener_model_dict = LoadBalancerListener.from_dict(
            load_balancer_listener_model_json).__dict__
        load_balancer_listener_model2 = LoadBalancerListener(
            **load_balancer_listener_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_model == load_balancer_listener_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_model_json2 = load_balancer_listener_model.to_dict(
        )
        assert load_balancer_listener_model_json2 == load_balancer_listener_model_json


class TestLoadBalancerListenerCollection():
    """
    Test Class for LoadBalancerListenerCollection
    """

    def test_load_balancer_listener_collection_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerListenerCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        certificate_instance_reference_model = {
        }  # CertificateInstanceReference
        certificate_instance_reference_model[
            'crn'] = 'crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758'

        load_balancer_pool_reference_model = {}  # LoadBalancerPoolReference
        load_balancer_pool_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model['name'] = 'my-load-balancer-pool'

        load_balancer_listener_policy_reference_model = {
        }  # LoadBalancerListenerPolicyReference
        load_balancer_listener_policy_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278'

        load_balancer_listener_model = {}  # LoadBalancerListener
        load_balancer_listener_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_model['connection_limit'] = 2000
        load_balancer_listener_model['port'] = 443
        load_balancer_listener_model['protocol'] = 'http'
        load_balancer_listener_model[
            'certificate_instance'] = certificate_instance_reference_model
        load_balancer_listener_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_listener_model[
            'default_pool'] = load_balancer_pool_reference_model
        load_balancer_listener_model['policies'] = [
            load_balancer_listener_policy_reference_model
        ]
        load_balancer_listener_model['provisioning_status'] = 'active'

        # Construct a json representation of a LoadBalancerListenerCollection model
        load_balancer_listener_collection_model_json = {}
        load_balancer_listener_collection_model_json['listeners'] = [
            load_balancer_listener_model
        ]

        # Construct a model instance of LoadBalancerListenerCollection by calling from_dict on the json representation
        load_balancer_listener_collection_model = LoadBalancerListenerCollection.from_dict(
            load_balancer_listener_collection_model_json)
        assert load_balancer_listener_collection_model != False

        # Construct a model instance of LoadBalancerListenerCollection by calling from_dict on the json representation
        load_balancer_listener_collection_model_dict = LoadBalancerListenerCollection.from_dict(
            load_balancer_listener_collection_model_json).__dict__
        load_balancer_listener_collection_model2 = LoadBalancerListenerCollection(
            **load_balancer_listener_collection_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_collection_model == load_balancer_listener_collection_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_collection_model_json2 = load_balancer_listener_collection_model.to_dict(
        )
        assert load_balancer_listener_collection_model_json2 == load_balancer_listener_collection_model_json


class TestLoadBalancerListenerPatch():
    """
    Test Class for LoadBalancerListenerPatch
    """

    def test_load_balancer_listener_patch_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerListenerPatch
        """

        # Construct dict forms of any model objects needed in order to build this model.

        certificate_instance_identity_model = {
        }  # CertificateInstanceIdentityByCRN
        certificate_instance_identity_model[
            'crn'] = 'crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758'

        load_balancer_pool_identity_model = {}  # LoadBalancerPoolIdentityById
        load_balancer_pool_identity_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a json representation of a LoadBalancerListenerPatch model
        load_balancer_listener_patch_model_json = {}
        load_balancer_listener_patch_model_json['connection_limit'] = 2000
        load_balancer_listener_patch_model_json['port'] = 443
        load_balancer_listener_patch_model_json['protocol'] = 'http'
        load_balancer_listener_patch_model_json[
            'certificate_instance'] = certificate_instance_identity_model
        load_balancer_listener_patch_model_json[
            'default_pool'] = load_balancer_pool_identity_model

        # Construct a model instance of LoadBalancerListenerPatch by calling from_dict on the json representation
        load_balancer_listener_patch_model = LoadBalancerListenerPatch.from_dict(
            load_balancer_listener_patch_model_json)
        assert load_balancer_listener_patch_model != False

        # Construct a model instance of LoadBalancerListenerPatch by calling from_dict on the json representation
        load_balancer_listener_patch_model_dict = LoadBalancerListenerPatch.from_dict(
            load_balancer_listener_patch_model_json).__dict__
        load_balancer_listener_patch_model2 = LoadBalancerListenerPatch(
            **load_balancer_listener_patch_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_patch_model == load_balancer_listener_patch_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_patch_model_json2 = load_balancer_listener_patch_model.to_dict(
        )
        assert load_balancer_listener_patch_model_json2 == load_balancer_listener_patch_model_json


class TestLoadBalancerListenerPolicy():
    """
    Test Class for LoadBalancerListenerPolicy
    """

    def test_load_balancer_listener_policy_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerListenerPolicy
        """

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_listener_policy_rule_reference_model = {
        }  # LoadBalancerListenerPolicyRuleReference
        load_balancer_listener_policy_rule_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762'

        load_balancer_listener_policy_target_model = {
        }  # LoadBalancerListenerPolicyTargetLoadBalancerPoolReference
        load_balancer_listener_policy_target_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_target_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_target_model[
            'name'] = 'my-load-balancer-pool'

        # Construct a json representation of a LoadBalancerListenerPolicy model
        load_balancer_listener_policy_model_json = {}
        load_balancer_listener_policy_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278'
        load_balancer_listener_policy_model_json['name'] = 'my-policy'
        load_balancer_listener_policy_model_json['priority'] = 5
        load_balancer_listener_policy_model_json['action'] = 'forward'
        load_balancer_listener_policy_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_listener_policy_model_json[
            'provisioning_status'] = 'active'
        load_balancer_listener_policy_model_json['rules'] = [
            load_balancer_listener_policy_rule_reference_model
        ]
        load_balancer_listener_policy_model_json[
            'target'] = load_balancer_listener_policy_target_model

        # Construct a model instance of LoadBalancerListenerPolicy by calling from_dict on the json representation
        load_balancer_listener_policy_model = LoadBalancerListenerPolicy.from_dict(
            load_balancer_listener_policy_model_json)
        assert load_balancer_listener_policy_model != False

        # Construct a model instance of LoadBalancerListenerPolicy by calling from_dict on the json representation
        load_balancer_listener_policy_model_dict = LoadBalancerListenerPolicy.from_dict(
            load_balancer_listener_policy_model_json).__dict__
        load_balancer_listener_policy_model2 = LoadBalancerListenerPolicy(
            **load_balancer_listener_policy_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_model == load_balancer_listener_policy_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_model_json2 = load_balancer_listener_policy_model.to_dict(
        )
        assert load_balancer_listener_policy_model_json2 == load_balancer_listener_policy_model_json


class TestLoadBalancerListenerPolicyCollection():
    """
    Test Class for LoadBalancerListenerPolicyCollection
    """

    def test_load_balancer_listener_policy_collection_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerListenerPolicyCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_listener_policy_rule_reference_model = {
        }  # LoadBalancerListenerPolicyRuleReference
        load_balancer_listener_policy_rule_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762'

        load_balancer_listener_policy_target_model = {
        }  # LoadBalancerListenerPolicyTargetLoadBalancerPoolReference
        load_balancer_listener_policy_target_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_target_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_target_model[
            'name'] = 'my-load-balancer-pool'

        load_balancer_listener_policy_model = {}  # LoadBalancerListenerPolicy
        load_balancer_listener_policy_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278'
        load_balancer_listener_policy_model['name'] = 'my-policy'
        load_balancer_listener_policy_model['priority'] = 5
        load_balancer_listener_policy_model['action'] = 'forward'
        load_balancer_listener_policy_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_listener_policy_model['provisioning_status'] = 'active'
        load_balancer_listener_policy_model['rules'] = [
            load_balancer_listener_policy_rule_reference_model
        ]
        load_balancer_listener_policy_model[
            'target'] = load_balancer_listener_policy_target_model

        # Construct a json representation of a LoadBalancerListenerPolicyCollection model
        load_balancer_listener_policy_collection_model_json = {}
        load_balancer_listener_policy_collection_model_json['policies'] = [
            load_balancer_listener_policy_model
        ]

        # Construct a model instance of LoadBalancerListenerPolicyCollection by calling from_dict on the json representation
        load_balancer_listener_policy_collection_model = LoadBalancerListenerPolicyCollection.from_dict(
            load_balancer_listener_policy_collection_model_json)
        assert load_balancer_listener_policy_collection_model != False

        # Construct a model instance of LoadBalancerListenerPolicyCollection by calling from_dict on the json representation
        load_balancer_listener_policy_collection_model_dict = LoadBalancerListenerPolicyCollection.from_dict(
            load_balancer_listener_policy_collection_model_json).__dict__
        load_balancer_listener_policy_collection_model2 = LoadBalancerListenerPolicyCollection(
            **load_balancer_listener_policy_collection_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_collection_model == load_balancer_listener_policy_collection_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_collection_model_json2 = load_balancer_listener_policy_collection_model.to_dict(
        )
        assert load_balancer_listener_policy_collection_model_json2 == load_balancer_listener_policy_collection_model_json


class TestLoadBalancerListenerPolicyPatch():
    """
    Test Class for LoadBalancerListenerPolicyPatch
    """

    def test_load_balancer_listener_policy_patch_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerListenerPolicyPatch
        """

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_listener_policy_patch_target_model = {
        }  # LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById
        load_balancer_listener_policy_patch_target_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a json representation of a LoadBalancerListenerPolicyPatch model
        load_balancer_listener_policy_patch_model_json = {}
        load_balancer_listener_policy_patch_model_json['name'] = 'my-policy'
        load_balancer_listener_policy_patch_model_json['priority'] = 5
        load_balancer_listener_policy_patch_model_json[
            'target'] = load_balancer_listener_policy_patch_target_model

        # Construct a model instance of LoadBalancerListenerPolicyPatch by calling from_dict on the json representation
        load_balancer_listener_policy_patch_model = LoadBalancerListenerPolicyPatch.from_dict(
            load_balancer_listener_policy_patch_model_json)
        assert load_balancer_listener_policy_patch_model != False

        # Construct a model instance of LoadBalancerListenerPolicyPatch by calling from_dict on the json representation
        load_balancer_listener_policy_patch_model_dict = LoadBalancerListenerPolicyPatch.from_dict(
            load_balancer_listener_policy_patch_model_json).__dict__
        load_balancer_listener_policy_patch_model2 = LoadBalancerListenerPolicyPatch(
            **load_balancer_listener_policy_patch_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_patch_model == load_balancer_listener_policy_patch_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_patch_model_json2 = load_balancer_listener_policy_patch_model.to_dict(
        )
        assert load_balancer_listener_policy_patch_model_json2 == load_balancer_listener_policy_patch_model_json


class TestLoadBalancerListenerPolicyPrototype():
    """
    Test Class for LoadBalancerListenerPolicyPrototype
    """

    def test_load_balancer_listener_policy_prototype_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerListenerPolicyPrototype
        """

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_listener_policy_rule_prototype_model = {
        }  # LoadBalancerListenerPolicyRulePrototype
        load_balancer_listener_policy_rule_prototype_model[
            'condition'] = 'contains'
        load_balancer_listener_policy_rule_prototype_model[
            'field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_prototype_model['type'] = 'header'
        load_balancer_listener_policy_rule_prototype_model[
            'value'] = 'testString'

        load_balancer_listener_policy_prototype_target_model = {
        }  # LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById
        load_balancer_listener_policy_prototype_target_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a json representation of a LoadBalancerListenerPolicyPrototype model
        load_balancer_listener_policy_prototype_model_json = {}
        load_balancer_listener_policy_prototype_model_json['name'] = 'my-policy'
        load_balancer_listener_policy_prototype_model_json['priority'] = 5
        load_balancer_listener_policy_prototype_model_json['action'] = 'forward'
        load_balancer_listener_policy_prototype_model_json['rules'] = [
            load_balancer_listener_policy_rule_prototype_model
        ]
        load_balancer_listener_policy_prototype_model_json[
            'target'] = load_balancer_listener_policy_prototype_target_model

        # Construct a model instance of LoadBalancerListenerPolicyPrototype by calling from_dict on the json representation
        load_balancer_listener_policy_prototype_model = LoadBalancerListenerPolicyPrototype.from_dict(
            load_balancer_listener_policy_prototype_model_json)
        assert load_balancer_listener_policy_prototype_model != False

        # Construct a model instance of LoadBalancerListenerPolicyPrototype by calling from_dict on the json representation
        load_balancer_listener_policy_prototype_model_dict = LoadBalancerListenerPolicyPrototype.from_dict(
            load_balancer_listener_policy_prototype_model_json).__dict__
        load_balancer_listener_policy_prototype_model2 = LoadBalancerListenerPolicyPrototype(
            **load_balancer_listener_policy_prototype_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_prototype_model == load_balancer_listener_policy_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_prototype_model_json2 = load_balancer_listener_policy_prototype_model.to_dict(
        )
        assert load_balancer_listener_policy_prototype_model_json2 == load_balancer_listener_policy_prototype_model_json


class TestLoadBalancerListenerPolicyReference():
    """
    Test Class for LoadBalancerListenerPolicyReference
    """

    def test_load_balancer_listener_policy_reference_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerListenerPolicyReference
        """

        # Construct a json representation of a LoadBalancerListenerPolicyReference model
        load_balancer_listener_policy_reference_model_json = {}
        load_balancer_listener_policy_reference_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278'

        # Construct a model instance of LoadBalancerListenerPolicyReference by calling from_dict on the json representation
        load_balancer_listener_policy_reference_model = LoadBalancerListenerPolicyReference.from_dict(
            load_balancer_listener_policy_reference_model_json)
        assert load_balancer_listener_policy_reference_model != False

        # Construct a model instance of LoadBalancerListenerPolicyReference by calling from_dict on the json representation
        load_balancer_listener_policy_reference_model_dict = LoadBalancerListenerPolicyReference.from_dict(
            load_balancer_listener_policy_reference_model_json).__dict__
        load_balancer_listener_policy_reference_model2 = LoadBalancerListenerPolicyReference(
            **load_balancer_listener_policy_reference_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_reference_model == load_balancer_listener_policy_reference_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_reference_model_json2 = load_balancer_listener_policy_reference_model.to_dict(
        )
        assert load_balancer_listener_policy_reference_model_json2 == load_balancer_listener_policy_reference_model_json


class TestLoadBalancerListenerPolicyRule():
    """
    Test Class for LoadBalancerListenerPolicyRule
    """

    def test_load_balancer_listener_policy_rule_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerListenerPolicyRule
        """

        # Construct a json representation of a LoadBalancerListenerPolicyRule model
        load_balancer_listener_policy_rule_model_json = {}
        load_balancer_listener_policy_rule_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_rule_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762'
        load_balancer_listener_policy_rule_model_json['condition'] = 'contains'
        load_balancer_listener_policy_rule_model_json['field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_model_json['type'] = 'header'
        load_balancer_listener_policy_rule_model_json['value'] = 'testString'
        load_balancer_listener_policy_rule_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_listener_policy_rule_model_json[
            'provisioning_status'] = 'active'

        # Construct a model instance of LoadBalancerListenerPolicyRule by calling from_dict on the json representation
        load_balancer_listener_policy_rule_model = LoadBalancerListenerPolicyRule.from_dict(
            load_balancer_listener_policy_rule_model_json)
        assert load_balancer_listener_policy_rule_model != False

        # Construct a model instance of LoadBalancerListenerPolicyRule by calling from_dict on the json representation
        load_balancer_listener_policy_rule_model_dict = LoadBalancerListenerPolicyRule.from_dict(
            load_balancer_listener_policy_rule_model_json).__dict__
        load_balancer_listener_policy_rule_model2 = LoadBalancerListenerPolicyRule(
            **load_balancer_listener_policy_rule_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_rule_model == load_balancer_listener_policy_rule_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_rule_model_json2 = load_balancer_listener_policy_rule_model.to_dict(
        )
        assert load_balancer_listener_policy_rule_model_json2 == load_balancer_listener_policy_rule_model_json


class TestLoadBalancerListenerPolicyRuleCollection():
    """
    Test Class for LoadBalancerListenerPolicyRuleCollection
    """

    def test_load_balancer_listener_policy_rule_collection_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerListenerPolicyRuleCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_listener_policy_rule_model = {
        }  # LoadBalancerListenerPolicyRule
        load_balancer_listener_policy_rule_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_rule_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762'
        load_balancer_listener_policy_rule_model['condition'] = 'contains'
        load_balancer_listener_policy_rule_model['field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_model['type'] = 'header'
        load_balancer_listener_policy_rule_model['value'] = 'testString'
        load_balancer_listener_policy_rule_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_listener_policy_rule_model[
            'provisioning_status'] = 'active'

        # Construct a json representation of a LoadBalancerListenerPolicyRuleCollection model
        load_balancer_listener_policy_rule_collection_model_json = {}
        load_balancer_listener_policy_rule_collection_model_json['rules'] = [
            load_balancer_listener_policy_rule_model
        ]

        # Construct a model instance of LoadBalancerListenerPolicyRuleCollection by calling from_dict on the json representation
        load_balancer_listener_policy_rule_collection_model = LoadBalancerListenerPolicyRuleCollection.from_dict(
            load_balancer_listener_policy_rule_collection_model_json)
        assert load_balancer_listener_policy_rule_collection_model != False

        # Construct a model instance of LoadBalancerListenerPolicyRuleCollection by calling from_dict on the json representation
        load_balancer_listener_policy_rule_collection_model_dict = LoadBalancerListenerPolicyRuleCollection.from_dict(
            load_balancer_listener_policy_rule_collection_model_json).__dict__
        load_balancer_listener_policy_rule_collection_model2 = LoadBalancerListenerPolicyRuleCollection(
            **load_balancer_listener_policy_rule_collection_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_rule_collection_model == load_balancer_listener_policy_rule_collection_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_rule_collection_model_json2 = load_balancer_listener_policy_rule_collection_model.to_dict(
        )
        assert load_balancer_listener_policy_rule_collection_model_json2 == load_balancer_listener_policy_rule_collection_model_json


class TestLoadBalancerListenerPolicyRulePatch():
    """
    Test Class for LoadBalancerListenerPolicyRulePatch
    """

    def test_load_balancer_listener_policy_rule_patch_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerListenerPolicyRulePatch
        """

        # Construct a json representation of a LoadBalancerListenerPolicyRulePatch model
        load_balancer_listener_policy_rule_patch_model_json = {}
        load_balancer_listener_policy_rule_patch_model_json[
            'condition'] = 'contains'
        load_balancer_listener_policy_rule_patch_model_json[
            'field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_patch_model_json['type'] = 'header'
        load_balancer_listener_policy_rule_patch_model_json[
            'value'] = 'testString'

        # Construct a model instance of LoadBalancerListenerPolicyRulePatch by calling from_dict on the json representation
        load_balancer_listener_policy_rule_patch_model = LoadBalancerListenerPolicyRulePatch.from_dict(
            load_balancer_listener_policy_rule_patch_model_json)
        assert load_balancer_listener_policy_rule_patch_model != False

        # Construct a model instance of LoadBalancerListenerPolicyRulePatch by calling from_dict on the json representation
        load_balancer_listener_policy_rule_patch_model_dict = LoadBalancerListenerPolicyRulePatch.from_dict(
            load_balancer_listener_policy_rule_patch_model_json).__dict__
        load_balancer_listener_policy_rule_patch_model2 = LoadBalancerListenerPolicyRulePatch(
            **load_balancer_listener_policy_rule_patch_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_rule_patch_model == load_balancer_listener_policy_rule_patch_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_rule_patch_model_json2 = load_balancer_listener_policy_rule_patch_model.to_dict(
        )
        assert load_balancer_listener_policy_rule_patch_model_json2 == load_balancer_listener_policy_rule_patch_model_json


class TestLoadBalancerListenerPolicyRulePrototype():
    """
    Test Class for LoadBalancerListenerPolicyRulePrototype
    """

    def test_load_balancer_listener_policy_rule_prototype_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerListenerPolicyRulePrototype
        """

        # Construct a json representation of a LoadBalancerListenerPolicyRulePrototype model
        load_balancer_listener_policy_rule_prototype_model_json = {}
        load_balancer_listener_policy_rule_prototype_model_json[
            'condition'] = 'contains'
        load_balancer_listener_policy_rule_prototype_model_json[
            'field'] = 'MY-APP-HEADER'
        load_balancer_listener_policy_rule_prototype_model_json[
            'type'] = 'header'
        load_balancer_listener_policy_rule_prototype_model_json[
            'value'] = 'testString'

        # Construct a model instance of LoadBalancerListenerPolicyRulePrototype by calling from_dict on the json representation
        load_balancer_listener_policy_rule_prototype_model = LoadBalancerListenerPolicyRulePrototype.from_dict(
            load_balancer_listener_policy_rule_prototype_model_json)
        assert load_balancer_listener_policy_rule_prototype_model != False

        # Construct a model instance of LoadBalancerListenerPolicyRulePrototype by calling from_dict on the json representation
        load_balancer_listener_policy_rule_prototype_model_dict = LoadBalancerListenerPolicyRulePrototype.from_dict(
            load_balancer_listener_policy_rule_prototype_model_json).__dict__
        load_balancer_listener_policy_rule_prototype_model2 = LoadBalancerListenerPolicyRulePrototype(
            **load_balancer_listener_policy_rule_prototype_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_rule_prototype_model == load_balancer_listener_policy_rule_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_rule_prototype_model_json2 = load_balancer_listener_policy_rule_prototype_model.to_dict(
        )
        assert load_balancer_listener_policy_rule_prototype_model_json2 == load_balancer_listener_policy_rule_prototype_model_json


class TestLoadBalancerListenerPolicyRuleReference():
    """
    Test Class for LoadBalancerListenerPolicyRuleReference
    """

    def test_load_balancer_listener_policy_rule_reference_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerListenerPolicyRuleReference
        """

        # Construct a json representation of a LoadBalancerListenerPolicyRuleReference model
        load_balancer_listener_policy_rule_reference_model_json = {}
        load_balancer_listener_policy_rule_reference_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_rule_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762'

        # Construct a model instance of LoadBalancerListenerPolicyRuleReference by calling from_dict on the json representation
        load_balancer_listener_policy_rule_reference_model = LoadBalancerListenerPolicyRuleReference.from_dict(
            load_balancer_listener_policy_rule_reference_model_json)
        assert load_balancer_listener_policy_rule_reference_model != False

        # Construct a model instance of LoadBalancerListenerPolicyRuleReference by calling from_dict on the json representation
        load_balancer_listener_policy_rule_reference_model_dict = LoadBalancerListenerPolicyRuleReference.from_dict(
            load_balancer_listener_policy_rule_reference_model_json).__dict__
        load_balancer_listener_policy_rule_reference_model2 = LoadBalancerListenerPolicyRuleReference(
            **load_balancer_listener_policy_rule_reference_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_rule_reference_model == load_balancer_listener_policy_rule_reference_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_rule_reference_model_json2 = load_balancer_listener_policy_rule_reference_model.to_dict(
        )
        assert load_balancer_listener_policy_rule_reference_model_json2 == load_balancer_listener_policy_rule_reference_model_json


class TestLoadBalancerListenerPrototypeLoadBalancerContext():
    """
    Test Class for LoadBalancerListenerPrototypeLoadBalancerContext
    """

    def test_load_balancer_listener_prototype_load_balancer_context_serialization(
            self):
        """
        Test serialization/deserialization for LoadBalancerListenerPrototypeLoadBalancerContext
        """

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_pool_identity_by_name_model = {
        }  # LoadBalancerPoolIdentityByName
        load_balancer_pool_identity_by_name_model[
            'name'] = 'my-load-balancer-pool'

        # Construct a json representation of a LoadBalancerListenerPrototypeLoadBalancerContext model
        load_balancer_listener_prototype_load_balancer_context_model_json = {}
        load_balancer_listener_prototype_load_balancer_context_model_json[
            'connection_limit'] = 2000
        load_balancer_listener_prototype_load_balancer_context_model_json[
            'port'] = 443
        load_balancer_listener_prototype_load_balancer_context_model_json[
            'protocol'] = 'http'
        load_balancer_listener_prototype_load_balancer_context_model_json[
            'default_pool'] = load_balancer_pool_identity_by_name_model

        # Construct a model instance of LoadBalancerListenerPrototypeLoadBalancerContext by calling from_dict on the json representation
        load_balancer_listener_prototype_load_balancer_context_model = LoadBalancerListenerPrototypeLoadBalancerContext.from_dict(
            load_balancer_listener_prototype_load_balancer_context_model_json)
        assert load_balancer_listener_prototype_load_balancer_context_model != False

        # Construct a model instance of LoadBalancerListenerPrototypeLoadBalancerContext by calling from_dict on the json representation
        load_balancer_listener_prototype_load_balancer_context_model_dict = LoadBalancerListenerPrototypeLoadBalancerContext.from_dict(
            load_balancer_listener_prototype_load_balancer_context_model_json
        ).__dict__
        load_balancer_listener_prototype_load_balancer_context_model2 = LoadBalancerListenerPrototypeLoadBalancerContext(
            **load_balancer_listener_prototype_load_balancer_context_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_prototype_load_balancer_context_model == load_balancer_listener_prototype_load_balancer_context_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_prototype_load_balancer_context_model_json2 = load_balancer_listener_prototype_load_balancer_context_model.to_dict(
        )
        assert load_balancer_listener_prototype_load_balancer_context_model_json2 == load_balancer_listener_prototype_load_balancer_context_model_json


class TestLoadBalancerListenerReference():
    """
    Test Class for LoadBalancerListenerReference
    """

    def test_load_balancer_listener_reference_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerListenerReference
        """

        # Construct a json representation of a LoadBalancerListenerReference model
        load_balancer_listener_reference_model_json = {}
        load_balancer_listener_reference_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a model instance of LoadBalancerListenerReference by calling from_dict on the json representation
        load_balancer_listener_reference_model = LoadBalancerListenerReference.from_dict(
            load_balancer_listener_reference_model_json)
        assert load_balancer_listener_reference_model != False

        # Construct a model instance of LoadBalancerListenerReference by calling from_dict on the json representation
        load_balancer_listener_reference_model_dict = LoadBalancerListenerReference.from_dict(
            load_balancer_listener_reference_model_json).__dict__
        load_balancer_listener_reference_model2 = LoadBalancerListenerReference(
            **load_balancer_listener_reference_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_listener_reference_model == load_balancer_listener_reference_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_reference_model_json2 = load_balancer_listener_reference_model.to_dict(
        )
        assert load_balancer_listener_reference_model_json2 == load_balancer_listener_reference_model_json


class TestLoadBalancerPatch():
    """
    Test Class for LoadBalancerPatch
    """

    def test_load_balancer_patch_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPatch
        """

        # Construct a json representation of a LoadBalancerPatch model
        load_balancer_patch_model_json = {}
        load_balancer_patch_model_json['name'] = 'my-load-balancer'

        # Construct a model instance of LoadBalancerPatch by calling from_dict on the json representation
        load_balancer_patch_model = LoadBalancerPatch.from_dict(
            load_balancer_patch_model_json)
        assert load_balancer_patch_model != False

        # Construct a model instance of LoadBalancerPatch by calling from_dict on the json representation
        load_balancer_patch_model_dict = LoadBalancerPatch.from_dict(
            load_balancer_patch_model_json).__dict__
        load_balancer_patch_model2 = LoadBalancerPatch(
            **load_balancer_patch_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_patch_model == load_balancer_patch_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_patch_model_json2 = load_balancer_patch_model.to_dict()
        assert load_balancer_patch_model_json2 == load_balancer_patch_model_json


class TestLoadBalancerPool():
    """
    Test Class for LoadBalancerPool
    """

    def test_load_balancer_pool_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPool
        """

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_pool_health_monitor_model = {
        }  # LoadBalancerPoolHealthMonitor
        load_balancer_pool_health_monitor_model['delay'] = 5
        load_balancer_pool_health_monitor_model['max_retries'] = 2
        load_balancer_pool_health_monitor_model['port'] = 22
        load_balancer_pool_health_monitor_model['timeout'] = 2
        load_balancer_pool_health_monitor_model['type'] = 'http'
        load_balancer_pool_health_monitor_model['url_path'] = '/'

        instance_group_reference_model = {}  # InstanceGroupReference
        instance_group_reference_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_reference_model['name'] = 'my-instance-group'

        load_balancer_pool_member_reference_model = {
        }  # LoadBalancerPoolMemberReference
        load_balancer_pool_member_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_member_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004'

        load_balancer_pool_session_persistence_model = {
        }  # LoadBalancerPoolSessionPersistence
        load_balancer_pool_session_persistence_model['type'] = 'source_ip'

        # Construct a json representation of a LoadBalancerPool model
        load_balancer_pool_model_json = {}
        load_balancer_pool_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_model_json['name'] = 'my-load-balancer-pool'
        load_balancer_pool_model_json['algorithm'] = 'least_connections'
        load_balancer_pool_model_json['protocol'] = 'http'
        load_balancer_pool_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_pool_model_json[
            'health_monitor'] = load_balancer_pool_health_monitor_model
        load_balancer_pool_model_json[
            'instance_group'] = instance_group_reference_model
        load_balancer_pool_model_json['members'] = [
            load_balancer_pool_member_reference_model
        ]
        load_balancer_pool_model_json['provisioning_status'] = 'active'
        load_balancer_pool_model_json[
            'session_persistence'] = load_balancer_pool_session_persistence_model

        # Construct a model instance of LoadBalancerPool by calling from_dict on the json representation
        load_balancer_pool_model = LoadBalancerPool.from_dict(
            load_balancer_pool_model_json)
        assert load_balancer_pool_model != False

        # Construct a model instance of LoadBalancerPool by calling from_dict on the json representation
        load_balancer_pool_model_dict = LoadBalancerPool.from_dict(
            load_balancer_pool_model_json).__dict__
        load_balancer_pool_model2 = LoadBalancerPool(
            **load_balancer_pool_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_model == load_balancer_pool_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_model_json2 = load_balancer_pool_model.to_dict()
        assert load_balancer_pool_model_json2 == load_balancer_pool_model_json


class TestLoadBalancerPoolCollection():
    """
    Test Class for LoadBalancerPoolCollection
    """

    def test_load_balancer_pool_collection_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_pool_health_monitor_model = {
        }  # LoadBalancerPoolHealthMonitor
        load_balancer_pool_health_monitor_model['delay'] = 5
        load_balancer_pool_health_monitor_model['max_retries'] = 2
        load_balancer_pool_health_monitor_model['port'] = 22
        load_balancer_pool_health_monitor_model['timeout'] = 2
        load_balancer_pool_health_monitor_model['type'] = 'http'
        load_balancer_pool_health_monitor_model['url_path'] = '/'

        instance_group_reference_model = {}  # InstanceGroupReference
        instance_group_reference_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_reference_model['name'] = 'my-instance-group'

        load_balancer_pool_member_reference_model = {
        }  # LoadBalancerPoolMemberReference
        load_balancer_pool_member_reference_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_member_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004'

        load_balancer_pool_session_persistence_model = {
        }  # LoadBalancerPoolSessionPersistence
        load_balancer_pool_session_persistence_model['type'] = 'source_ip'

        load_balancer_pool_model = {}  # LoadBalancerPool
        load_balancer_pool_model['id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_model['name'] = 'my-load-balancer-pool'
        load_balancer_pool_model['algorithm'] = 'least_connections'
        load_balancer_pool_model['protocol'] = 'http'
        load_balancer_pool_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_pool_model[
            'health_monitor'] = load_balancer_pool_health_monitor_model
        load_balancer_pool_model[
            'instance_group'] = instance_group_reference_model
        load_balancer_pool_model['members'] = [
            load_balancer_pool_member_reference_model
        ]
        load_balancer_pool_model['provisioning_status'] = 'active'
        load_balancer_pool_model[
            'session_persistence'] = load_balancer_pool_session_persistence_model

        # Construct a json representation of a LoadBalancerPoolCollection model
        load_balancer_pool_collection_model_json = {}
        load_balancer_pool_collection_model_json['pools'] = [
            load_balancer_pool_model
        ]

        # Construct a model instance of LoadBalancerPoolCollection by calling from_dict on the json representation
        load_balancer_pool_collection_model = LoadBalancerPoolCollection.from_dict(
            load_balancer_pool_collection_model_json)
        assert load_balancer_pool_collection_model != False

        # Construct a model instance of LoadBalancerPoolCollection by calling from_dict on the json representation
        load_balancer_pool_collection_model_dict = LoadBalancerPoolCollection.from_dict(
            load_balancer_pool_collection_model_json).__dict__
        load_balancer_pool_collection_model2 = LoadBalancerPoolCollection(
            **load_balancer_pool_collection_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_collection_model == load_balancer_pool_collection_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_collection_model_json2 = load_balancer_pool_collection_model.to_dict(
        )
        assert load_balancer_pool_collection_model_json2 == load_balancer_pool_collection_model_json


class TestLoadBalancerPoolHealthMonitor():
    """
    Test Class for LoadBalancerPoolHealthMonitor
    """

    def test_load_balancer_pool_health_monitor_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolHealthMonitor
        """

        # Construct a json representation of a LoadBalancerPoolHealthMonitor model
        load_balancer_pool_health_monitor_model_json = {}
        load_balancer_pool_health_monitor_model_json['delay'] = 5
        load_balancer_pool_health_monitor_model_json['max_retries'] = 2
        load_balancer_pool_health_monitor_model_json['port'] = 22
        load_balancer_pool_health_monitor_model_json['timeout'] = 2
        load_balancer_pool_health_monitor_model_json['type'] = 'http'
        load_balancer_pool_health_monitor_model_json['url_path'] = '/'

        # Construct a model instance of LoadBalancerPoolHealthMonitor by calling from_dict on the json representation
        load_balancer_pool_health_monitor_model = LoadBalancerPoolHealthMonitor.from_dict(
            load_balancer_pool_health_monitor_model_json)
        assert load_balancer_pool_health_monitor_model != False

        # Construct a model instance of LoadBalancerPoolHealthMonitor by calling from_dict on the json representation
        load_balancer_pool_health_monitor_model_dict = LoadBalancerPoolHealthMonitor.from_dict(
            load_balancer_pool_health_monitor_model_json).__dict__
        load_balancer_pool_health_monitor_model2 = LoadBalancerPoolHealthMonitor(
            **load_balancer_pool_health_monitor_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_health_monitor_model == load_balancer_pool_health_monitor_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_health_monitor_model_json2 = load_balancer_pool_health_monitor_model.to_dict(
        )
        assert load_balancer_pool_health_monitor_model_json2 == load_balancer_pool_health_monitor_model_json


class TestLoadBalancerPoolHealthMonitorPatch():
    """
    Test Class for LoadBalancerPoolHealthMonitorPatch
    """

    def test_load_balancer_pool_health_monitor_patch_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolHealthMonitorPatch
        """

        # Construct a json representation of a LoadBalancerPoolHealthMonitorPatch model
        load_balancer_pool_health_monitor_patch_model_json = {}
        load_balancer_pool_health_monitor_patch_model_json['delay'] = 5
        load_balancer_pool_health_monitor_patch_model_json['max_retries'] = 2
        load_balancer_pool_health_monitor_patch_model_json['port'] = 22
        load_balancer_pool_health_monitor_patch_model_json['timeout'] = 2
        load_balancer_pool_health_monitor_patch_model_json['type'] = 'http'
        load_balancer_pool_health_monitor_patch_model_json['url_path'] = '/'

        # Construct a model instance of LoadBalancerPoolHealthMonitorPatch by calling from_dict on the json representation
        load_balancer_pool_health_monitor_patch_model = LoadBalancerPoolHealthMonitorPatch.from_dict(
            load_balancer_pool_health_monitor_patch_model_json)
        assert load_balancer_pool_health_monitor_patch_model != False

        # Construct a model instance of LoadBalancerPoolHealthMonitorPatch by calling from_dict on the json representation
        load_balancer_pool_health_monitor_patch_model_dict = LoadBalancerPoolHealthMonitorPatch.from_dict(
            load_balancer_pool_health_monitor_patch_model_json).__dict__
        load_balancer_pool_health_monitor_patch_model2 = LoadBalancerPoolHealthMonitorPatch(
            **load_balancer_pool_health_monitor_patch_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_health_monitor_patch_model == load_balancer_pool_health_monitor_patch_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_health_monitor_patch_model_json2 = load_balancer_pool_health_monitor_patch_model.to_dict(
        )
        assert load_balancer_pool_health_monitor_patch_model_json2 == load_balancer_pool_health_monitor_patch_model_json


class TestLoadBalancerPoolHealthMonitorPrototype():
    """
    Test Class for LoadBalancerPoolHealthMonitorPrototype
    """

    def test_load_balancer_pool_health_monitor_prototype_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolHealthMonitorPrototype
        """

        # Construct a json representation of a LoadBalancerPoolHealthMonitorPrototype model
        load_balancer_pool_health_monitor_prototype_model_json = {}
        load_balancer_pool_health_monitor_prototype_model_json['delay'] = 5
        load_balancer_pool_health_monitor_prototype_model_json[
            'max_retries'] = 2
        load_balancer_pool_health_monitor_prototype_model_json['port'] = 22
        load_balancer_pool_health_monitor_prototype_model_json['timeout'] = 2
        load_balancer_pool_health_monitor_prototype_model_json['type'] = 'http'
        load_balancer_pool_health_monitor_prototype_model_json['url_path'] = '/'

        # Construct a model instance of LoadBalancerPoolHealthMonitorPrototype by calling from_dict on the json representation
        load_balancer_pool_health_monitor_prototype_model = LoadBalancerPoolHealthMonitorPrototype.from_dict(
            load_balancer_pool_health_monitor_prototype_model_json)
        assert load_balancer_pool_health_monitor_prototype_model != False

        # Construct a model instance of LoadBalancerPoolHealthMonitorPrototype by calling from_dict on the json representation
        load_balancer_pool_health_monitor_prototype_model_dict = LoadBalancerPoolHealthMonitorPrototype.from_dict(
            load_balancer_pool_health_monitor_prototype_model_json).__dict__
        load_balancer_pool_health_monitor_prototype_model2 = LoadBalancerPoolHealthMonitorPrototype(
            **load_balancer_pool_health_monitor_prototype_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_health_monitor_prototype_model == load_balancer_pool_health_monitor_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_health_monitor_prototype_model_json2 = load_balancer_pool_health_monitor_prototype_model.to_dict(
        )
        assert load_balancer_pool_health_monitor_prototype_model_json2 == load_balancer_pool_health_monitor_prototype_model_json


class TestLoadBalancerPoolIdentityByName():
    """
    Test Class for LoadBalancerPoolIdentityByName
    """

    def test_load_balancer_pool_identity_by_name_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolIdentityByName
        """

        # Construct a json representation of a LoadBalancerPoolIdentityByName model
        load_balancer_pool_identity_by_name_model_json = {}
        load_balancer_pool_identity_by_name_model_json[
            'name'] = 'my-load-balancer-pool'

        # Construct a model instance of LoadBalancerPoolIdentityByName by calling from_dict on the json representation
        load_balancer_pool_identity_by_name_model = LoadBalancerPoolIdentityByName.from_dict(
            load_balancer_pool_identity_by_name_model_json)
        assert load_balancer_pool_identity_by_name_model != False

        # Construct a model instance of LoadBalancerPoolIdentityByName by calling from_dict on the json representation
        load_balancer_pool_identity_by_name_model_dict = LoadBalancerPoolIdentityByName.from_dict(
            load_balancer_pool_identity_by_name_model_json).__dict__
        load_balancer_pool_identity_by_name_model2 = LoadBalancerPoolIdentityByName(
            **load_balancer_pool_identity_by_name_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_identity_by_name_model == load_balancer_pool_identity_by_name_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_identity_by_name_model_json2 = load_balancer_pool_identity_by_name_model.to_dict(
        )
        assert load_balancer_pool_identity_by_name_model_json2 == load_balancer_pool_identity_by_name_model_json


class TestLoadBalancerPoolMember():
    """
    Test Class for LoadBalancerPoolMember
    """

    def test_load_balancer_pool_member_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolMember
        """

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_pool_member_target_model = {
        }  # LoadBalancerPoolMemberTargetInstanceReference
        load_balancer_pool_member_target_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        load_balancer_pool_member_target_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        load_balancer_pool_member_target_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        load_balancer_pool_member_target_model['name'] = 'my-instance'

        # Construct a json representation of a LoadBalancerPoolMember model
        load_balancer_pool_member_model_json = {}
        load_balancer_pool_member_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_member_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_member_model_json['port'] = 80
        load_balancer_pool_member_model_json['weight'] = 50
        load_balancer_pool_member_model_json['health'] = 'faulted'
        load_balancer_pool_member_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_pool_member_model_json['provisioning_status'] = 'active'
        load_balancer_pool_member_model_json[
            'target'] = load_balancer_pool_member_target_model

        # Construct a model instance of LoadBalancerPoolMember by calling from_dict on the json representation
        load_balancer_pool_member_model = LoadBalancerPoolMember.from_dict(
            load_balancer_pool_member_model_json)
        assert load_balancer_pool_member_model != False

        # Construct a model instance of LoadBalancerPoolMember by calling from_dict on the json representation
        load_balancer_pool_member_model_dict = LoadBalancerPoolMember.from_dict(
            load_balancer_pool_member_model_json).__dict__
        load_balancer_pool_member_model2 = LoadBalancerPoolMember(
            **load_balancer_pool_member_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_member_model == load_balancer_pool_member_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_member_model_json2 = load_balancer_pool_member_model.to_dict(
        )
        assert load_balancer_pool_member_model_json2 == load_balancer_pool_member_model_json


class TestLoadBalancerPoolMemberCollection():
    """
    Test Class for LoadBalancerPoolMemberCollection
    """

    def test_load_balancer_pool_member_collection_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolMemberCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_pool_member_target_model = {
        }  # LoadBalancerPoolMemberTargetInstanceReference
        load_balancer_pool_member_target_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        load_balancer_pool_member_target_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        load_balancer_pool_member_target_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        load_balancer_pool_member_target_model['name'] = 'my-instance'

        load_balancer_pool_member_model = {}  # LoadBalancerPoolMember
        load_balancer_pool_member_model[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_member_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_member_model['port'] = 80
        load_balancer_pool_member_model['weight'] = 50
        load_balancer_pool_member_model['health'] = 'faulted'
        load_balancer_pool_member_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        load_balancer_pool_member_model['provisioning_status'] = 'active'
        load_balancer_pool_member_model[
            'target'] = load_balancer_pool_member_target_model

        # Construct a json representation of a LoadBalancerPoolMemberCollection model
        load_balancer_pool_member_collection_model_json = {}
        load_balancer_pool_member_collection_model_json['members'] = [
            load_balancer_pool_member_model
        ]

        # Construct a model instance of LoadBalancerPoolMemberCollection by calling from_dict on the json representation
        load_balancer_pool_member_collection_model = LoadBalancerPoolMemberCollection.from_dict(
            load_balancer_pool_member_collection_model_json)
        assert load_balancer_pool_member_collection_model != False

        # Construct a model instance of LoadBalancerPoolMemberCollection by calling from_dict on the json representation
        load_balancer_pool_member_collection_model_dict = LoadBalancerPoolMemberCollection.from_dict(
            load_balancer_pool_member_collection_model_json).__dict__
        load_balancer_pool_member_collection_model2 = LoadBalancerPoolMemberCollection(
            **load_balancer_pool_member_collection_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_member_collection_model == load_balancer_pool_member_collection_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_member_collection_model_json2 = load_balancer_pool_member_collection_model.to_dict(
        )
        assert load_balancer_pool_member_collection_model_json2 == load_balancer_pool_member_collection_model_json


class TestLoadBalancerPoolMemberPatch():
    """
    Test Class for LoadBalancerPoolMemberPatch
    """

    def test_load_balancer_pool_member_patch_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolMemberPatch
        """

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_pool_member_target_prototype_model = {
        }  # LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById
        load_balancer_pool_member_target_prototype_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a json representation of a LoadBalancerPoolMemberPatch model
        load_balancer_pool_member_patch_model_json = {}
        load_balancer_pool_member_patch_model_json['port'] = 80
        load_balancer_pool_member_patch_model_json['weight'] = 50
        load_balancer_pool_member_patch_model_json[
            'target'] = load_balancer_pool_member_target_prototype_model

        # Construct a model instance of LoadBalancerPoolMemberPatch by calling from_dict on the json representation
        load_balancer_pool_member_patch_model = LoadBalancerPoolMemberPatch.from_dict(
            load_balancer_pool_member_patch_model_json)
        assert load_balancer_pool_member_patch_model != False

        # Construct a model instance of LoadBalancerPoolMemberPatch by calling from_dict on the json representation
        load_balancer_pool_member_patch_model_dict = LoadBalancerPoolMemberPatch.from_dict(
            load_balancer_pool_member_patch_model_json).__dict__
        load_balancer_pool_member_patch_model2 = LoadBalancerPoolMemberPatch(
            **load_balancer_pool_member_patch_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_member_patch_model == load_balancer_pool_member_patch_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_member_patch_model_json2 = load_balancer_pool_member_patch_model.to_dict(
        )
        assert load_balancer_pool_member_patch_model_json2 == load_balancer_pool_member_patch_model_json


class TestLoadBalancerPoolMemberPrototype():
    """
    Test Class for LoadBalancerPoolMemberPrototype
    """

    def test_load_balancer_pool_member_prototype_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolMemberPrototype
        """

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_pool_member_target_prototype_model = {
        }  # LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById
        load_balancer_pool_member_target_prototype_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a json representation of a LoadBalancerPoolMemberPrototype model
        load_balancer_pool_member_prototype_model_json = {}
        load_balancer_pool_member_prototype_model_json['port'] = 80
        load_balancer_pool_member_prototype_model_json['weight'] = 50
        load_balancer_pool_member_prototype_model_json[
            'target'] = load_balancer_pool_member_target_prototype_model

        # Construct a model instance of LoadBalancerPoolMemberPrototype by calling from_dict on the json representation
        load_balancer_pool_member_prototype_model = LoadBalancerPoolMemberPrototype.from_dict(
            load_balancer_pool_member_prototype_model_json)
        assert load_balancer_pool_member_prototype_model != False

        # Construct a model instance of LoadBalancerPoolMemberPrototype by calling from_dict on the json representation
        load_balancer_pool_member_prototype_model_dict = LoadBalancerPoolMemberPrototype.from_dict(
            load_balancer_pool_member_prototype_model_json).__dict__
        load_balancer_pool_member_prototype_model2 = LoadBalancerPoolMemberPrototype(
            **load_balancer_pool_member_prototype_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_member_prototype_model == load_balancer_pool_member_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_member_prototype_model_json2 = load_balancer_pool_member_prototype_model.to_dict(
        )
        assert load_balancer_pool_member_prototype_model_json2 == load_balancer_pool_member_prototype_model_json


class TestLoadBalancerPoolMemberReference():
    """
    Test Class for LoadBalancerPoolMemberReference
    """

    def test_load_balancer_pool_member_reference_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolMemberReference
        """

        # Construct a json representation of a LoadBalancerPoolMemberReference model
        load_balancer_pool_member_reference_model_json = {}
        load_balancer_pool_member_reference_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_member_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a model instance of LoadBalancerPoolMemberReference by calling from_dict on the json representation
        load_balancer_pool_member_reference_model = LoadBalancerPoolMemberReference.from_dict(
            load_balancer_pool_member_reference_model_json)
        assert load_balancer_pool_member_reference_model != False

        # Construct a model instance of LoadBalancerPoolMemberReference by calling from_dict on the json representation
        load_balancer_pool_member_reference_model_dict = LoadBalancerPoolMemberReference.from_dict(
            load_balancer_pool_member_reference_model_json).__dict__
        load_balancer_pool_member_reference_model2 = LoadBalancerPoolMemberReference(
            **load_balancer_pool_member_reference_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_member_reference_model == load_balancer_pool_member_reference_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_member_reference_model_json2 = load_balancer_pool_member_reference_model.to_dict(
        )
        assert load_balancer_pool_member_reference_model_json2 == load_balancer_pool_member_reference_model_json


class TestLoadBalancerPoolPatch():
    """
    Test Class for LoadBalancerPoolPatch
    """

    def test_load_balancer_pool_patch_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolPatch
        """

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_pool_health_monitor_patch_model = {
        }  # LoadBalancerPoolHealthMonitorPatch
        load_balancer_pool_health_monitor_patch_model['delay'] = 5
        load_balancer_pool_health_monitor_patch_model['max_retries'] = 2
        load_balancer_pool_health_monitor_patch_model['port'] = 22
        load_balancer_pool_health_monitor_patch_model['timeout'] = 2
        load_balancer_pool_health_monitor_patch_model['type'] = 'http'
        load_balancer_pool_health_monitor_patch_model['url_path'] = '/'

        load_balancer_pool_session_persistence_patch_model = {
        }  # LoadBalancerPoolSessionPersistencePatch
        load_balancer_pool_session_persistence_patch_model['type'] = 'source_ip'

        # Construct a json representation of a LoadBalancerPoolPatch model
        load_balancer_pool_patch_model_json = {}
        load_balancer_pool_patch_model_json['name'] = 'my-load-balancer-pool'
        load_balancer_pool_patch_model_json['algorithm'] = 'least_connections'
        load_balancer_pool_patch_model_json['protocol'] = 'http'
        load_balancer_pool_patch_model_json[
            'health_monitor'] = load_balancer_pool_health_monitor_patch_model
        load_balancer_pool_patch_model_json[
            'session_persistence'] = load_balancer_pool_session_persistence_patch_model

        # Construct a model instance of LoadBalancerPoolPatch by calling from_dict on the json representation
        load_balancer_pool_patch_model = LoadBalancerPoolPatch.from_dict(
            load_balancer_pool_patch_model_json)
        assert load_balancer_pool_patch_model != False

        # Construct a model instance of LoadBalancerPoolPatch by calling from_dict on the json representation
        load_balancer_pool_patch_model_dict = LoadBalancerPoolPatch.from_dict(
            load_balancer_pool_patch_model_json).__dict__
        load_balancer_pool_patch_model2 = LoadBalancerPoolPatch(
            **load_balancer_pool_patch_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_patch_model == load_balancer_pool_patch_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_patch_model_json2 = load_balancer_pool_patch_model.to_dict(
        )
        assert load_balancer_pool_patch_model_json2 == load_balancer_pool_patch_model_json


class TestLoadBalancerPoolPrototype():
    """
    Test Class for LoadBalancerPoolPrototype
    """

    def test_load_balancer_pool_prototype_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolPrototype
        """

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_pool_health_monitor_prototype_model = {
        }  # LoadBalancerPoolHealthMonitorPrototype
        load_balancer_pool_health_monitor_prototype_model['delay'] = 5
        load_balancer_pool_health_monitor_prototype_model['max_retries'] = 2
        load_balancer_pool_health_monitor_prototype_model['port'] = 22
        load_balancer_pool_health_monitor_prototype_model['timeout'] = 2
        load_balancer_pool_health_monitor_prototype_model['type'] = 'http'
        load_balancer_pool_health_monitor_prototype_model['url_path'] = '/'

        load_balancer_pool_member_target_prototype_model = {
        }  # LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById
        load_balancer_pool_member_target_prototype_model[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'

        load_balancer_pool_member_prototype_model = {
        }  # LoadBalancerPoolMemberPrototype
        load_balancer_pool_member_prototype_model['port'] = 80
        load_balancer_pool_member_prototype_model['weight'] = 50
        load_balancer_pool_member_prototype_model[
            'target'] = load_balancer_pool_member_target_prototype_model

        load_balancer_pool_session_persistence_prototype_model = {
        }  # LoadBalancerPoolSessionPersistencePrototype
        load_balancer_pool_session_persistence_prototype_model[
            'type'] = 'source_ip'

        # Construct a json representation of a LoadBalancerPoolPrototype model
        load_balancer_pool_prototype_model_json = {}
        load_balancer_pool_prototype_model_json[
            'name'] = 'my-load-balancer-pool'
        load_balancer_pool_prototype_model_json[
            'algorithm'] = 'least_connections'
        load_balancer_pool_prototype_model_json['protocol'] = 'http'
        load_balancer_pool_prototype_model_json[
            'health_monitor'] = load_balancer_pool_health_monitor_prototype_model
        load_balancer_pool_prototype_model_json['members'] = [
            load_balancer_pool_member_prototype_model
        ]
        load_balancer_pool_prototype_model_json[
            'session_persistence'] = load_balancer_pool_session_persistence_prototype_model

        # Construct a model instance of LoadBalancerPoolPrototype by calling from_dict on the json representation
        load_balancer_pool_prototype_model = LoadBalancerPoolPrototype.from_dict(
            load_balancer_pool_prototype_model_json)
        assert load_balancer_pool_prototype_model != False

        # Construct a model instance of LoadBalancerPoolPrototype by calling from_dict on the json representation
        load_balancer_pool_prototype_model_dict = LoadBalancerPoolPrototype.from_dict(
            load_balancer_pool_prototype_model_json).__dict__
        load_balancer_pool_prototype_model2 = LoadBalancerPoolPrototype(
            **load_balancer_pool_prototype_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_prototype_model == load_balancer_pool_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_prototype_model_json2 = load_balancer_pool_prototype_model.to_dict(
        )
        assert load_balancer_pool_prototype_model_json2 == load_balancer_pool_prototype_model_json


class TestLoadBalancerPoolReference():
    """
    Test Class for LoadBalancerPoolReference
    """

    def test_load_balancer_pool_reference_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolReference
        """

        # Construct a json representation of a LoadBalancerPoolReference model
        load_balancer_pool_reference_model_json = {}
        load_balancer_pool_reference_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_pool_reference_model_json[
            'name'] = 'my-load-balancer-pool'

        # Construct a model instance of LoadBalancerPoolReference by calling from_dict on the json representation
        load_balancer_pool_reference_model = LoadBalancerPoolReference.from_dict(
            load_balancer_pool_reference_model_json)
        assert load_balancer_pool_reference_model != False

        # Construct a model instance of LoadBalancerPoolReference by calling from_dict on the json representation
        load_balancer_pool_reference_model_dict = LoadBalancerPoolReference.from_dict(
            load_balancer_pool_reference_model_json).__dict__
        load_balancer_pool_reference_model2 = LoadBalancerPoolReference(
            **load_balancer_pool_reference_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_reference_model == load_balancer_pool_reference_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_reference_model_json2 = load_balancer_pool_reference_model.to_dict(
        )
        assert load_balancer_pool_reference_model_json2 == load_balancer_pool_reference_model_json


class TestLoadBalancerPoolSessionPersistence():
    """
    Test Class for LoadBalancerPoolSessionPersistence
    """

    def test_load_balancer_pool_session_persistence_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolSessionPersistence
        """

        # Construct a json representation of a LoadBalancerPoolSessionPersistence model
        load_balancer_pool_session_persistence_model_json = {}
        load_balancer_pool_session_persistence_model_json['type'] = 'source_ip'

        # Construct a model instance of LoadBalancerPoolSessionPersistence by calling from_dict on the json representation
        load_balancer_pool_session_persistence_model = LoadBalancerPoolSessionPersistence.from_dict(
            load_balancer_pool_session_persistence_model_json)
        assert load_balancer_pool_session_persistence_model != False

        # Construct a model instance of LoadBalancerPoolSessionPersistence by calling from_dict on the json representation
        load_balancer_pool_session_persistence_model_dict = LoadBalancerPoolSessionPersistence.from_dict(
            load_balancer_pool_session_persistence_model_json).__dict__
        load_balancer_pool_session_persistence_model2 = LoadBalancerPoolSessionPersistence(
            **load_balancer_pool_session_persistence_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_session_persistence_model == load_balancer_pool_session_persistence_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_session_persistence_model_json2 = load_balancer_pool_session_persistence_model.to_dict(
        )
        assert load_balancer_pool_session_persistence_model_json2 == load_balancer_pool_session_persistence_model_json


class TestLoadBalancerPoolSessionPersistencePatch():
    """
    Test Class for LoadBalancerPoolSessionPersistencePatch
    """

    def test_load_balancer_pool_session_persistence_patch_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolSessionPersistencePatch
        """

        # Construct a json representation of a LoadBalancerPoolSessionPersistencePatch model
        load_balancer_pool_session_persistence_patch_model_json = {}
        load_balancer_pool_session_persistence_patch_model_json[
            'type'] = 'source_ip'

        # Construct a model instance of LoadBalancerPoolSessionPersistencePatch by calling from_dict on the json representation
        load_balancer_pool_session_persistence_patch_model = LoadBalancerPoolSessionPersistencePatch.from_dict(
            load_balancer_pool_session_persistence_patch_model_json)
        assert load_balancer_pool_session_persistence_patch_model != False

        # Construct a model instance of LoadBalancerPoolSessionPersistencePatch by calling from_dict on the json representation
        load_balancer_pool_session_persistence_patch_model_dict = LoadBalancerPoolSessionPersistencePatch.from_dict(
            load_balancer_pool_session_persistence_patch_model_json).__dict__
        load_balancer_pool_session_persistence_patch_model2 = LoadBalancerPoolSessionPersistencePatch(
            **load_balancer_pool_session_persistence_patch_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_session_persistence_patch_model == load_balancer_pool_session_persistence_patch_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_session_persistence_patch_model_json2 = load_balancer_pool_session_persistence_patch_model.to_dict(
        )
        assert load_balancer_pool_session_persistence_patch_model_json2 == load_balancer_pool_session_persistence_patch_model_json


class TestLoadBalancerPoolSessionPersistencePrototype():
    """
    Test Class for LoadBalancerPoolSessionPersistencePrototype
    """

    def test_load_balancer_pool_session_persistence_prototype_serialization(
            self):
        """
        Test serialization/deserialization for LoadBalancerPoolSessionPersistencePrototype
        """

        # Construct a json representation of a LoadBalancerPoolSessionPersistencePrototype model
        load_balancer_pool_session_persistence_prototype_model_json = {}
        load_balancer_pool_session_persistence_prototype_model_json[
            'type'] = 'source_ip'

        # Construct a model instance of LoadBalancerPoolSessionPersistencePrototype by calling from_dict on the json representation
        load_balancer_pool_session_persistence_prototype_model = LoadBalancerPoolSessionPersistencePrototype.from_dict(
            load_balancer_pool_session_persistence_prototype_model_json)
        assert load_balancer_pool_session_persistence_prototype_model != False

        # Construct a model instance of LoadBalancerPoolSessionPersistencePrototype by calling from_dict on the json representation
        load_balancer_pool_session_persistence_prototype_model_dict = LoadBalancerPoolSessionPersistencePrototype.from_dict(
            load_balancer_pool_session_persistence_prototype_model_json
        ).__dict__
        load_balancer_pool_session_persistence_prototype_model2 = LoadBalancerPoolSessionPersistencePrototype(
            **load_balancer_pool_session_persistence_prototype_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_session_persistence_prototype_model == load_balancer_pool_session_persistence_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_session_persistence_prototype_model_json2 = load_balancer_pool_session_persistence_prototype_model.to_dict(
        )
        assert load_balancer_pool_session_persistence_prototype_model_json2 == load_balancer_pool_session_persistence_prototype_model_json


class TestLoadBalancerProfile():
    """
    Test Class for LoadBalancerProfile
    """

    def test_load_balancer_profile_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerProfile
        """

        # Construct a json representation of a LoadBalancerProfile model
        load_balancer_profile_model_json = {}
        load_balancer_profile_model_json['name'] = 'network-fixed'
        load_balancer_profile_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed'
        load_balancer_profile_model_json['family'] = 'network'

        # Construct a model instance of LoadBalancerProfile by calling from_dict on the json representation
        load_balancer_profile_model = LoadBalancerProfile.from_dict(
            load_balancer_profile_model_json)
        assert load_balancer_profile_model != False

        # Construct a model instance of LoadBalancerProfile by calling from_dict on the json representation
        load_balancer_profile_model_dict = LoadBalancerProfile.from_dict(
            load_balancer_profile_model_json).__dict__
        load_balancer_profile_model2 = LoadBalancerProfile(
            **load_balancer_profile_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_profile_model == load_balancer_profile_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_profile_model_json2 = load_balancer_profile_model.to_dict(
        )
        assert load_balancer_profile_model_json2 == load_balancer_profile_model_json


class TestLoadBalancerProfileCollection():
    """
    Test Class for LoadBalancerProfileCollection
    """

    def test_load_balancer_profile_collection_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerProfileCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        load_balancer_profile_collection_first_model = {
        }  # LoadBalancerProfileCollectionFirst
        load_balancer_profile_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles?limit=20'

        load_balancer_profile_collection_next_model = {
        }  # LoadBalancerProfileCollectionNext
        load_balancer_profile_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        load_balancer_profile_model = {}  # LoadBalancerProfile
        load_balancer_profile_model['name'] = 'network-fixed'
        load_balancer_profile_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed'
        load_balancer_profile_model['family'] = 'network'

        # Construct a json representation of a LoadBalancerProfileCollection model
        load_balancer_profile_collection_model_json = {}
        load_balancer_profile_collection_model_json[
            'first'] = load_balancer_profile_collection_first_model
        load_balancer_profile_collection_model_json['limit'] = 20
        load_balancer_profile_collection_model_json[
            'next'] = load_balancer_profile_collection_next_model
        load_balancer_profile_collection_model_json['total_count'] = 132
        load_balancer_profile_collection_model_json['profiles'] = [
            load_balancer_profile_model
        ]

        # Construct a model instance of LoadBalancerProfileCollection by calling from_dict on the json representation
        load_balancer_profile_collection_model = LoadBalancerProfileCollection.from_dict(
            load_balancer_profile_collection_model_json)
        assert load_balancer_profile_collection_model != False

        # Construct a model instance of LoadBalancerProfileCollection by calling from_dict on the json representation
        load_balancer_profile_collection_model_dict = LoadBalancerProfileCollection.from_dict(
            load_balancer_profile_collection_model_json).__dict__
        load_balancer_profile_collection_model2 = LoadBalancerProfileCollection(
            **load_balancer_profile_collection_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_profile_collection_model == load_balancer_profile_collection_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_profile_collection_model_json2 = load_balancer_profile_collection_model.to_dict(
        )
        assert load_balancer_profile_collection_model_json2 == load_balancer_profile_collection_model_json


class TestLoadBalancerProfileCollectionFirst():
    """
    Test Class for LoadBalancerProfileCollectionFirst
    """

    def test_load_balancer_profile_collection_first_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerProfileCollectionFirst
        """

        # Construct a json representation of a LoadBalancerProfileCollectionFirst model
        load_balancer_profile_collection_first_model_json = {}
        load_balancer_profile_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles?limit=20'

        # Construct a model instance of LoadBalancerProfileCollectionFirst by calling from_dict on the json representation
        load_balancer_profile_collection_first_model = LoadBalancerProfileCollectionFirst.from_dict(
            load_balancer_profile_collection_first_model_json)
        assert load_balancer_profile_collection_first_model != False

        # Construct a model instance of LoadBalancerProfileCollectionFirst by calling from_dict on the json representation
        load_balancer_profile_collection_first_model_dict = LoadBalancerProfileCollectionFirst.from_dict(
            load_balancer_profile_collection_first_model_json).__dict__
        load_balancer_profile_collection_first_model2 = LoadBalancerProfileCollectionFirst(
            **load_balancer_profile_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_profile_collection_first_model == load_balancer_profile_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_profile_collection_first_model_json2 = load_balancer_profile_collection_first_model.to_dict(
        )
        assert load_balancer_profile_collection_first_model_json2 == load_balancer_profile_collection_first_model_json


class TestLoadBalancerProfileCollectionNext():
    """
    Test Class for LoadBalancerProfileCollectionNext
    """

    def test_load_balancer_profile_collection_next_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerProfileCollectionNext
        """

        # Construct a json representation of a LoadBalancerProfileCollectionNext model
        load_balancer_profile_collection_next_model_json = {}
        load_balancer_profile_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of LoadBalancerProfileCollectionNext by calling from_dict on the json representation
        load_balancer_profile_collection_next_model = LoadBalancerProfileCollectionNext.from_dict(
            load_balancer_profile_collection_next_model_json)
        assert load_balancer_profile_collection_next_model != False

        # Construct a model instance of LoadBalancerProfileCollectionNext by calling from_dict on the json representation
        load_balancer_profile_collection_next_model_dict = LoadBalancerProfileCollectionNext.from_dict(
            load_balancer_profile_collection_next_model_json).__dict__
        load_balancer_profile_collection_next_model2 = LoadBalancerProfileCollectionNext(
            **load_balancer_profile_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_profile_collection_next_model == load_balancer_profile_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_profile_collection_next_model_json2 = load_balancer_profile_collection_next_model.to_dict(
        )
        assert load_balancer_profile_collection_next_model_json2 == load_balancer_profile_collection_next_model_json


class TestLoadBalancerProfileReference():
    """
    Test Class for LoadBalancerProfileReference
    """

    def test_load_balancer_profile_reference_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerProfileReference
        """

        # Construct a json representation of a LoadBalancerProfileReference model
        load_balancer_profile_reference_model_json = {}
        load_balancer_profile_reference_model_json['name'] = 'network-fixed'
        load_balancer_profile_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed'
        load_balancer_profile_reference_model_json['family'] = 'network'

        # Construct a model instance of LoadBalancerProfileReference by calling from_dict on the json representation
        load_balancer_profile_reference_model = LoadBalancerProfileReference.from_dict(
            load_balancer_profile_reference_model_json)
        assert load_balancer_profile_reference_model != False

        # Construct a model instance of LoadBalancerProfileReference by calling from_dict on the json representation
        load_balancer_profile_reference_model_dict = LoadBalancerProfileReference.from_dict(
            load_balancer_profile_reference_model_json).__dict__
        load_balancer_profile_reference_model2 = LoadBalancerProfileReference(
            **load_balancer_profile_reference_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_profile_reference_model == load_balancer_profile_reference_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_profile_reference_model_json2 = load_balancer_profile_reference_model.to_dict(
        )
        assert load_balancer_profile_reference_model_json2 == load_balancer_profile_reference_model_json


class TestLoadBalancerStatistics():
    """
    Test Class for LoadBalancerStatistics
    """

    def test_load_balancer_statistics_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerStatistics
        """

        # Construct a json representation of a LoadBalancerStatistics model
        load_balancer_statistics_model_json = {}
        load_balancer_statistics_model_json['active_connections'] = 797
        load_balancer_statistics_model_json['connection_rate'] = 91.121
        load_balancer_statistics_model_json[
            'data_processed_this_month'] = 10093173145
        load_balancer_statistics_model_json['throughput'] = 167.278

        # Construct a model instance of LoadBalancerStatistics by calling from_dict on the json representation
        load_balancer_statistics_model = LoadBalancerStatistics.from_dict(
            load_balancer_statistics_model_json)
        assert load_balancer_statistics_model != False

        # Construct a model instance of LoadBalancerStatistics by calling from_dict on the json representation
        load_balancer_statistics_model_dict = LoadBalancerStatistics.from_dict(
            load_balancer_statistics_model_json).__dict__
        load_balancer_statistics_model2 = LoadBalancerStatistics(
            **load_balancer_statistics_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_statistics_model == load_balancer_statistics_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_statistics_model_json2 = load_balancer_statistics_model.to_dict(
        )
        assert load_balancer_statistics_model_json2 == load_balancer_statistics_model_json


class TestNetworkACL():
    """
    Test Class for NetworkACL
    """

    def test_network_acl_serialization(self):
        """
        Test serialization/deserialization for NetworkACL
        """

        # Construct dict forms of any model objects needed in order to build this model.

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        network_acl_rule_item_model = {
        }  # NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP
        network_acl_rule_item_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_model['name'] = 'my-rule-2'
        network_acl_rule_item_model['action'] = 'allow'
        network_acl_rule_item_model['destination'] = '192.168.3.0/24'
        network_acl_rule_item_model['direction'] = 'inbound'
        network_acl_rule_item_model['source'] = '192.168.3.0/24'
        network_acl_rule_item_model['protocol'] = 'udp'
        network_acl_rule_item_model['before'] = network_acl_rule_reference_model
        network_acl_rule_item_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_item_model['ip_version'] = 'ipv4'
        network_acl_rule_item_model['destination_port_max'] = 22
        network_acl_rule_item_model['destination_port_min'] = 22
        network_acl_rule_item_model['source_port_max'] = 65535
        network_acl_rule_item_model['source_port_min'] = 49152

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        # Construct a json representation of a NetworkACL model
        network_acl_model_json = {}
        network_acl_model_json['id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_model_json['name'] = 'my-network-acl'
        network_acl_model_json['vpc'] = vpc_reference_model
        network_acl_model_json[
            'resource_group'] = resource_group_reference_model
        network_acl_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_model_json['rules'] = [network_acl_rule_item_model]
        network_acl_model_json['subnets'] = [subnet_reference_model]

        # Construct a model instance of NetworkACL by calling from_dict on the json representation
        network_acl_model = NetworkACL.from_dict(network_acl_model_json)
        assert network_acl_model != False

        # Construct a model instance of NetworkACL by calling from_dict on the json representation
        network_acl_model_dict = NetworkACL.from_dict(
            network_acl_model_json).__dict__
        network_acl_model2 = NetworkACL(**network_acl_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_model == network_acl_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_model_json2 = network_acl_model.to_dict()
        assert network_acl_model_json2 == network_acl_model_json


class TestNetworkACLCollection():
    """
    Test Class for NetworkACLCollection
    """

    def test_network_acl_collection_serialization(self):
        """
        Test serialization/deserialization for NetworkACLCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_collection_first_model = {}  # NetworkACLCollectionFirst
        network_acl_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls?limit=20'

        network_acl_collection_next_model = {}  # NetworkACLCollectionNext
        network_acl_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        network_acl_rule_item_model = {
        }  # NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP
        network_acl_rule_item_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_model['name'] = 'my-rule-2'
        network_acl_rule_item_model['action'] = 'allow'
        network_acl_rule_item_model['destination'] = '192.168.3.0/24'
        network_acl_rule_item_model['direction'] = 'inbound'
        network_acl_rule_item_model['source'] = '192.168.3.0/24'
        network_acl_rule_item_model['protocol'] = 'udp'
        network_acl_rule_item_model['before'] = network_acl_rule_reference_model
        network_acl_rule_item_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_item_model['ip_version'] = 'ipv4'
        network_acl_rule_item_model['destination_port_max'] = 22
        network_acl_rule_item_model['destination_port_min'] = 22
        network_acl_rule_item_model['source_port_max'] = 65535
        network_acl_rule_item_model['source_port_min'] = 49152

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        network_acl_model = {}  # NetworkACL
        network_acl_model['id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_model['name'] = 'my-network-acl'
        network_acl_model['vpc'] = vpc_reference_model
        network_acl_model['resource_group'] = resource_group_reference_model
        network_acl_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_model['rules'] = [network_acl_rule_item_model]
        network_acl_model['subnets'] = [subnet_reference_model]

        # Construct a json representation of a NetworkACLCollection model
        network_acl_collection_model_json = {}
        network_acl_collection_model_json[
            'first'] = network_acl_collection_first_model
        network_acl_collection_model_json['limit'] = 20
        network_acl_collection_model_json[
            'next'] = network_acl_collection_next_model
        network_acl_collection_model_json['total_count'] = 132
        network_acl_collection_model_json['network_acls'] = [network_acl_model]

        # Construct a model instance of NetworkACLCollection by calling from_dict on the json representation
        network_acl_collection_model = NetworkACLCollection.from_dict(
            network_acl_collection_model_json)
        assert network_acl_collection_model != False

        # Construct a model instance of NetworkACLCollection by calling from_dict on the json representation
        network_acl_collection_model_dict = NetworkACLCollection.from_dict(
            network_acl_collection_model_json).__dict__
        network_acl_collection_model2 = NetworkACLCollection(
            **network_acl_collection_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_collection_model == network_acl_collection_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_collection_model_json2 = network_acl_collection_model.to_dict(
        )
        assert network_acl_collection_model_json2 == network_acl_collection_model_json


class TestNetworkACLCollectionFirst():
    """
    Test Class for NetworkACLCollectionFirst
    """

    def test_network_acl_collection_first_serialization(self):
        """
        Test serialization/deserialization for NetworkACLCollectionFirst
        """

        # Construct a json representation of a NetworkACLCollectionFirst model
        network_acl_collection_first_model_json = {}
        network_acl_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls?limit=20'

        # Construct a model instance of NetworkACLCollectionFirst by calling from_dict on the json representation
        network_acl_collection_first_model = NetworkACLCollectionFirst.from_dict(
            network_acl_collection_first_model_json)
        assert network_acl_collection_first_model != False

        # Construct a model instance of NetworkACLCollectionFirst by calling from_dict on the json representation
        network_acl_collection_first_model_dict = NetworkACLCollectionFirst.from_dict(
            network_acl_collection_first_model_json).__dict__
        network_acl_collection_first_model2 = NetworkACLCollectionFirst(
            **network_acl_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_collection_first_model == network_acl_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_collection_first_model_json2 = network_acl_collection_first_model.to_dict(
        )
        assert network_acl_collection_first_model_json2 == network_acl_collection_first_model_json


class TestNetworkACLCollectionNext():
    """
    Test Class for NetworkACLCollectionNext
    """

    def test_network_acl_collection_next_serialization(self):
        """
        Test serialization/deserialization for NetworkACLCollectionNext
        """

        # Construct a json representation of a NetworkACLCollectionNext model
        network_acl_collection_next_model_json = {}
        network_acl_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of NetworkACLCollectionNext by calling from_dict on the json representation
        network_acl_collection_next_model = NetworkACLCollectionNext.from_dict(
            network_acl_collection_next_model_json)
        assert network_acl_collection_next_model != False

        # Construct a model instance of NetworkACLCollectionNext by calling from_dict on the json representation
        network_acl_collection_next_model_dict = NetworkACLCollectionNext.from_dict(
            network_acl_collection_next_model_json).__dict__
        network_acl_collection_next_model2 = NetworkACLCollectionNext(
            **network_acl_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_collection_next_model == network_acl_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_collection_next_model_json2 = network_acl_collection_next_model.to_dict(
        )
        assert network_acl_collection_next_model_json2 == network_acl_collection_next_model_json


class TestNetworkACLPatch():
    """
    Test Class for NetworkACLPatch
    """

    def test_network_acl_patch_serialization(self):
        """
        Test serialization/deserialization for NetworkACLPatch
        """

        # Construct a json representation of a NetworkACLPatch model
        network_acl_patch_model_json = {}
        network_acl_patch_model_json['name'] = 'my-network-acl'

        # Construct a model instance of NetworkACLPatch by calling from_dict on the json representation
        network_acl_patch_model = NetworkACLPatch.from_dict(
            network_acl_patch_model_json)
        assert network_acl_patch_model != False

        # Construct a model instance of NetworkACLPatch by calling from_dict on the json representation
        network_acl_patch_model_dict = NetworkACLPatch.from_dict(
            network_acl_patch_model_json).__dict__
        network_acl_patch_model2 = NetworkACLPatch(
            **network_acl_patch_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_patch_model == network_acl_patch_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_patch_model_json2 = network_acl_patch_model.to_dict()
        assert network_acl_patch_model_json2 == network_acl_patch_model_json


class TestNetworkACLReference():
    """
    Test Class for NetworkACLReference
    """

    def test_network_acl_reference_serialization(self):
        """
        Test serialization/deserialization for NetworkACLReference
        """

        # Construct a json representation of a NetworkACLReference model
        network_acl_reference_model_json = {}
        network_acl_reference_model_json[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model_json['name'] = 'my-network-acl'

        # Construct a model instance of NetworkACLReference by calling from_dict on the json representation
        network_acl_reference_model = NetworkACLReference.from_dict(
            network_acl_reference_model_json)
        assert network_acl_reference_model != False

        # Construct a model instance of NetworkACLReference by calling from_dict on the json representation
        network_acl_reference_model_dict = NetworkACLReference.from_dict(
            network_acl_reference_model_json).__dict__
        network_acl_reference_model2 = NetworkACLReference(
            **network_acl_reference_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_reference_model == network_acl_reference_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_reference_model_json2 = network_acl_reference_model.to_dict(
        )
        assert network_acl_reference_model_json2 == network_acl_reference_model_json


class TestNetworkACLRuleCollection():
    """
    Test Class for NetworkACLRuleCollection
    """

    def test_network_acl_rule_collection_serialization(self):
        """
        Test serialization/deserialization for NetworkACLRuleCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_collection_first_model = {
        }  # NetworkACLRuleCollectionFirst
        network_acl_rule_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?limit=20'

        network_acl_rule_collection_next_model = {
        }  # NetworkACLRuleCollectionNext
        network_acl_rule_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        network_acl_rule_item_model = {
        }  # NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP
        network_acl_rule_item_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_model['name'] = 'my-rule-2'
        network_acl_rule_item_model['action'] = 'allow'
        network_acl_rule_item_model['destination'] = '192.168.3.0/24'
        network_acl_rule_item_model['direction'] = 'inbound'
        network_acl_rule_item_model['source'] = '192.168.3.0/24'
        network_acl_rule_item_model['protocol'] = 'udp'
        network_acl_rule_item_model['before'] = network_acl_rule_reference_model
        network_acl_rule_item_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_item_model['ip_version'] = 'ipv4'
        network_acl_rule_item_model['destination_port_max'] = 22
        network_acl_rule_item_model['destination_port_min'] = 22
        network_acl_rule_item_model['source_port_max'] = 65535
        network_acl_rule_item_model['source_port_min'] = 49152

        # Construct a json representation of a NetworkACLRuleCollection model
        network_acl_rule_collection_model_json = {}
        network_acl_rule_collection_model_json[
            'first'] = network_acl_rule_collection_first_model
        network_acl_rule_collection_model_json['limit'] = 20
        network_acl_rule_collection_model_json[
            'next'] = network_acl_rule_collection_next_model
        network_acl_rule_collection_model_json['total_count'] = 132
        network_acl_rule_collection_model_json['rules'] = [
            network_acl_rule_item_model
        ]

        # Construct a model instance of NetworkACLRuleCollection by calling from_dict on the json representation
        network_acl_rule_collection_model = NetworkACLRuleCollection.from_dict(
            network_acl_rule_collection_model_json)
        assert network_acl_rule_collection_model != False

        # Construct a model instance of NetworkACLRuleCollection by calling from_dict on the json representation
        network_acl_rule_collection_model_dict = NetworkACLRuleCollection.from_dict(
            network_acl_rule_collection_model_json).__dict__
        network_acl_rule_collection_model2 = NetworkACLRuleCollection(
            **network_acl_rule_collection_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_collection_model == network_acl_rule_collection_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_collection_model_json2 = network_acl_rule_collection_model.to_dict(
        )
        assert network_acl_rule_collection_model_json2 == network_acl_rule_collection_model_json


class TestNetworkACLRuleCollectionFirst():
    """
    Test Class for NetworkACLRuleCollectionFirst
    """

    def test_network_acl_rule_collection_first_serialization(self):
        """
        Test serialization/deserialization for NetworkACLRuleCollectionFirst
        """

        # Construct a json representation of a NetworkACLRuleCollectionFirst model
        network_acl_rule_collection_first_model_json = {}
        network_acl_rule_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?limit=20'

        # Construct a model instance of NetworkACLRuleCollectionFirst by calling from_dict on the json representation
        network_acl_rule_collection_first_model = NetworkACLRuleCollectionFirst.from_dict(
            network_acl_rule_collection_first_model_json)
        assert network_acl_rule_collection_first_model != False

        # Construct a model instance of NetworkACLRuleCollectionFirst by calling from_dict on the json representation
        network_acl_rule_collection_first_model_dict = NetworkACLRuleCollectionFirst.from_dict(
            network_acl_rule_collection_first_model_json).__dict__
        network_acl_rule_collection_first_model2 = NetworkACLRuleCollectionFirst(
            **network_acl_rule_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_collection_first_model == network_acl_rule_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_collection_first_model_json2 = network_acl_rule_collection_first_model.to_dict(
        )
        assert network_acl_rule_collection_first_model_json2 == network_acl_rule_collection_first_model_json


class TestNetworkACLRuleCollectionNext():
    """
    Test Class for NetworkACLRuleCollectionNext
    """

    def test_network_acl_rule_collection_next_serialization(self):
        """
        Test serialization/deserialization for NetworkACLRuleCollectionNext
        """

        # Construct a json representation of a NetworkACLRuleCollectionNext model
        network_acl_rule_collection_next_model_json = {}
        network_acl_rule_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of NetworkACLRuleCollectionNext by calling from_dict on the json representation
        network_acl_rule_collection_next_model = NetworkACLRuleCollectionNext.from_dict(
            network_acl_rule_collection_next_model_json)
        assert network_acl_rule_collection_next_model != False

        # Construct a model instance of NetworkACLRuleCollectionNext by calling from_dict on the json representation
        network_acl_rule_collection_next_model_dict = NetworkACLRuleCollectionNext.from_dict(
            network_acl_rule_collection_next_model_json).__dict__
        network_acl_rule_collection_next_model2 = NetworkACLRuleCollectionNext(
            **network_acl_rule_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_collection_next_model == network_acl_rule_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_collection_next_model_json2 = network_acl_rule_collection_next_model.to_dict(
        )
        assert network_acl_rule_collection_next_model_json2 == network_acl_rule_collection_next_model_json


class TestNetworkACLRulePatch():
    """
    Test Class for NetworkACLRulePatch
    """

    def test_network_acl_rule_patch_serialization(self):
        """
        Test serialization/deserialization for NetworkACLRulePatch
        """

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_identity_model = {}  # NetworkACLRuleIdentityById
        network_acl_rule_identity_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'

        # Construct a json representation of a NetworkACLRulePatch model
        network_acl_rule_patch_model_json = {}
        network_acl_rule_patch_model_json['name'] = 'my-rule-2'
        network_acl_rule_patch_model_json['action'] = 'allow'
        network_acl_rule_patch_model_json['destination'] = '192.168.3.2/32'
        network_acl_rule_patch_model_json['direction'] = 'inbound'
        network_acl_rule_patch_model_json['source'] = '192.168.3.2/32'
        network_acl_rule_patch_model_json['destination_port_max'] = 22
        network_acl_rule_patch_model_json['destination_port_min'] = 22
        network_acl_rule_patch_model_json['source_port_max'] = 65535
        network_acl_rule_patch_model_json['source_port_min'] = 49152
        network_acl_rule_patch_model_json['code'] = 0
        network_acl_rule_patch_model_json['type'] = 8
        network_acl_rule_patch_model_json[
            'before'] = network_acl_rule_identity_model

        # Construct a model instance of NetworkACLRulePatch by calling from_dict on the json representation
        network_acl_rule_patch_model = NetworkACLRulePatch.from_dict(
            network_acl_rule_patch_model_json)
        assert network_acl_rule_patch_model != False

        # Construct a model instance of NetworkACLRulePatch by calling from_dict on the json representation
        network_acl_rule_patch_model_dict = NetworkACLRulePatch.from_dict(
            network_acl_rule_patch_model_json).__dict__
        network_acl_rule_patch_model2 = NetworkACLRulePatch(
            **network_acl_rule_patch_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_patch_model == network_acl_rule_patch_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_patch_model_json2 = network_acl_rule_patch_model.to_dict(
        )
        assert network_acl_rule_patch_model_json2 == network_acl_rule_patch_model_json


class TestNetworkACLRuleReference():
    """
    Test Class for NetworkACLRuleReference
    """

    def test_network_acl_rule_reference_serialization(self):
        """
        Test serialization/deserialization for NetworkACLRuleReference
        """

        # Construct a json representation of a NetworkACLRuleReference model
        network_acl_rule_reference_model_json = {}
        network_acl_rule_reference_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model_json['name'] = 'my-rule-1'

        # Construct a model instance of NetworkACLRuleReference by calling from_dict on the json representation
        network_acl_rule_reference_model = NetworkACLRuleReference.from_dict(
            network_acl_rule_reference_model_json)
        assert network_acl_rule_reference_model != False

        # Construct a model instance of NetworkACLRuleReference by calling from_dict on the json representation
        network_acl_rule_reference_model_dict = NetworkACLRuleReference.from_dict(
            network_acl_rule_reference_model_json).__dict__
        network_acl_rule_reference_model2 = NetworkACLRuleReference(
            **network_acl_rule_reference_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_reference_model == network_acl_rule_reference_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_reference_model_json2 = network_acl_rule_reference_model.to_dict(
        )
        assert network_acl_rule_reference_model_json2 == network_acl_rule_reference_model_json


class TestNetworkInterface():
    """
    Test Class for NetworkInterface
    """

    def test_network_interface_serialization(self):
        """
        Test serialization/deserialization for NetworkInterface
        """

        # Construct dict forms of any model objects needed in order to build this model.

        security_group_reference_model = {}  # SecurityGroupReference
        security_group_reference_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model['name'] = 'my-security-group'

        floating_ip_reference_model = {}  # FloatingIPReference
        floating_ip_reference_model[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model['address'] = '203.0.113.1'
        floating_ip_reference_model['name'] = 'my-floating-ip'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        # Construct a json representation of a NetworkInterface model
        network_interface_model_json = {}
        network_interface_model_json['name'] = 'my-network-interface'
        network_interface_model_json[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_model_json['primary_ipv4_address'] = '192.168.3.4'
        network_interface_model_json['resource_type'] = 'network_interface'
        network_interface_model_json['security_groups'] = [
            security_group_reference_model
        ]
        network_interface_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_interface_model_json['floating_ips'] = [
            floating_ip_reference_model
        ]
        network_interface_model_json['port_speed'] = 1000
        network_interface_model_json['status'] = 'available'
        network_interface_model_json['subnet'] = subnet_reference_model
        network_interface_model_json['type'] = 'primary'

        # Construct a model instance of NetworkInterface by calling from_dict on the json representation
        network_interface_model = NetworkInterface.from_dict(
            network_interface_model_json)
        assert network_interface_model != False

        # Construct a model instance of NetworkInterface by calling from_dict on the json representation
        network_interface_model_dict = NetworkInterface.from_dict(
            network_interface_model_json).__dict__
        network_interface_model2 = NetworkInterface(
            **network_interface_model_dict)

        # Verify the model instances are equivalent
        assert network_interface_model == network_interface_model2

        # Convert model instance back to dict and verify no loss of data
        network_interface_model_json2 = network_interface_model.to_dict()
        assert network_interface_model_json2 == network_interface_model_json


class TestNetworkInterfaceCollection():
    """
    Test Class for NetworkInterfaceCollection
    """

    def test_network_interface_collection_serialization(self):
        """
        Test serialization/deserialization for NetworkInterfaceCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        network_interface_collection_first_model = {
        }  # NetworkInterfaceCollectionFirst
        network_interface_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/3b2669a2-4c2b-4003-bc91-1b81f1326267/network_interfaces?limit=20'

        network_interface_collection_next_model = {
        }  # NetworkInterfaceCollectionNext
        network_interface_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/3b2669a2-4c2b-4003-bc91-1b81f1326267/network_interfaces?start=d3e721fd-c988-4670-9927-dbd5e7b07fc6&limit=20'

        security_group_reference_model = {}  # SecurityGroupReference
        security_group_reference_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model['name'] = 'my-security-group'

        floating_ip_reference_model = {}  # FloatingIPReference
        floating_ip_reference_model[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model['address'] = '203.0.113.1'
        floating_ip_reference_model['name'] = 'my-floating-ip'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        network_interface_model = {}  # NetworkInterface
        network_interface_model['name'] = 'my-network-interface'
        network_interface_model['id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_model['primary_ipv4_address'] = '192.168.3.4'
        network_interface_model['resource_type'] = 'network_interface'
        network_interface_model['security_groups'] = [
            security_group_reference_model
        ]
        network_interface_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        network_interface_model['floating_ips'] = [floating_ip_reference_model]
        network_interface_model['port_speed'] = 1000
        network_interface_model['status'] = 'available'
        network_interface_model['subnet'] = subnet_reference_model
        network_interface_model['type'] = 'primary'

        # Construct a json representation of a NetworkInterfaceCollection model
        network_interface_collection_model_json = {}
        network_interface_collection_model_json[
            'first'] = network_interface_collection_first_model
        network_interface_collection_model_json['limit'] = 20
        network_interface_collection_model_json[
            'next'] = network_interface_collection_next_model
        network_interface_collection_model_json['total_count'] = 132
        network_interface_collection_model_json['network_interfaces'] = [
            network_interface_model
        ]

        # Construct a model instance of NetworkInterfaceCollection by calling from_dict on the json representation
        network_interface_collection_model = NetworkInterfaceCollection.from_dict(
            network_interface_collection_model_json)
        assert network_interface_collection_model != False

        # Construct a model instance of NetworkInterfaceCollection by calling from_dict on the json representation
        network_interface_collection_model_dict = NetworkInterfaceCollection.from_dict(
            network_interface_collection_model_json).__dict__
        network_interface_collection_model2 = NetworkInterfaceCollection(
            **network_interface_collection_model_dict)

        # Verify the model instances are equivalent
        assert network_interface_collection_model == network_interface_collection_model2

        # Convert model instance back to dict and verify no loss of data
        network_interface_collection_model_json2 = network_interface_collection_model.to_dict(
        )
        assert network_interface_collection_model_json2 == network_interface_collection_model_json


class TestNetworkInterfaceCollectionFirst():
    """
    Test Class for NetworkInterfaceCollectionFirst
    """

    def test_network_interface_collection_first_serialization(self):
        """
        Test serialization/deserialization for NetworkInterfaceCollectionFirst
        """

        # Construct a json representation of a NetworkInterfaceCollectionFirst model
        network_interface_collection_first_model_json = {}
        network_interface_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/3b2669a2-4c2b-4003-bc91-1b81f1326267/network_interfaces?limit=20'

        # Construct a model instance of NetworkInterfaceCollectionFirst by calling from_dict on the json representation
        network_interface_collection_first_model = NetworkInterfaceCollectionFirst.from_dict(
            network_interface_collection_first_model_json)
        assert network_interface_collection_first_model != False

        # Construct a model instance of NetworkInterfaceCollectionFirst by calling from_dict on the json representation
        network_interface_collection_first_model_dict = NetworkInterfaceCollectionFirst.from_dict(
            network_interface_collection_first_model_json).__dict__
        network_interface_collection_first_model2 = NetworkInterfaceCollectionFirst(
            **network_interface_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert network_interface_collection_first_model == network_interface_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        network_interface_collection_first_model_json2 = network_interface_collection_first_model.to_dict(
        )
        assert network_interface_collection_first_model_json2 == network_interface_collection_first_model_json


class TestNetworkInterfaceCollectionNext():
    """
    Test Class for NetworkInterfaceCollectionNext
    """

    def test_network_interface_collection_next_serialization(self):
        """
        Test serialization/deserialization for NetworkInterfaceCollectionNext
        """

        # Construct a json representation of a NetworkInterfaceCollectionNext model
        network_interface_collection_next_model_json = {}
        network_interface_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/3b2669a2-4c2b-4003-bc91-1b81f1326267/network_interfaces?start=d3e721fd-c988-4670-9927-dbd5e7b07fc6&limit=20'

        # Construct a model instance of NetworkInterfaceCollectionNext by calling from_dict on the json representation
        network_interface_collection_next_model = NetworkInterfaceCollectionNext.from_dict(
            network_interface_collection_next_model_json)
        assert network_interface_collection_next_model != False

        # Construct a model instance of NetworkInterfaceCollectionNext by calling from_dict on the json representation
        network_interface_collection_next_model_dict = NetworkInterfaceCollectionNext.from_dict(
            network_interface_collection_next_model_json).__dict__
        network_interface_collection_next_model2 = NetworkInterfaceCollectionNext(
            **network_interface_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert network_interface_collection_next_model == network_interface_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        network_interface_collection_next_model_json2 = network_interface_collection_next_model.to_dict(
        )
        assert network_interface_collection_next_model_json2 == network_interface_collection_next_model_json


class TestNetworkInterfaceInstanceContextReference():
    """
    Test Class for NetworkInterfaceInstanceContextReference
    """

    def test_network_interface_instance_context_reference_serialization(self):
        """
        Test serialization/deserialization for NetworkInterfaceInstanceContextReference
        """

        # Construct dict forms of any model objects needed in order to build this model.

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        # Construct a json representation of a NetworkInterfaceInstanceContextReference model
        network_interface_instance_context_reference_model_json = {}
        network_interface_instance_context_reference_model_json[
            'name'] = 'my-network-interface'
        network_interface_instance_context_reference_model_json[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_instance_context_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_instance_context_reference_model_json[
            'primary_ipv4_address'] = '192.168.3.4'
        network_interface_instance_context_reference_model_json[
            'resource_type'] = 'network_interface'
        network_interface_instance_context_reference_model_json[
            'subnet'] = subnet_reference_model

        # Construct a model instance of NetworkInterfaceInstanceContextReference by calling from_dict on the json representation
        network_interface_instance_context_reference_model = NetworkInterfaceInstanceContextReference.from_dict(
            network_interface_instance_context_reference_model_json)
        assert network_interface_instance_context_reference_model != False

        # Construct a model instance of NetworkInterfaceInstanceContextReference by calling from_dict on the json representation
        network_interface_instance_context_reference_model_dict = NetworkInterfaceInstanceContextReference.from_dict(
            network_interface_instance_context_reference_model_json).__dict__
        network_interface_instance_context_reference_model2 = NetworkInterfaceInstanceContextReference(
            **network_interface_instance_context_reference_model_dict)

        # Verify the model instances are equivalent
        assert network_interface_instance_context_reference_model == network_interface_instance_context_reference_model2

        # Convert model instance back to dict and verify no loss of data
        network_interface_instance_context_reference_model_json2 = network_interface_instance_context_reference_model.to_dict(
        )
        assert network_interface_instance_context_reference_model_json2 == network_interface_instance_context_reference_model_json


class TestNetworkInterfacePatch():
    """
    Test Class for NetworkInterfacePatch
    """

    def test_network_interface_patch_serialization(self):
        """
        Test serialization/deserialization for NetworkInterfacePatch
        """

        # Construct a json representation of a NetworkInterfacePatch model
        network_interface_patch_model_json = {}
        network_interface_patch_model_json['name'] = 'my-network-interface'

        # Construct a model instance of NetworkInterfacePatch by calling from_dict on the json representation
        network_interface_patch_model = NetworkInterfacePatch.from_dict(
            network_interface_patch_model_json)
        assert network_interface_patch_model != False

        # Construct a model instance of NetworkInterfacePatch by calling from_dict on the json representation
        network_interface_patch_model_dict = NetworkInterfacePatch.from_dict(
            network_interface_patch_model_json).__dict__
        network_interface_patch_model2 = NetworkInterfacePatch(
            **network_interface_patch_model_dict)

        # Verify the model instances are equivalent
        assert network_interface_patch_model == network_interface_patch_model2

        # Convert model instance back to dict and verify no loss of data
        network_interface_patch_model_json2 = network_interface_patch_model.to_dict(
        )
        assert network_interface_patch_model_json2 == network_interface_patch_model_json


class TestNetworkInterfacePrototype():
    """
    Test Class for NetworkInterfacePrototype
    """

    def test_network_interface_prototype_serialization(self):
        """
        Test serialization/deserialization for NetworkInterfacePrototype
        """

        # Construct dict forms of any model objects needed in order to build this model.

        security_group_identity_model = {}  # SecurityGroupIdentityById
        security_group_identity_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        subnet_identity_model = {}  # SubnetIdentityById
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a json representation of a NetworkInterfacePrototype model
        network_interface_prototype_model_json = {}
        network_interface_prototype_model_json['name'] = 'my-network-interface'
        network_interface_prototype_model_json[
            'primary_ipv4_address'] = '10.0.0.5'
        network_interface_prototype_model_json['security_groups'] = [
            security_group_identity_model
        ]
        network_interface_prototype_model_json['subnet'] = subnet_identity_model

        # Construct a model instance of NetworkInterfacePrototype by calling from_dict on the json representation
        network_interface_prototype_model = NetworkInterfacePrototype.from_dict(
            network_interface_prototype_model_json)
        assert network_interface_prototype_model != False

        # Construct a model instance of NetworkInterfacePrototype by calling from_dict on the json representation
        network_interface_prototype_model_dict = NetworkInterfacePrototype.from_dict(
            network_interface_prototype_model_json).__dict__
        network_interface_prototype_model2 = NetworkInterfacePrototype(
            **network_interface_prototype_model_dict)

        # Verify the model instances are equivalent
        assert network_interface_prototype_model == network_interface_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        network_interface_prototype_model_json2 = network_interface_prototype_model.to_dict(
        )
        assert network_interface_prototype_model_json2 == network_interface_prototype_model_json


class TestNetworkInterfaceReference():
    """
    Test Class for NetworkInterfaceReference
    """

    def test_network_interface_reference_serialization(self):
        """
        Test serialization/deserialization for NetworkInterfaceReference
        """

        # Construct a json representation of a NetworkInterfaceReference model
        network_interface_reference_model_json = {}
        network_interface_reference_model_json['name'] = 'my-network-interface'
        network_interface_reference_model_json[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_reference_model_json[
            'primary_ipv4_address'] = '192.168.3.4'
        network_interface_reference_model_json[
            'resource_type'] = 'network_interface'

        # Construct a model instance of NetworkInterfaceReference by calling from_dict on the json representation
        network_interface_reference_model = NetworkInterfaceReference.from_dict(
            network_interface_reference_model_json)
        assert network_interface_reference_model != False

        # Construct a model instance of NetworkInterfaceReference by calling from_dict on the json representation
        network_interface_reference_model_dict = NetworkInterfaceReference.from_dict(
            network_interface_reference_model_json).__dict__
        network_interface_reference_model2 = NetworkInterfaceReference(
            **network_interface_reference_model_dict)

        # Verify the model instances are equivalent
        assert network_interface_reference_model == network_interface_reference_model2

        # Convert model instance back to dict and verify no loss of data
        network_interface_reference_model_json2 = network_interface_reference_model.to_dict(
        )
        assert network_interface_reference_model_json2 == network_interface_reference_model_json


class TestNetworkInterfaceUnpaginatedCollection():
    """
    Test Class for NetworkInterfaceUnpaginatedCollection
    """

    def test_network_interface_unpaginated_collection_serialization(self):
        """
        Test serialization/deserialization for NetworkInterfaceUnpaginatedCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        security_group_reference_model = {}  # SecurityGroupReference
        security_group_reference_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model['name'] = 'my-security-group'

        floating_ip_reference_model = {}  # FloatingIPReference
        floating_ip_reference_model[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        floating_ip_reference_model['address'] = '203.0.113.1'
        floating_ip_reference_model['name'] = 'my-floating-ip'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        network_interface_model = {}  # NetworkInterface
        network_interface_model['name'] = 'my-network-interface'
        network_interface_model['id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_model['primary_ipv4_address'] = '192.168.3.4'
        network_interface_model['resource_type'] = 'network_interface'
        network_interface_model['security_groups'] = [
            security_group_reference_model
        ]
        network_interface_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        network_interface_model['floating_ips'] = [floating_ip_reference_model]
        network_interface_model['port_speed'] = 1000
        network_interface_model['status'] = 'available'
        network_interface_model['subnet'] = subnet_reference_model
        network_interface_model['type'] = 'primary'

        # Construct a json representation of a NetworkInterfaceUnpaginatedCollection model
        network_interface_unpaginated_collection_model_json = {}
        network_interface_unpaginated_collection_model_json[
            'network_interfaces'] = [network_interface_model]

        # Construct a model instance of NetworkInterfaceUnpaginatedCollection by calling from_dict on the json representation
        network_interface_unpaginated_collection_model = NetworkInterfaceUnpaginatedCollection.from_dict(
            network_interface_unpaginated_collection_model_json)
        assert network_interface_unpaginated_collection_model != False

        # Construct a model instance of NetworkInterfaceUnpaginatedCollection by calling from_dict on the json representation
        network_interface_unpaginated_collection_model_dict = NetworkInterfaceUnpaginatedCollection.from_dict(
            network_interface_unpaginated_collection_model_json).__dict__
        network_interface_unpaginated_collection_model2 = NetworkInterfaceUnpaginatedCollection(
            **network_interface_unpaginated_collection_model_dict)

        # Verify the model instances are equivalent
        assert network_interface_unpaginated_collection_model == network_interface_unpaginated_collection_model2

        # Convert model instance back to dict and verify no loss of data
        network_interface_unpaginated_collection_model_json2 = network_interface_unpaginated_collection_model.to_dict(
        )
        assert network_interface_unpaginated_collection_model_json2 == network_interface_unpaginated_collection_model_json


class TestOperatingSystem():
    """
    Test Class for OperatingSystem
    """

    def test_operating_system_serialization(self):
        """
        Test serialization/deserialization for OperatingSystem
        """

        # Construct a json representation of a OperatingSystem model
        operating_system_model_json = {}
        operating_system_model_json['name'] = 'ubuntu-16-amd64'
        operating_system_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64'
        operating_system_model_json['architecture'] = 'amd64'
        operating_system_model_json[
            'display_name'] = 'Ubuntu Server 16.04 LTS amd64'
        operating_system_model_json['family'] = 'Ubuntu Server'
        operating_system_model_json['vendor'] = 'Canonical'
        operating_system_model_json['version'] = '16.04 LTS'

        # Construct a model instance of OperatingSystem by calling from_dict on the json representation
        operating_system_model = OperatingSystem.from_dict(
            operating_system_model_json)
        assert operating_system_model != False

        # Construct a model instance of OperatingSystem by calling from_dict on the json representation
        operating_system_model_dict = OperatingSystem.from_dict(
            operating_system_model_json).__dict__
        operating_system_model2 = OperatingSystem(**operating_system_model_dict)

        # Verify the model instances are equivalent
        assert operating_system_model == operating_system_model2

        # Convert model instance back to dict and verify no loss of data
        operating_system_model_json2 = operating_system_model.to_dict()
        assert operating_system_model_json2 == operating_system_model_json


class TestOperatingSystemCollection():
    """
    Test Class for OperatingSystemCollection
    """

    def test_operating_system_collection_serialization(self):
        """
        Test serialization/deserialization for OperatingSystemCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        operating_system_collection_first_model = {
        }  # OperatingSystemCollectionFirst
        operating_system_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/operating_systems?limit=20'

        operating_system_collection_next_model = {
        }  # OperatingSystemCollectionNext
        operating_system_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/operating_systems?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        operating_system_model = {}  # OperatingSystem
        operating_system_model['name'] = 'ubuntu-16-amd64'
        operating_system_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64'
        operating_system_model['architecture'] = 'amd64'
        operating_system_model['display_name'] = 'Ubuntu Server 16.04 LTS amd64'
        operating_system_model['family'] = 'Ubuntu Server'
        operating_system_model['vendor'] = 'Canonical'
        operating_system_model['version'] = '16.04 LTS'

        # Construct a json representation of a OperatingSystemCollection model
        operating_system_collection_model_json = {}
        operating_system_collection_model_json[
            'first'] = operating_system_collection_first_model
        operating_system_collection_model_json['limit'] = 20
        operating_system_collection_model_json[
            'next'] = operating_system_collection_next_model
        operating_system_collection_model_json['operating_systems'] = [
            operating_system_model
        ]

        # Construct a model instance of OperatingSystemCollection by calling from_dict on the json representation
        operating_system_collection_model = OperatingSystemCollection.from_dict(
            operating_system_collection_model_json)
        assert operating_system_collection_model != False

        # Construct a model instance of OperatingSystemCollection by calling from_dict on the json representation
        operating_system_collection_model_dict = OperatingSystemCollection.from_dict(
            operating_system_collection_model_json).__dict__
        operating_system_collection_model2 = OperatingSystemCollection(
            **operating_system_collection_model_dict)

        # Verify the model instances are equivalent
        assert operating_system_collection_model == operating_system_collection_model2

        # Convert model instance back to dict and verify no loss of data
        operating_system_collection_model_json2 = operating_system_collection_model.to_dict(
        )
        assert operating_system_collection_model_json2 == operating_system_collection_model_json


class TestOperatingSystemCollectionFirst():
    """
    Test Class for OperatingSystemCollectionFirst
    """

    def test_operating_system_collection_first_serialization(self):
        """
        Test serialization/deserialization for OperatingSystemCollectionFirst
        """

        # Construct a json representation of a OperatingSystemCollectionFirst model
        operating_system_collection_first_model_json = {}
        operating_system_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/operating_systems?limit=20'

        # Construct a model instance of OperatingSystemCollectionFirst by calling from_dict on the json representation
        operating_system_collection_first_model = OperatingSystemCollectionFirst.from_dict(
            operating_system_collection_first_model_json)
        assert operating_system_collection_first_model != False

        # Construct a model instance of OperatingSystemCollectionFirst by calling from_dict on the json representation
        operating_system_collection_first_model_dict = OperatingSystemCollectionFirst.from_dict(
            operating_system_collection_first_model_json).__dict__
        operating_system_collection_first_model2 = OperatingSystemCollectionFirst(
            **operating_system_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert operating_system_collection_first_model == operating_system_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        operating_system_collection_first_model_json2 = operating_system_collection_first_model.to_dict(
        )
        assert operating_system_collection_first_model_json2 == operating_system_collection_first_model_json


class TestOperatingSystemCollectionNext():
    """
    Test Class for OperatingSystemCollectionNext
    """

    def test_operating_system_collection_next_serialization(self):
        """
        Test serialization/deserialization for OperatingSystemCollectionNext
        """

        # Construct a json representation of a OperatingSystemCollectionNext model
        operating_system_collection_next_model_json = {}
        operating_system_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/operating_systems?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of OperatingSystemCollectionNext by calling from_dict on the json representation
        operating_system_collection_next_model = OperatingSystemCollectionNext.from_dict(
            operating_system_collection_next_model_json)
        assert operating_system_collection_next_model != False

        # Construct a model instance of OperatingSystemCollectionNext by calling from_dict on the json representation
        operating_system_collection_next_model_dict = OperatingSystemCollectionNext.from_dict(
            operating_system_collection_next_model_json).__dict__
        operating_system_collection_next_model2 = OperatingSystemCollectionNext(
            **operating_system_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert operating_system_collection_next_model == operating_system_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        operating_system_collection_next_model_json2 = operating_system_collection_next_model.to_dict(
        )
        assert operating_system_collection_next_model_json2 == operating_system_collection_next_model_json


class TestPublicGateway():
    """
    Test Class for PublicGateway
    """

    def test_public_gateway_serialization(self):
        """
        Test serialization/deserialization for PublicGateway
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        public_gateway_floating_ip_model = {}  # PublicGatewayFloatingIp
        public_gateway_floating_ip_model[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        public_gateway_floating_ip_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        public_gateway_floating_ip_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        public_gateway_floating_ip_model['address'] = '203.0.113.1'
        public_gateway_floating_ip_model['name'] = 'my-floating-ip'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model['name'] = 'us-south-1'
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        # Construct a json representation of a PublicGateway model
        public_gateway_model_json = {}
        public_gateway_model_json['id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_model_json['name'] = 'my-public-gateway'
        public_gateway_model_json['resource_type'] = 'public_gateway'
        public_gateway_model_json[
            'resource_group'] = resource_group_reference_model
        public_gateway_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        public_gateway_model_json[
            'floating_ip'] = public_gateway_floating_ip_model
        public_gateway_model_json['status'] = 'available'
        public_gateway_model_json['vpc'] = vpc_reference_model
        public_gateway_model_json['zone'] = zone_reference_model

        # Construct a model instance of PublicGateway by calling from_dict on the json representation
        public_gateway_model = PublicGateway.from_dict(
            public_gateway_model_json)
        assert public_gateway_model != False

        # Construct a model instance of PublicGateway by calling from_dict on the json representation
        public_gateway_model_dict = PublicGateway.from_dict(
            public_gateway_model_json).__dict__
        public_gateway_model2 = PublicGateway(**public_gateway_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_model == public_gateway_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_model_json2 = public_gateway_model.to_dict()
        assert public_gateway_model_json2 == public_gateway_model_json


class TestPublicGatewayCollection():
    """
    Test Class for PublicGatewayCollection
    """

    def test_public_gateway_collection_serialization(self):
        """
        Test serialization/deserialization for PublicGatewayCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        public_gateway_collection_first_model = {
        }  # PublicGatewayCollectionFirst
        public_gateway_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways?limit=20'

        public_gateway_collection_next_model = {}  # PublicGatewayCollectionNext
        public_gateway_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        public_gateway_floating_ip_model = {}  # PublicGatewayFloatingIp
        public_gateway_floating_ip_model[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        public_gateway_floating_ip_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        public_gateway_floating_ip_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        public_gateway_floating_ip_model['address'] = '203.0.113.1'
        public_gateway_floating_ip_model['name'] = 'my-floating-ip'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model['name'] = 'us-south-1'
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        public_gateway_model = {}  # PublicGateway
        public_gateway_model['id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_model['name'] = 'my-public-gateway'
        public_gateway_model['resource_type'] = 'public_gateway'
        public_gateway_model['resource_group'] = resource_group_reference_model
        public_gateway_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        public_gateway_model['floating_ip'] = public_gateway_floating_ip_model
        public_gateway_model['status'] = 'available'
        public_gateway_model['vpc'] = vpc_reference_model
        public_gateway_model['zone'] = zone_reference_model

        # Construct a json representation of a PublicGatewayCollection model
        public_gateway_collection_model_json = {}
        public_gateway_collection_model_json[
            'first'] = public_gateway_collection_first_model
        public_gateway_collection_model_json['limit'] = 20
        public_gateway_collection_model_json[
            'next'] = public_gateway_collection_next_model
        public_gateway_collection_model_json['total_count'] = 132
        public_gateway_collection_model_json['public_gateways'] = [
            public_gateway_model
        ]

        # Construct a model instance of PublicGatewayCollection by calling from_dict on the json representation
        public_gateway_collection_model = PublicGatewayCollection.from_dict(
            public_gateway_collection_model_json)
        assert public_gateway_collection_model != False

        # Construct a model instance of PublicGatewayCollection by calling from_dict on the json representation
        public_gateway_collection_model_dict = PublicGatewayCollection.from_dict(
            public_gateway_collection_model_json).__dict__
        public_gateway_collection_model2 = PublicGatewayCollection(
            **public_gateway_collection_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_collection_model == public_gateway_collection_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_collection_model_json2 = public_gateway_collection_model.to_dict(
        )
        assert public_gateway_collection_model_json2 == public_gateway_collection_model_json


class TestPublicGatewayCollectionFirst():
    """
    Test Class for PublicGatewayCollectionFirst
    """

    def test_public_gateway_collection_first_serialization(self):
        """
        Test serialization/deserialization for PublicGatewayCollectionFirst
        """

        # Construct a json representation of a PublicGatewayCollectionFirst model
        public_gateway_collection_first_model_json = {}
        public_gateway_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways?limit=20'

        # Construct a model instance of PublicGatewayCollectionFirst by calling from_dict on the json representation
        public_gateway_collection_first_model = PublicGatewayCollectionFirst.from_dict(
            public_gateway_collection_first_model_json)
        assert public_gateway_collection_first_model != False

        # Construct a model instance of PublicGatewayCollectionFirst by calling from_dict on the json representation
        public_gateway_collection_first_model_dict = PublicGatewayCollectionFirst.from_dict(
            public_gateway_collection_first_model_json).__dict__
        public_gateway_collection_first_model2 = PublicGatewayCollectionFirst(
            **public_gateway_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_collection_first_model == public_gateway_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_collection_first_model_json2 = public_gateway_collection_first_model.to_dict(
        )
        assert public_gateway_collection_first_model_json2 == public_gateway_collection_first_model_json


class TestPublicGatewayCollectionNext():
    """
    Test Class for PublicGatewayCollectionNext
    """

    def test_public_gateway_collection_next_serialization(self):
        """
        Test serialization/deserialization for PublicGatewayCollectionNext
        """

        # Construct a json representation of a PublicGatewayCollectionNext model
        public_gateway_collection_next_model_json = {}
        public_gateway_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of PublicGatewayCollectionNext by calling from_dict on the json representation
        public_gateway_collection_next_model = PublicGatewayCollectionNext.from_dict(
            public_gateway_collection_next_model_json)
        assert public_gateway_collection_next_model != False

        # Construct a model instance of PublicGatewayCollectionNext by calling from_dict on the json representation
        public_gateway_collection_next_model_dict = PublicGatewayCollectionNext.from_dict(
            public_gateway_collection_next_model_json).__dict__
        public_gateway_collection_next_model2 = PublicGatewayCollectionNext(
            **public_gateway_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_collection_next_model == public_gateway_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_collection_next_model_json2 = public_gateway_collection_next_model.to_dict(
        )
        assert public_gateway_collection_next_model_json2 == public_gateway_collection_next_model_json


class TestPublicGatewayFloatingIp():
    """
    Test Class for PublicGatewayFloatingIp
    """

    def test_public_gateway_floating_ip_serialization(self):
        """
        Test serialization/deserialization for PublicGatewayFloatingIp
        """

        # Construct a json representation of a PublicGatewayFloatingIp model
        public_gateway_floating_ip_model_json = {}
        public_gateway_floating_ip_model_json[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'
        public_gateway_floating_ip_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'
        public_gateway_floating_ip_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'
        public_gateway_floating_ip_model_json['address'] = '203.0.113.1'
        public_gateway_floating_ip_model_json['name'] = 'my-floating-ip'

        # Construct a model instance of PublicGatewayFloatingIp by calling from_dict on the json representation
        public_gateway_floating_ip_model = PublicGatewayFloatingIp.from_dict(
            public_gateway_floating_ip_model_json)
        assert public_gateway_floating_ip_model != False

        # Construct a model instance of PublicGatewayFloatingIp by calling from_dict on the json representation
        public_gateway_floating_ip_model_dict = PublicGatewayFloatingIp.from_dict(
            public_gateway_floating_ip_model_json).__dict__
        public_gateway_floating_ip_model2 = PublicGatewayFloatingIp(
            **public_gateway_floating_ip_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_floating_ip_model == public_gateway_floating_ip_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_floating_ip_model_json2 = public_gateway_floating_ip_model.to_dict(
        )
        assert public_gateway_floating_ip_model_json2 == public_gateway_floating_ip_model_json


class TestPublicGatewayPatch():
    """
    Test Class for PublicGatewayPatch
    """

    def test_public_gateway_patch_serialization(self):
        """
        Test serialization/deserialization for PublicGatewayPatch
        """

        # Construct a json representation of a PublicGatewayPatch model
        public_gateway_patch_model_json = {}
        public_gateway_patch_model_json['name'] = 'my-public-gateway'

        # Construct a model instance of PublicGatewayPatch by calling from_dict on the json representation
        public_gateway_patch_model = PublicGatewayPatch.from_dict(
            public_gateway_patch_model_json)
        assert public_gateway_patch_model != False

        # Construct a model instance of PublicGatewayPatch by calling from_dict on the json representation
        public_gateway_patch_model_dict = PublicGatewayPatch.from_dict(
            public_gateway_patch_model_json).__dict__
        public_gateway_patch_model2 = PublicGatewayPatch(
            **public_gateway_patch_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_patch_model == public_gateway_patch_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_patch_model_json2 = public_gateway_patch_model.to_dict()
        assert public_gateway_patch_model_json2 == public_gateway_patch_model_json


class TestPublicGatewayReference():
    """
    Test Class for PublicGatewayReference
    """

    def test_public_gateway_reference_serialization(self):
        """
        Test serialization/deserialization for PublicGatewayReference
        """

        # Construct a json representation of a PublicGatewayReference model
        public_gateway_reference_model_json = {}
        public_gateway_reference_model_json[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_reference_model_json['name'] = 'my-public-gateway'
        public_gateway_reference_model_json['resource_type'] = 'public_gateway'

        # Construct a model instance of PublicGatewayReference by calling from_dict on the json representation
        public_gateway_reference_model = PublicGatewayReference.from_dict(
            public_gateway_reference_model_json)
        assert public_gateway_reference_model != False

        # Construct a model instance of PublicGatewayReference by calling from_dict on the json representation
        public_gateway_reference_model_dict = PublicGatewayReference.from_dict(
            public_gateway_reference_model_json).__dict__
        public_gateway_reference_model2 = PublicGatewayReference(
            **public_gateway_reference_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_reference_model == public_gateway_reference_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_reference_model_json2 = public_gateway_reference_model.to_dict(
        )
        assert public_gateway_reference_model_json2 == public_gateway_reference_model_json


class TestRegion():
    """
    Test Class for Region
    """

    def test_region_serialization(self):
        """
        Test serialization/deserialization for Region
        """

        # Construct a json representation of a Region model
        region_model_json = {}
        region_model_json['name'] = 'us-south'
        region_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south'
        region_model_json['endpoint'] = 'testString'
        region_model_json['status'] = 'available'

        # Construct a model instance of Region by calling from_dict on the json representation
        region_model = Region.from_dict(region_model_json)
        assert region_model != False

        # Construct a model instance of Region by calling from_dict on the json representation
        region_model_dict = Region.from_dict(region_model_json).__dict__
        region_model2 = Region(**region_model_dict)

        # Verify the model instances are equivalent
        assert region_model == region_model2

        # Convert model instance back to dict and verify no loss of data
        region_model_json2 = region_model.to_dict()
        assert region_model_json2 == region_model_json


class TestRegionCollection():
    """
    Test Class for RegionCollection
    """

    def test_region_collection_serialization(self):
        """
        Test serialization/deserialization for RegionCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        region_model = {}  # Region
        region_model['name'] = 'us-south'
        region_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south'
        region_model['endpoint'] = 'testString'
        region_model['status'] = 'available'

        # Construct a json representation of a RegionCollection model
        region_collection_model_json = {}
        region_collection_model_json['regions'] = [region_model]

        # Construct a model instance of RegionCollection by calling from_dict on the json representation
        region_collection_model = RegionCollection.from_dict(
            region_collection_model_json)
        assert region_collection_model != False

        # Construct a model instance of RegionCollection by calling from_dict on the json representation
        region_collection_model_dict = RegionCollection.from_dict(
            region_collection_model_json).__dict__
        region_collection_model2 = RegionCollection(
            **region_collection_model_dict)

        # Verify the model instances are equivalent
        assert region_collection_model == region_collection_model2

        # Convert model instance back to dict and verify no loss of data
        region_collection_model_json2 = region_collection_model.to_dict()
        assert region_collection_model_json2 == region_collection_model_json


class TestRegionReference():
    """
    Test Class for RegionReference
    """

    def test_region_reference_serialization(self):
        """
        Test serialization/deserialization for RegionReference
        """

        # Construct a json representation of a RegionReference model
        region_reference_model_json = {}
        region_reference_model_json['name'] = 'us-south'
        region_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south'

        # Construct a model instance of RegionReference by calling from_dict on the json representation
        region_reference_model = RegionReference.from_dict(
            region_reference_model_json)
        assert region_reference_model != False

        # Construct a model instance of RegionReference by calling from_dict on the json representation
        region_reference_model_dict = RegionReference.from_dict(
            region_reference_model_json).__dict__
        region_reference_model2 = RegionReference(**region_reference_model_dict)

        # Verify the model instances are equivalent
        assert region_reference_model == region_reference_model2

        # Convert model instance back to dict and verify no loss of data
        region_reference_model_json2 = region_reference_model.to_dict()
        assert region_reference_model_json2 == region_reference_model_json


class TestResourceGroupReference():
    """
    Test Class for ResourceGroupReference
    """

    def test_resource_group_reference_serialization(self):
        """
        Test serialization/deserialization for ResourceGroupReference
        """

        # Construct a json representation of a ResourceGroupReference model
        resource_group_reference_model_json = {}
        resource_group_reference_model_json[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model_json['name'] = 'my-resource-group'
        resource_group_reference_model_json[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a model instance of ResourceGroupReference by calling from_dict on the json representation
        resource_group_reference_model = ResourceGroupReference.from_dict(
            resource_group_reference_model_json)
        assert resource_group_reference_model != False

        # Construct a model instance of ResourceGroupReference by calling from_dict on the json representation
        resource_group_reference_model_dict = ResourceGroupReference.from_dict(
            resource_group_reference_model_json).__dict__
        resource_group_reference_model2 = ResourceGroupReference(
            **resource_group_reference_model_dict)

        # Verify the model instances are equivalent
        assert resource_group_reference_model == resource_group_reference_model2

        # Convert model instance back to dict and verify no loss of data
        resource_group_reference_model_json2 = resource_group_reference_model.to_dict(
        )
        assert resource_group_reference_model_json2 == resource_group_reference_model_json


class TestRoute():
    """
    Test Class for Route
    """

    def test_route_serialization(self):
        """
        Test serialization/deserialization for Route
        """

        # Construct dict forms of any model objects needed in order to build this model.

        route_next_hop_model = {}  # RouteNextHopIP
        route_next_hop_model['address'] = '192.168.3.4'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model['name'] = 'us-south-1'
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        # Construct a json representation of a Route model
        route_model_json = {}
        route_model_json['next_hop'] = route_next_hop_model
        route_model_json['id'] = '1a15dca5-7e33-45e1-b7c5-bc690e569531'
        route_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531'
        route_model_json['name'] = 'my-route-1'
        route_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        route_model_json['destination'] = '192.168.3.0/24'
        route_model_json['lifecycle_state'] = 'stable'
        route_model_json['zone'] = zone_reference_model

        # Construct a model instance of Route by calling from_dict on the json representation
        route_model = Route.from_dict(route_model_json)
        assert route_model != False

        # Construct a model instance of Route by calling from_dict on the json representation
        route_model_dict = Route.from_dict(route_model_json).__dict__
        route_model2 = Route(**route_model_dict)

        # Verify the model instances are equivalent
        assert route_model == route_model2

        # Convert model instance back to dict and verify no loss of data
        route_model_json2 = route_model.to_dict()
        assert route_model_json2 == route_model_json


class TestRouteCollection():
    """
    Test Class for RouteCollection
    """

    def test_route_collection_serialization(self):
        """
        Test serialization/deserialization for RouteCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        route_next_hop_model = {}  # RouteNextHopIP
        route_next_hop_model['address'] = '192.168.3.4'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model['name'] = 'us-south-1'
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        route_model = {}  # Route
        route_model['next_hop'] = route_next_hop_model
        route_model['id'] = '1a15dca5-7e33-45e1-b7c5-bc690e569531'
        route_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531'
        route_model['name'] = 'my-route-1'
        route_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        route_model['destination'] = '192.168.3.0/24'
        route_model['lifecycle_state'] = 'stable'
        route_model['zone'] = zone_reference_model

        # Construct a json representation of a RouteCollection model
        route_collection_model_json = {}
        route_collection_model_json['routes'] = [route_model]

        # Construct a model instance of RouteCollection by calling from_dict on the json representation
        route_collection_model = RouteCollection.from_dict(
            route_collection_model_json)
        assert route_collection_model != False

        # Construct a model instance of RouteCollection by calling from_dict on the json representation
        route_collection_model_dict = RouteCollection.from_dict(
            route_collection_model_json).__dict__
        route_collection_model2 = RouteCollection(**route_collection_model_dict)

        # Verify the model instances are equivalent
        assert route_collection_model == route_collection_model2

        # Convert model instance back to dict and verify no loss of data
        route_collection_model_json2 = route_collection_model.to_dict()
        assert route_collection_model_json2 == route_collection_model_json


class TestRoutePatch():
    """
    Test Class for RoutePatch
    """

    def test_route_patch_serialization(self):
        """
        Test serialization/deserialization for RoutePatch
        """

        # Construct a json representation of a RoutePatch model
        route_patch_model_json = {}
        route_patch_model_json['name'] = 'my-route-2'

        # Construct a model instance of RoutePatch by calling from_dict on the json representation
        route_patch_model = RoutePatch.from_dict(route_patch_model_json)
        assert route_patch_model != False

        # Construct a model instance of RoutePatch by calling from_dict on the json representation
        route_patch_model_dict = RoutePatch.from_dict(
            route_patch_model_json).__dict__
        route_patch_model2 = RoutePatch(**route_patch_model_dict)

        # Verify the model instances are equivalent
        assert route_patch_model == route_patch_model2

        # Convert model instance back to dict and verify no loss of data
        route_patch_model_json2 = route_patch_model.to_dict()
        assert route_patch_model_json2 == route_patch_model_json


class TestSecurityGroup():
    """
    Test Class for SecurityGroup
    """

    def test_security_group_serialization(self):
        """
        Test serialization/deserialization for SecurityGroup
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        network_interface_reference_model = {}  # NetworkInterfaceReference
        network_interface_reference_model['name'] = 'my-network-interface'
        network_interface_reference_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_reference_model[
            'primary_ipv4_address'] = '192.168.3.4'
        network_interface_reference_model['resource_type'] = 'network_interface'

        security_group_rule_remote_model = {}  # SecurityGroupRuleRemoteIP
        security_group_rule_remote_model['address'] = '192.168.3.4'

        security_group_rule_model = {
        }  # SecurityGroupRuleSecurityGroupRuleProtocolTCPUDP
        security_group_rule_model['id'] = '6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_model['direction'] = 'inbound'
        security_group_rule_model['ip_version'] = 'ipv4'
        security_group_rule_model['protocol'] = 'udp'
        security_group_rule_model['remote'] = security_group_rule_remote_model
        security_group_rule_model['port_max'] = 22
        security_group_rule_model['port_min'] = 22

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        # Construct a json representation of a SecurityGroup model
        security_group_model_json = {}
        security_group_model_json['id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_model_json['name'] = 'my-security-group'
        security_group_model_json[
            'resource_group'] = resource_group_reference_model
        security_group_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        security_group_model_json['network_interfaces'] = [
            network_interface_reference_model
        ]
        security_group_model_json['rules'] = [security_group_rule_model]
        security_group_model_json['vpc'] = vpc_reference_model

        # Construct a model instance of SecurityGroup by calling from_dict on the json representation
        security_group_model = SecurityGroup.from_dict(
            security_group_model_json)
        assert security_group_model != False

        # Construct a model instance of SecurityGroup by calling from_dict on the json representation
        security_group_model_dict = SecurityGroup.from_dict(
            security_group_model_json).__dict__
        security_group_model2 = SecurityGroup(**security_group_model_dict)

        # Verify the model instances are equivalent
        assert security_group_model == security_group_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_model_json2 = security_group_model.to_dict()
        assert security_group_model_json2 == security_group_model_json


class TestSecurityGroupCollection():
    """
    Test Class for SecurityGroupCollection
    """

    def test_security_group_collection_serialization(self):
        """
        Test serialization/deserialization for SecurityGroupCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        security_group_collection_first_model = {
        }  # SecurityGroupCollectionFirst
        security_group_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups?limit=20'

        security_group_collection_next_model = {}  # SecurityGroupCollectionNext
        security_group_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        network_interface_reference_model = {}  # NetworkInterfaceReference
        network_interface_reference_model['name'] = 'my-network-interface'
        network_interface_reference_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        network_interface_reference_model[
            'primary_ipv4_address'] = '192.168.3.4'
        network_interface_reference_model['resource_type'] = 'network_interface'

        security_group_rule_remote_model = {}  # SecurityGroupRuleRemoteIP
        security_group_rule_remote_model['address'] = '192.168.3.4'

        security_group_rule_model = {
        }  # SecurityGroupRuleSecurityGroupRuleProtocolTCPUDP
        security_group_rule_model['id'] = '6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_model['direction'] = 'inbound'
        security_group_rule_model['ip_version'] = 'ipv4'
        security_group_rule_model['protocol'] = 'udp'
        security_group_rule_model['remote'] = security_group_rule_remote_model
        security_group_rule_model['port_max'] = 22
        security_group_rule_model['port_min'] = 22

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        security_group_model = {}  # SecurityGroup
        security_group_model['id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_model['name'] = 'my-security-group'
        security_group_model['resource_group'] = resource_group_reference_model
        security_group_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        security_group_model['network_interfaces'] = [
            network_interface_reference_model
        ]
        security_group_model['rules'] = [security_group_rule_model]
        security_group_model['vpc'] = vpc_reference_model

        # Construct a json representation of a SecurityGroupCollection model
        security_group_collection_model_json = {}
        security_group_collection_model_json[
            'first'] = security_group_collection_first_model
        security_group_collection_model_json['limit'] = 20
        security_group_collection_model_json[
            'next'] = security_group_collection_next_model
        security_group_collection_model_json['total_count'] = 132
        security_group_collection_model_json['security_groups'] = [
            security_group_model
        ]

        # Construct a model instance of SecurityGroupCollection by calling from_dict on the json representation
        security_group_collection_model = SecurityGroupCollection.from_dict(
            security_group_collection_model_json)
        assert security_group_collection_model != False

        # Construct a model instance of SecurityGroupCollection by calling from_dict on the json representation
        security_group_collection_model_dict = SecurityGroupCollection.from_dict(
            security_group_collection_model_json).__dict__
        security_group_collection_model2 = SecurityGroupCollection(
            **security_group_collection_model_dict)

        # Verify the model instances are equivalent
        assert security_group_collection_model == security_group_collection_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_collection_model_json2 = security_group_collection_model.to_dict(
        )
        assert security_group_collection_model_json2 == security_group_collection_model_json


class TestSecurityGroupCollectionFirst():
    """
    Test Class for SecurityGroupCollectionFirst
    """

    def test_security_group_collection_first_serialization(self):
        """
        Test serialization/deserialization for SecurityGroupCollectionFirst
        """

        # Construct a json representation of a SecurityGroupCollectionFirst model
        security_group_collection_first_model_json = {}
        security_group_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups?limit=20'

        # Construct a model instance of SecurityGroupCollectionFirst by calling from_dict on the json representation
        security_group_collection_first_model = SecurityGroupCollectionFirst.from_dict(
            security_group_collection_first_model_json)
        assert security_group_collection_first_model != False

        # Construct a model instance of SecurityGroupCollectionFirst by calling from_dict on the json representation
        security_group_collection_first_model_dict = SecurityGroupCollectionFirst.from_dict(
            security_group_collection_first_model_json).__dict__
        security_group_collection_first_model2 = SecurityGroupCollectionFirst(
            **security_group_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert security_group_collection_first_model == security_group_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_collection_first_model_json2 = security_group_collection_first_model.to_dict(
        )
        assert security_group_collection_first_model_json2 == security_group_collection_first_model_json


class TestSecurityGroupCollectionNext():
    """
    Test Class for SecurityGroupCollectionNext
    """

    def test_security_group_collection_next_serialization(self):
        """
        Test serialization/deserialization for SecurityGroupCollectionNext
        """

        # Construct a json representation of a SecurityGroupCollectionNext model
        security_group_collection_next_model_json = {}
        security_group_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of SecurityGroupCollectionNext by calling from_dict on the json representation
        security_group_collection_next_model = SecurityGroupCollectionNext.from_dict(
            security_group_collection_next_model_json)
        assert security_group_collection_next_model != False

        # Construct a model instance of SecurityGroupCollectionNext by calling from_dict on the json representation
        security_group_collection_next_model_dict = SecurityGroupCollectionNext.from_dict(
            security_group_collection_next_model_json).__dict__
        security_group_collection_next_model2 = SecurityGroupCollectionNext(
            **security_group_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert security_group_collection_next_model == security_group_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_collection_next_model_json2 = security_group_collection_next_model.to_dict(
        )
        assert security_group_collection_next_model_json2 == security_group_collection_next_model_json


class TestSecurityGroupPatch():
    """
    Test Class for SecurityGroupPatch
    """

    def test_security_group_patch_serialization(self):
        """
        Test serialization/deserialization for SecurityGroupPatch
        """

        # Construct a json representation of a SecurityGroupPatch model
        security_group_patch_model_json = {}
        security_group_patch_model_json['name'] = 'my-security-group'

        # Construct a model instance of SecurityGroupPatch by calling from_dict on the json representation
        security_group_patch_model = SecurityGroupPatch.from_dict(
            security_group_patch_model_json)
        assert security_group_patch_model != False

        # Construct a model instance of SecurityGroupPatch by calling from_dict on the json representation
        security_group_patch_model_dict = SecurityGroupPatch.from_dict(
            security_group_patch_model_json).__dict__
        security_group_patch_model2 = SecurityGroupPatch(
            **security_group_patch_model_dict)

        # Verify the model instances are equivalent
        assert security_group_patch_model == security_group_patch_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_patch_model_json2 = security_group_patch_model.to_dict()
        assert security_group_patch_model_json2 == security_group_patch_model_json


class TestSecurityGroupReference():
    """
    Test Class for SecurityGroupReference
    """

    def test_security_group_reference_serialization(self):
        """
        Test serialization/deserialization for SecurityGroupReference
        """

        # Construct a json representation of a SecurityGroupReference model
        security_group_reference_model_json = {}
        security_group_reference_model_json[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model_json['name'] = 'my-security-group'

        # Construct a model instance of SecurityGroupReference by calling from_dict on the json representation
        security_group_reference_model = SecurityGroupReference.from_dict(
            security_group_reference_model_json)
        assert security_group_reference_model != False

        # Construct a model instance of SecurityGroupReference by calling from_dict on the json representation
        security_group_reference_model_dict = SecurityGroupReference.from_dict(
            security_group_reference_model_json).__dict__
        security_group_reference_model2 = SecurityGroupReference(
            **security_group_reference_model_dict)

        # Verify the model instances are equivalent
        assert security_group_reference_model == security_group_reference_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_reference_model_json2 = security_group_reference_model.to_dict(
        )
        assert security_group_reference_model_json2 == security_group_reference_model_json


class TestSecurityGroupRuleCollection():
    """
    Test Class for SecurityGroupRuleCollection
    """

    def test_security_group_rule_collection_serialization(self):
        """
        Test serialization/deserialization for SecurityGroupRuleCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        security_group_rule_remote_model = {}  # SecurityGroupRuleRemoteIP
        security_group_rule_remote_model['address'] = '192.168.3.4'

        security_group_rule_model = {
        }  # SecurityGroupRuleSecurityGroupRuleProtocolTCPUDP
        security_group_rule_model['id'] = '6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_model['direction'] = 'inbound'
        security_group_rule_model['ip_version'] = 'ipv4'
        security_group_rule_model['protocol'] = 'udp'
        security_group_rule_model['remote'] = security_group_rule_remote_model
        security_group_rule_model['port_max'] = 22
        security_group_rule_model['port_min'] = 22

        # Construct a json representation of a SecurityGroupRuleCollection model
        security_group_rule_collection_model_json = {}
        security_group_rule_collection_model_json['rules'] = [
            security_group_rule_model
        ]

        # Construct a model instance of SecurityGroupRuleCollection by calling from_dict on the json representation
        security_group_rule_collection_model = SecurityGroupRuleCollection.from_dict(
            security_group_rule_collection_model_json)
        assert security_group_rule_collection_model != False

        # Construct a model instance of SecurityGroupRuleCollection by calling from_dict on the json representation
        security_group_rule_collection_model_dict = SecurityGroupRuleCollection.from_dict(
            security_group_rule_collection_model_json).__dict__
        security_group_rule_collection_model2 = SecurityGroupRuleCollection(
            **security_group_rule_collection_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_collection_model == security_group_rule_collection_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_collection_model_json2 = security_group_rule_collection_model.to_dict(
        )
        assert security_group_rule_collection_model_json2 == security_group_rule_collection_model_json


class TestSecurityGroupRulePatch():
    """
    Test Class for SecurityGroupRulePatch
    """

    def test_security_group_rule_patch_serialization(self):
        """
        Test serialization/deserialization for SecurityGroupRulePatch
        """

        # Construct dict forms of any model objects needed in order to build this model.

        security_group_rule_patch_remote_model = {
        }  # SecurityGroupRulePatchRemoteCIDR
        security_group_rule_patch_remote_model['cidr_block'] = '10.0.0.0/16'

        # Construct a json representation of a SecurityGroupRulePatch model
        security_group_rule_patch_model_json = {}
        security_group_rule_patch_model_json[
            'remote'] = security_group_rule_patch_remote_model
        security_group_rule_patch_model_json['direction'] = 'inbound'
        security_group_rule_patch_model_json['ip_version'] = 'ipv4'
        security_group_rule_patch_model_json['code'] = 0
        security_group_rule_patch_model_json['port_max'] = 22
        security_group_rule_patch_model_json['port_min'] = 22
        security_group_rule_patch_model_json['type'] = 8

        # Construct a model instance of SecurityGroupRulePatch by calling from_dict on the json representation
        security_group_rule_patch_model = SecurityGroupRulePatch.from_dict(
            security_group_rule_patch_model_json)
        assert security_group_rule_patch_model != False

        # Construct a model instance of SecurityGroupRulePatch by calling from_dict on the json representation
        security_group_rule_patch_model_dict = SecurityGroupRulePatch.from_dict(
            security_group_rule_patch_model_json).__dict__
        security_group_rule_patch_model2 = SecurityGroupRulePatch(
            **security_group_rule_patch_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_patch_model == security_group_rule_patch_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_patch_model_json2 = security_group_rule_patch_model.to_dict(
        )
        assert security_group_rule_patch_model_json2 == security_group_rule_patch_model_json


class TestSubnet():
    """
    Test Class for Subnet
    """

    def test_subnet_serialization(self):
        """
        Test serialization/deserialization for Subnet
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        network_acl_reference_model = {}  # NetworkACLReference
        network_acl_reference_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model['name'] = 'my-network-acl'

        public_gateway_reference_model = {}  # PublicGatewayReference
        public_gateway_reference_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_reference_model['name'] = 'my-public-gateway'
        public_gateway_reference_model['resource_type'] = 'public_gateway'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model['name'] = 'us-south-1'
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        # Construct a json representation of a Subnet model
        subnet_model_json = {}
        subnet_model_json['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_model_json['name'] = 'my-subnet'
        subnet_model_json['resource_group'] = resource_group_reference_model
        subnet_model_json['available_ipv4_address_count'] = 15
        subnet_model_json['network_acl'] = network_acl_reference_model
        subnet_model_json['total_ipv4_address_count'] = 256
        subnet_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        subnet_model_json['ipv4_cidr_block'] = '10.0.0.0/24'
        subnet_model_json['public_gateway'] = public_gateway_reference_model
        subnet_model_json['status'] = 'available'
        subnet_model_json['vpc'] = vpc_reference_model
        subnet_model_json['zone'] = zone_reference_model
        subnet_model_json['ip_version'] = 'ipv4'

        # Construct a model instance of Subnet by calling from_dict on the json representation
        subnet_model = Subnet.from_dict(subnet_model_json)
        assert subnet_model != False

        # Construct a model instance of Subnet by calling from_dict on the json representation
        subnet_model_dict = Subnet.from_dict(subnet_model_json).__dict__
        subnet_model2 = Subnet(**subnet_model_dict)

        # Verify the model instances are equivalent
        assert subnet_model == subnet_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_model_json2 = subnet_model.to_dict()
        assert subnet_model_json2 == subnet_model_json


class TestSubnetCollection():
    """
    Test Class for SubnetCollection
    """

    def test_subnet_collection_serialization(self):
        """
        Test serialization/deserialization for SubnetCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        subnet_collection_first_model = {}  # SubnetCollectionFirst
        subnet_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets?limit=20'

        subnet_collection_next_model = {}  # SubnetCollectionNext
        subnet_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        network_acl_reference_model = {}  # NetworkACLReference
        network_acl_reference_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model['name'] = 'my-network-acl'

        public_gateway_reference_model = {}  # PublicGatewayReference
        public_gateway_reference_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241'
        public_gateway_reference_model['name'] = 'my-public-gateway'
        public_gateway_reference_model['resource_type'] = 'public_gateway'

        vpc_reference_model = {}  # VPCReference
        vpc_reference_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model['name'] = 'my-vpc'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model['name'] = 'us-south-1'
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        subnet_model = {}  # Subnet
        subnet_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_model['name'] = 'my-subnet'
        subnet_model['resource_group'] = resource_group_reference_model
        subnet_model['available_ipv4_address_count'] = 15
        subnet_model['network_acl'] = network_acl_reference_model
        subnet_model['total_ipv4_address_count'] = 256
        subnet_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        subnet_model['ipv4_cidr_block'] = '10.0.0.0/24'
        subnet_model['public_gateway'] = public_gateway_reference_model
        subnet_model['status'] = 'available'
        subnet_model['vpc'] = vpc_reference_model
        subnet_model['zone'] = zone_reference_model
        subnet_model['ip_version'] = 'ipv4'

        # Construct a json representation of a SubnetCollection model
        subnet_collection_model_json = {}
        subnet_collection_model_json['first'] = subnet_collection_first_model
        subnet_collection_model_json['limit'] = 20
        subnet_collection_model_json['next'] = subnet_collection_next_model
        subnet_collection_model_json['total_count'] = 132
        subnet_collection_model_json['subnets'] = [subnet_model]

        # Construct a model instance of SubnetCollection by calling from_dict on the json representation
        subnet_collection_model = SubnetCollection.from_dict(
            subnet_collection_model_json)
        assert subnet_collection_model != False

        # Construct a model instance of SubnetCollection by calling from_dict on the json representation
        subnet_collection_model_dict = SubnetCollection.from_dict(
            subnet_collection_model_json).__dict__
        subnet_collection_model2 = SubnetCollection(
            **subnet_collection_model_dict)

        # Verify the model instances are equivalent
        assert subnet_collection_model == subnet_collection_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_collection_model_json2 = subnet_collection_model.to_dict()
        assert subnet_collection_model_json2 == subnet_collection_model_json


class TestSubnetCollectionFirst():
    """
    Test Class for SubnetCollectionFirst
    """

    def test_subnet_collection_first_serialization(self):
        """
        Test serialization/deserialization for SubnetCollectionFirst
        """

        # Construct a json representation of a SubnetCollectionFirst model
        subnet_collection_first_model_json = {}
        subnet_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets?limit=20'

        # Construct a model instance of SubnetCollectionFirst by calling from_dict on the json representation
        subnet_collection_first_model = SubnetCollectionFirst.from_dict(
            subnet_collection_first_model_json)
        assert subnet_collection_first_model != False

        # Construct a model instance of SubnetCollectionFirst by calling from_dict on the json representation
        subnet_collection_first_model_dict = SubnetCollectionFirst.from_dict(
            subnet_collection_first_model_json).__dict__
        subnet_collection_first_model2 = SubnetCollectionFirst(
            **subnet_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert subnet_collection_first_model == subnet_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_collection_first_model_json2 = subnet_collection_first_model.to_dict(
        )
        assert subnet_collection_first_model_json2 == subnet_collection_first_model_json


class TestSubnetCollectionNext():
    """
    Test Class for SubnetCollectionNext
    """

    def test_subnet_collection_next_serialization(self):
        """
        Test serialization/deserialization for SubnetCollectionNext
        """

        # Construct a json representation of a SubnetCollectionNext model
        subnet_collection_next_model_json = {}
        subnet_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of SubnetCollectionNext by calling from_dict on the json representation
        subnet_collection_next_model = SubnetCollectionNext.from_dict(
            subnet_collection_next_model_json)
        assert subnet_collection_next_model != False

        # Construct a model instance of SubnetCollectionNext by calling from_dict on the json representation
        subnet_collection_next_model_dict = SubnetCollectionNext.from_dict(
            subnet_collection_next_model_json).__dict__
        subnet_collection_next_model2 = SubnetCollectionNext(
            **subnet_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert subnet_collection_next_model == subnet_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_collection_next_model_json2 = subnet_collection_next_model.to_dict(
        )
        assert subnet_collection_next_model_json2 == subnet_collection_next_model_json


class TestSubnetPatch():
    """
    Test Class for SubnetPatch
    """

    def test_subnet_patch_serialization(self):
        """
        Test serialization/deserialization for SubnetPatch
        """

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_identity_model = {}  # NetworkACLIdentityById
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        public_gateway_identity_model = {}  # PublicGatewayIdentityById
        public_gateway_identity_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Construct a json representation of a SubnetPatch model
        subnet_patch_model_json = {}
        subnet_patch_model_json['name'] = 'my-subnet'
        subnet_patch_model_json['network_acl'] = network_acl_identity_model
        subnet_patch_model_json[
            'public_gateway'] = public_gateway_identity_model

        # Construct a model instance of SubnetPatch by calling from_dict on the json representation
        subnet_patch_model = SubnetPatch.from_dict(subnet_patch_model_json)
        assert subnet_patch_model != False

        # Construct a model instance of SubnetPatch by calling from_dict on the json representation
        subnet_patch_model_dict = SubnetPatch.from_dict(
            subnet_patch_model_json).__dict__
        subnet_patch_model2 = SubnetPatch(**subnet_patch_model_dict)

        # Verify the model instances are equivalent
        assert subnet_patch_model == subnet_patch_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_patch_model_json2 = subnet_patch_model.to_dict()
        assert subnet_patch_model_json2 == subnet_patch_model_json


class TestSubnetReference():
    """
    Test Class for SubnetReference
    """

    def test_subnet_reference_serialization(self):
        """
        Test serialization/deserialization for SubnetReference
        """

        # Construct a json representation of a SubnetReference model
        subnet_reference_model_json = {}
        subnet_reference_model_json[
            'id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model_json['name'] = 'my-subnet'

        # Construct a model instance of SubnetReference by calling from_dict on the json representation
        subnet_reference_model = SubnetReference.from_dict(
            subnet_reference_model_json)
        assert subnet_reference_model != False

        # Construct a model instance of SubnetReference by calling from_dict on the json representation
        subnet_reference_model_dict = SubnetReference.from_dict(
            subnet_reference_model_json).__dict__
        subnet_reference_model2 = SubnetReference(**subnet_reference_model_dict)

        # Verify the model instances are equivalent
        assert subnet_reference_model == subnet_reference_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_reference_model_json2 = subnet_reference_model.to_dict()
        assert subnet_reference_model_json2 == subnet_reference_model_json


class TestVPC():
    """
    Test Class for VPC
    """

    def test_vpc_serialization(self):
        """
        Test serialization/deserialization for VPC
        """

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_reference_model = {}  # NetworkACLReference
        network_acl_reference_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model['name'] = 'my-network-acl'

        security_group_reference_model = {}  # SecurityGroupReference
        security_group_reference_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model['name'] = 'my-security-group'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        ip_model = {}  # IP
        ip_model['address'] = '192.168.3.4'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model['name'] = 'us-south-1'
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        vpccse_source_ip_model = {}  # VPCCSESourceIP
        vpccse_source_ip_model['ip'] = ip_model
        vpccse_source_ip_model['zone'] = zone_reference_model

        # Construct a json representation of a VPC model
        vpc_model_json = {}
        vpc_model_json['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_model_json['name'] = 'my-vpc'
        vpc_model_json['default_network_acl'] = network_acl_reference_model
        vpc_model_json['classic_access'] = False
        vpc_model_json[
            'default_security_group'] = security_group_reference_model
        vpc_model_json['resource_group'] = resource_group_reference_model
        vpc_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        vpc_model_json['cse_source_ips'] = [vpccse_source_ip_model]
        vpc_model_json['status'] = 'available'

        # Construct a model instance of VPC by calling from_dict on the json representation
        vpc_model = VPC.from_dict(vpc_model_json)
        assert vpc_model != False

        # Construct a model instance of VPC by calling from_dict on the json representation
        vpc_model_dict = VPC.from_dict(vpc_model_json).__dict__
        vpc_model2 = VPC(**vpc_model_dict)

        # Verify the model instances are equivalent
        assert vpc_model == vpc_model2

        # Convert model instance back to dict and verify no loss of data
        vpc_model_json2 = vpc_model.to_dict()
        assert vpc_model_json2 == vpc_model_json


class TestVPCCSESourceIP():
    """
    Test Class for VPCCSESourceIP
    """

    def test_vpccse_source_ip_serialization(self):
        """
        Test serialization/deserialization for VPCCSESourceIP
        """

        # Construct dict forms of any model objects needed in order to build this model.

        ip_model = {}  # IP
        ip_model['address'] = '192.168.3.4'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model['name'] = 'us-south-1'
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        # Construct a json representation of a VPCCSESourceIP model
        vpccse_source_ip_model_json = {}
        vpccse_source_ip_model_json['ip'] = ip_model
        vpccse_source_ip_model_json['zone'] = zone_reference_model

        # Construct a model instance of VPCCSESourceIP by calling from_dict on the json representation
        vpccse_source_ip_model = VPCCSESourceIP.from_dict(
            vpccse_source_ip_model_json)
        assert vpccse_source_ip_model != False

        # Construct a model instance of VPCCSESourceIP by calling from_dict on the json representation
        vpccse_source_ip_model_dict = VPCCSESourceIP.from_dict(
            vpccse_source_ip_model_json).__dict__
        vpccse_source_ip_model2 = VPCCSESourceIP(**vpccse_source_ip_model_dict)

        # Verify the model instances are equivalent
        assert vpccse_source_ip_model == vpccse_source_ip_model2

        # Convert model instance back to dict and verify no loss of data
        vpccse_source_ip_model_json2 = vpccse_source_ip_model.to_dict()
        assert vpccse_source_ip_model_json2 == vpccse_source_ip_model_json


class TestVPCCollection():
    """
    Test Class for VPCCollection
    """

    def test_vpc_collection_serialization(self):
        """
        Test serialization/deserialization for VPCCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        vpc_collection_first_model = {}  # VPCCollectionFirst
        vpc_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs?limit=20'

        vpc_collection_next_model = {}  # VPCCollectionNext
        vpc_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        network_acl_reference_model = {}  # NetworkACLReference
        network_acl_reference_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf'
        network_acl_reference_model['name'] = 'my-network-acl'

        security_group_reference_model = {}  # SecurityGroupReference
        security_group_reference_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_reference_model['name'] = 'my-security-group'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        ip_model = {}  # IP
        ip_model['address'] = '192.168.3.4'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model['name'] = 'us-south-1'
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        vpccse_source_ip_model = {}  # VPCCSESourceIP
        vpccse_source_ip_model['ip'] = ip_model
        vpccse_source_ip_model['zone'] = zone_reference_model

        vpc_model = {}  # VPC
        vpc_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_model['name'] = 'my-vpc'
        vpc_model['default_network_acl'] = network_acl_reference_model
        vpc_model['classic_access'] = False
        vpc_model['default_security_group'] = security_group_reference_model
        vpc_model['resource_group'] = resource_group_reference_model
        vpc_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        vpc_model['cse_source_ips'] = [vpccse_source_ip_model]
        vpc_model['status'] = 'available'

        # Construct a json representation of a VPCCollection model
        vpc_collection_model_json = {}
        vpc_collection_model_json['first'] = vpc_collection_first_model
        vpc_collection_model_json['limit'] = 20
        vpc_collection_model_json['next'] = vpc_collection_next_model
        vpc_collection_model_json['total_count'] = 132
        vpc_collection_model_json['vpcs'] = [vpc_model]

        # Construct a model instance of VPCCollection by calling from_dict on the json representation
        vpc_collection_model = VPCCollection.from_dict(
            vpc_collection_model_json)
        assert vpc_collection_model != False

        # Construct a model instance of VPCCollection by calling from_dict on the json representation
        vpc_collection_model_dict = VPCCollection.from_dict(
            vpc_collection_model_json).__dict__
        vpc_collection_model2 = VPCCollection(**vpc_collection_model_dict)

        # Verify the model instances are equivalent
        assert vpc_collection_model == vpc_collection_model2

        # Convert model instance back to dict and verify no loss of data
        vpc_collection_model_json2 = vpc_collection_model.to_dict()
        assert vpc_collection_model_json2 == vpc_collection_model_json


class TestVPCCollectionFirst():
    """
    Test Class for VPCCollectionFirst
    """

    def test_vpc_collection_first_serialization(self):
        """
        Test serialization/deserialization for VPCCollectionFirst
        """

        # Construct a json representation of a VPCCollectionFirst model
        vpc_collection_first_model_json = {}
        vpc_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs?limit=20'

        # Construct a model instance of VPCCollectionFirst by calling from_dict on the json representation
        vpc_collection_first_model = VPCCollectionFirst.from_dict(
            vpc_collection_first_model_json)
        assert vpc_collection_first_model != False

        # Construct a model instance of VPCCollectionFirst by calling from_dict on the json representation
        vpc_collection_first_model_dict = VPCCollectionFirst.from_dict(
            vpc_collection_first_model_json).__dict__
        vpc_collection_first_model2 = VPCCollectionFirst(
            **vpc_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert vpc_collection_first_model == vpc_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        vpc_collection_first_model_json2 = vpc_collection_first_model.to_dict()
        assert vpc_collection_first_model_json2 == vpc_collection_first_model_json


class TestVPCCollectionNext():
    """
    Test Class for VPCCollectionNext
    """

    def test_vpc_collection_next_serialization(self):
        """
        Test serialization/deserialization for VPCCollectionNext
        """

        # Construct a json representation of a VPCCollectionNext model
        vpc_collection_next_model_json = {}
        vpc_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of VPCCollectionNext by calling from_dict on the json representation
        vpc_collection_next_model = VPCCollectionNext.from_dict(
            vpc_collection_next_model_json)
        assert vpc_collection_next_model != False

        # Construct a model instance of VPCCollectionNext by calling from_dict on the json representation
        vpc_collection_next_model_dict = VPCCollectionNext.from_dict(
            vpc_collection_next_model_json).__dict__
        vpc_collection_next_model2 = VPCCollectionNext(
            **vpc_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert vpc_collection_next_model == vpc_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        vpc_collection_next_model_json2 = vpc_collection_next_model.to_dict()
        assert vpc_collection_next_model_json2 == vpc_collection_next_model_json


class TestVPCPatch():
    """
    Test Class for VPCPatch
    """

    def test_vpc_patch_serialization(self):
        """
        Test serialization/deserialization for VPCPatch
        """

        # Construct a json representation of a VPCPatch model
        vpc_patch_model_json = {}
        vpc_patch_model_json['name'] = 'my-vpc'

        # Construct a model instance of VPCPatch by calling from_dict on the json representation
        vpc_patch_model = VPCPatch.from_dict(vpc_patch_model_json)
        assert vpc_patch_model != False

        # Construct a model instance of VPCPatch by calling from_dict on the json representation
        vpc_patch_model_dict = VPCPatch.from_dict(vpc_patch_model_json).__dict__
        vpc_patch_model2 = VPCPatch(**vpc_patch_model_dict)

        # Verify the model instances are equivalent
        assert vpc_patch_model == vpc_patch_model2

        # Convert model instance back to dict and verify no loss of data
        vpc_patch_model_json2 = vpc_patch_model.to_dict()
        assert vpc_patch_model_json2 == vpc_patch_model_json


class TestVPCReference():
    """
    Test Class for VPCReference
    """

    def test_vpc_reference_serialization(self):
        """
        Test serialization/deserialization for VPCReference
        """

        # Construct a json representation of a VPCReference model
        vpc_reference_model_json = {}
        vpc_reference_model_json['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        vpc_reference_model_json['name'] = 'my-vpc'

        # Construct a model instance of VPCReference by calling from_dict on the json representation
        vpc_reference_model = VPCReference.from_dict(vpc_reference_model_json)
        assert vpc_reference_model != False

        # Construct a model instance of VPCReference by calling from_dict on the json representation
        vpc_reference_model_dict = VPCReference.from_dict(
            vpc_reference_model_json).__dict__
        vpc_reference_model2 = VPCReference(**vpc_reference_model_dict)

        # Verify the model instances are equivalent
        assert vpc_reference_model == vpc_reference_model2

        # Convert model instance back to dict and verify no loss of data
        vpc_reference_model_json2 = vpc_reference_model.to_dict()
        assert vpc_reference_model_json2 == vpc_reference_model_json


class TestVPNGateway():
    """
    Test Class for VPNGateway
    """

    def test_vpn_gateway_serialization(self):
        """
        Test serialization/deserialization for VPNGateway
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        vpn_gateway_public_ip_model = {}  # VPNGatewayPublicIp
        vpn_gateway_public_ip_model['address'] = '192.168.3.4'

        vpn_gateway_connection_reference_model = {
        }  # VPNGatewayConnectionReference
        vpn_gateway_connection_reference_model[
            'id'] = 'a10a5771-dc23-442c-8460-c3601d8542f7'
        vpn_gateway_connection_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b'
        vpn_gateway_connection_reference_model['name'] = 'my-vpn-connection'
        vpn_gateway_connection_reference_model[
            'resource_type'] = 'vpn_gateway_connection'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        # Construct a json representation of a VPNGateway model
        vpn_gateway_model_json = {}
        vpn_gateway_model_json['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'
        vpn_gateway_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b'
        vpn_gateway_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b'
        vpn_gateway_model_json['name'] = 'my-vpn-gateway'
        vpn_gateway_model_json['resource_type'] = 'vpn_gateway'
        vpn_gateway_model_json[
            'resource_group'] = resource_group_reference_model
        vpn_gateway_model_json['public_ip'] = vpn_gateway_public_ip_model
        vpn_gateway_model_json['connections'] = [
            vpn_gateway_connection_reference_model
        ]
        vpn_gateway_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        vpn_gateway_model_json['status'] = 'available'
        vpn_gateway_model_json['subnet'] = subnet_reference_model

        # Construct a model instance of VPNGateway by calling from_dict on the json representation
        vpn_gateway_model = VPNGateway.from_dict(vpn_gateway_model_json)
        assert vpn_gateway_model != False

        # Construct a model instance of VPNGateway by calling from_dict on the json representation
        vpn_gateway_model_dict = VPNGateway.from_dict(
            vpn_gateway_model_json).__dict__
        vpn_gateway_model2 = VPNGateway(**vpn_gateway_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_model == vpn_gateway_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_model_json2 = vpn_gateway_model.to_dict()
        assert vpn_gateway_model_json2 == vpn_gateway_model_json


class TestVPNGatewayCollection():
    """
    Test Class for VPNGatewayCollection
    """

    def test_vpn_gateway_collection_serialization(self):
        """
        Test serialization/deserialization for VPNGatewayCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        vpn_gateway_collection_first_model = {}  # VPNGatewayCollectionFirst
        vpn_gateway_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?limit=20'

        vpn_gateway_collection_next_model = {}  # VPNGatewayCollectionNext
        vpn_gateway_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        vpn_gateway_public_ip_model = {}  # VPNGatewayPublicIp
        vpn_gateway_public_ip_model['address'] = '192.168.3.4'

        vpn_gateway_connection_reference_model = {
        }  # VPNGatewayConnectionReference
        vpn_gateway_connection_reference_model[
            'id'] = 'a10a5771-dc23-442c-8460-c3601d8542f7'
        vpn_gateway_connection_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b'
        vpn_gateway_connection_reference_model['name'] = 'my-vpn-connection'
        vpn_gateway_connection_reference_model[
            'resource_type'] = 'vpn_gateway_connection'

        subnet_reference_model = {}  # SubnetReference
        subnet_reference_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        subnet_reference_model['name'] = 'my-subnet'

        vpn_gateway_model = {}  # VPNGateway
        vpn_gateway_model['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'
        vpn_gateway_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b'
        vpn_gateway_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b'
        vpn_gateway_model['name'] = 'my-vpn-gateway'
        vpn_gateway_model['resource_type'] = 'vpn_gateway'
        vpn_gateway_model['resource_group'] = resource_group_reference_model
        vpn_gateway_model['public_ip'] = vpn_gateway_public_ip_model
        vpn_gateway_model['connections'] = [
            vpn_gateway_connection_reference_model
        ]
        vpn_gateway_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        vpn_gateway_model['status'] = 'available'
        vpn_gateway_model['subnet'] = subnet_reference_model

        # Construct a json representation of a VPNGatewayCollection model
        vpn_gateway_collection_model_json = {}
        vpn_gateway_collection_model_json[
            'first'] = vpn_gateway_collection_first_model
        vpn_gateway_collection_model_json['limit'] = 20
        vpn_gateway_collection_model_json[
            'next'] = vpn_gateway_collection_next_model
        vpn_gateway_collection_model_json['total_count'] = 132
        vpn_gateway_collection_model_json['vpn_gateways'] = [vpn_gateway_model]

        # Construct a model instance of VPNGatewayCollection by calling from_dict on the json representation
        vpn_gateway_collection_model = VPNGatewayCollection.from_dict(
            vpn_gateway_collection_model_json)
        assert vpn_gateway_collection_model != False

        # Construct a model instance of VPNGatewayCollection by calling from_dict on the json representation
        vpn_gateway_collection_model_dict = VPNGatewayCollection.from_dict(
            vpn_gateway_collection_model_json).__dict__
        vpn_gateway_collection_model2 = VPNGatewayCollection(
            **vpn_gateway_collection_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_collection_model == vpn_gateway_collection_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_collection_model_json2 = vpn_gateway_collection_model.to_dict(
        )
        assert vpn_gateway_collection_model_json2 == vpn_gateway_collection_model_json


class TestVPNGatewayCollectionFirst():
    """
    Test Class for VPNGatewayCollectionFirst
    """

    def test_vpn_gateway_collection_first_serialization(self):
        """
        Test serialization/deserialization for VPNGatewayCollectionFirst
        """

        # Construct a json representation of a VPNGatewayCollectionFirst model
        vpn_gateway_collection_first_model_json = {}
        vpn_gateway_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?limit=20'

        # Construct a model instance of VPNGatewayCollectionFirst by calling from_dict on the json representation
        vpn_gateway_collection_first_model = VPNGatewayCollectionFirst.from_dict(
            vpn_gateway_collection_first_model_json)
        assert vpn_gateway_collection_first_model != False

        # Construct a model instance of VPNGatewayCollectionFirst by calling from_dict on the json representation
        vpn_gateway_collection_first_model_dict = VPNGatewayCollectionFirst.from_dict(
            vpn_gateway_collection_first_model_json).__dict__
        vpn_gateway_collection_first_model2 = VPNGatewayCollectionFirst(
            **vpn_gateway_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_collection_first_model == vpn_gateway_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_collection_first_model_json2 = vpn_gateway_collection_first_model.to_dict(
        )
        assert vpn_gateway_collection_first_model_json2 == vpn_gateway_collection_first_model_json


class TestVPNGatewayCollectionNext():
    """
    Test Class for VPNGatewayCollectionNext
    """

    def test_vpn_gateway_collection_next_serialization(self):
        """
        Test serialization/deserialization for VPNGatewayCollectionNext
        """

        # Construct a json representation of a VPNGatewayCollectionNext model
        vpn_gateway_collection_next_model_json = {}
        vpn_gateway_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20'

        # Construct a model instance of VPNGatewayCollectionNext by calling from_dict on the json representation
        vpn_gateway_collection_next_model = VPNGatewayCollectionNext.from_dict(
            vpn_gateway_collection_next_model_json)
        assert vpn_gateway_collection_next_model != False

        # Construct a model instance of VPNGatewayCollectionNext by calling from_dict on the json representation
        vpn_gateway_collection_next_model_dict = VPNGatewayCollectionNext.from_dict(
            vpn_gateway_collection_next_model_json).__dict__
        vpn_gateway_collection_next_model2 = VPNGatewayCollectionNext(
            **vpn_gateway_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_collection_next_model == vpn_gateway_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_collection_next_model_json2 = vpn_gateway_collection_next_model.to_dict(
        )
        assert vpn_gateway_collection_next_model_json2 == vpn_gateway_collection_next_model_json


class TestVPNGatewayConnection():
    """
    Test Class for VPNGatewayConnection
    """

    def test_vpn_gateway_connection_serialization(self):
        """
        Test serialization/deserialization for VPNGatewayConnection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        vpn_gateway_connection_dpd_model = {}  # VPNGatewayConnectionDPD
        vpn_gateway_connection_dpd_model['action'] = 'restart'
        vpn_gateway_connection_dpd_model['interval'] = 30
        vpn_gateway_connection_dpd_model['timeout'] = 120

        ike_policy_reference_model = {}  # IKEPolicyReference
        ike_policy_reference_model[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'
        ike_policy_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b'
        ike_policy_reference_model['name'] = 'my-ike-policy'
        ike_policy_reference_model['resource_type'] = 'ike_policy'

        i_psec_policy_reference_model = {}  # IPsecPolicyReference
        i_psec_policy_reference_model[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'
        i_psec_policy_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b'
        i_psec_policy_reference_model['name'] = 'my-ipsec-policy'
        i_psec_policy_reference_model['resource_type'] = 'ipsec_policy'

        # Construct a json representation of a VPNGatewayConnection model
        vpn_gateway_connection_model_json = {}
        vpn_gateway_connection_model_json[
            'id'] = 'a10a5771-dc23-442c-8460-c3601d8542f7'
        vpn_gateway_connection_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b'
        vpn_gateway_connection_model_json['name'] = 'my-vpn-connection'
        vpn_gateway_connection_model_json[
            'resource_type'] = 'vpn_gateway_connection'
        vpn_gateway_connection_model_json['admin_state_up'] = True
        vpn_gateway_connection_model_json['peer_address'] = '169.21.50.5'
        vpn_gateway_connection_model_json['psk'] = 'lkj14b1oi0alcniejkso'
        vpn_gateway_connection_model_json['local_cidrs'] = ['192.168.1.0/24']
        vpn_gateway_connection_model_json['peer_cidrs'] = ['10.45.1.0/24']
        vpn_gateway_connection_model_json['route_mode'] = 'policy'
        vpn_gateway_connection_model_json['authentication_mode'] = 'psk'
        vpn_gateway_connection_model_json['status'] = 'down'
        vpn_gateway_connection_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        vpn_gateway_connection_model_json[
            'dead_peer_detection'] = vpn_gateway_connection_dpd_model
        vpn_gateway_connection_model_json[
            'ike_policy'] = ike_policy_reference_model
        vpn_gateway_connection_model_json[
            'ipsec_policy'] = i_psec_policy_reference_model

        # Construct a model instance of VPNGatewayConnection by calling from_dict on the json representation
        vpn_gateway_connection_model = VPNGatewayConnection.from_dict(
            vpn_gateway_connection_model_json)
        assert vpn_gateway_connection_model != False

        # Construct a model instance of VPNGatewayConnection by calling from_dict on the json representation
        vpn_gateway_connection_model_dict = VPNGatewayConnection.from_dict(
            vpn_gateway_connection_model_json).__dict__
        vpn_gateway_connection_model2 = VPNGatewayConnection(
            **vpn_gateway_connection_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_connection_model == vpn_gateway_connection_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_connection_model_json2 = vpn_gateway_connection_model.to_dict(
        )
        assert vpn_gateway_connection_model_json2 == vpn_gateway_connection_model_json


class TestVPNGatewayConnectionCollection():
    """
    Test Class for VPNGatewayConnectionCollection
    """

    def test_vpn_gateway_connection_collection_serialization(self):
        """
        Test serialization/deserialization for VPNGatewayConnectionCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        vpn_gateway_connection_dpd_model = {}  # VPNGatewayConnectionDPD
        vpn_gateway_connection_dpd_model['action'] = 'restart'
        vpn_gateway_connection_dpd_model['interval'] = 30
        vpn_gateway_connection_dpd_model['timeout'] = 120

        ike_policy_reference_model = {}  # IKEPolicyReference
        ike_policy_reference_model[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'
        ike_policy_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b'
        ike_policy_reference_model['name'] = 'my-ike-policy'
        ike_policy_reference_model['resource_type'] = 'ike_policy'

        i_psec_policy_reference_model = {}  # IPsecPolicyReference
        i_psec_policy_reference_model[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'
        i_psec_policy_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b'
        i_psec_policy_reference_model['name'] = 'my-ipsec-policy'
        i_psec_policy_reference_model['resource_type'] = 'ipsec_policy'

        vpn_gateway_connection_model = {}  # VPNGatewayConnection
        vpn_gateway_connection_model[
            'id'] = 'a10a5771-dc23-442c-8460-c3601d8542f7'
        vpn_gateway_connection_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b'
        vpn_gateway_connection_model['name'] = 'my-vpn-connection'
        vpn_gateway_connection_model['resource_type'] = 'vpn_gateway_connection'
        vpn_gateway_connection_model['admin_state_up'] = True
        vpn_gateway_connection_model['peer_address'] = '169.21.50.5'
        vpn_gateway_connection_model['psk'] = 'lkj14b1oi0alcniejkso'
        vpn_gateway_connection_model['local_cidrs'] = ['192.168.1.0/24']
        vpn_gateway_connection_model['peer_cidrs'] = ['10.45.1.0/24']
        vpn_gateway_connection_model['route_mode'] = 'policy'
        vpn_gateway_connection_model['authentication_mode'] = 'psk'
        vpn_gateway_connection_model['status'] = 'down'
        vpn_gateway_connection_model[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        vpn_gateway_connection_model[
            'dead_peer_detection'] = vpn_gateway_connection_dpd_model
        vpn_gateway_connection_model['ike_policy'] = ike_policy_reference_model
        vpn_gateway_connection_model[
            'ipsec_policy'] = i_psec_policy_reference_model

        # Construct a json representation of a VPNGatewayConnectionCollection model
        vpn_gateway_connection_collection_model_json = {}
        vpn_gateway_connection_collection_model_json['connections'] = [
            vpn_gateway_connection_model
        ]

        # Construct a model instance of VPNGatewayConnectionCollection by calling from_dict on the json representation
        vpn_gateway_connection_collection_model = VPNGatewayConnectionCollection.from_dict(
            vpn_gateway_connection_collection_model_json)
        assert vpn_gateway_connection_collection_model != False

        # Construct a model instance of VPNGatewayConnectionCollection by calling from_dict on the json representation
        vpn_gateway_connection_collection_model_dict = VPNGatewayConnectionCollection.from_dict(
            vpn_gateway_connection_collection_model_json).__dict__
        vpn_gateway_connection_collection_model2 = VPNGatewayConnectionCollection(
            **vpn_gateway_connection_collection_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_connection_collection_model == vpn_gateway_connection_collection_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_connection_collection_model_json2 = vpn_gateway_connection_collection_model.to_dict(
        )
        assert vpn_gateway_connection_collection_model_json2 == vpn_gateway_connection_collection_model_json


class TestVPNGatewayConnectionDPD():
    """
    Test Class for VPNGatewayConnectionDPD
    """

    def test_vpn_gateway_connection_dpd_serialization(self):
        """
        Test serialization/deserialization for VPNGatewayConnectionDPD
        """

        # Construct a json representation of a VPNGatewayConnectionDPD model
        vpn_gateway_connection_dpd_model_json = {}
        vpn_gateway_connection_dpd_model_json['action'] = 'restart'
        vpn_gateway_connection_dpd_model_json['interval'] = 30
        vpn_gateway_connection_dpd_model_json['timeout'] = 120

        # Construct a model instance of VPNGatewayConnectionDPD by calling from_dict on the json representation
        vpn_gateway_connection_dpd_model = VPNGatewayConnectionDPD.from_dict(
            vpn_gateway_connection_dpd_model_json)
        assert vpn_gateway_connection_dpd_model != False

        # Construct a model instance of VPNGatewayConnectionDPD by calling from_dict on the json representation
        vpn_gateway_connection_dpd_model_dict = VPNGatewayConnectionDPD.from_dict(
            vpn_gateway_connection_dpd_model_json).__dict__
        vpn_gateway_connection_dpd_model2 = VPNGatewayConnectionDPD(
            **vpn_gateway_connection_dpd_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_connection_dpd_model == vpn_gateway_connection_dpd_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_connection_dpd_model_json2 = vpn_gateway_connection_dpd_model.to_dict(
        )
        assert vpn_gateway_connection_dpd_model_json2 == vpn_gateway_connection_dpd_model_json


class TestVPNGatewayConnectionDPDPrototype():
    """
    Test Class for VPNGatewayConnectionDPDPrototype
    """

    def test_vpn_gateway_connection_dpd_prototype_serialization(self):
        """
        Test serialization/deserialization for VPNGatewayConnectionDPDPrototype
        """

        # Construct a json representation of a VPNGatewayConnectionDPDPrototype model
        vpn_gateway_connection_dpd_prototype_model_json = {}
        vpn_gateway_connection_dpd_prototype_model_json['action'] = 'restart'
        vpn_gateway_connection_dpd_prototype_model_json['interval'] = 30
        vpn_gateway_connection_dpd_prototype_model_json['timeout'] = 120

        # Construct a model instance of VPNGatewayConnectionDPDPrototype by calling from_dict on the json representation
        vpn_gateway_connection_dpd_prototype_model = VPNGatewayConnectionDPDPrototype.from_dict(
            vpn_gateway_connection_dpd_prototype_model_json)
        assert vpn_gateway_connection_dpd_prototype_model != False

        # Construct a model instance of VPNGatewayConnectionDPDPrototype by calling from_dict on the json representation
        vpn_gateway_connection_dpd_prototype_model_dict = VPNGatewayConnectionDPDPrototype.from_dict(
            vpn_gateway_connection_dpd_prototype_model_json).__dict__
        vpn_gateway_connection_dpd_prototype_model2 = VPNGatewayConnectionDPDPrototype(
            **vpn_gateway_connection_dpd_prototype_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_connection_dpd_prototype_model == vpn_gateway_connection_dpd_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_connection_dpd_prototype_model_json2 = vpn_gateway_connection_dpd_prototype_model.to_dict(
        )
        assert vpn_gateway_connection_dpd_prototype_model_json2 == vpn_gateway_connection_dpd_prototype_model_json


class TestVPNGatewayConnectionLocalCIDRs():
    """
    Test Class for VPNGatewayConnectionLocalCIDRs
    """

    def test_vpn_gateway_connection_local_cid_rs_serialization(self):
        """
        Test serialization/deserialization for VPNGatewayConnectionLocalCIDRs
        """

        # Construct a json representation of a VPNGatewayConnectionLocalCIDRs model
        vpn_gateway_connection_local_cid_rs_model_json = {}
        vpn_gateway_connection_local_cid_rs_model_json['local_cidrs'] = [
            '192.168.1.0/24'
        ]

        # Construct a model instance of VPNGatewayConnectionLocalCIDRs by calling from_dict on the json representation
        vpn_gateway_connection_local_cid_rs_model = VPNGatewayConnectionLocalCIDRs.from_dict(
            vpn_gateway_connection_local_cid_rs_model_json)
        assert vpn_gateway_connection_local_cid_rs_model != False

        # Construct a model instance of VPNGatewayConnectionLocalCIDRs by calling from_dict on the json representation
        vpn_gateway_connection_local_cid_rs_model_dict = VPNGatewayConnectionLocalCIDRs.from_dict(
            vpn_gateway_connection_local_cid_rs_model_json).__dict__
        vpn_gateway_connection_local_cid_rs_model2 = VPNGatewayConnectionLocalCIDRs(
            **vpn_gateway_connection_local_cid_rs_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_connection_local_cid_rs_model == vpn_gateway_connection_local_cid_rs_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_connection_local_cid_rs_model_json2 = vpn_gateway_connection_local_cid_rs_model.to_dict(
        )
        assert vpn_gateway_connection_local_cid_rs_model_json2 == vpn_gateway_connection_local_cid_rs_model_json


class TestVPNGatewayConnectionPatch():
    """
    Test Class for VPNGatewayConnectionPatch
    """

    def test_vpn_gateway_connection_patch_serialization(self):
        """
        Test serialization/deserialization for VPNGatewayConnectionPatch
        """

        # Construct dict forms of any model objects needed in order to build this model.

        vpn_gateway_connection_dpd_prototype_model = {
        }  # VPNGatewayConnectionDPDPrototype
        vpn_gateway_connection_dpd_prototype_model['action'] = 'restart'
        vpn_gateway_connection_dpd_prototype_model['interval'] = 30
        vpn_gateway_connection_dpd_prototype_model['timeout'] = 120

        ike_policy_identity_model = {}  # IKEPolicyIdentityById
        ike_policy_identity_model['id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        i_psec_policy_identity_model = {}  # IPsecPolicyIdentityById
        i_psec_policy_identity_model[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a json representation of a VPNGatewayConnectionPatch model
        vpn_gateway_connection_patch_model_json = {}
        vpn_gateway_connection_patch_model_json['admin_state_up'] = True
        vpn_gateway_connection_patch_model_json['peer_address'] = '169.21.50.5'
        vpn_gateway_connection_patch_model_json['name'] = 'my-vpn-connection'
        vpn_gateway_connection_patch_model_json['psk'] = 'lkj14b1oi0alcniejkso'
        vpn_gateway_connection_patch_model_json[
            'dead_peer_detection'] = vpn_gateway_connection_dpd_prototype_model
        vpn_gateway_connection_patch_model_json[
            'ike_policy'] = ike_policy_identity_model
        vpn_gateway_connection_patch_model_json[
            'ipsec_policy'] = i_psec_policy_identity_model

        # Construct a model instance of VPNGatewayConnectionPatch by calling from_dict on the json representation
        vpn_gateway_connection_patch_model = VPNGatewayConnectionPatch.from_dict(
            vpn_gateway_connection_patch_model_json)
        assert vpn_gateway_connection_patch_model != False

        # Construct a model instance of VPNGatewayConnectionPatch by calling from_dict on the json representation
        vpn_gateway_connection_patch_model_dict = VPNGatewayConnectionPatch.from_dict(
            vpn_gateway_connection_patch_model_json).__dict__
        vpn_gateway_connection_patch_model2 = VPNGatewayConnectionPatch(
            **vpn_gateway_connection_patch_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_connection_patch_model == vpn_gateway_connection_patch_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_connection_patch_model_json2 = vpn_gateway_connection_patch_model.to_dict(
        )
        assert vpn_gateway_connection_patch_model_json2 == vpn_gateway_connection_patch_model_json


class TestVPNGatewayConnectionPeerCIDRs():
    """
    Test Class for VPNGatewayConnectionPeerCIDRs
    """

    def test_vpn_gateway_connection_peer_cid_rs_serialization(self):
        """
        Test serialization/deserialization for VPNGatewayConnectionPeerCIDRs
        """

        # Construct a json representation of a VPNGatewayConnectionPeerCIDRs model
        vpn_gateway_connection_peer_cid_rs_model_json = {}
        vpn_gateway_connection_peer_cid_rs_model_json['peer_cidrs'] = [
            '10.45.1.0/24'
        ]

        # Construct a model instance of VPNGatewayConnectionPeerCIDRs by calling from_dict on the json representation
        vpn_gateway_connection_peer_cid_rs_model = VPNGatewayConnectionPeerCIDRs.from_dict(
            vpn_gateway_connection_peer_cid_rs_model_json)
        assert vpn_gateway_connection_peer_cid_rs_model != False

        # Construct a model instance of VPNGatewayConnectionPeerCIDRs by calling from_dict on the json representation
        vpn_gateway_connection_peer_cid_rs_model_dict = VPNGatewayConnectionPeerCIDRs.from_dict(
            vpn_gateway_connection_peer_cid_rs_model_json).__dict__
        vpn_gateway_connection_peer_cid_rs_model2 = VPNGatewayConnectionPeerCIDRs(
            **vpn_gateway_connection_peer_cid_rs_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_connection_peer_cid_rs_model == vpn_gateway_connection_peer_cid_rs_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_connection_peer_cid_rs_model_json2 = vpn_gateway_connection_peer_cid_rs_model.to_dict(
        )
        assert vpn_gateway_connection_peer_cid_rs_model_json2 == vpn_gateway_connection_peer_cid_rs_model_json


class TestVPNGatewayConnectionReference():
    """
    Test Class for VPNGatewayConnectionReference
    """

    def test_vpn_gateway_connection_reference_serialization(self):
        """
        Test serialization/deserialization for VPNGatewayConnectionReference
        """

        # Construct a json representation of a VPNGatewayConnectionReference model
        vpn_gateway_connection_reference_model_json = {}
        vpn_gateway_connection_reference_model_json[
            'id'] = 'a10a5771-dc23-442c-8460-c3601d8542f7'
        vpn_gateway_connection_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b'
        vpn_gateway_connection_reference_model_json[
            'name'] = 'my-vpn-connection'
        vpn_gateway_connection_reference_model_json[
            'resource_type'] = 'vpn_gateway_connection'

        # Construct a model instance of VPNGatewayConnectionReference by calling from_dict on the json representation
        vpn_gateway_connection_reference_model = VPNGatewayConnectionReference.from_dict(
            vpn_gateway_connection_reference_model_json)
        assert vpn_gateway_connection_reference_model != False

        # Construct a model instance of VPNGatewayConnectionReference by calling from_dict on the json representation
        vpn_gateway_connection_reference_model_dict = VPNGatewayConnectionReference.from_dict(
            vpn_gateway_connection_reference_model_json).__dict__
        vpn_gateway_connection_reference_model2 = VPNGatewayConnectionReference(
            **vpn_gateway_connection_reference_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_connection_reference_model == vpn_gateway_connection_reference_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_connection_reference_model_json2 = vpn_gateway_connection_reference_model.to_dict(
        )
        assert vpn_gateway_connection_reference_model_json2 == vpn_gateway_connection_reference_model_json


class TestVPNGatewayPatch():
    """
    Test Class for VPNGatewayPatch
    """

    def test_vpn_gateway_patch_serialization(self):
        """
        Test serialization/deserialization for VPNGatewayPatch
        """

        # Construct a json representation of a VPNGatewayPatch model
        vpn_gateway_patch_model_json = {}
        vpn_gateway_patch_model_json['name'] = 'my-vpn-gateway'

        # Construct a model instance of VPNGatewayPatch by calling from_dict on the json representation
        vpn_gateway_patch_model = VPNGatewayPatch.from_dict(
            vpn_gateway_patch_model_json)
        assert vpn_gateway_patch_model != False

        # Construct a model instance of VPNGatewayPatch by calling from_dict on the json representation
        vpn_gateway_patch_model_dict = VPNGatewayPatch.from_dict(
            vpn_gateway_patch_model_json).__dict__
        vpn_gateway_patch_model2 = VPNGatewayPatch(
            **vpn_gateway_patch_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_patch_model == vpn_gateway_patch_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_patch_model_json2 = vpn_gateway_patch_model.to_dict()
        assert vpn_gateway_patch_model_json2 == vpn_gateway_patch_model_json


class TestVPNGatewayPublicIp():
    """
    Test Class for VPNGatewayPublicIp
    """

    def test_vpn_gateway_public_ip_serialization(self):
        """
        Test serialization/deserialization for VPNGatewayPublicIp
        """

        # Construct a json representation of a VPNGatewayPublicIp model
        vpn_gateway_public_ip_model_json = {}
        vpn_gateway_public_ip_model_json['address'] = '192.168.3.4'

        # Construct a model instance of VPNGatewayPublicIp by calling from_dict on the json representation
        vpn_gateway_public_ip_model = VPNGatewayPublicIp.from_dict(
            vpn_gateway_public_ip_model_json)
        assert vpn_gateway_public_ip_model != False

        # Construct a model instance of VPNGatewayPublicIp by calling from_dict on the json representation
        vpn_gateway_public_ip_model_dict = VPNGatewayPublicIp.from_dict(
            vpn_gateway_public_ip_model_json).__dict__
        vpn_gateway_public_ip_model2 = VPNGatewayPublicIp(
            **vpn_gateway_public_ip_model_dict)

        # Verify the model instances are equivalent
        assert vpn_gateway_public_ip_model == vpn_gateway_public_ip_model2

        # Convert model instance back to dict and verify no loss of data
        vpn_gateway_public_ip_model_json2 = vpn_gateway_public_ip_model.to_dict(
        )
        assert vpn_gateway_public_ip_model_json2 == vpn_gateway_public_ip_model_json


class TestVolume():
    """
    Test Class for Volume
    """

    def test_volume_serialization(self):
        """
        Test serialization/deserialization for Volume
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        encryption_key_reference_model = {}  # EncryptionKeyReference
        encryption_key_reference_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        volume_profile_reference_model = {}  # VolumeProfileReference
        volume_profile_reference_model['name'] = 'general-purpose'
        volume_profile_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose'

        volume_attachment_device_model = {}  # VolumeAttachmentDevice
        volume_attachment_device_model[
            'id'] = '80b3e36e-41f4-40e9-bd56-beae81792a68'

        instance_reference_model = {}  # InstanceReference
        instance_reference_model['id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model['name'] = 'my-instance'

        volume_attachment_reference_volume_context_model = {
        }  # VolumeAttachmentReferenceVolumeContext
        volume_attachment_reference_volume_context_model[
            'id'] = '82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_volume_context_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_volume_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_reference_volume_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_reference_volume_context_model[
            'device'] = volume_attachment_device_model
        volume_attachment_reference_volume_context_model[
            'instance'] = instance_reference_model
        volume_attachment_reference_volume_context_model['type'] = 'boot'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model['name'] = 'us-south-1'
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        # Construct a json representation of a Volume model
        volume_model_json = {}
        volume_model_json['iops'] = 10000
        volume_model_json['capacity'] = 100
        volume_model_json['id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_model_json['name'] = 'my-volume'
        volume_model_json['resource_group'] = resource_group_reference_model
        volume_model_json['created_at'] = '2020-01-28T18:40:40.123456Z'
        volume_model_json['encryption'] = 'provider_managed'
        volume_model_json['encryption_key'] = encryption_key_reference_model
        volume_model_json['profile'] = volume_profile_reference_model
        volume_model_json['status'] = 'available'
        volume_model_json['volume_attachments'] = [
            volume_attachment_reference_volume_context_model
        ]
        volume_model_json['zone'] = zone_reference_model

        # Construct a model instance of Volume by calling from_dict on the json representation
        volume_model = Volume.from_dict(volume_model_json)
        assert volume_model != False

        # Construct a model instance of Volume by calling from_dict on the json representation
        volume_model_dict = Volume.from_dict(volume_model_json).__dict__
        volume_model2 = Volume(**volume_model_dict)

        # Verify the model instances are equivalent
        assert volume_model == volume_model2

        # Convert model instance back to dict and verify no loss of data
        volume_model_json2 = volume_model.to_dict()
        assert volume_model_json2 == volume_model_json


class TestVolumeAttachment():
    """
    Test Class for VolumeAttachment
    """

    def test_volume_attachment_serialization(self):
        """
        Test serialization/deserialization for VolumeAttachment
        """

        # Construct dict forms of any model objects needed in order to build this model.

        volume_attachment_device_model = {}  # VolumeAttachmentDevice
        volume_attachment_device_model[
            'id'] = '80b3e36e-41f4-40e9-bd56-beae81792a68'

        volume_reference_model = {}  # VolumeReference
        volume_reference_model['id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model['name'] = 'my-volume'

        # Construct a json representation of a VolumeAttachment model
        volume_attachment_model_json = {}
        volume_attachment_model_json['delete_volume_on_instance_delete'] = True
        volume_attachment_model_json['name'] = 'my-volume-attachment'
        volume_attachment_model_json[
            'id'] = '82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_model_json['device'] = volume_attachment_device_model
        volume_attachment_model_json['volume'] = volume_reference_model
        volume_attachment_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        volume_attachment_model_json['status'] = 'attached'
        volume_attachment_model_json['type'] = 'boot'

        # Construct a model instance of VolumeAttachment by calling from_dict on the json representation
        volume_attachment_model = VolumeAttachment.from_dict(
            volume_attachment_model_json)
        assert volume_attachment_model != False

        # Construct a model instance of VolumeAttachment by calling from_dict on the json representation
        volume_attachment_model_dict = VolumeAttachment.from_dict(
            volume_attachment_model_json).__dict__
        volume_attachment_model2 = VolumeAttachment(
            **volume_attachment_model_dict)

        # Verify the model instances are equivalent
        assert volume_attachment_model == volume_attachment_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_model_json2 = volume_attachment_model.to_dict()
        assert volume_attachment_model_json2 == volume_attachment_model_json


class TestVolumeAttachmentCollection():
    """
    Test Class for VolumeAttachmentCollection
    """

    def test_volume_attachment_collection_serialization(self):
        """
        Test serialization/deserialization for VolumeAttachmentCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        volume_attachment_device_model = {}  # VolumeAttachmentDevice
        volume_attachment_device_model[
            'id'] = '80b3e36e-41f4-40e9-bd56-beae81792a68'

        volume_reference_model = {}  # VolumeReference
        volume_reference_model['id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model['name'] = 'my-volume'

        volume_attachment_model = {}  # VolumeAttachment
        volume_attachment_model['delete_volume_on_instance_delete'] = True
        volume_attachment_model['name'] = 'my-volume-attachment'
        volume_attachment_model['id'] = '82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_model['device'] = volume_attachment_device_model
        volume_attachment_model['volume'] = volume_reference_model
        volume_attachment_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        volume_attachment_model['status'] = 'attached'
        volume_attachment_model['type'] = 'boot'

        # Construct a json representation of a VolumeAttachmentCollection model
        volume_attachment_collection_model_json = {}
        volume_attachment_collection_model_json['volume_attachments'] = [
            volume_attachment_model
        ]

        # Construct a model instance of VolumeAttachmentCollection by calling from_dict on the json representation
        volume_attachment_collection_model = VolumeAttachmentCollection.from_dict(
            volume_attachment_collection_model_json)
        assert volume_attachment_collection_model != False

        # Construct a model instance of VolumeAttachmentCollection by calling from_dict on the json representation
        volume_attachment_collection_model_dict = VolumeAttachmentCollection.from_dict(
            volume_attachment_collection_model_json).__dict__
        volume_attachment_collection_model2 = VolumeAttachmentCollection(
            **volume_attachment_collection_model_dict)

        # Verify the model instances are equivalent
        assert volume_attachment_collection_model == volume_attachment_collection_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_collection_model_json2 = volume_attachment_collection_model.to_dict(
        )
        assert volume_attachment_collection_model_json2 == volume_attachment_collection_model_json


class TestVolumeAttachmentDevice():
    """
    Test Class for VolumeAttachmentDevice
    """

    def test_volume_attachment_device_serialization(self):
        """
        Test serialization/deserialization for VolumeAttachmentDevice
        """

        # Construct a json representation of a VolumeAttachmentDevice model
        volume_attachment_device_model_json = {}
        volume_attachment_device_model_json[
            'id'] = '80b3e36e-41f4-40e9-bd56-beae81792a68'

        # Construct a model instance of VolumeAttachmentDevice by calling from_dict on the json representation
        volume_attachment_device_model = VolumeAttachmentDevice.from_dict(
            volume_attachment_device_model_json)
        assert volume_attachment_device_model != False

        # Construct a model instance of VolumeAttachmentDevice by calling from_dict on the json representation
        volume_attachment_device_model_dict = VolumeAttachmentDevice.from_dict(
            volume_attachment_device_model_json).__dict__
        volume_attachment_device_model2 = VolumeAttachmentDevice(
            **volume_attachment_device_model_dict)

        # Verify the model instances are equivalent
        assert volume_attachment_device_model == volume_attachment_device_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_device_model_json2 = volume_attachment_device_model.to_dict(
        )
        assert volume_attachment_device_model_json2 == volume_attachment_device_model_json


class TestVolumeAttachmentPatch():
    """
    Test Class for VolumeAttachmentPatch
    """

    def test_volume_attachment_patch_serialization(self):
        """
        Test serialization/deserialization for VolumeAttachmentPatch
        """

        # Construct a json representation of a VolumeAttachmentPatch model
        volume_attachment_patch_model_json = {}
        volume_attachment_patch_model_json[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_patch_model_json['name'] = 'my-volume-attachment'

        # Construct a model instance of VolumeAttachmentPatch by calling from_dict on the json representation
        volume_attachment_patch_model = VolumeAttachmentPatch.from_dict(
            volume_attachment_patch_model_json)
        assert volume_attachment_patch_model != False

        # Construct a model instance of VolumeAttachmentPatch by calling from_dict on the json representation
        volume_attachment_patch_model_dict = VolumeAttachmentPatch.from_dict(
            volume_attachment_patch_model_json).__dict__
        volume_attachment_patch_model2 = VolumeAttachmentPatch(
            **volume_attachment_patch_model_dict)

        # Verify the model instances are equivalent
        assert volume_attachment_patch_model == volume_attachment_patch_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_patch_model_json2 = volume_attachment_patch_model.to_dict(
        )
        assert volume_attachment_patch_model_json2 == volume_attachment_patch_model_json


class TestVolumeAttachmentPrototypeInstanceByImageContext():
    """
    Test Class for VolumeAttachmentPrototypeInstanceByImageContext
    """

    def test_volume_attachment_prototype_instance_by_image_context_serialization(
            self):
        """
        Test serialization/deserialization for VolumeAttachmentPrototypeInstanceByImageContext
        """

        # Construct dict forms of any model objects needed in order to build this model.

        volume_profile_identity_model = {}  # VolumeProfileIdentityByName
        volume_profile_identity_model['name'] = 'general-purpose'

        encryption_key_identity_model = {}  # EncryptionKeyIdentityByCRN
        encryption_key_identity_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        volume_prototype_instance_by_image_context_model = {
        }  # VolumePrototypeInstanceByImageContext
        volume_prototype_instance_by_image_context_model['name'] = 'my-volume'
        volume_prototype_instance_by_image_context_model[
            'profile'] = volume_profile_identity_model
        volume_prototype_instance_by_image_context_model[
            'encryption_key'] = encryption_key_identity_model
        volume_prototype_instance_by_image_context_model['capacity'] = 100
        volume_prototype_instance_by_image_context_model['iops'] = 10000

        # Construct a json representation of a VolumeAttachmentPrototypeInstanceByImageContext model
        volume_attachment_prototype_instance_by_image_context_model_json = {}
        volume_attachment_prototype_instance_by_image_context_model_json[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_by_image_context_model_json[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_by_image_context_model_json[
            'volume'] = volume_prototype_instance_by_image_context_model

        # Construct a model instance of VolumeAttachmentPrototypeInstanceByImageContext by calling from_dict on the json representation
        volume_attachment_prototype_instance_by_image_context_model = VolumeAttachmentPrototypeInstanceByImageContext.from_dict(
            volume_attachment_prototype_instance_by_image_context_model_json)
        assert volume_attachment_prototype_instance_by_image_context_model != False

        # Construct a model instance of VolumeAttachmentPrototypeInstanceByImageContext by calling from_dict on the json representation
        volume_attachment_prototype_instance_by_image_context_model_dict = VolumeAttachmentPrototypeInstanceByImageContext.from_dict(
            volume_attachment_prototype_instance_by_image_context_model_json
        ).__dict__
        volume_attachment_prototype_instance_by_image_context_model2 = VolumeAttachmentPrototypeInstanceByImageContext(
            **volume_attachment_prototype_instance_by_image_context_model_dict)

        # Verify the model instances are equivalent
        assert volume_attachment_prototype_instance_by_image_context_model == volume_attachment_prototype_instance_by_image_context_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_prototype_instance_by_image_context_model_json2 = volume_attachment_prototype_instance_by_image_context_model.to_dict(
        )
        assert volume_attachment_prototype_instance_by_image_context_model_json2 == volume_attachment_prototype_instance_by_image_context_model_json


class TestVolumeAttachmentPrototypeInstanceContext():
    """
    Test Class for VolumeAttachmentPrototypeInstanceContext
    """

    def test_volume_attachment_prototype_instance_context_serialization(self):
        """
        Test serialization/deserialization for VolumeAttachmentPrototypeInstanceContext
        """

        # Construct dict forms of any model objects needed in order to build this model.

        volume_attachment_prototype_instance_context_volume_model = {
        }  # VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById
        volume_attachment_prototype_instance_context_volume_model[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a json representation of a VolumeAttachmentPrototypeInstanceContext model
        volume_attachment_prototype_instance_context_model_json = {}
        volume_attachment_prototype_instance_context_model_json[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_context_model_json[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_context_model_json[
            'volume'] = volume_attachment_prototype_instance_context_volume_model

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContext by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_model = VolumeAttachmentPrototypeInstanceContext.from_dict(
            volume_attachment_prototype_instance_context_model_json)
        assert volume_attachment_prototype_instance_context_model != False

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContext by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_model_dict = VolumeAttachmentPrototypeInstanceContext.from_dict(
            volume_attachment_prototype_instance_context_model_json).__dict__
        volume_attachment_prototype_instance_context_model2 = VolumeAttachmentPrototypeInstanceContext(
            **volume_attachment_prototype_instance_context_model_dict)

        # Verify the model instances are equivalent
        assert volume_attachment_prototype_instance_context_model == volume_attachment_prototype_instance_context_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_prototype_instance_context_model_json2 = volume_attachment_prototype_instance_context_model.to_dict(
        )
        assert volume_attachment_prototype_instance_context_model_json2 == volume_attachment_prototype_instance_context_model_json


class TestVolumeAttachmentReferenceInstanceContext():
    """
    Test Class for VolumeAttachmentReferenceInstanceContext
    """

    def test_volume_attachment_reference_instance_context_serialization(self):
        """
        Test serialization/deserialization for VolumeAttachmentReferenceInstanceContext
        """

        # Construct dict forms of any model objects needed in order to build this model.

        volume_attachment_device_model = {}  # VolumeAttachmentDevice
        volume_attachment_device_model[
            'id'] = '80b3e36e-41f4-40e9-bd56-beae81792a68'

        volume_reference_model = {}  # VolumeReference
        volume_reference_model['id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model['name'] = 'my-volume'

        # Construct a json representation of a VolumeAttachmentReferenceInstanceContext model
        volume_attachment_reference_instance_context_model_json = {}
        volume_attachment_reference_instance_context_model_json[
            'id'] = '82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_instance_context_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_instance_context_model_json[
            'name'] = 'my-volume-attachment'
        volume_attachment_reference_instance_context_model_json[
            'device'] = volume_attachment_device_model
        volume_attachment_reference_instance_context_model_json[
            'volume'] = volume_reference_model

        # Construct a model instance of VolumeAttachmentReferenceInstanceContext by calling from_dict on the json representation
        volume_attachment_reference_instance_context_model = VolumeAttachmentReferenceInstanceContext.from_dict(
            volume_attachment_reference_instance_context_model_json)
        assert volume_attachment_reference_instance_context_model != False

        # Construct a model instance of VolumeAttachmentReferenceInstanceContext by calling from_dict on the json representation
        volume_attachment_reference_instance_context_model_dict = VolumeAttachmentReferenceInstanceContext.from_dict(
            volume_attachment_reference_instance_context_model_json).__dict__
        volume_attachment_reference_instance_context_model2 = VolumeAttachmentReferenceInstanceContext(
            **volume_attachment_reference_instance_context_model_dict)

        # Verify the model instances are equivalent
        assert volume_attachment_reference_instance_context_model == volume_attachment_reference_instance_context_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_reference_instance_context_model_json2 = volume_attachment_reference_instance_context_model.to_dict(
        )
        assert volume_attachment_reference_instance_context_model_json2 == volume_attachment_reference_instance_context_model_json


class TestVolumeAttachmentReferenceVolumeContext():
    """
    Test Class for VolumeAttachmentReferenceVolumeContext
    """

    def test_volume_attachment_reference_volume_context_serialization(self):
        """
        Test serialization/deserialization for VolumeAttachmentReferenceVolumeContext
        """

        # Construct dict forms of any model objects needed in order to build this model.

        volume_attachment_device_model = {}  # VolumeAttachmentDevice
        volume_attachment_device_model[
            'id'] = '80b3e36e-41f4-40e9-bd56-beae81792a68'

        instance_reference_model = {}  # InstanceReference
        instance_reference_model['id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model['name'] = 'my-instance'

        # Construct a json representation of a VolumeAttachmentReferenceVolumeContext model
        volume_attachment_reference_volume_context_model_json = {}
        volume_attachment_reference_volume_context_model_json[
            'id'] = '82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_volume_context_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_volume_context_model_json[
            'name'] = 'my-volume-attachment'
        volume_attachment_reference_volume_context_model_json[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_reference_volume_context_model_json[
            'device'] = volume_attachment_device_model
        volume_attachment_reference_volume_context_model_json[
            'instance'] = instance_reference_model
        volume_attachment_reference_volume_context_model_json['type'] = 'boot'

        # Construct a model instance of VolumeAttachmentReferenceVolumeContext by calling from_dict on the json representation
        volume_attachment_reference_volume_context_model = VolumeAttachmentReferenceVolumeContext.from_dict(
            volume_attachment_reference_volume_context_model_json)
        assert volume_attachment_reference_volume_context_model != False

        # Construct a model instance of VolumeAttachmentReferenceVolumeContext by calling from_dict on the json representation
        volume_attachment_reference_volume_context_model_dict = VolumeAttachmentReferenceVolumeContext.from_dict(
            volume_attachment_reference_volume_context_model_json).__dict__
        volume_attachment_reference_volume_context_model2 = VolumeAttachmentReferenceVolumeContext(
            **volume_attachment_reference_volume_context_model_dict)

        # Verify the model instances are equivalent
        assert volume_attachment_reference_volume_context_model == volume_attachment_reference_volume_context_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_reference_volume_context_model_json2 = volume_attachment_reference_volume_context_model.to_dict(
        )
        assert volume_attachment_reference_volume_context_model_json2 == volume_attachment_reference_volume_context_model_json


class TestVolumeCollection():
    """
    Test Class for VolumeCollection
    """

    def test_volume_collection_serialization(self):
        """
        Test serialization/deserialization for VolumeCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        volume_collection_first_model = {}  # VolumeCollectionFirst
        volume_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes?limit=20'

        volume_collection_next_model = {}  # VolumeCollectionNext
        volume_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        encryption_key_reference_model = {}  # EncryptionKeyReference
        encryption_key_reference_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        volume_profile_reference_model = {}  # VolumeProfileReference
        volume_profile_reference_model['name'] = 'general-purpose'
        volume_profile_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose'

        volume_attachment_device_model = {}  # VolumeAttachmentDevice
        volume_attachment_device_model[
            'id'] = '80b3e36e-41f4-40e9-bd56-beae81792a68'

        instance_reference_model = {}  # InstanceReference
        instance_reference_model['id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_reference_model['name'] = 'my-instance'

        volume_attachment_reference_volume_context_model = {
        }  # VolumeAttachmentReferenceVolumeContext
        volume_attachment_reference_volume_context_model[
            'id'] = '82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_volume_context_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a'
        volume_attachment_reference_volume_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_reference_volume_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_reference_volume_context_model[
            'device'] = volume_attachment_device_model
        volume_attachment_reference_volume_context_model[
            'instance'] = instance_reference_model
        volume_attachment_reference_volume_context_model['type'] = 'boot'

        zone_reference_model = {}  # ZoneReference
        zone_reference_model['name'] = 'us-south-1'
        zone_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        volume_model = {}  # Volume
        volume_model['iops'] = 10000
        volume_model['capacity'] = 100
        volume_model['id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_model[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_model['name'] = 'my-volume'
        volume_model['resource_group'] = resource_group_reference_model
        volume_model['created_at'] = '2020-01-28T18:40:40.123456Z'
        volume_model['encryption'] = 'provider_managed'
        volume_model['encryption_key'] = encryption_key_reference_model
        volume_model['profile'] = volume_profile_reference_model
        volume_model['status'] = 'available'
        volume_model['volume_attachments'] = [
            volume_attachment_reference_volume_context_model
        ]
        volume_model['zone'] = zone_reference_model

        # Construct a json representation of a VolumeCollection model
        volume_collection_model_json = {}
        volume_collection_model_json['first'] = volume_collection_first_model
        volume_collection_model_json['limit'] = 20
        volume_collection_model_json['next'] = volume_collection_next_model
        volume_collection_model_json['volumes'] = [volume_model]

        # Construct a model instance of VolumeCollection by calling from_dict on the json representation
        volume_collection_model = VolumeCollection.from_dict(
            volume_collection_model_json)
        assert volume_collection_model != False

        # Construct a model instance of VolumeCollection by calling from_dict on the json representation
        volume_collection_model_dict = VolumeCollection.from_dict(
            volume_collection_model_json).__dict__
        volume_collection_model2 = VolumeCollection(
            **volume_collection_model_dict)

        # Verify the model instances are equivalent
        assert volume_collection_model == volume_collection_model2

        # Convert model instance back to dict and verify no loss of data
        volume_collection_model_json2 = volume_collection_model.to_dict()
        assert volume_collection_model_json2 == volume_collection_model_json


class TestVolumeCollectionFirst():
    """
    Test Class for VolumeCollectionFirst
    """

    def test_volume_collection_first_serialization(self):
        """
        Test serialization/deserialization for VolumeCollectionFirst
        """

        # Construct a json representation of a VolumeCollectionFirst model
        volume_collection_first_model_json = {}
        volume_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes?limit=20'

        # Construct a model instance of VolumeCollectionFirst by calling from_dict on the json representation
        volume_collection_first_model = VolumeCollectionFirst.from_dict(
            volume_collection_first_model_json)
        assert volume_collection_first_model != False

        # Construct a model instance of VolumeCollectionFirst by calling from_dict on the json representation
        volume_collection_first_model_dict = VolumeCollectionFirst.from_dict(
            volume_collection_first_model_json).__dict__
        volume_collection_first_model2 = VolumeCollectionFirst(
            **volume_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert volume_collection_first_model == volume_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        volume_collection_first_model_json2 = volume_collection_first_model.to_dict(
        )
        assert volume_collection_first_model_json2 == volume_collection_first_model_json


class TestVolumeCollectionNext():
    """
    Test Class for VolumeCollectionNext
    """

    def test_volume_collection_next_serialization(self):
        """
        Test serialization/deserialization for VolumeCollectionNext
        """

        # Construct a json representation of a VolumeCollectionNext model
        volume_collection_next_model_json = {}
        volume_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of VolumeCollectionNext by calling from_dict on the json representation
        volume_collection_next_model = VolumeCollectionNext.from_dict(
            volume_collection_next_model_json)
        assert volume_collection_next_model != False

        # Construct a model instance of VolumeCollectionNext by calling from_dict on the json representation
        volume_collection_next_model_dict = VolumeCollectionNext.from_dict(
            volume_collection_next_model_json).__dict__
        volume_collection_next_model2 = VolumeCollectionNext(
            **volume_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert volume_collection_next_model == volume_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        volume_collection_next_model_json2 = volume_collection_next_model.to_dict(
        )
        assert volume_collection_next_model_json2 == volume_collection_next_model_json


class TestVolumePatch():
    """
    Test Class for VolumePatch
    """

    def test_volume_patch_serialization(self):
        """
        Test serialization/deserialization for VolumePatch
        """

        # Construct a json representation of a VolumePatch model
        volume_patch_model_json = {}
        volume_patch_model_json['name'] = 'my-volume'

        # Construct a model instance of VolumePatch by calling from_dict on the json representation
        volume_patch_model = VolumePatch.from_dict(volume_patch_model_json)
        assert volume_patch_model != False

        # Construct a model instance of VolumePatch by calling from_dict on the json representation
        volume_patch_model_dict = VolumePatch.from_dict(
            volume_patch_model_json).__dict__
        volume_patch_model2 = VolumePatch(**volume_patch_model_dict)

        # Verify the model instances are equivalent
        assert volume_patch_model == volume_patch_model2

        # Convert model instance back to dict and verify no loss of data
        volume_patch_model_json2 = volume_patch_model.to_dict()
        assert volume_patch_model_json2 == volume_patch_model_json


class TestVolumeProfile():
    """
    Test Class for VolumeProfile
    """

    def test_volume_profile_serialization(self):
        """
        Test serialization/deserialization for VolumeProfile
        """

        # Construct a json representation of a VolumeProfile model
        volume_profile_model_json = {}
        volume_profile_model_json['name'] = 'general-purpose'
        volume_profile_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose'
        volume_profile_model_json['family'] = 'tiered'

        # Construct a model instance of VolumeProfile by calling from_dict on the json representation
        volume_profile_model = VolumeProfile.from_dict(
            volume_profile_model_json)
        assert volume_profile_model != False

        # Construct a model instance of VolumeProfile by calling from_dict on the json representation
        volume_profile_model_dict = VolumeProfile.from_dict(
            volume_profile_model_json).__dict__
        volume_profile_model2 = VolumeProfile(**volume_profile_model_dict)

        # Verify the model instances are equivalent
        assert volume_profile_model == volume_profile_model2

        # Convert model instance back to dict and verify no loss of data
        volume_profile_model_json2 = volume_profile_model.to_dict()
        assert volume_profile_model_json2 == volume_profile_model_json


class TestVolumeProfileCollection():
    """
    Test Class for VolumeProfileCollection
    """

    def test_volume_profile_collection_serialization(self):
        """
        Test serialization/deserialization for VolumeProfileCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        volume_profile_collection_first_model = {
        }  # VolumeProfileCollectionFirst
        volume_profile_collection_first_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?limit=20'

        volume_profile_collection_next_model = {}  # VolumeProfileCollectionNext
        volume_profile_collection_next_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        volume_profile_model = {}  # VolumeProfile
        volume_profile_model['name'] = 'general-purpose'
        volume_profile_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose'
        volume_profile_model['family'] = 'tiered'

        # Construct a json representation of a VolumeProfileCollection model
        volume_profile_collection_model_json = {}
        volume_profile_collection_model_json[
            'first'] = volume_profile_collection_first_model
        volume_profile_collection_model_json['limit'] = 20
        volume_profile_collection_model_json[
            'next'] = volume_profile_collection_next_model
        volume_profile_collection_model_json['total_count'] = 132
        volume_profile_collection_model_json['profiles'] = [
            volume_profile_model
        ]

        # Construct a model instance of VolumeProfileCollection by calling from_dict on the json representation
        volume_profile_collection_model = VolumeProfileCollection.from_dict(
            volume_profile_collection_model_json)
        assert volume_profile_collection_model != False

        # Construct a model instance of VolumeProfileCollection by calling from_dict on the json representation
        volume_profile_collection_model_dict = VolumeProfileCollection.from_dict(
            volume_profile_collection_model_json).__dict__
        volume_profile_collection_model2 = VolumeProfileCollection(
            **volume_profile_collection_model_dict)

        # Verify the model instances are equivalent
        assert volume_profile_collection_model == volume_profile_collection_model2

        # Convert model instance back to dict and verify no loss of data
        volume_profile_collection_model_json2 = volume_profile_collection_model.to_dict(
        )
        assert volume_profile_collection_model_json2 == volume_profile_collection_model_json


class TestVolumeProfileCollectionFirst():
    """
    Test Class for VolumeProfileCollectionFirst
    """

    def test_volume_profile_collection_first_serialization(self):
        """
        Test serialization/deserialization for VolumeProfileCollectionFirst
        """

        # Construct a json representation of a VolumeProfileCollectionFirst model
        volume_profile_collection_first_model_json = {}
        volume_profile_collection_first_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?limit=20'

        # Construct a model instance of VolumeProfileCollectionFirst by calling from_dict on the json representation
        volume_profile_collection_first_model = VolumeProfileCollectionFirst.from_dict(
            volume_profile_collection_first_model_json)
        assert volume_profile_collection_first_model != False

        # Construct a model instance of VolumeProfileCollectionFirst by calling from_dict on the json representation
        volume_profile_collection_first_model_dict = VolumeProfileCollectionFirst.from_dict(
            volume_profile_collection_first_model_json).__dict__
        volume_profile_collection_first_model2 = VolumeProfileCollectionFirst(
            **volume_profile_collection_first_model_dict)

        # Verify the model instances are equivalent
        assert volume_profile_collection_first_model == volume_profile_collection_first_model2

        # Convert model instance back to dict and verify no loss of data
        volume_profile_collection_first_model_json2 = volume_profile_collection_first_model.to_dict(
        )
        assert volume_profile_collection_first_model_json2 == volume_profile_collection_first_model_json


class TestVolumeProfileCollectionNext():
    """
    Test Class for VolumeProfileCollectionNext
    """

    def test_volume_profile_collection_next_serialization(self):
        """
        Test serialization/deserialization for VolumeProfileCollectionNext
        """

        # Construct a json representation of a VolumeProfileCollectionNext model
        volume_profile_collection_next_model_json = {}
        volume_profile_collection_next_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20'

        # Construct a model instance of VolumeProfileCollectionNext by calling from_dict on the json representation
        volume_profile_collection_next_model = VolumeProfileCollectionNext.from_dict(
            volume_profile_collection_next_model_json)
        assert volume_profile_collection_next_model != False

        # Construct a model instance of VolumeProfileCollectionNext by calling from_dict on the json representation
        volume_profile_collection_next_model_dict = VolumeProfileCollectionNext.from_dict(
            volume_profile_collection_next_model_json).__dict__
        volume_profile_collection_next_model2 = VolumeProfileCollectionNext(
            **volume_profile_collection_next_model_dict)

        # Verify the model instances are equivalent
        assert volume_profile_collection_next_model == volume_profile_collection_next_model2

        # Convert model instance back to dict and verify no loss of data
        volume_profile_collection_next_model_json2 = volume_profile_collection_next_model.to_dict(
        )
        assert volume_profile_collection_next_model_json2 == volume_profile_collection_next_model_json


class TestVolumeProfileReference():
    """
    Test Class for VolumeProfileReference
    """

    def test_volume_profile_reference_serialization(self):
        """
        Test serialization/deserialization for VolumeProfileReference
        """

        # Construct a json representation of a VolumeProfileReference model
        volume_profile_reference_model_json = {}
        volume_profile_reference_model_json['name'] = 'general-purpose'
        volume_profile_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose'

        # Construct a model instance of VolumeProfileReference by calling from_dict on the json representation
        volume_profile_reference_model = VolumeProfileReference.from_dict(
            volume_profile_reference_model_json)
        assert volume_profile_reference_model != False

        # Construct a model instance of VolumeProfileReference by calling from_dict on the json representation
        volume_profile_reference_model_dict = VolumeProfileReference.from_dict(
            volume_profile_reference_model_json).__dict__
        volume_profile_reference_model2 = VolumeProfileReference(
            **volume_profile_reference_model_dict)

        # Verify the model instances are equivalent
        assert volume_profile_reference_model == volume_profile_reference_model2

        # Convert model instance back to dict and verify no loss of data
        volume_profile_reference_model_json2 = volume_profile_reference_model.to_dict(
        )
        assert volume_profile_reference_model_json2 == volume_profile_reference_model_json


class TestVolumePrototypeInstanceByImageContext():
    """
    Test Class for VolumePrototypeInstanceByImageContext
    """

    def test_volume_prototype_instance_by_image_context_serialization(self):
        """
        Test serialization/deserialization for VolumePrototypeInstanceByImageContext
        """

        # Construct dict forms of any model objects needed in order to build this model.

        volume_profile_identity_model = {}  # VolumeProfileIdentityByName
        volume_profile_identity_model['name'] = 'general-purpose'

        encryption_key_identity_model = {}  # EncryptionKeyIdentityByCRN
        encryption_key_identity_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        # Construct a json representation of a VolumePrototypeInstanceByImageContext model
        volume_prototype_instance_by_image_context_model_json = {}
        volume_prototype_instance_by_image_context_model_json[
            'name'] = 'my-volume'
        volume_prototype_instance_by_image_context_model_json[
            'profile'] = volume_profile_identity_model
        volume_prototype_instance_by_image_context_model_json[
            'encryption_key'] = encryption_key_identity_model
        volume_prototype_instance_by_image_context_model_json['capacity'] = 100
        volume_prototype_instance_by_image_context_model_json['iops'] = 10000

        # Construct a model instance of VolumePrototypeInstanceByImageContext by calling from_dict on the json representation
        volume_prototype_instance_by_image_context_model = VolumePrototypeInstanceByImageContext.from_dict(
            volume_prototype_instance_by_image_context_model_json)
        assert volume_prototype_instance_by_image_context_model != False

        # Construct a model instance of VolumePrototypeInstanceByImageContext by calling from_dict on the json representation
        volume_prototype_instance_by_image_context_model_dict = VolumePrototypeInstanceByImageContext.from_dict(
            volume_prototype_instance_by_image_context_model_json).__dict__
        volume_prototype_instance_by_image_context_model2 = VolumePrototypeInstanceByImageContext(
            **volume_prototype_instance_by_image_context_model_dict)

        # Verify the model instances are equivalent
        assert volume_prototype_instance_by_image_context_model == volume_prototype_instance_by_image_context_model2

        # Convert model instance back to dict and verify no loss of data
        volume_prototype_instance_by_image_context_model_json2 = volume_prototype_instance_by_image_context_model.to_dict(
        )
        assert volume_prototype_instance_by_image_context_model_json2 == volume_prototype_instance_by_image_context_model_json


class TestVolumeReference():
    """
    Test Class for VolumeReference
    """

    def test_volume_reference_serialization(self):
        """
        Test serialization/deserialization for VolumeReference
        """

        # Construct a json representation of a VolumeReference model
        volume_reference_model_json = {}
        volume_reference_model_json[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'
        volume_reference_model_json['name'] = 'my-volume'

        # Construct a model instance of VolumeReference by calling from_dict on the json representation
        volume_reference_model = VolumeReference.from_dict(
            volume_reference_model_json)
        assert volume_reference_model != False

        # Construct a model instance of VolumeReference by calling from_dict on the json representation
        volume_reference_model_dict = VolumeReference.from_dict(
            volume_reference_model_json).__dict__
        volume_reference_model2 = VolumeReference(**volume_reference_model_dict)

        # Verify the model instances are equivalent
        assert volume_reference_model == volume_reference_model2

        # Convert model instance back to dict and verify no loss of data
        volume_reference_model_json2 = volume_reference_model.to_dict()
        assert volume_reference_model_json2 == volume_reference_model_json


class TestZone():
    """
    Test Class for Zone
    """

    def test_zone_serialization(self):
        """
        Test serialization/deserialization for Zone
        """

        # Construct dict forms of any model objects needed in order to build this model.

        region_reference_model = {}  # RegionReference
        region_reference_model['name'] = 'us-south'
        region_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south'

        # Construct a json representation of a Zone model
        zone_model_json = {}
        zone_model_json['name'] = 'us-south-1'
        zone_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_model_json['region'] = region_reference_model
        zone_model_json['status'] = 'available'

        # Construct a model instance of Zone by calling from_dict on the json representation
        zone_model = Zone.from_dict(zone_model_json)
        assert zone_model != False

        # Construct a model instance of Zone by calling from_dict on the json representation
        zone_model_dict = Zone.from_dict(zone_model_json).__dict__
        zone_model2 = Zone(**zone_model_dict)

        # Verify the model instances are equivalent
        assert zone_model == zone_model2

        # Convert model instance back to dict and verify no loss of data
        zone_model_json2 = zone_model.to_dict()
        assert zone_model_json2 == zone_model_json


class TestZoneCollection():
    """
    Test Class for ZoneCollection
    """

    def test_zone_collection_serialization(self):
        """
        Test serialization/deserialization for ZoneCollection
        """

        # Construct dict forms of any model objects needed in order to build this model.

        region_reference_model = {}  # RegionReference
        region_reference_model['name'] = 'us-south'
        region_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south'

        zone_model = {}  # Zone
        zone_model['name'] = 'us-south-1'
        zone_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'
        zone_model['region'] = region_reference_model
        zone_model['status'] = 'available'

        # Construct a json representation of a ZoneCollection model
        zone_collection_model_json = {}
        zone_collection_model_json['zones'] = [zone_model]

        # Construct a model instance of ZoneCollection by calling from_dict on the json representation
        zone_collection_model = ZoneCollection.from_dict(
            zone_collection_model_json)
        assert zone_collection_model != False

        # Construct a model instance of ZoneCollection by calling from_dict on the json representation
        zone_collection_model_dict = ZoneCollection.from_dict(
            zone_collection_model_json).__dict__
        zone_collection_model2 = ZoneCollection(**zone_collection_model_dict)

        # Verify the model instances are equivalent
        assert zone_collection_model == zone_collection_model2

        # Convert model instance back to dict and verify no loss of data
        zone_collection_model_json2 = zone_collection_model.to_dict()
        assert zone_collection_model_json2 == zone_collection_model_json


class TestZoneReference():
    """
    Test Class for ZoneReference
    """

    def test_zone_reference_serialization(self):
        """
        Test serialization/deserialization for ZoneReference
        """

        # Construct a json representation of a ZoneReference model
        zone_reference_model_json = {}
        zone_reference_model_json['name'] = 'us-south-1'
        zone_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        # Construct a model instance of ZoneReference by calling from_dict on the json representation
        zone_reference_model = ZoneReference.from_dict(
            zone_reference_model_json)
        assert zone_reference_model != False

        # Construct a model instance of ZoneReference by calling from_dict on the json representation
        zone_reference_model_dict = ZoneReference.from_dict(
            zone_reference_model_json).__dict__
        zone_reference_model2 = ZoneReference(**zone_reference_model_dict)

        # Verify the model instances are equivalent
        assert zone_reference_model == zone_reference_model2

        # Convert model instance back to dict and verify no loss of data
        zone_reference_model_json2 = zone_reference_model.to_dict()
        assert zone_reference_model_json2 == zone_reference_model_json


class TestCertificateInstanceIdentityByCRN():
    """
    Test Class for CertificateInstanceIdentityByCRN
    """

    def test_certificate_instance_identity_by_crn_serialization(self):
        """
        Test serialization/deserialization for CertificateInstanceIdentityByCRN
        """

        # Construct a json representation of a CertificateInstanceIdentityByCRN model
        certificate_instance_identity_by_crn_model_json = {}
        certificate_instance_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758'

        # Construct a model instance of CertificateInstanceIdentityByCRN by calling from_dict on the json representation
        certificate_instance_identity_by_crn_model = CertificateInstanceIdentityByCRN.from_dict(
            certificate_instance_identity_by_crn_model_json)
        assert certificate_instance_identity_by_crn_model != False

        # Construct a model instance of CertificateInstanceIdentityByCRN by calling from_dict on the json representation
        certificate_instance_identity_by_crn_model_dict = CertificateInstanceIdentityByCRN.from_dict(
            certificate_instance_identity_by_crn_model_json).__dict__
        certificate_instance_identity_by_crn_model2 = CertificateInstanceIdentityByCRN(
            **certificate_instance_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert certificate_instance_identity_by_crn_model == certificate_instance_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        certificate_instance_identity_by_crn_model_json2 = certificate_instance_identity_by_crn_model.to_dict(
        )
        assert certificate_instance_identity_by_crn_model_json2 == certificate_instance_identity_by_crn_model_json


class TestCloudObjectStorageBucketIdentityByName():
    """
    Test Class for CloudObjectStorageBucketIdentityByName
    """

    def test_cloud_object_storage_bucket_identity_by_name_serialization(self):
        """
        Test serialization/deserialization for CloudObjectStorageBucketIdentityByName
        """

        # Construct a json representation of a CloudObjectStorageBucketIdentityByName model
        cloud_object_storage_bucket_identity_by_name_model_json = {}
        cloud_object_storage_bucket_identity_by_name_model_json[
            'name'] = 'bucket-27200-lwx4cfvcue'

        # Construct a model instance of CloudObjectStorageBucketIdentityByName by calling from_dict on the json representation
        cloud_object_storage_bucket_identity_by_name_model = CloudObjectStorageBucketIdentityByName.from_dict(
            cloud_object_storage_bucket_identity_by_name_model_json)
        assert cloud_object_storage_bucket_identity_by_name_model != False

        # Construct a model instance of CloudObjectStorageBucketIdentityByName by calling from_dict on the json representation
        cloud_object_storage_bucket_identity_by_name_model_dict = CloudObjectStorageBucketIdentityByName.from_dict(
            cloud_object_storage_bucket_identity_by_name_model_json).__dict__
        cloud_object_storage_bucket_identity_by_name_model2 = CloudObjectStorageBucketIdentityByName(
            **cloud_object_storage_bucket_identity_by_name_model_dict)

        # Verify the model instances are equivalent
        assert cloud_object_storage_bucket_identity_by_name_model == cloud_object_storage_bucket_identity_by_name_model2

        # Convert model instance back to dict and verify no loss of data
        cloud_object_storage_bucket_identity_by_name_model_json2 = cloud_object_storage_bucket_identity_by_name_model.to_dict(
        )
        assert cloud_object_storage_bucket_identity_by_name_model_json2 == cloud_object_storage_bucket_identity_by_name_model_json


class TestEncryptionKeyIdentityByCRN():
    """
    Test Class for EncryptionKeyIdentityByCRN
    """

    def test_encryption_key_identity_by_crn_serialization(self):
        """
        Test serialization/deserialization for EncryptionKeyIdentityByCRN
        """

        # Construct a json representation of a EncryptionKeyIdentityByCRN model
        encryption_key_identity_by_crn_model_json = {}
        encryption_key_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        # Construct a model instance of EncryptionKeyIdentityByCRN by calling from_dict on the json representation
        encryption_key_identity_by_crn_model = EncryptionKeyIdentityByCRN.from_dict(
            encryption_key_identity_by_crn_model_json)
        assert encryption_key_identity_by_crn_model != False

        # Construct a model instance of EncryptionKeyIdentityByCRN by calling from_dict on the json representation
        encryption_key_identity_by_crn_model_dict = EncryptionKeyIdentityByCRN.from_dict(
            encryption_key_identity_by_crn_model_json).__dict__
        encryption_key_identity_by_crn_model2 = EncryptionKeyIdentityByCRN(
            **encryption_key_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert encryption_key_identity_by_crn_model == encryption_key_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        encryption_key_identity_by_crn_model_json2 = encryption_key_identity_by_crn_model.to_dict(
        )
        assert encryption_key_identity_by_crn_model_json2 == encryption_key_identity_by_crn_model_json


class TestFloatingIPByTargetTargetNetworkInterfaceIdentityByHref():
    """
    Test Class for FloatingIPByTargetTargetNetworkInterfaceIdentityByHref
    """

    def test_floating_ip_by_target_target_network_interface_identity_by_href_serialization(
            self):
        """
        Test serialization/deserialization for FloatingIPByTargetTargetNetworkInterfaceIdentityByHref
        """

        # Construct a json representation of a FloatingIPByTargetTargetNetworkInterfaceIdentityByHref model
        floating_ip_by_target_target_network_interface_identity_by_href_model_json = {}
        floating_ip_by_target_target_network_interface_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'

        # Construct a model instance of FloatingIPByTargetTargetNetworkInterfaceIdentityByHref by calling from_dict on the json representation
        floating_ip_by_target_target_network_interface_identity_by_href_model = FloatingIPByTargetTargetNetworkInterfaceIdentityByHref.from_dict(
            floating_ip_by_target_target_network_interface_identity_by_href_model_json
        )
        assert floating_ip_by_target_target_network_interface_identity_by_href_model != False

        # Construct a model instance of FloatingIPByTargetTargetNetworkInterfaceIdentityByHref by calling from_dict on the json representation
        floating_ip_by_target_target_network_interface_identity_by_href_model_dict = FloatingIPByTargetTargetNetworkInterfaceIdentityByHref.from_dict(
            floating_ip_by_target_target_network_interface_identity_by_href_model_json
        ).__dict__
        floating_ip_by_target_target_network_interface_identity_by_href_model2 = FloatingIPByTargetTargetNetworkInterfaceIdentityByHref(
            **
            floating_ip_by_target_target_network_interface_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert floating_ip_by_target_target_network_interface_identity_by_href_model == floating_ip_by_target_target_network_interface_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_by_target_target_network_interface_identity_by_href_model_json2 = floating_ip_by_target_target_network_interface_identity_by_href_model.to_dict(
        )
        assert floating_ip_by_target_target_network_interface_identity_by_href_model_json2 == floating_ip_by_target_target_network_interface_identity_by_href_model_json


class TestFloatingIPByTargetTargetNetworkInterfaceIdentityById():
    """
    Test Class for FloatingIPByTargetTargetNetworkInterfaceIdentityById
    """

    def test_floating_ip_by_target_target_network_interface_identity_by_id_serialization(
            self):
        """
        Test serialization/deserialization for FloatingIPByTargetTargetNetworkInterfaceIdentityById
        """

        # Construct a json representation of a FloatingIPByTargetTargetNetworkInterfaceIdentityById model
        floating_ip_by_target_target_network_interface_identity_by_id_model_json = {}
        floating_ip_by_target_target_network_interface_identity_by_id_model_json[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'

        # Construct a model instance of FloatingIPByTargetTargetNetworkInterfaceIdentityById by calling from_dict on the json representation
        floating_ip_by_target_target_network_interface_identity_by_id_model = FloatingIPByTargetTargetNetworkInterfaceIdentityById.from_dict(
            floating_ip_by_target_target_network_interface_identity_by_id_model_json
        )
        assert floating_ip_by_target_target_network_interface_identity_by_id_model != False

        # Construct a model instance of FloatingIPByTargetTargetNetworkInterfaceIdentityById by calling from_dict on the json representation
        floating_ip_by_target_target_network_interface_identity_by_id_model_dict = FloatingIPByTargetTargetNetworkInterfaceIdentityById.from_dict(
            floating_ip_by_target_target_network_interface_identity_by_id_model_json
        ).__dict__
        floating_ip_by_target_target_network_interface_identity_by_id_model2 = FloatingIPByTargetTargetNetworkInterfaceIdentityById(
            **
            floating_ip_by_target_target_network_interface_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert floating_ip_by_target_target_network_interface_identity_by_id_model == floating_ip_by_target_target_network_interface_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_by_target_target_network_interface_identity_by_id_model_json2 = floating_ip_by_target_target_network_interface_identity_by_id_model.to_dict(
        )
        assert floating_ip_by_target_target_network_interface_identity_by_id_model_json2 == floating_ip_by_target_target_network_interface_identity_by_id_model_json


class TestFloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref(
):
    """
    Test Class for FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref
    """

    def test_floating_ip_patch_target_network_interface_identity_network_interface_identity_by_href_serialization(
            self):
        """
        Test serialization/deserialization for FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref
        """

        # Construct a json representation of a FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref model
        floating_ip_patch_target_network_interface_identity_network_interface_identity_by_href_model_json = {}
        floating_ip_patch_target_network_interface_identity_network_interface_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'

        # Construct a model instance of FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref by calling from_dict on the json representation
        floating_ip_patch_target_network_interface_identity_network_interface_identity_by_href_model = FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref.from_dict(
            floating_ip_patch_target_network_interface_identity_network_interface_identity_by_href_model_json
        )
        assert floating_ip_patch_target_network_interface_identity_network_interface_identity_by_href_model != False

        # Construct a model instance of FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref by calling from_dict on the json representation
        floating_ip_patch_target_network_interface_identity_network_interface_identity_by_href_model_dict = FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref.from_dict(
            floating_ip_patch_target_network_interface_identity_network_interface_identity_by_href_model_json
        ).__dict__
        floating_ip_patch_target_network_interface_identity_network_interface_identity_by_href_model2 = FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref(
            **
            floating_ip_patch_target_network_interface_identity_network_interface_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert floating_ip_patch_target_network_interface_identity_network_interface_identity_by_href_model == floating_ip_patch_target_network_interface_identity_network_interface_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_patch_target_network_interface_identity_network_interface_identity_by_href_model_json2 = floating_ip_patch_target_network_interface_identity_network_interface_identity_by_href_model.to_dict(
        )
        assert floating_ip_patch_target_network_interface_identity_network_interface_identity_by_href_model_json2 == floating_ip_patch_target_network_interface_identity_network_interface_identity_by_href_model_json


class TestFloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById(
):
    """
    Test Class for FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById
    """

    def test_floating_ip_patch_target_network_interface_identity_network_interface_identity_by_id_serialization(
            self):
        """
        Test serialization/deserialization for FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById
        """

        # Construct a json representation of a FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById model
        floating_ip_patch_target_network_interface_identity_network_interface_identity_by_id_model_json = {}
        floating_ip_patch_target_network_interface_identity_network_interface_identity_by_id_model_json[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'

        # Construct a model instance of FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById by calling from_dict on the json representation
        floating_ip_patch_target_network_interface_identity_network_interface_identity_by_id_model = FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById.from_dict(
            floating_ip_patch_target_network_interface_identity_network_interface_identity_by_id_model_json
        )
        assert floating_ip_patch_target_network_interface_identity_network_interface_identity_by_id_model != False

        # Construct a model instance of FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById by calling from_dict on the json representation
        floating_ip_patch_target_network_interface_identity_network_interface_identity_by_id_model_dict = FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById.from_dict(
            floating_ip_patch_target_network_interface_identity_network_interface_identity_by_id_model_json
        ).__dict__
        floating_ip_patch_target_network_interface_identity_network_interface_identity_by_id_model2 = FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityById(
            **
            floating_ip_patch_target_network_interface_identity_network_interface_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert floating_ip_patch_target_network_interface_identity_network_interface_identity_by_id_model == floating_ip_patch_target_network_interface_identity_network_interface_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_patch_target_network_interface_identity_network_interface_identity_by_id_model_json2 = floating_ip_patch_target_network_interface_identity_network_interface_identity_by_id_model.to_dict(
        )
        assert floating_ip_patch_target_network_interface_identity_network_interface_identity_by_id_model_json2 == floating_ip_patch_target_network_interface_identity_network_interface_identity_by_id_model_json


class TestFloatingIPPrototypeFloatingIPByTarget():
    """
    Test Class for FloatingIPPrototypeFloatingIPByTarget
    """

    def test_floating_ip_prototype_floating_ip_by_target_serialization(self):
        """
        Test serialization/deserialization for FloatingIPPrototypeFloatingIPByTarget
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_identity_model = {}  # ResourceGroupIdentityById
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        floating_ip_by_target_target_model = {
        }  # FloatingIPByTargetTargetNetworkInterfaceIdentityById
        floating_ip_by_target_target_model[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'

        # Construct a json representation of a FloatingIPPrototypeFloatingIPByTarget model
        floating_ip_prototype_floating_ip_by_target_model_json = {}
        floating_ip_prototype_floating_ip_by_target_model_json[
            'name'] = 'my-floating-ip'
        floating_ip_prototype_floating_ip_by_target_model_json[
            'resource_group'] = resource_group_identity_model
        floating_ip_prototype_floating_ip_by_target_model_json[
            'target'] = floating_ip_by_target_target_model

        # Construct a model instance of FloatingIPPrototypeFloatingIPByTarget by calling from_dict on the json representation
        floating_ip_prototype_floating_ip_by_target_model = FloatingIPPrototypeFloatingIPByTarget.from_dict(
            floating_ip_prototype_floating_ip_by_target_model_json)
        assert floating_ip_prototype_floating_ip_by_target_model != False

        # Construct a model instance of FloatingIPPrototypeFloatingIPByTarget by calling from_dict on the json representation
        floating_ip_prototype_floating_ip_by_target_model_dict = FloatingIPPrototypeFloatingIPByTarget.from_dict(
            floating_ip_prototype_floating_ip_by_target_model_json).__dict__
        floating_ip_prototype_floating_ip_by_target_model2 = FloatingIPPrototypeFloatingIPByTarget(
            **floating_ip_prototype_floating_ip_by_target_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_prototype_floating_ip_by_target_model == floating_ip_prototype_floating_ip_by_target_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_prototype_floating_ip_by_target_model_json2 = floating_ip_prototype_floating_ip_by_target_model.to_dict(
        )
        assert floating_ip_prototype_floating_ip_by_target_model_json2 == floating_ip_prototype_floating_ip_by_target_model_json


class TestFloatingIPPrototypeFloatingIPByZone():
    """
    Test Class for FloatingIPPrototypeFloatingIPByZone
    """

    def test_floating_ip_prototype_floating_ip_by_zone_serialization(self):
        """
        Test serialization/deserialization for FloatingIPPrototypeFloatingIPByZone
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_identity_model = {}  # ResourceGroupIdentityById
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        zone_identity_model = {}  # ZoneIdentityByName
        zone_identity_model['name'] = 'us-south-1'

        # Construct a json representation of a FloatingIPPrototypeFloatingIPByZone model
        floating_ip_prototype_floating_ip_by_zone_model_json = {}
        floating_ip_prototype_floating_ip_by_zone_model_json[
            'name'] = 'my-floating-ip'
        floating_ip_prototype_floating_ip_by_zone_model_json[
            'resource_group'] = resource_group_identity_model
        floating_ip_prototype_floating_ip_by_zone_model_json[
            'zone'] = zone_identity_model

        # Construct a model instance of FloatingIPPrototypeFloatingIPByZone by calling from_dict on the json representation
        floating_ip_prototype_floating_ip_by_zone_model = FloatingIPPrototypeFloatingIPByZone.from_dict(
            floating_ip_prototype_floating_ip_by_zone_model_json)
        assert floating_ip_prototype_floating_ip_by_zone_model != False

        # Construct a model instance of FloatingIPPrototypeFloatingIPByZone by calling from_dict on the json representation
        floating_ip_prototype_floating_ip_by_zone_model_dict = FloatingIPPrototypeFloatingIPByZone.from_dict(
            floating_ip_prototype_floating_ip_by_zone_model_json).__dict__
        floating_ip_prototype_floating_ip_by_zone_model2 = FloatingIPPrototypeFloatingIPByZone(
            **floating_ip_prototype_floating_ip_by_zone_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_prototype_floating_ip_by_zone_model == floating_ip_prototype_floating_ip_by_zone_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_prototype_floating_ip_by_zone_model_json2 = floating_ip_prototype_floating_ip_by_zone_model.to_dict(
        )
        assert floating_ip_prototype_floating_ip_by_zone_model_json2 == floating_ip_prototype_floating_ip_by_zone_model_json


class TestFloatingIPTargetNetworkInterfaceReference():
    """
    Test Class for FloatingIPTargetNetworkInterfaceReference
    """

    def test_floating_ip_target_network_interface_reference_serialization(self):
        """
        Test serialization/deserialization for FloatingIPTargetNetworkInterfaceReference
        """

        # Construct a json representation of a FloatingIPTargetNetworkInterfaceReference model
        floating_ip_target_network_interface_reference_model_json = {}
        floating_ip_target_network_interface_reference_model_json[
            'name'] = 'my-network-interface'
        floating_ip_target_network_interface_reference_model_json[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        floating_ip_target_network_interface_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        floating_ip_target_network_interface_reference_model_json[
            'primary_ipv4_address'] = '192.168.3.4'
        floating_ip_target_network_interface_reference_model_json[
            'resource_type'] = 'network_interface'

        # Construct a model instance of FloatingIPTargetNetworkInterfaceReference by calling from_dict on the json representation
        floating_ip_target_network_interface_reference_model = FloatingIPTargetNetworkInterfaceReference.from_dict(
            floating_ip_target_network_interface_reference_model_json)
        assert floating_ip_target_network_interface_reference_model != False

        # Construct a model instance of FloatingIPTargetNetworkInterfaceReference by calling from_dict on the json representation
        floating_ip_target_network_interface_reference_model_dict = FloatingIPTargetNetworkInterfaceReference.from_dict(
            floating_ip_target_network_interface_reference_model_json).__dict__
        floating_ip_target_network_interface_reference_model2 = FloatingIPTargetNetworkInterfaceReference(
            **floating_ip_target_network_interface_reference_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_target_network_interface_reference_model == floating_ip_target_network_interface_reference_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_target_network_interface_reference_model_json2 = floating_ip_target_network_interface_reference_model.to_dict(
        )
        assert floating_ip_target_network_interface_reference_model_json2 == floating_ip_target_network_interface_reference_model_json


class TestFloatingIPTargetPublicGatewayReference():
    """
    Test Class for FloatingIPTargetPublicGatewayReference
    """

    def test_floating_ip_target_public_gateway_reference_serialization(self):
        """
        Test serialization/deserialization for FloatingIPTargetPublicGatewayReference
        """

        # Construct a json representation of a FloatingIPTargetPublicGatewayReference model
        floating_ip_target_public_gateway_reference_model_json = {}
        floating_ip_target_public_gateway_reference_model_json[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'
        floating_ip_target_public_gateway_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241'
        floating_ip_target_public_gateway_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241'
        floating_ip_target_public_gateway_reference_model_json[
            'name'] = 'my-public-gateway'
        floating_ip_target_public_gateway_reference_model_json[
            'resource_type'] = 'public_gateway'

        # Construct a model instance of FloatingIPTargetPublicGatewayReference by calling from_dict on the json representation
        floating_ip_target_public_gateway_reference_model = FloatingIPTargetPublicGatewayReference.from_dict(
            floating_ip_target_public_gateway_reference_model_json)
        assert floating_ip_target_public_gateway_reference_model != False

        # Construct a model instance of FloatingIPTargetPublicGatewayReference by calling from_dict on the json representation
        floating_ip_target_public_gateway_reference_model_dict = FloatingIPTargetPublicGatewayReference.from_dict(
            floating_ip_target_public_gateway_reference_model_json).__dict__
        floating_ip_target_public_gateway_reference_model2 = FloatingIPTargetPublicGatewayReference(
            **floating_ip_target_public_gateway_reference_model_dict)

        # Verify the model instances are equivalent
        assert floating_ip_target_public_gateway_reference_model == floating_ip_target_public_gateway_reference_model2

        # Convert model instance back to dict and verify no loss of data
        floating_ip_target_public_gateway_reference_model_json2 = floating_ip_target_public_gateway_reference_model.to_dict(
        )
        assert floating_ip_target_public_gateway_reference_model_json2 == floating_ip_target_public_gateway_reference_model_json


class TestFlowLogCollectorTargetInstanceReference():
    """
    Test Class for FlowLogCollectorTargetInstanceReference
    """

    def test_flow_log_collector_target_instance_reference_serialization(self):
        """
        Test serialization/deserialization for FlowLogCollectorTargetInstanceReference
        """

        # Construct a json representation of a FlowLogCollectorTargetInstanceReference model
        flow_log_collector_target_instance_reference_model_json = {}
        flow_log_collector_target_instance_reference_model_json[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        flow_log_collector_target_instance_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        flow_log_collector_target_instance_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        flow_log_collector_target_instance_reference_model_json[
            'name'] = 'my-instance'

        # Construct a model instance of FlowLogCollectorTargetInstanceReference by calling from_dict on the json representation
        flow_log_collector_target_instance_reference_model = FlowLogCollectorTargetInstanceReference.from_dict(
            flow_log_collector_target_instance_reference_model_json)
        assert flow_log_collector_target_instance_reference_model != False

        # Construct a model instance of FlowLogCollectorTargetInstanceReference by calling from_dict on the json representation
        flow_log_collector_target_instance_reference_model_dict = FlowLogCollectorTargetInstanceReference.from_dict(
            flow_log_collector_target_instance_reference_model_json).__dict__
        flow_log_collector_target_instance_reference_model2 = FlowLogCollectorTargetInstanceReference(
            **flow_log_collector_target_instance_reference_model_dict)

        # Verify the model instances are equivalent
        assert flow_log_collector_target_instance_reference_model == flow_log_collector_target_instance_reference_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_target_instance_reference_model_json2 = flow_log_collector_target_instance_reference_model.to_dict(
        )
        assert flow_log_collector_target_instance_reference_model_json2 == flow_log_collector_target_instance_reference_model_json


class TestFlowLogCollectorTargetNetworkInterfaceReferenceTargetContext():
    """
    Test Class for FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext
    """

    def test_flow_log_collector_target_network_interface_reference_target_context_serialization(
            self):
        """
        Test serialization/deserialization for FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext
        """

        # Construct a json representation of a FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext model
        flow_log_collector_target_network_interface_reference_target_context_model_json = {}
        flow_log_collector_target_network_interface_reference_target_context_model_json[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'
        flow_log_collector_target_network_interface_reference_target_context_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'
        flow_log_collector_target_network_interface_reference_target_context_model_json[
            'name'] = 'my-network-interface'
        flow_log_collector_target_network_interface_reference_target_context_model_json[
            'resource_type'] = 'network_interface'

        # Construct a model instance of FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext by calling from_dict on the json representation
        flow_log_collector_target_network_interface_reference_target_context_model = FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext.from_dict(
            flow_log_collector_target_network_interface_reference_target_context_model_json
        )
        assert flow_log_collector_target_network_interface_reference_target_context_model != False

        # Construct a model instance of FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext by calling from_dict on the json representation
        flow_log_collector_target_network_interface_reference_target_context_model_dict = FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext.from_dict(
            flow_log_collector_target_network_interface_reference_target_context_model_json
        ).__dict__
        flow_log_collector_target_network_interface_reference_target_context_model2 = FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext(
            **
            flow_log_collector_target_network_interface_reference_target_context_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_target_network_interface_reference_target_context_model == flow_log_collector_target_network_interface_reference_target_context_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_target_network_interface_reference_target_context_model_json2 = flow_log_collector_target_network_interface_reference_target_context_model.to_dict(
        )
        assert flow_log_collector_target_network_interface_reference_target_context_model_json2 == flow_log_collector_target_network_interface_reference_target_context_model_json


class TestFlowLogCollectorTargetSubnetReference():
    """
    Test Class for FlowLogCollectorTargetSubnetReference
    """

    def test_flow_log_collector_target_subnet_reference_serialization(self):
        """
        Test serialization/deserialization for FlowLogCollectorTargetSubnetReference
        """

        # Construct a json representation of a FlowLogCollectorTargetSubnetReference model
        flow_log_collector_target_subnet_reference_model_json = {}
        flow_log_collector_target_subnet_reference_model_json[
            'id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        flow_log_collector_target_subnet_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        flow_log_collector_target_subnet_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'
        flow_log_collector_target_subnet_reference_model_json[
            'name'] = 'my-subnet'

        # Construct a model instance of FlowLogCollectorTargetSubnetReference by calling from_dict on the json representation
        flow_log_collector_target_subnet_reference_model = FlowLogCollectorTargetSubnetReference.from_dict(
            flow_log_collector_target_subnet_reference_model_json)
        assert flow_log_collector_target_subnet_reference_model != False

        # Construct a model instance of FlowLogCollectorTargetSubnetReference by calling from_dict on the json representation
        flow_log_collector_target_subnet_reference_model_dict = FlowLogCollectorTargetSubnetReference.from_dict(
            flow_log_collector_target_subnet_reference_model_json).__dict__
        flow_log_collector_target_subnet_reference_model2 = FlowLogCollectorTargetSubnetReference(
            **flow_log_collector_target_subnet_reference_model_dict)

        # Verify the model instances are equivalent
        assert flow_log_collector_target_subnet_reference_model == flow_log_collector_target_subnet_reference_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_target_subnet_reference_model_json2 = flow_log_collector_target_subnet_reference_model.to_dict(
        )
        assert flow_log_collector_target_subnet_reference_model_json2 == flow_log_collector_target_subnet_reference_model_json


class TestFlowLogCollectorTargetVPCReference():
    """
    Test Class for FlowLogCollectorTargetVPCReference
    """

    def test_flow_log_collector_target_vpc_reference_serialization(self):
        """
        Test serialization/deserialization for FlowLogCollectorTargetVPCReference
        """

        # Construct a json representation of a FlowLogCollectorTargetVPCReference model
        flow_log_collector_target_vpc_reference_model_json = {}
        flow_log_collector_target_vpc_reference_model_json[
            'id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'
        flow_log_collector_target_vpc_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'
        flow_log_collector_target_vpc_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'
        flow_log_collector_target_vpc_reference_model_json['name'] = 'my-vpc'

        # Construct a model instance of FlowLogCollectorTargetVPCReference by calling from_dict on the json representation
        flow_log_collector_target_vpc_reference_model = FlowLogCollectorTargetVPCReference.from_dict(
            flow_log_collector_target_vpc_reference_model_json)
        assert flow_log_collector_target_vpc_reference_model != False

        # Construct a model instance of FlowLogCollectorTargetVPCReference by calling from_dict on the json representation
        flow_log_collector_target_vpc_reference_model_dict = FlowLogCollectorTargetVPCReference.from_dict(
            flow_log_collector_target_vpc_reference_model_json).__dict__
        flow_log_collector_target_vpc_reference_model2 = FlowLogCollectorTargetVPCReference(
            **flow_log_collector_target_vpc_reference_model_dict)

        # Verify the model instances are equivalent
        assert flow_log_collector_target_vpc_reference_model == flow_log_collector_target_vpc_reference_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_target_vpc_reference_model_json2 = flow_log_collector_target_vpc_reference_model.to_dict(
        )
        assert flow_log_collector_target_vpc_reference_model_json2 == flow_log_collector_target_vpc_reference_model_json


class TestIKEPolicyIdentityByHref():
    """
    Test Class for IKEPolicyIdentityByHref
    """

    def test_ike_policy_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for IKEPolicyIdentityByHref
        """

        # Construct a json representation of a IKEPolicyIdentityByHref model
        ike_policy_identity_by_href_model_json = {}
        ike_policy_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a model instance of IKEPolicyIdentityByHref by calling from_dict on the json representation
        ike_policy_identity_by_href_model = IKEPolicyIdentityByHref.from_dict(
            ike_policy_identity_by_href_model_json)
        assert ike_policy_identity_by_href_model != False

        # Construct a model instance of IKEPolicyIdentityByHref by calling from_dict on the json representation
        ike_policy_identity_by_href_model_dict = IKEPolicyIdentityByHref.from_dict(
            ike_policy_identity_by_href_model_json).__dict__
        ike_policy_identity_by_href_model2 = IKEPolicyIdentityByHref(
            **ike_policy_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert ike_policy_identity_by_href_model == ike_policy_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        ike_policy_identity_by_href_model_json2 = ike_policy_identity_by_href_model.to_dict(
        )
        assert ike_policy_identity_by_href_model_json2 == ike_policy_identity_by_href_model_json


class TestIKEPolicyIdentityById():
    """
    Test Class for IKEPolicyIdentityById
    """

    def test_ike_policy_identity_by_id_serialization(self):
        """
        Test serialization/deserialization for IKEPolicyIdentityById
        """

        # Construct a json representation of a IKEPolicyIdentityById model
        ike_policy_identity_by_id_model_json = {}
        ike_policy_identity_by_id_model_json[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a model instance of IKEPolicyIdentityById by calling from_dict on the json representation
        ike_policy_identity_by_id_model = IKEPolicyIdentityById.from_dict(
            ike_policy_identity_by_id_model_json)
        assert ike_policy_identity_by_id_model != False

        # Construct a model instance of IKEPolicyIdentityById by calling from_dict on the json representation
        ike_policy_identity_by_id_model_dict = IKEPolicyIdentityById.from_dict(
            ike_policy_identity_by_id_model_json).__dict__
        ike_policy_identity_by_id_model2 = IKEPolicyIdentityById(
            **ike_policy_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert ike_policy_identity_by_id_model == ike_policy_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        ike_policy_identity_by_id_model_json2 = ike_policy_identity_by_id_model.to_dict(
        )
        assert ike_policy_identity_by_id_model_json2 == ike_policy_identity_by_id_model_json


class TestIPsecPolicyIdentityByHref():
    """
    Test Class for IPsecPolicyIdentityByHref
    """

    def test_i_psec_policy_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for IPsecPolicyIdentityByHref
        """

        # Construct a json representation of a IPsecPolicyIdentityByHref model
        i_psec_policy_identity_by_href_model_json = {}
        i_psec_policy_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a model instance of IPsecPolicyIdentityByHref by calling from_dict on the json representation
        i_psec_policy_identity_by_href_model = IPsecPolicyIdentityByHref.from_dict(
            i_psec_policy_identity_by_href_model_json)
        assert i_psec_policy_identity_by_href_model != False

        # Construct a model instance of IPsecPolicyIdentityByHref by calling from_dict on the json representation
        i_psec_policy_identity_by_href_model_dict = IPsecPolicyIdentityByHref.from_dict(
            i_psec_policy_identity_by_href_model_json).__dict__
        i_psec_policy_identity_by_href_model2 = IPsecPolicyIdentityByHref(
            **i_psec_policy_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert i_psec_policy_identity_by_href_model == i_psec_policy_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        i_psec_policy_identity_by_href_model_json2 = i_psec_policy_identity_by_href_model.to_dict(
        )
        assert i_psec_policy_identity_by_href_model_json2 == i_psec_policy_identity_by_href_model_json


class TestIPsecPolicyIdentityById():
    """
    Test Class for IPsecPolicyIdentityById
    """

    def test_i_psec_policy_identity_by_id_serialization(self):
        """
        Test serialization/deserialization for IPsecPolicyIdentityById
        """

        # Construct a json representation of a IPsecPolicyIdentityById model
        i_psec_policy_identity_by_id_model_json = {}
        i_psec_policy_identity_by_id_model_json[
            'id'] = 'ddf51bec-3424-11e8-b467-0ed5f89f718b'

        # Construct a model instance of IPsecPolicyIdentityById by calling from_dict on the json representation
        i_psec_policy_identity_by_id_model = IPsecPolicyIdentityById.from_dict(
            i_psec_policy_identity_by_id_model_json)
        assert i_psec_policy_identity_by_id_model != False

        # Construct a model instance of IPsecPolicyIdentityById by calling from_dict on the json representation
        i_psec_policy_identity_by_id_model_dict = IPsecPolicyIdentityById.from_dict(
            i_psec_policy_identity_by_id_model_json).__dict__
        i_psec_policy_identity_by_id_model2 = IPsecPolicyIdentityById(
            **i_psec_policy_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert i_psec_policy_identity_by_id_model == i_psec_policy_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        i_psec_policy_identity_by_id_model_json2 = i_psec_policy_identity_by_id_model.to_dict(
        )
        assert i_psec_policy_identity_by_id_model_json2 == i_psec_policy_identity_by_id_model_json


class TestImageIdentityByCRN():
    """
    Test Class for ImageIdentityByCRN
    """

    def test_image_identity_by_crn_serialization(self):
        """
        Test serialization/deserialization for ImageIdentityByCRN
        """

        # Construct a json representation of a ImageIdentityByCRN model
        image_identity_by_crn_model_json = {}
        image_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        # Construct a model instance of ImageIdentityByCRN by calling from_dict on the json representation
        image_identity_by_crn_model = ImageIdentityByCRN.from_dict(
            image_identity_by_crn_model_json)
        assert image_identity_by_crn_model != False

        # Construct a model instance of ImageIdentityByCRN by calling from_dict on the json representation
        image_identity_by_crn_model_dict = ImageIdentityByCRN.from_dict(
            image_identity_by_crn_model_json).__dict__
        image_identity_by_crn_model2 = ImageIdentityByCRN(
            **image_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert image_identity_by_crn_model == image_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        image_identity_by_crn_model_json2 = image_identity_by_crn_model.to_dict(
        )
        assert image_identity_by_crn_model_json2 == image_identity_by_crn_model_json


class TestImageIdentityByHref():
    """
    Test Class for ImageIdentityByHref
    """

    def test_image_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for ImageIdentityByHref
        """

        # Construct a json representation of a ImageIdentityByHref model
        image_identity_by_href_model_json = {}
        image_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        # Construct a model instance of ImageIdentityByHref by calling from_dict on the json representation
        image_identity_by_href_model = ImageIdentityByHref.from_dict(
            image_identity_by_href_model_json)
        assert image_identity_by_href_model != False

        # Construct a model instance of ImageIdentityByHref by calling from_dict on the json representation
        image_identity_by_href_model_dict = ImageIdentityByHref.from_dict(
            image_identity_by_href_model_json).__dict__
        image_identity_by_href_model2 = ImageIdentityByHref(
            **image_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert image_identity_by_href_model == image_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        image_identity_by_href_model_json2 = image_identity_by_href_model.to_dict(
        )
        assert image_identity_by_href_model_json2 == image_identity_by_href_model_json


class TestImageIdentityById():
    """
    Test Class for ImageIdentityById
    """

    def test_image_identity_by_id_serialization(self):
        """
        Test serialization/deserialization for ImageIdentityById
        """

        # Construct a json representation of a ImageIdentityById model
        image_identity_by_id_model_json = {}
        image_identity_by_id_model_json[
            'id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        # Construct a model instance of ImageIdentityById by calling from_dict on the json representation
        image_identity_by_id_model = ImageIdentityById.from_dict(
            image_identity_by_id_model_json)
        assert image_identity_by_id_model != False

        # Construct a model instance of ImageIdentityById by calling from_dict on the json representation
        image_identity_by_id_model_dict = ImageIdentityById.from_dict(
            image_identity_by_id_model_json).__dict__
        image_identity_by_id_model2 = ImageIdentityById(
            **image_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert image_identity_by_id_model == image_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        image_identity_by_id_model_json2 = image_identity_by_id_model.to_dict()
        assert image_identity_by_id_model_json2 == image_identity_by_id_model_json


class TestImagePrototypeImageByFile():
    """
    Test Class for ImagePrototypeImageByFile
    """

    def test_image_prototype_image_by_file_serialization(self):
        """
        Test serialization/deserialization for ImagePrototypeImageByFile
        """

        # Construct dict forms of any model objects needed in order to build this model.

        encryption_key_reference_model = {}  # EncryptionKeyReference
        encryption_key_reference_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        resource_group_identity_model = {}  # ResourceGroupIdentityById
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        image_file_prototype_model = {}  # ImageFilePrototype
        image_file_prototype_model[
            'href'] = 'cos://us-south/custom-image-vpc-bucket/customImage-0.vhd'

        operating_system_identity_model = {}  # OperatingSystemIdentityByName
        operating_system_identity_model['name'] = 'ubuntu-16-amd64'

        # Construct a json representation of a ImagePrototypeImageByFile model
        image_prototype_image_by_file_model_json = {}
        image_prototype_image_by_file_model_json['name'] = 'my-image'
        image_prototype_image_by_file_model_json[
            'encrypted_data_key'] = 'testString'
        image_prototype_image_by_file_model_json[
            'encryption_key'] = encryption_key_reference_model
        image_prototype_image_by_file_model_json[
            'resource_group'] = resource_group_identity_model
        image_prototype_image_by_file_model_json[
            'file'] = image_file_prototype_model
        image_prototype_image_by_file_model_json[
            'operating_system'] = operating_system_identity_model

        # Construct a model instance of ImagePrototypeImageByFile by calling from_dict on the json representation
        image_prototype_image_by_file_model = ImagePrototypeImageByFile.from_dict(
            image_prototype_image_by_file_model_json)
        assert image_prototype_image_by_file_model != False

        # Construct a model instance of ImagePrototypeImageByFile by calling from_dict on the json representation
        image_prototype_image_by_file_model_dict = ImagePrototypeImageByFile.from_dict(
            image_prototype_image_by_file_model_json).__dict__
        image_prototype_image_by_file_model2 = ImagePrototypeImageByFile(
            **image_prototype_image_by_file_model_dict)

        # Verify the model instances are equivalent
        assert image_prototype_image_by_file_model == image_prototype_image_by_file_model2

        # Convert model instance back to dict and verify no loss of data
        image_prototype_image_by_file_model_json2 = image_prototype_image_by_file_model.to_dict(
        )
        assert image_prototype_image_by_file_model_json2 == image_prototype_image_by_file_model_json


class TestInstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype(
):
    """
    Test Class for InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype
    """

    def test_instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_serialization(
            self):
        """
        Test serialization/deserialization for InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype
        """

        # Construct a json representation of a InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype model
        instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_model_json = {}
        instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_model_json[
            'name'] = 'my-instance-group-manager-policy'
        instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_model_json[
            'metric_type'] = 'cpu'
        instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_model_json[
            'metric_value'] = 38
        instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_model_json[
            'policy_type'] = 'target'

        # Construct a model instance of InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype by calling from_dict on the json representation
        instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_model = InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype.from_dict(
            instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_model_json
        )
        assert instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_model != False

        # Construct a model instance of InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype by calling from_dict on the json representation
        instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_model_dict = InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype.from_dict(
            instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_model_json
        ).__dict__
        instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_model2 = InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype(
            **
            instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_model_dict
        )

        # Verify the model instances are equivalent
        assert instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_model == instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_model_json2 = instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_model.to_dict(
        )
        assert instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_model_json2 == instance_group_manager_policy_prototype_instance_group_manager_target_policy_prototype_model_json


class TestInstanceGroupManagerPolicyInstanceGroupManagerTargetPolicy():
    """
    Test Class for InstanceGroupManagerPolicyInstanceGroupManagerTargetPolicy
    """

    def test_instance_group_manager_policy_instance_group_manager_target_policy_serialization(
            self):
        """
        Test serialization/deserialization for InstanceGroupManagerPolicyInstanceGroupManagerTargetPolicy
        """

        # Construct a json representation of a InstanceGroupManagerPolicyInstanceGroupManagerTargetPolicy model
        instance_group_manager_policy_instance_group_manager_target_policy_model_json = {}
        instance_group_manager_policy_instance_group_manager_target_policy_model_json[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_manager_policy_instance_group_manager_target_policy_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_group_manager_policy_instance_group_manager_target_policy_model_json[
            'name'] = 'my-instance-group-manager-policy'
        instance_group_manager_policy_instance_group_manager_target_policy_model_json[
            'metric_type'] = 'cpu'
        instance_group_manager_policy_instance_group_manager_target_policy_model_json[
            'metric_value'] = 38
        instance_group_manager_policy_instance_group_manager_target_policy_model_json[
            'policy_type'] = 'target'

        # Construct a model instance of InstanceGroupManagerPolicyInstanceGroupManagerTargetPolicy by calling from_dict on the json representation
        instance_group_manager_policy_instance_group_manager_target_policy_model = InstanceGroupManagerPolicyInstanceGroupManagerTargetPolicy.from_dict(
            instance_group_manager_policy_instance_group_manager_target_policy_model_json
        )
        assert instance_group_manager_policy_instance_group_manager_target_policy_model != False

        # Construct a model instance of InstanceGroupManagerPolicyInstanceGroupManagerTargetPolicy by calling from_dict on the json representation
        instance_group_manager_policy_instance_group_manager_target_policy_model_dict = InstanceGroupManagerPolicyInstanceGroupManagerTargetPolicy.from_dict(
            instance_group_manager_policy_instance_group_manager_target_policy_model_json
        ).__dict__
        instance_group_manager_policy_instance_group_manager_target_policy_model2 = InstanceGroupManagerPolicyInstanceGroupManagerTargetPolicy(
            **
            instance_group_manager_policy_instance_group_manager_target_policy_model_dict
        )

        # Verify the model instances are equivalent
        assert instance_group_manager_policy_instance_group_manager_target_policy_model == instance_group_manager_policy_instance_group_manager_target_policy_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_manager_policy_instance_group_manager_target_policy_model_json2 = instance_group_manager_policy_instance_group_manager_target_policy_model.to_dict(
        )
        assert instance_group_manager_policy_instance_group_manager_target_policy_model_json2 == instance_group_manager_policy_instance_group_manager_target_policy_model_json


class TestInstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype():
    """
    Test Class for InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype
    """

    def test_instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_serialization(
            self):
        """
        Test serialization/deserialization for InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype
        """

        # Construct a json representation of a InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype model
        instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model_json = {}
        instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model_json[
            'name'] = 'my-instance-group-manager'
        instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model_json[
            'management_enabled'] = True
        instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model_json[
            'aggregation_window'] = 120
        instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model_json[
            'cooldown'] = 210
        instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model_json[
            'max_membership_count'] = 10
        instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model_json[
            'min_membership_count'] = 10
        instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model_json[
            'manager_type'] = 'autoscale'

        # Construct a model instance of InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype by calling from_dict on the json representation
        instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model = InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype.from_dict(
            instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model_json
        )
        assert instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model != False

        # Construct a model instance of InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype by calling from_dict on the json representation
        instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model_dict = InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype.from_dict(
            instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model_json
        ).__dict__
        instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model2 = InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype(
            **
            instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model_dict
        )

        # Verify the model instances are equivalent
        assert instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model == instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model_json2 = instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model.to_dict(
        )
        assert instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model_json2 == instance_group_manager_prototype_instance_group_manager_auto_scale_prototype_model_json


class TestInstanceProfileBandwidthDependent():
    """
    Test Class for InstanceProfileBandwidthDependent
    """

    def test_instance_profile_bandwidth_dependent_serialization(self):
        """
        Test serialization/deserialization for InstanceProfileBandwidthDependent
        """

        # Construct a json representation of a InstanceProfileBandwidthDependent model
        instance_profile_bandwidth_dependent_model_json = {}
        instance_profile_bandwidth_dependent_model_json['type'] = 'dependent'

        # Construct a model instance of InstanceProfileBandwidthDependent by calling from_dict on the json representation
        instance_profile_bandwidth_dependent_model = InstanceProfileBandwidthDependent.from_dict(
            instance_profile_bandwidth_dependent_model_json)
        assert instance_profile_bandwidth_dependent_model != False

        # Construct a model instance of InstanceProfileBandwidthDependent by calling from_dict on the json representation
        instance_profile_bandwidth_dependent_model_dict = InstanceProfileBandwidthDependent.from_dict(
            instance_profile_bandwidth_dependent_model_json).__dict__
        instance_profile_bandwidth_dependent_model2 = InstanceProfileBandwidthDependent(
            **instance_profile_bandwidth_dependent_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_bandwidth_dependent_model == instance_profile_bandwidth_dependent_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_bandwidth_dependent_model_json2 = instance_profile_bandwidth_dependent_model.to_dict(
        )
        assert instance_profile_bandwidth_dependent_model_json2 == instance_profile_bandwidth_dependent_model_json


class TestInstanceProfileBandwidthEnum():
    """
    Test Class for InstanceProfileBandwidthEnum
    """

    def test_instance_profile_bandwidth_enum_serialization(self):
        """
        Test serialization/deserialization for InstanceProfileBandwidthEnum
        """

        # Construct a json representation of a InstanceProfileBandwidthEnum model
        instance_profile_bandwidth_enum_model_json = {}
        instance_profile_bandwidth_enum_model_json['type'] = 'enum'
        instance_profile_bandwidth_enum_model_json['default'] = 38
        instance_profile_bandwidth_enum_model_json['values'] = [38]

        # Construct a model instance of InstanceProfileBandwidthEnum by calling from_dict on the json representation
        instance_profile_bandwidth_enum_model = InstanceProfileBandwidthEnum.from_dict(
            instance_profile_bandwidth_enum_model_json)
        assert instance_profile_bandwidth_enum_model != False

        # Construct a model instance of InstanceProfileBandwidthEnum by calling from_dict on the json representation
        instance_profile_bandwidth_enum_model_dict = InstanceProfileBandwidthEnum.from_dict(
            instance_profile_bandwidth_enum_model_json).__dict__
        instance_profile_bandwidth_enum_model2 = InstanceProfileBandwidthEnum(
            **instance_profile_bandwidth_enum_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_bandwidth_enum_model == instance_profile_bandwidth_enum_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_bandwidth_enum_model_json2 = instance_profile_bandwidth_enum_model.to_dict(
        )
        assert instance_profile_bandwidth_enum_model_json2 == instance_profile_bandwidth_enum_model_json


class TestInstanceProfileBandwidthFixed():
    """
    Test Class for InstanceProfileBandwidthFixed
    """

    def test_instance_profile_bandwidth_fixed_serialization(self):
        """
        Test serialization/deserialization for InstanceProfileBandwidthFixed
        """

        # Construct a json representation of a InstanceProfileBandwidthFixed model
        instance_profile_bandwidth_fixed_model_json = {}
        instance_profile_bandwidth_fixed_model_json['type'] = 'fixed'
        instance_profile_bandwidth_fixed_model_json['value'] = 20000

        # Construct a model instance of InstanceProfileBandwidthFixed by calling from_dict on the json representation
        instance_profile_bandwidth_fixed_model = InstanceProfileBandwidthFixed.from_dict(
            instance_profile_bandwidth_fixed_model_json)
        assert instance_profile_bandwidth_fixed_model != False

        # Construct a model instance of InstanceProfileBandwidthFixed by calling from_dict on the json representation
        instance_profile_bandwidth_fixed_model_dict = InstanceProfileBandwidthFixed.from_dict(
            instance_profile_bandwidth_fixed_model_json).__dict__
        instance_profile_bandwidth_fixed_model2 = InstanceProfileBandwidthFixed(
            **instance_profile_bandwidth_fixed_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_bandwidth_fixed_model == instance_profile_bandwidth_fixed_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_bandwidth_fixed_model_json2 = instance_profile_bandwidth_fixed_model.to_dict(
        )
        assert instance_profile_bandwidth_fixed_model_json2 == instance_profile_bandwidth_fixed_model_json


class TestInstanceProfileBandwidthRange():
    """
    Test Class for InstanceProfileBandwidthRange
    """

    def test_instance_profile_bandwidth_range_serialization(self):
        """
        Test serialization/deserialization for InstanceProfileBandwidthRange
        """

        # Construct a json representation of a InstanceProfileBandwidthRange model
        instance_profile_bandwidth_range_model_json = {}
        instance_profile_bandwidth_range_model_json['type'] = 'range'
        instance_profile_bandwidth_range_model_json['default'] = 10000
        instance_profile_bandwidth_range_model_json['max'] = 80000
        instance_profile_bandwidth_range_model_json['min'] = 1000
        instance_profile_bandwidth_range_model_json['step'] = 1000

        # Construct a model instance of InstanceProfileBandwidthRange by calling from_dict on the json representation
        instance_profile_bandwidth_range_model = InstanceProfileBandwidthRange.from_dict(
            instance_profile_bandwidth_range_model_json)
        assert instance_profile_bandwidth_range_model != False

        # Construct a model instance of InstanceProfileBandwidthRange by calling from_dict on the json representation
        instance_profile_bandwidth_range_model_dict = InstanceProfileBandwidthRange.from_dict(
            instance_profile_bandwidth_range_model_json).__dict__
        instance_profile_bandwidth_range_model2 = InstanceProfileBandwidthRange(
            **instance_profile_bandwidth_range_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_bandwidth_range_model == instance_profile_bandwidth_range_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_bandwidth_range_model_json2 = instance_profile_bandwidth_range_model.to_dict(
        )
        assert instance_profile_bandwidth_range_model_json2 == instance_profile_bandwidth_range_model_json


class TestInstanceProfileIdentityByHref():
    """
    Test Class for InstanceProfileIdentityByHref
    """

    def test_instance_profile_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for InstanceProfileIdentityByHref
        """

        # Construct a json representation of a InstanceProfileIdentityByHref model
        instance_profile_identity_by_href_model_json = {}
        instance_profile_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16'

        # Construct a model instance of InstanceProfileIdentityByHref by calling from_dict on the json representation
        instance_profile_identity_by_href_model = InstanceProfileIdentityByHref.from_dict(
            instance_profile_identity_by_href_model_json)
        assert instance_profile_identity_by_href_model != False

        # Construct a model instance of InstanceProfileIdentityByHref by calling from_dict on the json representation
        instance_profile_identity_by_href_model_dict = InstanceProfileIdentityByHref.from_dict(
            instance_profile_identity_by_href_model_json).__dict__
        instance_profile_identity_by_href_model2 = InstanceProfileIdentityByHref(
            **instance_profile_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_identity_by_href_model == instance_profile_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_identity_by_href_model_json2 = instance_profile_identity_by_href_model.to_dict(
        )
        assert instance_profile_identity_by_href_model_json2 == instance_profile_identity_by_href_model_json


class TestInstanceProfileIdentityByName():
    """
    Test Class for InstanceProfileIdentityByName
    """

    def test_instance_profile_identity_by_name_serialization(self):
        """
        Test serialization/deserialization for InstanceProfileIdentityByName
        """

        # Construct a json representation of a InstanceProfileIdentityByName model
        instance_profile_identity_by_name_model_json = {}
        instance_profile_identity_by_name_model_json['name'] = 'bc1-4x16'

        # Construct a model instance of InstanceProfileIdentityByName by calling from_dict on the json representation
        instance_profile_identity_by_name_model = InstanceProfileIdentityByName.from_dict(
            instance_profile_identity_by_name_model_json)
        assert instance_profile_identity_by_name_model != False

        # Construct a model instance of InstanceProfileIdentityByName by calling from_dict on the json representation
        instance_profile_identity_by_name_model_dict = InstanceProfileIdentityByName.from_dict(
            instance_profile_identity_by_name_model_json).__dict__
        instance_profile_identity_by_name_model2 = InstanceProfileIdentityByName(
            **instance_profile_identity_by_name_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_identity_by_name_model == instance_profile_identity_by_name_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_identity_by_name_model_json2 = instance_profile_identity_by_name_model.to_dict(
        )
        assert instance_profile_identity_by_name_model_json2 == instance_profile_identity_by_name_model_json


class TestInstanceProfileMemoryDependent():
    """
    Test Class for InstanceProfileMemoryDependent
    """

    def test_instance_profile_memory_dependent_serialization(self):
        """
        Test serialization/deserialization for InstanceProfileMemoryDependent
        """

        # Construct a json representation of a InstanceProfileMemoryDependent model
        instance_profile_memory_dependent_model_json = {}
        instance_profile_memory_dependent_model_json['type'] = 'dependent'

        # Construct a model instance of InstanceProfileMemoryDependent by calling from_dict on the json representation
        instance_profile_memory_dependent_model = InstanceProfileMemoryDependent.from_dict(
            instance_profile_memory_dependent_model_json)
        assert instance_profile_memory_dependent_model != False

        # Construct a model instance of InstanceProfileMemoryDependent by calling from_dict on the json representation
        instance_profile_memory_dependent_model_dict = InstanceProfileMemoryDependent.from_dict(
            instance_profile_memory_dependent_model_json).__dict__
        instance_profile_memory_dependent_model2 = InstanceProfileMemoryDependent(
            **instance_profile_memory_dependent_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_memory_dependent_model == instance_profile_memory_dependent_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_memory_dependent_model_json2 = instance_profile_memory_dependent_model.to_dict(
        )
        assert instance_profile_memory_dependent_model_json2 == instance_profile_memory_dependent_model_json


class TestInstanceProfileMemoryEnum():
    """
    Test Class for InstanceProfileMemoryEnum
    """

    def test_instance_profile_memory_enum_serialization(self):
        """
        Test serialization/deserialization for InstanceProfileMemoryEnum
        """

        # Construct a json representation of a InstanceProfileMemoryEnum model
        instance_profile_memory_enum_model_json = {}
        instance_profile_memory_enum_model_json['type'] = 'enum'
        instance_profile_memory_enum_model_json['default'] = 38
        instance_profile_memory_enum_model_json['values'] = [38]

        # Construct a model instance of InstanceProfileMemoryEnum by calling from_dict on the json representation
        instance_profile_memory_enum_model = InstanceProfileMemoryEnum.from_dict(
            instance_profile_memory_enum_model_json)
        assert instance_profile_memory_enum_model != False

        # Construct a model instance of InstanceProfileMemoryEnum by calling from_dict on the json representation
        instance_profile_memory_enum_model_dict = InstanceProfileMemoryEnum.from_dict(
            instance_profile_memory_enum_model_json).__dict__
        instance_profile_memory_enum_model2 = InstanceProfileMemoryEnum(
            **instance_profile_memory_enum_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_memory_enum_model == instance_profile_memory_enum_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_memory_enum_model_json2 = instance_profile_memory_enum_model.to_dict(
        )
        assert instance_profile_memory_enum_model_json2 == instance_profile_memory_enum_model_json


class TestInstanceProfileMemoryFixed():
    """
    Test Class for InstanceProfileMemoryFixed
    """

    def test_instance_profile_memory_fixed_serialization(self):
        """
        Test serialization/deserialization for InstanceProfileMemoryFixed
        """

        # Construct a json representation of a InstanceProfileMemoryFixed model
        instance_profile_memory_fixed_model_json = {}
        instance_profile_memory_fixed_model_json['type'] = 'fixed'
        instance_profile_memory_fixed_model_json['value'] = 16

        # Construct a model instance of InstanceProfileMemoryFixed by calling from_dict on the json representation
        instance_profile_memory_fixed_model = InstanceProfileMemoryFixed.from_dict(
            instance_profile_memory_fixed_model_json)
        assert instance_profile_memory_fixed_model != False

        # Construct a model instance of InstanceProfileMemoryFixed by calling from_dict on the json representation
        instance_profile_memory_fixed_model_dict = InstanceProfileMemoryFixed.from_dict(
            instance_profile_memory_fixed_model_json).__dict__
        instance_profile_memory_fixed_model2 = InstanceProfileMemoryFixed(
            **instance_profile_memory_fixed_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_memory_fixed_model == instance_profile_memory_fixed_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_memory_fixed_model_json2 = instance_profile_memory_fixed_model.to_dict(
        )
        assert instance_profile_memory_fixed_model_json2 == instance_profile_memory_fixed_model_json


class TestInstanceProfileMemoryRange():
    """
    Test Class for InstanceProfileMemoryRange
    """

    def test_instance_profile_memory_range_serialization(self):
        """
        Test serialization/deserialization for InstanceProfileMemoryRange
        """

        # Construct a json representation of a InstanceProfileMemoryRange model
        instance_profile_memory_range_model_json = {}
        instance_profile_memory_range_model_json['type'] = 'range'
        instance_profile_memory_range_model_json['default'] = 16
        instance_profile_memory_range_model_json['max'] = 384
        instance_profile_memory_range_model_json['min'] = 8
        instance_profile_memory_range_model_json['step'] = 8

        # Construct a model instance of InstanceProfileMemoryRange by calling from_dict on the json representation
        instance_profile_memory_range_model = InstanceProfileMemoryRange.from_dict(
            instance_profile_memory_range_model_json)
        assert instance_profile_memory_range_model != False

        # Construct a model instance of InstanceProfileMemoryRange by calling from_dict on the json representation
        instance_profile_memory_range_model_dict = InstanceProfileMemoryRange.from_dict(
            instance_profile_memory_range_model_json).__dict__
        instance_profile_memory_range_model2 = InstanceProfileMemoryRange(
            **instance_profile_memory_range_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_memory_range_model == instance_profile_memory_range_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_memory_range_model_json2 = instance_profile_memory_range_model.to_dict(
        )
        assert instance_profile_memory_range_model_json2 == instance_profile_memory_range_model_json


class TestInstanceProfilePortSpeedDependent():
    """
    Test Class for InstanceProfilePortSpeedDependent
    """

    def test_instance_profile_port_speed_dependent_serialization(self):
        """
        Test serialization/deserialization for InstanceProfilePortSpeedDependent
        """

        # Construct a json representation of a InstanceProfilePortSpeedDependent model
        instance_profile_port_speed_dependent_model_json = {}
        instance_profile_port_speed_dependent_model_json['type'] = 'dependent'

        # Construct a model instance of InstanceProfilePortSpeedDependent by calling from_dict on the json representation
        instance_profile_port_speed_dependent_model = InstanceProfilePortSpeedDependent.from_dict(
            instance_profile_port_speed_dependent_model_json)
        assert instance_profile_port_speed_dependent_model != False

        # Construct a model instance of InstanceProfilePortSpeedDependent by calling from_dict on the json representation
        instance_profile_port_speed_dependent_model_dict = InstanceProfilePortSpeedDependent.from_dict(
            instance_profile_port_speed_dependent_model_json).__dict__
        instance_profile_port_speed_dependent_model2 = InstanceProfilePortSpeedDependent(
            **instance_profile_port_speed_dependent_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_port_speed_dependent_model == instance_profile_port_speed_dependent_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_port_speed_dependent_model_json2 = instance_profile_port_speed_dependent_model.to_dict(
        )
        assert instance_profile_port_speed_dependent_model_json2 == instance_profile_port_speed_dependent_model_json


class TestInstanceProfilePortSpeedFixed():
    """
    Test Class for InstanceProfilePortSpeedFixed
    """

    def test_instance_profile_port_speed_fixed_serialization(self):
        """
        Test serialization/deserialization for InstanceProfilePortSpeedFixed
        """

        # Construct a json representation of a InstanceProfilePortSpeedFixed model
        instance_profile_port_speed_fixed_model_json = {}
        instance_profile_port_speed_fixed_model_json['type'] = 'fixed'
        instance_profile_port_speed_fixed_model_json['value'] = 1000

        # Construct a model instance of InstanceProfilePortSpeedFixed by calling from_dict on the json representation
        instance_profile_port_speed_fixed_model = InstanceProfilePortSpeedFixed.from_dict(
            instance_profile_port_speed_fixed_model_json)
        assert instance_profile_port_speed_fixed_model != False

        # Construct a model instance of InstanceProfilePortSpeedFixed by calling from_dict on the json representation
        instance_profile_port_speed_fixed_model_dict = InstanceProfilePortSpeedFixed.from_dict(
            instance_profile_port_speed_fixed_model_json).__dict__
        instance_profile_port_speed_fixed_model2 = InstanceProfilePortSpeedFixed(
            **instance_profile_port_speed_fixed_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_port_speed_fixed_model == instance_profile_port_speed_fixed_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_port_speed_fixed_model_json2 = instance_profile_port_speed_fixed_model.to_dict(
        )
        assert instance_profile_port_speed_fixed_model_json2 == instance_profile_port_speed_fixed_model_json


class TestInstanceProfileVCPUDependent():
    """
    Test Class for InstanceProfileVCPUDependent
    """

    def test_instance_profile_vcpu_dependent_serialization(self):
        """
        Test serialization/deserialization for InstanceProfileVCPUDependent
        """

        # Construct a json representation of a InstanceProfileVCPUDependent model
        instance_profile_vcpu_dependent_model_json = {}
        instance_profile_vcpu_dependent_model_json['type'] = 'dependent'

        # Construct a model instance of InstanceProfileVCPUDependent by calling from_dict on the json representation
        instance_profile_vcpu_dependent_model = InstanceProfileVCPUDependent.from_dict(
            instance_profile_vcpu_dependent_model_json)
        assert instance_profile_vcpu_dependent_model != False

        # Construct a model instance of InstanceProfileVCPUDependent by calling from_dict on the json representation
        instance_profile_vcpu_dependent_model_dict = InstanceProfileVCPUDependent.from_dict(
            instance_profile_vcpu_dependent_model_json).__dict__
        instance_profile_vcpu_dependent_model2 = InstanceProfileVCPUDependent(
            **instance_profile_vcpu_dependent_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_vcpu_dependent_model == instance_profile_vcpu_dependent_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_vcpu_dependent_model_json2 = instance_profile_vcpu_dependent_model.to_dict(
        )
        assert instance_profile_vcpu_dependent_model_json2 == instance_profile_vcpu_dependent_model_json


class TestInstanceProfileVCPUEnum():
    """
    Test Class for InstanceProfileVCPUEnum
    """

    def test_instance_profile_vcpu_enum_serialization(self):
        """
        Test serialization/deserialization for InstanceProfileVCPUEnum
        """

        # Construct a json representation of a InstanceProfileVCPUEnum model
        instance_profile_vcpu_enum_model_json = {}
        instance_profile_vcpu_enum_model_json['type'] = 'enum'
        instance_profile_vcpu_enum_model_json['default'] = 38
        instance_profile_vcpu_enum_model_json['values'] = [38]

        # Construct a model instance of InstanceProfileVCPUEnum by calling from_dict on the json representation
        instance_profile_vcpu_enum_model = InstanceProfileVCPUEnum.from_dict(
            instance_profile_vcpu_enum_model_json)
        assert instance_profile_vcpu_enum_model != False

        # Construct a model instance of InstanceProfileVCPUEnum by calling from_dict on the json representation
        instance_profile_vcpu_enum_model_dict = InstanceProfileVCPUEnum.from_dict(
            instance_profile_vcpu_enum_model_json).__dict__
        instance_profile_vcpu_enum_model2 = InstanceProfileVCPUEnum(
            **instance_profile_vcpu_enum_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_vcpu_enum_model == instance_profile_vcpu_enum_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_vcpu_enum_model_json2 = instance_profile_vcpu_enum_model.to_dict(
        )
        assert instance_profile_vcpu_enum_model_json2 == instance_profile_vcpu_enum_model_json


class TestInstanceProfileVCPUFixed():
    """
    Test Class for InstanceProfileVCPUFixed
    """

    def test_instance_profile_vcpu_fixed_serialization(self):
        """
        Test serialization/deserialization for InstanceProfileVCPUFixed
        """

        # Construct a json representation of a InstanceProfileVCPUFixed model
        instance_profile_vcpu_fixed_model_json = {}
        instance_profile_vcpu_fixed_model_json['type'] = 'fixed'
        instance_profile_vcpu_fixed_model_json['value'] = 16

        # Construct a model instance of InstanceProfileVCPUFixed by calling from_dict on the json representation
        instance_profile_vcpu_fixed_model = InstanceProfileVCPUFixed.from_dict(
            instance_profile_vcpu_fixed_model_json)
        assert instance_profile_vcpu_fixed_model != False

        # Construct a model instance of InstanceProfileVCPUFixed by calling from_dict on the json representation
        instance_profile_vcpu_fixed_model_dict = InstanceProfileVCPUFixed.from_dict(
            instance_profile_vcpu_fixed_model_json).__dict__
        instance_profile_vcpu_fixed_model2 = InstanceProfileVCPUFixed(
            **instance_profile_vcpu_fixed_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_vcpu_fixed_model == instance_profile_vcpu_fixed_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_vcpu_fixed_model_json2 = instance_profile_vcpu_fixed_model.to_dict(
        )
        assert instance_profile_vcpu_fixed_model_json2 == instance_profile_vcpu_fixed_model_json


class TestInstanceProfileVCPURange():
    """
    Test Class for InstanceProfileVCPURange
    """

    def test_instance_profile_vcpu_range_serialization(self):
        """
        Test serialization/deserialization for InstanceProfileVCPURange
        """

        # Construct a json representation of a InstanceProfileVCPURange model
        instance_profile_vcpu_range_model_json = {}
        instance_profile_vcpu_range_model_json['type'] = 'range'
        instance_profile_vcpu_range_model_json['default'] = 4
        instance_profile_vcpu_range_model_json['max'] = 56
        instance_profile_vcpu_range_model_json['min'] = 2
        instance_profile_vcpu_range_model_json['step'] = 2

        # Construct a model instance of InstanceProfileVCPURange by calling from_dict on the json representation
        instance_profile_vcpu_range_model = InstanceProfileVCPURange.from_dict(
            instance_profile_vcpu_range_model_json)
        assert instance_profile_vcpu_range_model != False

        # Construct a model instance of InstanceProfileVCPURange by calling from_dict on the json representation
        instance_profile_vcpu_range_model_dict = InstanceProfileVCPURange.from_dict(
            instance_profile_vcpu_range_model_json).__dict__
        instance_profile_vcpu_range_model2 = InstanceProfileVCPURange(
            **instance_profile_vcpu_range_model_dict)

        # Verify the model instances are equivalent
        assert instance_profile_vcpu_range_model == instance_profile_vcpu_range_model2

        # Convert model instance back to dict and verify no loss of data
        instance_profile_vcpu_range_model_json2 = instance_profile_vcpu_range_model.to_dict(
        )
        assert instance_profile_vcpu_range_model_json2 == instance_profile_vcpu_range_model_json


class TestInstancePrototypeInstanceByImage():
    """
    Test Class for InstancePrototypeInstanceByImage
    """

    def test_instance_prototype_instance_by_image_serialization(self):
        """
        Test serialization/deserialization for InstancePrototypeInstanceByImage
        """

        # Construct dict forms of any model objects needed in order to build this model.

        key_identity_model = {}  # KeyIdentityById
        key_identity_model['id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        security_group_identity_model = {}  # SecurityGroupIdentityById
        security_group_identity_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        subnet_identity_model = {}  # SubnetIdentityById
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        network_interface_prototype_model = {}  # NetworkInterfacePrototype
        network_interface_prototype_model['name'] = 'my-network-interface'
        network_interface_prototype_model['primary_ipv4_address'] = '10.0.0.5'
        network_interface_prototype_model['security_groups'] = [
            security_group_identity_model
        ]
        network_interface_prototype_model['subnet'] = subnet_identity_model

        instance_profile_identity_model = {}  # InstanceProfileIdentityByName
        instance_profile_identity_model['name'] = 'cc1-16x32'

        volume_attachment_prototype_instance_context_volume_model = {
        }  # VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById
        volume_attachment_prototype_instance_context_volume_model[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        volume_attachment_prototype_instance_context_model = {
        }  # VolumeAttachmentPrototypeInstanceContext
        volume_attachment_prototype_instance_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_context_model[
            'volume'] = volume_attachment_prototype_instance_context_volume_model

        vpc_identity_model = {}  # VPCIdentityById
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        resource_group_identity_model = {}  # ResourceGroupIdentityById
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        zone_identity_model = {}  # ZoneIdentityByName
        zone_identity_model['name'] = 'us-south-1'

        volume_profile_identity_model = {}  # VolumeProfileIdentityByName
        volume_profile_identity_model['name'] = 'general-purpose'

        encryption_key_identity_model = {}  # EncryptionKeyIdentityByCRN
        encryption_key_identity_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        volume_prototype_instance_by_image_context_model = {
        }  # VolumePrototypeInstanceByImageContext
        volume_prototype_instance_by_image_context_model['name'] = 'my-volume'
        volume_prototype_instance_by_image_context_model[
            'profile'] = volume_profile_identity_model
        volume_prototype_instance_by_image_context_model[
            'encryption_key'] = encryption_key_identity_model
        volume_prototype_instance_by_image_context_model['capacity'] = 100
        volume_prototype_instance_by_image_context_model['iops'] = 10000

        volume_attachment_prototype_instance_by_image_context_model = {
        }  # VolumeAttachmentPrototypeInstanceByImageContext
        volume_attachment_prototype_instance_by_image_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_by_image_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_by_image_context_model[
            'volume'] = volume_prototype_instance_by_image_context_model

        image_identity_model = {}  # ImageIdentityById
        image_identity_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        # Construct a json representation of a InstancePrototypeInstanceByImage model
        instance_prototype_instance_by_image_model_json = {}
        instance_prototype_instance_by_image_model_json['name'] = 'my-instance'
        instance_prototype_instance_by_image_model_json['keys'] = [
            key_identity_model
        ]
        instance_prototype_instance_by_image_model_json[
            'network_interfaces'] = [network_interface_prototype_model]
        instance_prototype_instance_by_image_model_json[
            'profile'] = instance_profile_identity_model
        instance_prototype_instance_by_image_model_json[
            'user_data'] = 'testString'
        instance_prototype_instance_by_image_model_json[
            'volume_attachments'] = [
                volume_attachment_prototype_instance_context_model
            ]
        instance_prototype_instance_by_image_model_json[
            'vpc'] = vpc_identity_model
        instance_prototype_instance_by_image_model_json[
            'resource_group'] = resource_group_identity_model
        instance_prototype_instance_by_image_model_json[
            'primary_network_interface'] = network_interface_prototype_model
        instance_prototype_instance_by_image_model_json[
            'zone'] = zone_identity_model
        instance_prototype_instance_by_image_model_json[
            'boot_volume_attachment'] = volume_attachment_prototype_instance_by_image_context_model
        instance_prototype_instance_by_image_model_json[
            'image'] = image_identity_model

        # Construct a model instance of InstancePrototypeInstanceByImage by calling from_dict on the json representation
        instance_prototype_instance_by_image_model = InstancePrototypeInstanceByImage.from_dict(
            instance_prototype_instance_by_image_model_json)
        assert instance_prototype_instance_by_image_model != False

        # Construct a model instance of InstancePrototypeInstanceByImage by calling from_dict on the json representation
        instance_prototype_instance_by_image_model_dict = InstancePrototypeInstanceByImage.from_dict(
            instance_prototype_instance_by_image_model_json).__dict__
        instance_prototype_instance_by_image_model2 = InstancePrototypeInstanceByImage(
            **instance_prototype_instance_by_image_model_dict)

        # Verify the model instances are equivalent
        assert instance_prototype_instance_by_image_model == instance_prototype_instance_by_image_model2

        # Convert model instance back to dict and verify no loss of data
        instance_prototype_instance_by_image_model_json2 = instance_prototype_instance_by_image_model.to_dict(
        )
        assert instance_prototype_instance_by_image_model_json2 == instance_prototype_instance_by_image_model_json


class TestInstancePrototypeInstanceBySourceTemplate():
    """
    Test Class for InstancePrototypeInstanceBySourceTemplate
    """

    def test_instance_prototype_instance_by_source_template_serialization(self):
        """
        Test serialization/deserialization for InstancePrototypeInstanceBySourceTemplate
        """

        # Construct dict forms of any model objects needed in order to build this model.

        key_identity_model = {}  # KeyIdentityById
        key_identity_model['id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        security_group_identity_model = {}  # SecurityGroupIdentityById
        security_group_identity_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        subnet_identity_model = {}  # SubnetIdentityById
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        network_interface_prototype_model = {}  # NetworkInterfacePrototype
        network_interface_prototype_model['name'] = 'my-network-interface'
        network_interface_prototype_model['primary_ipv4_address'] = '10.0.0.5'
        network_interface_prototype_model['security_groups'] = [
            security_group_identity_model
        ]
        network_interface_prototype_model['subnet'] = subnet_identity_model

        instance_profile_identity_model = {}  # InstanceProfileIdentityByName
        instance_profile_identity_model['name'] = 'cc1-16x32'

        volume_attachment_prototype_instance_context_volume_model = {
        }  # VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById
        volume_attachment_prototype_instance_context_volume_model[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        volume_attachment_prototype_instance_context_model = {
        }  # VolumeAttachmentPrototypeInstanceContext
        volume_attachment_prototype_instance_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_context_model[
            'volume'] = volume_attachment_prototype_instance_context_volume_model

        vpc_identity_model = {}  # VPCIdentityById
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        resource_group_identity_model = {}  # ResourceGroupIdentityById
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        zone_identity_model = {}  # ZoneIdentityByName
        zone_identity_model['name'] = 'us-south-1'

        volume_profile_identity_model = {}  # VolumeProfileIdentityByName
        volume_profile_identity_model['name'] = 'general-purpose'

        encryption_key_identity_model = {}  # EncryptionKeyIdentityByCRN
        encryption_key_identity_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        volume_prototype_instance_by_image_context_model = {
        }  # VolumePrototypeInstanceByImageContext
        volume_prototype_instance_by_image_context_model['name'] = 'my-volume'
        volume_prototype_instance_by_image_context_model[
            'profile'] = volume_profile_identity_model
        volume_prototype_instance_by_image_context_model[
            'encryption_key'] = encryption_key_identity_model
        volume_prototype_instance_by_image_context_model['capacity'] = 100
        volume_prototype_instance_by_image_context_model['iops'] = 10000

        volume_attachment_prototype_instance_by_image_context_model = {
        }  # VolumeAttachmentPrototypeInstanceByImageContext
        volume_attachment_prototype_instance_by_image_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_by_image_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_by_image_context_model[
            'volume'] = volume_prototype_instance_by_image_context_model

        image_identity_model = {}  # ImageIdentityById
        image_identity_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        instance_template_identity_model = {}  # InstanceTemplateIdentityById
        instance_template_identity_model[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        # Construct a json representation of a InstancePrototypeInstanceBySourceTemplate model
        instance_prototype_instance_by_source_template_model_json = {}
        instance_prototype_instance_by_source_template_model_json[
            'name'] = 'my-instance'
        instance_prototype_instance_by_source_template_model_json['keys'] = [
            key_identity_model
        ]
        instance_prototype_instance_by_source_template_model_json[
            'network_interfaces'] = [network_interface_prototype_model]
        instance_prototype_instance_by_source_template_model_json[
            'profile'] = instance_profile_identity_model
        instance_prototype_instance_by_source_template_model_json[
            'user_data'] = 'testString'
        instance_prototype_instance_by_source_template_model_json[
            'volume_attachments'] = [
                volume_attachment_prototype_instance_context_model
            ]
        instance_prototype_instance_by_source_template_model_json[
            'vpc'] = vpc_identity_model
        instance_prototype_instance_by_source_template_model_json[
            'resource_group'] = resource_group_identity_model
        instance_prototype_instance_by_source_template_model_json[
            'primary_network_interface'] = network_interface_prototype_model
        instance_prototype_instance_by_source_template_model_json[
            'zone'] = zone_identity_model
        instance_prototype_instance_by_source_template_model_json[
            'boot_volume_attachment'] = volume_attachment_prototype_instance_by_image_context_model
        instance_prototype_instance_by_source_template_model_json[
            'image'] = image_identity_model
        instance_prototype_instance_by_source_template_model_json[
            'source_template'] = instance_template_identity_model

        # Construct a model instance of InstancePrototypeInstanceBySourceTemplate by calling from_dict on the json representation
        instance_prototype_instance_by_source_template_model = InstancePrototypeInstanceBySourceTemplate.from_dict(
            instance_prototype_instance_by_source_template_model_json)
        assert instance_prototype_instance_by_source_template_model != False

        # Construct a model instance of InstancePrototypeInstanceBySourceTemplate by calling from_dict on the json representation
        instance_prototype_instance_by_source_template_model_dict = InstancePrototypeInstanceBySourceTemplate.from_dict(
            instance_prototype_instance_by_source_template_model_json).__dict__
        instance_prototype_instance_by_source_template_model2 = InstancePrototypeInstanceBySourceTemplate(
            **instance_prototype_instance_by_source_template_model_dict)

        # Verify the model instances are equivalent
        assert instance_prototype_instance_by_source_template_model == instance_prototype_instance_by_source_template_model2

        # Convert model instance back to dict and verify no loss of data
        instance_prototype_instance_by_source_template_model_json2 = instance_prototype_instance_by_source_template_model.to_dict(
        )
        assert instance_prototype_instance_by_source_template_model_json2 == instance_prototype_instance_by_source_template_model_json


class TestInstanceTemplateIdentityByCRN():
    """
    Test Class for InstanceTemplateIdentityByCRN
    """

    def test_instance_template_identity_by_crn_serialization(self):
        """
        Test serialization/deserialization for InstanceTemplateIdentityByCRN
        """

        # Construct a json representation of a InstanceTemplateIdentityByCRN model
        instance_template_identity_by_crn_model_json = {}
        instance_template_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a model instance of InstanceTemplateIdentityByCRN by calling from_dict on the json representation
        instance_template_identity_by_crn_model = InstanceTemplateIdentityByCRN.from_dict(
            instance_template_identity_by_crn_model_json)
        assert instance_template_identity_by_crn_model != False

        # Construct a model instance of InstanceTemplateIdentityByCRN by calling from_dict on the json representation
        instance_template_identity_by_crn_model_dict = InstanceTemplateIdentityByCRN.from_dict(
            instance_template_identity_by_crn_model_json).__dict__
        instance_template_identity_by_crn_model2 = InstanceTemplateIdentityByCRN(
            **instance_template_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert instance_template_identity_by_crn_model == instance_template_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        instance_template_identity_by_crn_model_json2 = instance_template_identity_by_crn_model.to_dict(
        )
        assert instance_template_identity_by_crn_model_json2 == instance_template_identity_by_crn_model_json


class TestInstanceTemplateIdentityByHref():
    """
    Test Class for InstanceTemplateIdentityByHref
    """

    def test_instance_template_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for InstanceTemplateIdentityByHref
        """

        # Construct a json representation of a InstanceTemplateIdentityByHref model
        instance_template_identity_by_href_model_json = {}
        instance_template_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a model instance of InstanceTemplateIdentityByHref by calling from_dict on the json representation
        instance_template_identity_by_href_model = InstanceTemplateIdentityByHref.from_dict(
            instance_template_identity_by_href_model_json)
        assert instance_template_identity_by_href_model != False

        # Construct a model instance of InstanceTemplateIdentityByHref by calling from_dict on the json representation
        instance_template_identity_by_href_model_dict = InstanceTemplateIdentityByHref.from_dict(
            instance_template_identity_by_href_model_json).__dict__
        instance_template_identity_by_href_model2 = InstanceTemplateIdentityByHref(
            **instance_template_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert instance_template_identity_by_href_model == instance_template_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        instance_template_identity_by_href_model_json2 = instance_template_identity_by_href_model.to_dict(
        )
        assert instance_template_identity_by_href_model_json2 == instance_template_identity_by_href_model_json


class TestInstanceTemplateIdentityById():
    """
    Test Class for InstanceTemplateIdentityById
    """

    def test_instance_template_identity_by_id_serialization(self):
        """
        Test serialization/deserialization for InstanceTemplateIdentityById
        """

        # Construct a json representation of a InstanceTemplateIdentityById model
        instance_template_identity_by_id_model_json = {}
        instance_template_identity_by_id_model_json[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        # Construct a model instance of InstanceTemplateIdentityById by calling from_dict on the json representation
        instance_template_identity_by_id_model = InstanceTemplateIdentityById.from_dict(
            instance_template_identity_by_id_model_json)
        assert instance_template_identity_by_id_model != False

        # Construct a model instance of InstanceTemplateIdentityById by calling from_dict on the json representation
        instance_template_identity_by_id_model_dict = InstanceTemplateIdentityById.from_dict(
            instance_template_identity_by_id_model_json).__dict__
        instance_template_identity_by_id_model2 = InstanceTemplateIdentityById(
            **instance_template_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert instance_template_identity_by_id_model == instance_template_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        instance_template_identity_by_id_model_json2 = instance_template_identity_by_id_model.to_dict(
        )
        assert instance_template_identity_by_id_model_json2 == instance_template_identity_by_id_model_json


class TestInstanceTemplatePrototypeInstanceByImage():
    """
    Test Class for InstanceTemplatePrototypeInstanceByImage
    """

    def test_instance_template_prototype_instance_by_image_serialization(self):
        """
        Test serialization/deserialization for InstanceTemplatePrototypeInstanceByImage
        """

        # Construct dict forms of any model objects needed in order to build this model.

        key_identity_model = {}  # KeyIdentityById
        key_identity_model['id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        security_group_identity_model = {}  # SecurityGroupIdentityById
        security_group_identity_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        subnet_identity_model = {}  # SubnetIdentityById
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        network_interface_prototype_model = {}  # NetworkInterfacePrototype
        network_interface_prototype_model['name'] = 'my-network-interface'
        network_interface_prototype_model['primary_ipv4_address'] = '10.0.0.5'
        network_interface_prototype_model['security_groups'] = [
            security_group_identity_model
        ]
        network_interface_prototype_model['subnet'] = subnet_identity_model

        instance_profile_identity_model = {}  # InstanceProfileIdentityByName
        instance_profile_identity_model['name'] = 'cc1-16x32'

        volume_attachment_prototype_instance_context_volume_model = {
        }  # VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById
        volume_attachment_prototype_instance_context_volume_model[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        volume_attachment_prototype_instance_context_model = {
        }  # VolumeAttachmentPrototypeInstanceContext
        volume_attachment_prototype_instance_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_context_model[
            'volume'] = volume_attachment_prototype_instance_context_volume_model

        vpc_identity_model = {}  # VPCIdentityById
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        resource_group_identity_model = {}  # ResourceGroupIdentityById
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        zone_identity_model = {}  # ZoneIdentityByName
        zone_identity_model['name'] = 'us-south-1'

        volume_profile_identity_model = {}  # VolumeProfileIdentityByName
        volume_profile_identity_model['name'] = 'general-purpose'

        encryption_key_identity_model = {}  # EncryptionKeyIdentityByCRN
        encryption_key_identity_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        volume_prototype_instance_by_image_context_model = {
        }  # VolumePrototypeInstanceByImageContext
        volume_prototype_instance_by_image_context_model['name'] = 'my-volume'
        volume_prototype_instance_by_image_context_model[
            'profile'] = volume_profile_identity_model
        volume_prototype_instance_by_image_context_model[
            'encryption_key'] = encryption_key_identity_model
        volume_prototype_instance_by_image_context_model['capacity'] = 100
        volume_prototype_instance_by_image_context_model['iops'] = 10000

        volume_attachment_prototype_instance_by_image_context_model = {
        }  # VolumeAttachmentPrototypeInstanceByImageContext
        volume_attachment_prototype_instance_by_image_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_by_image_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_by_image_context_model[
            'volume'] = volume_prototype_instance_by_image_context_model

        image_identity_model = {}  # ImageIdentityById
        image_identity_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        # Construct a json representation of a InstanceTemplatePrototypeInstanceByImage model
        instance_template_prototype_instance_by_image_model_json = {}
        instance_template_prototype_instance_by_image_model_json[
            'name'] = 'my-instance'
        instance_template_prototype_instance_by_image_model_json['keys'] = [
            key_identity_model
        ]
        instance_template_prototype_instance_by_image_model_json[
            'network_interfaces'] = [network_interface_prototype_model]
        instance_template_prototype_instance_by_image_model_json[
            'profile'] = instance_profile_identity_model
        instance_template_prototype_instance_by_image_model_json[
            'user_data'] = 'testString'
        instance_template_prototype_instance_by_image_model_json[
            'volume_attachments'] = [
                volume_attachment_prototype_instance_context_model
            ]
        instance_template_prototype_instance_by_image_model_json[
            'vpc'] = vpc_identity_model
        instance_template_prototype_instance_by_image_model_json[
            'resource_group'] = resource_group_identity_model
        instance_template_prototype_instance_by_image_model_json[
            'primary_network_interface'] = network_interface_prototype_model
        instance_template_prototype_instance_by_image_model_json[
            'zone'] = zone_identity_model
        instance_template_prototype_instance_by_image_model_json[
            'boot_volume_attachment'] = volume_attachment_prototype_instance_by_image_context_model
        instance_template_prototype_instance_by_image_model_json[
            'image'] = image_identity_model

        # Construct a model instance of InstanceTemplatePrototypeInstanceByImage by calling from_dict on the json representation
        instance_template_prototype_instance_by_image_model = InstanceTemplatePrototypeInstanceByImage.from_dict(
            instance_template_prototype_instance_by_image_model_json)
        assert instance_template_prototype_instance_by_image_model != False

        # Construct a model instance of InstanceTemplatePrototypeInstanceByImage by calling from_dict on the json representation
        instance_template_prototype_instance_by_image_model_dict = InstanceTemplatePrototypeInstanceByImage.from_dict(
            instance_template_prototype_instance_by_image_model_json).__dict__
        instance_template_prototype_instance_by_image_model2 = InstanceTemplatePrototypeInstanceByImage(
            **instance_template_prototype_instance_by_image_model_dict)

        # Verify the model instances are equivalent
        assert instance_template_prototype_instance_by_image_model == instance_template_prototype_instance_by_image_model2

        # Convert model instance back to dict and verify no loss of data
        instance_template_prototype_instance_by_image_model_json2 = instance_template_prototype_instance_by_image_model.to_dict(
        )
        assert instance_template_prototype_instance_by_image_model_json2 == instance_template_prototype_instance_by_image_model_json


class TestInstanceTemplatePrototypeInstanceBySourceTemplate():
    """
    Test Class for InstanceTemplatePrototypeInstanceBySourceTemplate
    """

    def test_instance_template_prototype_instance_by_source_template_serialization(
            self):
        """
        Test serialization/deserialization for InstanceTemplatePrototypeInstanceBySourceTemplate
        """

        # Construct dict forms of any model objects needed in order to build this model.

        key_identity_model = {}  # KeyIdentityById
        key_identity_model['id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        security_group_identity_model = {}  # SecurityGroupIdentityById
        security_group_identity_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        subnet_identity_model = {}  # SubnetIdentityById
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        network_interface_prototype_model = {}  # NetworkInterfacePrototype
        network_interface_prototype_model['name'] = 'my-network-interface'
        network_interface_prototype_model['primary_ipv4_address'] = '10.0.0.5'
        network_interface_prototype_model['security_groups'] = [
            security_group_identity_model
        ]
        network_interface_prototype_model['subnet'] = subnet_identity_model

        instance_profile_identity_model = {}  # InstanceProfileIdentityByName
        instance_profile_identity_model['name'] = 'cc1-16x32'

        volume_attachment_prototype_instance_context_volume_model = {
        }  # VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById
        volume_attachment_prototype_instance_context_volume_model[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        volume_attachment_prototype_instance_context_model = {
        }  # VolumeAttachmentPrototypeInstanceContext
        volume_attachment_prototype_instance_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_context_model[
            'volume'] = volume_attachment_prototype_instance_context_volume_model

        vpc_identity_model = {}  # VPCIdentityById
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        resource_group_identity_model = {}  # ResourceGroupIdentityById
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        zone_identity_model = {}  # ZoneIdentityByName
        zone_identity_model['name'] = 'us-south-1'

        volume_profile_identity_model = {}  # VolumeProfileIdentityByName
        volume_profile_identity_model['name'] = 'general-purpose'

        encryption_key_identity_model = {}  # EncryptionKeyIdentityByCRN
        encryption_key_identity_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        volume_prototype_instance_by_image_context_model = {
        }  # VolumePrototypeInstanceByImageContext
        volume_prototype_instance_by_image_context_model['name'] = 'my-volume'
        volume_prototype_instance_by_image_context_model[
            'profile'] = volume_profile_identity_model
        volume_prototype_instance_by_image_context_model[
            'encryption_key'] = encryption_key_identity_model
        volume_prototype_instance_by_image_context_model['capacity'] = 100
        volume_prototype_instance_by_image_context_model['iops'] = 10000

        volume_attachment_prototype_instance_by_image_context_model = {
        }  # VolumeAttachmentPrototypeInstanceByImageContext
        volume_attachment_prototype_instance_by_image_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_by_image_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_by_image_context_model[
            'volume'] = volume_prototype_instance_by_image_context_model

        image_identity_model = {}  # ImageIdentityById
        image_identity_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        instance_template_identity_model = {}  # InstanceTemplateIdentityById
        instance_template_identity_model[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        # Construct a json representation of a InstanceTemplatePrototypeInstanceBySourceTemplate model
        instance_template_prototype_instance_by_source_template_model_json = {}
        instance_template_prototype_instance_by_source_template_model_json[
            'name'] = 'my-instance'
        instance_template_prototype_instance_by_source_template_model_json[
            'keys'] = [key_identity_model]
        instance_template_prototype_instance_by_source_template_model_json[
            'network_interfaces'] = [network_interface_prototype_model]
        instance_template_prototype_instance_by_source_template_model_json[
            'profile'] = instance_profile_identity_model
        instance_template_prototype_instance_by_source_template_model_json[
            'user_data'] = 'testString'
        instance_template_prototype_instance_by_source_template_model_json[
            'volume_attachments'] = [
                volume_attachment_prototype_instance_context_model
            ]
        instance_template_prototype_instance_by_source_template_model_json[
            'vpc'] = vpc_identity_model
        instance_template_prototype_instance_by_source_template_model_json[
            'resource_group'] = resource_group_identity_model
        instance_template_prototype_instance_by_source_template_model_json[
            'primary_network_interface'] = network_interface_prototype_model
        instance_template_prototype_instance_by_source_template_model_json[
            'zone'] = zone_identity_model
        instance_template_prototype_instance_by_source_template_model_json[
            'boot_volume_attachment'] = volume_attachment_prototype_instance_by_image_context_model
        instance_template_prototype_instance_by_source_template_model_json[
            'image'] = image_identity_model
        instance_template_prototype_instance_by_source_template_model_json[
            'source_template'] = instance_template_identity_model

        # Construct a model instance of InstanceTemplatePrototypeInstanceBySourceTemplate by calling from_dict on the json representation
        instance_template_prototype_instance_by_source_template_model = InstanceTemplatePrototypeInstanceBySourceTemplate.from_dict(
            instance_template_prototype_instance_by_source_template_model_json)
        assert instance_template_prototype_instance_by_source_template_model != False

        # Construct a model instance of InstanceTemplatePrototypeInstanceBySourceTemplate by calling from_dict on the json representation
        instance_template_prototype_instance_by_source_template_model_dict = InstanceTemplatePrototypeInstanceBySourceTemplate.from_dict(
            instance_template_prototype_instance_by_source_template_model_json
        ).__dict__
        instance_template_prototype_instance_by_source_template_model2 = InstanceTemplatePrototypeInstanceBySourceTemplate(
            **
            instance_template_prototype_instance_by_source_template_model_dict)

        # Verify the model instances are equivalent
        assert instance_template_prototype_instance_by_source_template_model == instance_template_prototype_instance_by_source_template_model2

        # Convert model instance back to dict and verify no loss of data
        instance_template_prototype_instance_by_source_template_model_json2 = instance_template_prototype_instance_by_source_template_model.to_dict(
        )
        assert instance_template_prototype_instance_by_source_template_model_json2 == instance_template_prototype_instance_by_source_template_model_json


class TestInstanceTemplateInstanceByImage():
    """
    Test Class for InstanceTemplateInstanceByImage
    """

    def test_instance_template_instance_by_image_serialization(self):
        """
        Test serialization/deserialization for InstanceTemplateInstanceByImage
        """

        # Construct dict forms of any model objects needed in order to build this model.

        key_identity_model = {}  # KeyIdentityById
        key_identity_model['id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        security_group_identity_model = {}  # SecurityGroupIdentityById
        security_group_identity_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        subnet_identity_model = {}  # SubnetIdentityById
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        network_interface_prototype_model = {}  # NetworkInterfacePrototype
        network_interface_prototype_model['name'] = 'my-network-interface'
        network_interface_prototype_model['primary_ipv4_address'] = '10.0.0.5'
        network_interface_prototype_model['security_groups'] = [
            security_group_identity_model
        ]
        network_interface_prototype_model['subnet'] = subnet_identity_model

        instance_profile_identity_model = {}  # InstanceProfileIdentityByName
        instance_profile_identity_model['name'] = 'cc1-16x32'

        volume_attachment_prototype_instance_context_volume_model = {
        }  # VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById
        volume_attachment_prototype_instance_context_volume_model[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        volume_attachment_prototype_instance_context_model = {
        }  # VolumeAttachmentPrototypeInstanceContext
        volume_attachment_prototype_instance_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_context_model[
            'volume'] = volume_attachment_prototype_instance_context_volume_model

        vpc_identity_model = {}  # VPCIdentityById
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        zone_identity_model = {}  # ZoneIdentityByName
        zone_identity_model['name'] = 'us-south-1'

        volume_profile_identity_model = {}  # VolumeProfileIdentityByName
        volume_profile_identity_model['name'] = 'general-purpose'

        encryption_key_identity_model = {}  # EncryptionKeyIdentityByCRN
        encryption_key_identity_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        volume_prototype_instance_by_image_context_model = {
        }  # VolumePrototypeInstanceByImageContext
        volume_prototype_instance_by_image_context_model['name'] = 'my-volume'
        volume_prototype_instance_by_image_context_model[
            'profile'] = volume_profile_identity_model
        volume_prototype_instance_by_image_context_model[
            'encryption_key'] = encryption_key_identity_model
        volume_prototype_instance_by_image_context_model['capacity'] = 100
        volume_prototype_instance_by_image_context_model['iops'] = 10000

        volume_attachment_prototype_instance_by_image_context_model = {
        }  # VolumeAttachmentPrototypeInstanceByImageContext
        volume_attachment_prototype_instance_by_image_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_by_image_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_by_image_context_model[
            'volume'] = volume_prototype_instance_by_image_context_model

        image_identity_model = {}  # ImageIdentityById
        image_identity_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        # Construct a json representation of a InstanceTemplateInstanceByImage model
        instance_template_instance_by_image_model_json = {}
        instance_template_instance_by_image_model_json[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'
        instance_template_instance_by_image_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_template_instance_by_image_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_template_instance_by_image_model_json[
            'name'] = 'my-instance-template'
        instance_template_instance_by_image_model_json['keys'] = [
            key_identity_model
        ]
        instance_template_instance_by_image_model_json['network_interfaces'] = [
            network_interface_prototype_model
        ]
        instance_template_instance_by_image_model_json[
            'profile'] = instance_profile_identity_model
        instance_template_instance_by_image_model_json[
            'user_data'] = 'testString'
        instance_template_instance_by_image_model_json['volume_attachments'] = [
            volume_attachment_prototype_instance_context_model
        ]
        instance_template_instance_by_image_model_json[
            'vpc'] = vpc_identity_model
        instance_template_instance_by_image_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        instance_template_instance_by_image_model_json[
            'resource_group'] = resource_group_reference_model
        instance_template_instance_by_image_model_json[
            'primary_network_interface'] = network_interface_prototype_model
        instance_template_instance_by_image_model_json[
            'zone'] = zone_identity_model
        instance_template_instance_by_image_model_json[
            'boot_volume_attachment'] = volume_attachment_prototype_instance_by_image_context_model
        instance_template_instance_by_image_model_json[
            'image'] = image_identity_model

        # Construct a model instance of InstanceTemplateInstanceByImage by calling from_dict on the json representation
        instance_template_instance_by_image_model = InstanceTemplateInstanceByImage.from_dict(
            instance_template_instance_by_image_model_json)
        assert instance_template_instance_by_image_model != False

        # Construct a model instance of InstanceTemplateInstanceByImage by calling from_dict on the json representation
        instance_template_instance_by_image_model_dict = InstanceTemplateInstanceByImage.from_dict(
            instance_template_instance_by_image_model_json).__dict__
        instance_template_instance_by_image_model2 = InstanceTemplateInstanceByImage(
            **instance_template_instance_by_image_model_dict)

        # Verify the model instances are equivalent
        assert instance_template_instance_by_image_model == instance_template_instance_by_image_model2

        # Convert model instance back to dict and verify no loss of data
        instance_template_instance_by_image_model_json2 = instance_template_instance_by_image_model.to_dict(
        )
        assert instance_template_instance_by_image_model_json2 == instance_template_instance_by_image_model_json


class TestInstanceTemplateInstanceBySourceTemplate():
    """
    Test Class for InstanceTemplateInstanceBySourceTemplate
    """

    def test_instance_template_instance_by_source_template_serialization(self):
        """
        Test serialization/deserialization for InstanceTemplateInstanceBySourceTemplate
        """

        # Construct dict forms of any model objects needed in order to build this model.

        key_identity_model = {}  # KeyIdentityById
        key_identity_model['id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        security_group_identity_model = {}  # SecurityGroupIdentityById
        security_group_identity_model[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        subnet_identity_model = {}  # SubnetIdentityById
        subnet_identity_model['id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        network_interface_prototype_model = {}  # NetworkInterfacePrototype
        network_interface_prototype_model['name'] = 'my-network-interface'
        network_interface_prototype_model['primary_ipv4_address'] = '10.0.0.5'
        network_interface_prototype_model['security_groups'] = [
            security_group_identity_model
        ]
        network_interface_prototype_model['subnet'] = subnet_identity_model

        instance_profile_identity_model = {}  # InstanceProfileIdentityByName
        instance_profile_identity_model['name'] = 'cc1-16x32'

        volume_attachment_prototype_instance_context_volume_model = {
        }  # VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById
        volume_attachment_prototype_instance_context_volume_model[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        volume_attachment_prototype_instance_context_model = {
        }  # VolumeAttachmentPrototypeInstanceContext
        volume_attachment_prototype_instance_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_context_model[
            'volume'] = volume_attachment_prototype_instance_context_volume_model

        vpc_identity_model = {}  # VPCIdentityById
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        resource_group_reference_model = {}  # ResourceGroupReference
        resource_group_reference_model[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'
        resource_group_reference_model['name'] = 'my-resource-group'
        resource_group_reference_model[
            'href'] = 'https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345'

        zone_identity_model = {}  # ZoneIdentityByName
        zone_identity_model['name'] = 'us-south-1'

        volume_profile_identity_model = {}  # VolumeProfileIdentityByName
        volume_profile_identity_model['name'] = 'general-purpose'

        encryption_key_identity_model = {}  # EncryptionKeyIdentityByCRN
        encryption_key_identity_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        volume_prototype_instance_by_image_context_model = {
        }  # VolumePrototypeInstanceByImageContext
        volume_prototype_instance_by_image_context_model['name'] = 'my-volume'
        volume_prototype_instance_by_image_context_model[
            'profile'] = volume_profile_identity_model
        volume_prototype_instance_by_image_context_model[
            'encryption_key'] = encryption_key_identity_model
        volume_prototype_instance_by_image_context_model['capacity'] = 100
        volume_prototype_instance_by_image_context_model['iops'] = 10000

        volume_attachment_prototype_instance_by_image_context_model = {
        }  # VolumeAttachmentPrototypeInstanceByImageContext
        volume_attachment_prototype_instance_by_image_context_model[
            'delete_volume_on_instance_delete'] = True
        volume_attachment_prototype_instance_by_image_context_model[
            'name'] = 'my-volume-attachment'
        volume_attachment_prototype_instance_by_image_context_model[
            'volume'] = volume_prototype_instance_by_image_context_model

        image_identity_model = {}  # ImageIdentityById
        image_identity_model['id'] = '72b27b5c-f4b0-48bb-b954-5becc7c1dcb8'

        instance_template_identity_model = {}  # InstanceTemplateIdentityById
        instance_template_identity_model[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        # Construct a json representation of a InstanceTemplateInstanceBySourceTemplate model
        instance_template_instance_by_source_template_model_json = {}
        instance_template_instance_by_source_template_model_json[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'
        instance_template_instance_by_source_template_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_template_instance_by_source_template_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a'
        instance_template_instance_by_source_template_model_json[
            'name'] = 'my-instance-template'
        instance_template_instance_by_source_template_model_json['keys'] = [
            key_identity_model
        ]
        instance_template_instance_by_source_template_model_json[
            'network_interfaces'] = [network_interface_prototype_model]
        instance_template_instance_by_source_template_model_json[
            'profile'] = instance_profile_identity_model
        instance_template_instance_by_source_template_model_json[
            'user_data'] = 'testString'
        instance_template_instance_by_source_template_model_json[
            'volume_attachments'] = [
                volume_attachment_prototype_instance_context_model
            ]
        instance_template_instance_by_source_template_model_json[
            'vpc'] = vpc_identity_model
        instance_template_instance_by_source_template_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        instance_template_instance_by_source_template_model_json[
            'resource_group'] = resource_group_reference_model
        instance_template_instance_by_source_template_model_json[
            'primary_network_interface'] = network_interface_prototype_model
        instance_template_instance_by_source_template_model_json[
            'zone'] = zone_identity_model
        instance_template_instance_by_source_template_model_json[
            'boot_volume_attachment'] = volume_attachment_prototype_instance_by_image_context_model
        instance_template_instance_by_source_template_model_json[
            'image'] = image_identity_model
        instance_template_instance_by_source_template_model_json[
            'source_template'] = instance_template_identity_model

        # Construct a model instance of InstanceTemplateInstanceBySourceTemplate by calling from_dict on the json representation
        instance_template_instance_by_source_template_model = InstanceTemplateInstanceBySourceTemplate.from_dict(
            instance_template_instance_by_source_template_model_json)
        assert instance_template_instance_by_source_template_model != False

        # Construct a model instance of InstanceTemplateInstanceBySourceTemplate by calling from_dict on the json representation
        instance_template_instance_by_source_template_model_dict = InstanceTemplateInstanceBySourceTemplate.from_dict(
            instance_template_instance_by_source_template_model_json).__dict__
        instance_template_instance_by_source_template_model2 = InstanceTemplateInstanceBySourceTemplate(
            **instance_template_instance_by_source_template_model_dict)

        # Verify the model instances are equivalent
        assert instance_template_instance_by_source_template_model == instance_template_instance_by_source_template_model2

        # Convert model instance back to dict and verify no loss of data
        instance_template_instance_by_source_template_model_json2 = instance_template_instance_by_source_template_model.to_dict(
        )
        assert instance_template_instance_by_source_template_model_json2 == instance_template_instance_by_source_template_model_json


class TestKeyIdentityByCRN():
    """
    Test Class for KeyIdentityByCRN
    """

    def test_key_identity_by_crn_serialization(self):
        """
        Test serialization/deserialization for KeyIdentityByCRN
        """

        # Construct a json representation of a KeyIdentityByCRN model
        key_identity_by_crn_model_json = {}
        key_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803'

        # Construct a model instance of KeyIdentityByCRN by calling from_dict on the json representation
        key_identity_by_crn_model = KeyIdentityByCRN.from_dict(
            key_identity_by_crn_model_json)
        assert key_identity_by_crn_model != False

        # Construct a model instance of KeyIdentityByCRN by calling from_dict on the json representation
        key_identity_by_crn_model_dict = KeyIdentityByCRN.from_dict(
            key_identity_by_crn_model_json).__dict__
        key_identity_by_crn_model2 = KeyIdentityByCRN(
            **key_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert key_identity_by_crn_model == key_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        key_identity_by_crn_model_json2 = key_identity_by_crn_model.to_dict()
        assert key_identity_by_crn_model_json2 == key_identity_by_crn_model_json


class TestKeyIdentityByHref():
    """
    Test Class for KeyIdentityByHref
    """

    def test_key_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for KeyIdentityByHref
        """

        # Construct a json representation of a KeyIdentityByHref model
        key_identity_by_href_model_json = {}
        key_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803'

        # Construct a model instance of KeyIdentityByHref by calling from_dict on the json representation
        key_identity_by_href_model = KeyIdentityByHref.from_dict(
            key_identity_by_href_model_json)
        assert key_identity_by_href_model != False

        # Construct a model instance of KeyIdentityByHref by calling from_dict on the json representation
        key_identity_by_href_model_dict = KeyIdentityByHref.from_dict(
            key_identity_by_href_model_json).__dict__
        key_identity_by_href_model2 = KeyIdentityByHref(
            **key_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert key_identity_by_href_model == key_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        key_identity_by_href_model_json2 = key_identity_by_href_model.to_dict()
        assert key_identity_by_href_model_json2 == key_identity_by_href_model_json


class TestKeyIdentityById():
    """
    Test Class for KeyIdentityById
    """

    def test_key_identity_by_id_serialization(self):
        """
        Test serialization/deserialization for KeyIdentityById
        """

        # Construct a json representation of a KeyIdentityById model
        key_identity_by_id_model_json = {}
        key_identity_by_id_model_json[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'

        # Construct a model instance of KeyIdentityById by calling from_dict on the json representation
        key_identity_by_id_model = KeyIdentityById.from_dict(
            key_identity_by_id_model_json)
        assert key_identity_by_id_model != False

        # Construct a model instance of KeyIdentityById by calling from_dict on the json representation
        key_identity_by_id_model_dict = KeyIdentityById.from_dict(
            key_identity_by_id_model_json).__dict__
        key_identity_by_id_model2 = KeyIdentityById(
            **key_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert key_identity_by_id_model == key_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        key_identity_by_id_model_json2 = key_identity_by_id_model.to_dict()
        assert key_identity_by_id_model_json2 == key_identity_by_id_model_json


class TestKeyIdentityKeyIdentityByFingerprint():
    """
    Test Class for KeyIdentityKeyIdentityByFingerprint
    """

    def test_key_identity_key_identity_by_fingerprint_serialization(self):
        """
        Test serialization/deserialization for KeyIdentityKeyIdentityByFingerprint
        """

        # Construct a json representation of a KeyIdentityKeyIdentityByFingerprint model
        key_identity_key_identity_by_fingerprint_model_json = {}
        key_identity_key_identity_by_fingerprint_model_json[
            'fingerprint'] = 'SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY'

        # Construct a model instance of KeyIdentityKeyIdentityByFingerprint by calling from_dict on the json representation
        key_identity_key_identity_by_fingerprint_model = KeyIdentityKeyIdentityByFingerprint.from_dict(
            key_identity_key_identity_by_fingerprint_model_json)
        assert key_identity_key_identity_by_fingerprint_model != False

        # Construct a model instance of KeyIdentityKeyIdentityByFingerprint by calling from_dict on the json representation
        key_identity_key_identity_by_fingerprint_model_dict = KeyIdentityKeyIdentityByFingerprint.from_dict(
            key_identity_key_identity_by_fingerprint_model_json).__dict__
        key_identity_key_identity_by_fingerprint_model2 = KeyIdentityKeyIdentityByFingerprint(
            **key_identity_key_identity_by_fingerprint_model_dict)

        # Verify the model instances are equivalent
        assert key_identity_key_identity_by_fingerprint_model == key_identity_key_identity_by_fingerprint_model2

        # Convert model instance back to dict and verify no loss of data
        key_identity_key_identity_by_fingerprint_model_json2 = key_identity_key_identity_by_fingerprint_model.to_dict(
        )
        assert key_identity_key_identity_by_fingerprint_model_json2 == key_identity_key_identity_by_fingerprint_model_json


class TestKeyReferenceInstanceInitializationContextKeyIdentityByFingerprint():
    """
    Test Class for KeyReferenceInstanceInitializationContextKeyIdentityByFingerprint
    """

    def test_key_reference_instance_initialization_context_key_identity_by_fingerprint_serialization(
            self):
        """
        Test serialization/deserialization for KeyReferenceInstanceInitializationContextKeyIdentityByFingerprint
        """

        # Construct a json representation of a KeyReferenceInstanceInitializationContextKeyIdentityByFingerprint model
        key_reference_instance_initialization_context_key_identity_by_fingerprint_model_json = {}
        key_reference_instance_initialization_context_key_identity_by_fingerprint_model_json[
            'fingerprint'] = 'SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY'

        # Construct a model instance of KeyReferenceInstanceInitializationContextKeyIdentityByFingerprint by calling from_dict on the json representation
        key_reference_instance_initialization_context_key_identity_by_fingerprint_model = KeyReferenceInstanceInitializationContextKeyIdentityByFingerprint.from_dict(
            key_reference_instance_initialization_context_key_identity_by_fingerprint_model_json
        )
        assert key_reference_instance_initialization_context_key_identity_by_fingerprint_model != False

        # Construct a model instance of KeyReferenceInstanceInitializationContextKeyIdentityByFingerprint by calling from_dict on the json representation
        key_reference_instance_initialization_context_key_identity_by_fingerprint_model_dict = KeyReferenceInstanceInitializationContextKeyIdentityByFingerprint.from_dict(
            key_reference_instance_initialization_context_key_identity_by_fingerprint_model_json
        ).__dict__
        key_reference_instance_initialization_context_key_identity_by_fingerprint_model2 = KeyReferenceInstanceInitializationContextKeyIdentityByFingerprint(
            **
            key_reference_instance_initialization_context_key_identity_by_fingerprint_model_dict
        )

        # Verify the model instances are equivalent
        assert key_reference_instance_initialization_context_key_identity_by_fingerprint_model == key_reference_instance_initialization_context_key_identity_by_fingerprint_model2

        # Convert model instance back to dict and verify no loss of data
        key_reference_instance_initialization_context_key_identity_by_fingerprint_model_json2 = key_reference_instance_initialization_context_key_identity_by_fingerprint_model.to_dict(
        )
        assert key_reference_instance_initialization_context_key_identity_by_fingerprint_model_json2 == key_reference_instance_initialization_context_key_identity_by_fingerprint_model_json


class TestKeyReferenceInstanceInitializationContextKeyReference():
    """
    Test Class for KeyReferenceInstanceInitializationContextKeyReference
    """

    def test_key_reference_instance_initialization_context_key_reference_serialization(
            self):
        """
        Test serialization/deserialization for KeyReferenceInstanceInitializationContextKeyReference
        """

        # Construct a json representation of a KeyReferenceInstanceInitializationContextKeyReference model
        key_reference_instance_initialization_context_key_reference_model_json = {}
        key_reference_instance_initialization_context_key_reference_model_json[
            'id'] = 'a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_reference_instance_initialization_context_key_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_reference_instance_initialization_context_key_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803'
        key_reference_instance_initialization_context_key_reference_model_json[
            'fingerprint'] = 'SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY'
        key_reference_instance_initialization_context_key_reference_model_json[
            'name'] = 'my-key'

        # Construct a model instance of KeyReferenceInstanceInitializationContextKeyReference by calling from_dict on the json representation
        key_reference_instance_initialization_context_key_reference_model = KeyReferenceInstanceInitializationContextKeyReference.from_dict(
            key_reference_instance_initialization_context_key_reference_model_json
        )
        assert key_reference_instance_initialization_context_key_reference_model != False

        # Construct a model instance of KeyReferenceInstanceInitializationContextKeyReference by calling from_dict on the json representation
        key_reference_instance_initialization_context_key_reference_model_dict = KeyReferenceInstanceInitializationContextKeyReference.from_dict(
            key_reference_instance_initialization_context_key_reference_model_json
        ).__dict__
        key_reference_instance_initialization_context_key_reference_model2 = KeyReferenceInstanceInitializationContextKeyReference(
            **
            key_reference_instance_initialization_context_key_reference_model_dict
        )

        # Verify the model instances are equivalent
        assert key_reference_instance_initialization_context_key_reference_model == key_reference_instance_initialization_context_key_reference_model2

        # Convert model instance back to dict and verify no loss of data
        key_reference_instance_initialization_context_key_reference_model_json2 = key_reference_instance_initialization_context_key_reference_model.to_dict(
        )
        assert key_reference_instance_initialization_context_key_reference_model_json2 == key_reference_instance_initialization_context_key_reference_model_json


class TestLoadBalancerIdentityByCRN():
    """
    Test Class for LoadBalancerIdentityByCRN
    """

    def test_load_balancer_identity_by_crn_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerIdentityByCRN
        """

        # Construct a json representation of a LoadBalancerIdentityByCRN model
        load_balancer_identity_by_crn_model_json = {}
        load_balancer_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727'

        # Construct a model instance of LoadBalancerIdentityByCRN by calling from_dict on the json representation
        load_balancer_identity_by_crn_model = LoadBalancerIdentityByCRN.from_dict(
            load_balancer_identity_by_crn_model_json)
        assert load_balancer_identity_by_crn_model != False

        # Construct a model instance of LoadBalancerIdentityByCRN by calling from_dict on the json representation
        load_balancer_identity_by_crn_model_dict = LoadBalancerIdentityByCRN.from_dict(
            load_balancer_identity_by_crn_model_json).__dict__
        load_balancer_identity_by_crn_model2 = LoadBalancerIdentityByCRN(
            **load_balancer_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_identity_by_crn_model == load_balancer_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_identity_by_crn_model_json2 = load_balancer_identity_by_crn_model.to_dict(
        )
        assert load_balancer_identity_by_crn_model_json2 == load_balancer_identity_by_crn_model_json


class TestLoadBalancerIdentityByHref():
    """
    Test Class for LoadBalancerIdentityByHref
    """

    def test_load_balancer_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerIdentityByHref
        """

        # Construct a json representation of a LoadBalancerIdentityByHref model
        load_balancer_identity_by_href_model_json = {}
        load_balancer_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727'

        # Construct a model instance of LoadBalancerIdentityByHref by calling from_dict on the json representation
        load_balancer_identity_by_href_model = LoadBalancerIdentityByHref.from_dict(
            load_balancer_identity_by_href_model_json)
        assert load_balancer_identity_by_href_model != False

        # Construct a model instance of LoadBalancerIdentityByHref by calling from_dict on the json representation
        load_balancer_identity_by_href_model_dict = LoadBalancerIdentityByHref.from_dict(
            load_balancer_identity_by_href_model_json).__dict__
        load_balancer_identity_by_href_model2 = LoadBalancerIdentityByHref(
            **load_balancer_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_identity_by_href_model == load_balancer_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_identity_by_href_model_json2 = load_balancer_identity_by_href_model.to_dict(
        )
        assert load_balancer_identity_by_href_model_json2 == load_balancer_identity_by_href_model_json


class TestLoadBalancerIdentityById():
    """
    Test Class for LoadBalancerIdentityById
    """

    def test_load_balancer_identity_by_id_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerIdentityById
        """

        # Construct a json representation of a LoadBalancerIdentityById model
        load_balancer_identity_by_id_model_json = {}
        load_balancer_identity_by_id_model_json[
            'id'] = 'dd754295-e9e0-4c9d-bf6c-58fbc59e5727'

        # Construct a model instance of LoadBalancerIdentityById by calling from_dict on the json representation
        load_balancer_identity_by_id_model = LoadBalancerIdentityById.from_dict(
            load_balancer_identity_by_id_model_json)
        assert load_balancer_identity_by_id_model != False

        # Construct a model instance of LoadBalancerIdentityById by calling from_dict on the json representation
        load_balancer_identity_by_id_model_dict = LoadBalancerIdentityById.from_dict(
            load_balancer_identity_by_id_model_json).__dict__
        load_balancer_identity_by_id_model2 = LoadBalancerIdentityById(
            **load_balancer_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_identity_by_id_model == load_balancer_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_identity_by_id_model_json2 = load_balancer_identity_by_id_model.to_dict(
        )
        assert load_balancer_identity_by_id_model_json2 == load_balancer_identity_by_id_model_json


class TestLoadBalancerListenerPolicyPatchTargetLoadBalancerListenerPolicyRedirectURLPatch(
):
    """
    Test Class for LoadBalancerListenerPolicyPatchTargetLoadBalancerListenerPolicyRedirectURLPatch
    """

    def test_load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_serialization(
            self):
        """
        Test serialization/deserialization for LoadBalancerListenerPolicyPatchTargetLoadBalancerListenerPolicyRedirectURLPatch
        """

        # Construct a json representation of a LoadBalancerListenerPolicyPatchTargetLoadBalancerListenerPolicyRedirectURLPatch model
        load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_json = {}
        load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_json[
            'http_status_code'] = 301
        load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_json[
            'url'] = 'https://www.redirect.com'

        # Construct a model instance of LoadBalancerListenerPolicyPatchTargetLoadBalancerListenerPolicyRedirectURLPatch by calling from_dict on the json representation
        load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model = LoadBalancerListenerPolicyPatchTargetLoadBalancerListenerPolicyRedirectURLPatch.from_dict(
            load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_json
        )
        assert load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model != False

        # Construct a model instance of LoadBalancerListenerPolicyPatchTargetLoadBalancerListenerPolicyRedirectURLPatch by calling from_dict on the json representation
        load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_dict = LoadBalancerListenerPolicyPatchTargetLoadBalancerListenerPolicyRedirectURLPatch.from_dict(
            load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_json
        ).__dict__
        load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model2 = LoadBalancerListenerPolicyPatchTargetLoadBalancerListenerPolicyRedirectURLPatch(
            **
            load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model == load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_json2 = load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model.to_dict(
        )
        assert load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_json2 == load_balancer_listener_policy_patch_target_load_balancer_listener_policy_redirect_url_patch_model_json


class TestLoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype(
):
    """
    Test Class for LoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype
    """

    def test_load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_serialization(
            self):
        """
        Test serialization/deserialization for LoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype
        """

        # Construct a json representation of a LoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype model
        load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_json = {}
        load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_json[
            'http_status_code'] = 301
        load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_json[
            'url'] = 'https://www.redirect.com'

        # Construct a model instance of LoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype by calling from_dict on the json representation
        load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model = LoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype.from_dict(
            load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_json
        )
        assert load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model != False

        # Construct a model instance of LoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype by calling from_dict on the json representation
        load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_dict = LoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype.from_dict(
            load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_json
        ).__dict__
        load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model2 = LoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype(
            **
            load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model == load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_json2 = load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model.to_dict(
        )
        assert load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_json2 == load_balancer_listener_policy_prototype_target_load_balancer_listener_policy_redirect_url_prototype_model_json


class TestLoadBalancerListenerPolicyTargetLoadBalancerListenerPolicyRedirectURL(
):
    """
    Test Class for LoadBalancerListenerPolicyTargetLoadBalancerListenerPolicyRedirectURL
    """

    def test_load_balancer_listener_policy_target_load_balancer_listener_policy_redirect_url_serialization(
            self):
        """
        Test serialization/deserialization for LoadBalancerListenerPolicyTargetLoadBalancerListenerPolicyRedirectURL
        """

        # Construct a json representation of a LoadBalancerListenerPolicyTargetLoadBalancerListenerPolicyRedirectURL model
        load_balancer_listener_policy_target_load_balancer_listener_policy_redirect_url_model_json = {}
        load_balancer_listener_policy_target_load_balancer_listener_policy_redirect_url_model_json[
            'http_status_code'] = 301
        load_balancer_listener_policy_target_load_balancer_listener_policy_redirect_url_model_json[
            'url'] = 'https://www.redirect.com'

        # Construct a model instance of LoadBalancerListenerPolicyTargetLoadBalancerListenerPolicyRedirectURL by calling from_dict on the json representation
        load_balancer_listener_policy_target_load_balancer_listener_policy_redirect_url_model = LoadBalancerListenerPolicyTargetLoadBalancerListenerPolicyRedirectURL.from_dict(
            load_balancer_listener_policy_target_load_balancer_listener_policy_redirect_url_model_json
        )
        assert load_balancer_listener_policy_target_load_balancer_listener_policy_redirect_url_model != False

        # Construct a model instance of LoadBalancerListenerPolicyTargetLoadBalancerListenerPolicyRedirectURL by calling from_dict on the json representation
        load_balancer_listener_policy_target_load_balancer_listener_policy_redirect_url_model_dict = LoadBalancerListenerPolicyTargetLoadBalancerListenerPolicyRedirectURL.from_dict(
            load_balancer_listener_policy_target_load_balancer_listener_policy_redirect_url_model_json
        ).__dict__
        load_balancer_listener_policy_target_load_balancer_listener_policy_redirect_url_model2 = LoadBalancerListenerPolicyTargetLoadBalancerListenerPolicyRedirectURL(
            **
            load_balancer_listener_policy_target_load_balancer_listener_policy_redirect_url_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_target_load_balancer_listener_policy_redirect_url_model == load_balancer_listener_policy_target_load_balancer_listener_policy_redirect_url_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_target_load_balancer_listener_policy_redirect_url_model_json2 = load_balancer_listener_policy_target_load_balancer_listener_policy_redirect_url_model.to_dict(
        )
        assert load_balancer_listener_policy_target_load_balancer_listener_policy_redirect_url_model_json2 == load_balancer_listener_policy_target_load_balancer_listener_policy_redirect_url_model_json


class TestLoadBalancerListenerPolicyTargetLoadBalancerPoolReference():
    """
    Test Class for LoadBalancerListenerPolicyTargetLoadBalancerPoolReference
    """

    def test_load_balancer_listener_policy_target_load_balancer_pool_reference_serialization(
            self):
        """
        Test serialization/deserialization for LoadBalancerListenerPolicyTargetLoadBalancerPoolReference
        """

        # Construct a json representation of a LoadBalancerListenerPolicyTargetLoadBalancerPoolReference model
        load_balancer_listener_policy_target_load_balancer_pool_reference_model_json = {}
        load_balancer_listener_policy_target_load_balancer_pool_reference_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_target_load_balancer_pool_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'
        load_balancer_listener_policy_target_load_balancer_pool_reference_model_json[
            'name'] = 'my-load-balancer-pool'

        # Construct a model instance of LoadBalancerListenerPolicyTargetLoadBalancerPoolReference by calling from_dict on the json representation
        load_balancer_listener_policy_target_load_balancer_pool_reference_model = LoadBalancerListenerPolicyTargetLoadBalancerPoolReference.from_dict(
            load_balancer_listener_policy_target_load_balancer_pool_reference_model_json
        )
        assert load_balancer_listener_policy_target_load_balancer_pool_reference_model != False

        # Construct a model instance of LoadBalancerListenerPolicyTargetLoadBalancerPoolReference by calling from_dict on the json representation
        load_balancer_listener_policy_target_load_balancer_pool_reference_model_dict = LoadBalancerListenerPolicyTargetLoadBalancerPoolReference.from_dict(
            load_balancer_listener_policy_target_load_balancer_pool_reference_model_json
        ).__dict__
        load_balancer_listener_policy_target_load_balancer_pool_reference_model2 = LoadBalancerListenerPolicyTargetLoadBalancerPoolReference(
            **
            load_balancer_listener_policy_target_load_balancer_pool_reference_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_target_load_balancer_pool_reference_model == load_balancer_listener_policy_target_load_balancer_pool_reference_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_target_load_balancer_pool_reference_model_json2 = load_balancer_listener_policy_target_load_balancer_pool_reference_model.to_dict(
        )
        assert load_balancer_listener_policy_target_load_balancer_pool_reference_model_json2 == load_balancer_listener_policy_target_load_balancer_pool_reference_model_json


class TestLoadBalancerPoolIdentityByHref():
    """
    Test Class for LoadBalancerPoolIdentityByHref
    """

    def test_load_balancer_pool_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolIdentityByHref
        """

        # Construct a json representation of a LoadBalancerPoolIdentityByHref model
        load_balancer_pool_identity_by_href_model_json = {}
        load_balancer_pool_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a model instance of LoadBalancerPoolIdentityByHref by calling from_dict on the json representation
        load_balancer_pool_identity_by_href_model = LoadBalancerPoolIdentityByHref.from_dict(
            load_balancer_pool_identity_by_href_model_json)
        assert load_balancer_pool_identity_by_href_model != False

        # Construct a model instance of LoadBalancerPoolIdentityByHref by calling from_dict on the json representation
        load_balancer_pool_identity_by_href_model_dict = LoadBalancerPoolIdentityByHref.from_dict(
            load_balancer_pool_identity_by_href_model_json).__dict__
        load_balancer_pool_identity_by_href_model2 = LoadBalancerPoolIdentityByHref(
            **load_balancer_pool_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_identity_by_href_model == load_balancer_pool_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_identity_by_href_model_json2 = load_balancer_pool_identity_by_href_model.to_dict(
        )
        assert load_balancer_pool_identity_by_href_model_json2 == load_balancer_pool_identity_by_href_model_json


class TestLoadBalancerPoolIdentityById():
    """
    Test Class for LoadBalancerPoolIdentityById
    """

    def test_load_balancer_pool_identity_by_id_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolIdentityById
        """

        # Construct a json representation of a LoadBalancerPoolIdentityById model
        load_balancer_pool_identity_by_id_model_json = {}
        load_balancer_pool_identity_by_id_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a model instance of LoadBalancerPoolIdentityById by calling from_dict on the json representation
        load_balancer_pool_identity_by_id_model = LoadBalancerPoolIdentityById.from_dict(
            load_balancer_pool_identity_by_id_model_json)
        assert load_balancer_pool_identity_by_id_model != False

        # Construct a model instance of LoadBalancerPoolIdentityById by calling from_dict on the json representation
        load_balancer_pool_identity_by_id_model_dict = LoadBalancerPoolIdentityById.from_dict(
            load_balancer_pool_identity_by_id_model_json).__dict__
        load_balancer_pool_identity_by_id_model2 = LoadBalancerPoolIdentityById(
            **load_balancer_pool_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_identity_by_id_model == load_balancer_pool_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_identity_by_id_model_json2 = load_balancer_pool_identity_by_id_model.to_dict(
        )
        assert load_balancer_pool_identity_by_id_model_json2 == load_balancer_pool_identity_by_id_model_json


class TestLoadBalancerPoolMemberTargetPrototypeIP():
    """
    Test Class for LoadBalancerPoolMemberTargetPrototypeIP
    """

    def test_load_balancer_pool_member_target_prototype_ip_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolMemberTargetPrototypeIP
        """

        # Construct a json representation of a LoadBalancerPoolMemberTargetPrototypeIP model
        load_balancer_pool_member_target_prototype_ip_model_json = {}
        load_balancer_pool_member_target_prototype_ip_model_json[
            'address'] = '192.168.3.4'

        # Construct a model instance of LoadBalancerPoolMemberTargetPrototypeIP by calling from_dict on the json representation
        load_balancer_pool_member_target_prototype_ip_model = LoadBalancerPoolMemberTargetPrototypeIP.from_dict(
            load_balancer_pool_member_target_prototype_ip_model_json)
        assert load_balancer_pool_member_target_prototype_ip_model != False

        # Construct a model instance of LoadBalancerPoolMemberTargetPrototypeIP by calling from_dict on the json representation
        load_balancer_pool_member_target_prototype_ip_model_dict = LoadBalancerPoolMemberTargetPrototypeIP.from_dict(
            load_balancer_pool_member_target_prototype_ip_model_json).__dict__
        load_balancer_pool_member_target_prototype_ip_model2 = LoadBalancerPoolMemberTargetPrototypeIP(
            **load_balancer_pool_member_target_prototype_ip_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_member_target_prototype_ip_model == load_balancer_pool_member_target_prototype_ip_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_member_target_prototype_ip_model_json2 = load_balancer_pool_member_target_prototype_ip_model.to_dict(
        )
        assert load_balancer_pool_member_target_prototype_ip_model_json2 == load_balancer_pool_member_target_prototype_ip_model_json


class TestLoadBalancerPoolMemberTargetIP():
    """
    Test Class for LoadBalancerPoolMemberTargetIP
    """

    def test_load_balancer_pool_member_target_ip_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerPoolMemberTargetIP
        """

        # Construct a json representation of a LoadBalancerPoolMemberTargetIP model
        load_balancer_pool_member_target_ip_model_json = {}
        load_balancer_pool_member_target_ip_model_json[
            'address'] = '192.168.3.4'

        # Construct a model instance of LoadBalancerPoolMemberTargetIP by calling from_dict on the json representation
        load_balancer_pool_member_target_ip_model = LoadBalancerPoolMemberTargetIP.from_dict(
            load_balancer_pool_member_target_ip_model_json)
        assert load_balancer_pool_member_target_ip_model != False

        # Construct a model instance of LoadBalancerPoolMemberTargetIP by calling from_dict on the json representation
        load_balancer_pool_member_target_ip_model_dict = LoadBalancerPoolMemberTargetIP.from_dict(
            load_balancer_pool_member_target_ip_model_json).__dict__
        load_balancer_pool_member_target_ip_model2 = LoadBalancerPoolMemberTargetIP(
            **load_balancer_pool_member_target_ip_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_member_target_ip_model == load_balancer_pool_member_target_ip_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_member_target_ip_model_json2 = load_balancer_pool_member_target_ip_model.to_dict(
        )
        assert load_balancer_pool_member_target_ip_model_json2 == load_balancer_pool_member_target_ip_model_json


class TestLoadBalancerPoolMemberTargetInstanceReference():
    """
    Test Class for LoadBalancerPoolMemberTargetInstanceReference
    """

    def test_load_balancer_pool_member_target_instance_reference_serialization(
            self):
        """
        Test serialization/deserialization for LoadBalancerPoolMemberTargetInstanceReference
        """

        # Construct a json representation of a LoadBalancerPoolMemberTargetInstanceReference model
        load_balancer_pool_member_target_instance_reference_model_json = {}
        load_balancer_pool_member_target_instance_reference_model_json[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'
        load_balancer_pool_member_target_instance_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'
        load_balancer_pool_member_target_instance_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'
        load_balancer_pool_member_target_instance_reference_model_json[
            'name'] = 'my-instance'

        # Construct a model instance of LoadBalancerPoolMemberTargetInstanceReference by calling from_dict on the json representation
        load_balancer_pool_member_target_instance_reference_model = LoadBalancerPoolMemberTargetInstanceReference.from_dict(
            load_balancer_pool_member_target_instance_reference_model_json)
        assert load_balancer_pool_member_target_instance_reference_model != False

        # Construct a model instance of LoadBalancerPoolMemberTargetInstanceReference by calling from_dict on the json representation
        load_balancer_pool_member_target_instance_reference_model_dict = LoadBalancerPoolMemberTargetInstanceReference.from_dict(
            load_balancer_pool_member_target_instance_reference_model_json
        ).__dict__
        load_balancer_pool_member_target_instance_reference_model2 = LoadBalancerPoolMemberTargetInstanceReference(
            **load_balancer_pool_member_target_instance_reference_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_pool_member_target_instance_reference_model == load_balancer_pool_member_target_instance_reference_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_member_target_instance_reference_model_json2 = load_balancer_pool_member_target_instance_reference_model.to_dict(
        )
        assert load_balancer_pool_member_target_instance_reference_model_json2 == load_balancer_pool_member_target_instance_reference_model_json


class TestLoadBalancerProfileIdentityByHref():
    """
    Test Class for LoadBalancerProfileIdentityByHref
    """

    def test_load_balancer_profile_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerProfileIdentityByHref
        """

        # Construct a json representation of a LoadBalancerProfileIdentityByHref model
        load_balancer_profile_identity_by_href_model_json = {}
        load_balancer_profile_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed'

        # Construct a model instance of LoadBalancerProfileIdentityByHref by calling from_dict on the json representation
        load_balancer_profile_identity_by_href_model = LoadBalancerProfileIdentityByHref.from_dict(
            load_balancer_profile_identity_by_href_model_json)
        assert load_balancer_profile_identity_by_href_model != False

        # Construct a model instance of LoadBalancerProfileIdentityByHref by calling from_dict on the json representation
        load_balancer_profile_identity_by_href_model_dict = LoadBalancerProfileIdentityByHref.from_dict(
            load_balancer_profile_identity_by_href_model_json).__dict__
        load_balancer_profile_identity_by_href_model2 = LoadBalancerProfileIdentityByHref(
            **load_balancer_profile_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_profile_identity_by_href_model == load_balancer_profile_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_profile_identity_by_href_model_json2 = load_balancer_profile_identity_by_href_model.to_dict(
        )
        assert load_balancer_profile_identity_by_href_model_json2 == load_balancer_profile_identity_by_href_model_json


class TestLoadBalancerProfileIdentityByName():
    """
    Test Class for LoadBalancerProfileIdentityByName
    """

    def test_load_balancer_profile_identity_by_name_serialization(self):
        """
        Test serialization/deserialization for LoadBalancerProfileIdentityByName
        """

        # Construct a json representation of a LoadBalancerProfileIdentityByName model
        load_balancer_profile_identity_by_name_model_json = {}
        load_balancer_profile_identity_by_name_model_json[
            'name'] = 'network-fixed'

        # Construct a model instance of LoadBalancerProfileIdentityByName by calling from_dict on the json representation
        load_balancer_profile_identity_by_name_model = LoadBalancerProfileIdentityByName.from_dict(
            load_balancer_profile_identity_by_name_model_json)
        assert load_balancer_profile_identity_by_name_model != False

        # Construct a model instance of LoadBalancerProfileIdentityByName by calling from_dict on the json representation
        load_balancer_profile_identity_by_name_model_dict = LoadBalancerProfileIdentityByName.from_dict(
            load_balancer_profile_identity_by_name_model_json).__dict__
        load_balancer_profile_identity_by_name_model2 = LoadBalancerProfileIdentityByName(
            **load_balancer_profile_identity_by_name_model_dict)

        # Verify the model instances are equivalent
        assert load_balancer_profile_identity_by_name_model == load_balancer_profile_identity_by_name_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_profile_identity_by_name_model_json2 = load_balancer_profile_identity_by_name_model.to_dict(
        )
        assert load_balancer_profile_identity_by_name_model_json2 == load_balancer_profile_identity_by_name_model_json


class TestNetworkACLIdentityByCRN():
    """
    Test Class for NetworkACLIdentityByCRN
    """

    def test_network_acl_identity_by_crn_serialization(self):
        """
        Test serialization/deserialization for NetworkACLIdentityByCRN
        """

        # Construct a json representation of a NetworkACLIdentityByCRN model
        network_acl_identity_by_crn_model_json = {}
        network_acl_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Construct a model instance of NetworkACLIdentityByCRN by calling from_dict on the json representation
        network_acl_identity_by_crn_model = NetworkACLIdentityByCRN.from_dict(
            network_acl_identity_by_crn_model_json)
        assert network_acl_identity_by_crn_model != False

        # Construct a model instance of NetworkACLIdentityByCRN by calling from_dict on the json representation
        network_acl_identity_by_crn_model_dict = NetworkACLIdentityByCRN.from_dict(
            network_acl_identity_by_crn_model_json).__dict__
        network_acl_identity_by_crn_model2 = NetworkACLIdentityByCRN(
            **network_acl_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_identity_by_crn_model == network_acl_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_identity_by_crn_model_json2 = network_acl_identity_by_crn_model.to_dict(
        )
        assert network_acl_identity_by_crn_model_json2 == network_acl_identity_by_crn_model_json


class TestNetworkACLIdentityByHref():
    """
    Test Class for NetworkACLIdentityByHref
    """

    def test_network_acl_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for NetworkACLIdentityByHref
        """

        # Construct a json representation of a NetworkACLIdentityByHref model
        network_acl_identity_by_href_model_json = {}
        network_acl_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Construct a model instance of NetworkACLIdentityByHref by calling from_dict on the json representation
        network_acl_identity_by_href_model = NetworkACLIdentityByHref.from_dict(
            network_acl_identity_by_href_model_json)
        assert network_acl_identity_by_href_model != False

        # Construct a model instance of NetworkACLIdentityByHref by calling from_dict on the json representation
        network_acl_identity_by_href_model_dict = NetworkACLIdentityByHref.from_dict(
            network_acl_identity_by_href_model_json).__dict__
        network_acl_identity_by_href_model2 = NetworkACLIdentityByHref(
            **network_acl_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_identity_by_href_model == network_acl_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_identity_by_href_model_json2 = network_acl_identity_by_href_model.to_dict(
        )
        assert network_acl_identity_by_href_model_json2 == network_acl_identity_by_href_model_json


class TestNetworkACLIdentityById():
    """
    Test Class for NetworkACLIdentityById
    """

    def test_network_acl_identity_by_id_serialization(self):
        """
        Test serialization/deserialization for NetworkACLIdentityById
        """

        # Construct a json representation of a NetworkACLIdentityById model
        network_acl_identity_by_id_model_json = {}
        network_acl_identity_by_id_model_json[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Construct a model instance of NetworkACLIdentityById by calling from_dict on the json representation
        network_acl_identity_by_id_model = NetworkACLIdentityById.from_dict(
            network_acl_identity_by_id_model_json)
        assert network_acl_identity_by_id_model != False

        # Construct a model instance of NetworkACLIdentityById by calling from_dict on the json representation
        network_acl_identity_by_id_model_dict = NetworkACLIdentityById.from_dict(
            network_acl_identity_by_id_model_json).__dict__
        network_acl_identity_by_id_model2 = NetworkACLIdentityById(
            **network_acl_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_identity_by_id_model == network_acl_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_identity_by_id_model_json2 = network_acl_identity_by_id_model.to_dict(
        )
        assert network_acl_identity_by_id_model_json2 == network_acl_identity_by_id_model_json


class TestNetworkACLPrototypeNetworkACLByRules():
    """
    Test Class for NetworkACLPrototypeNetworkACLByRules
    """

    def test_network_acl_prototype_network_acl_by_rules_serialization(self):
        """
        Test serialization/deserialization for NetworkACLPrototypeNetworkACLByRules
        """

        # Construct dict forms of any model objects needed in order to build this model.

        vpc_identity_model = {}  # VPCIdentityById
        vpc_identity_model['id'] = 'cf7cd5a-2f30-4336-a495-6addc820cd61'

        resource_group_identity_model = {}  # ResourceGroupIdentityById
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        network_acl_rule_prototype_network_acl_context_model = {
        }  # NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll
        network_acl_rule_prototype_network_acl_context_model[
            'name'] = 'my-rule-2'
        network_acl_rule_prototype_network_acl_context_model['action'] = 'allow'
        network_acl_rule_prototype_network_acl_context_model[
            'destination'] = '192.168.3.2/32'
        network_acl_rule_prototype_network_acl_context_model[
            'direction'] = 'inbound'
        network_acl_rule_prototype_network_acl_context_model[
            'source'] = '192.168.3.2/32'
        network_acl_rule_prototype_network_acl_context_model['protocol'] = 'all'

        # Construct a json representation of a NetworkACLPrototypeNetworkACLByRules model
        network_acl_prototype_network_acl_by_rules_model_json = {}
        network_acl_prototype_network_acl_by_rules_model_json[
            'name'] = 'my-network-acl'
        network_acl_prototype_network_acl_by_rules_model_json[
            'vpc'] = vpc_identity_model
        network_acl_prototype_network_acl_by_rules_model_json[
            'resource_group'] = resource_group_identity_model
        network_acl_prototype_network_acl_by_rules_model_json['rules'] = [
            network_acl_rule_prototype_network_acl_context_model
        ]

        # Construct a model instance of NetworkACLPrototypeNetworkACLByRules by calling from_dict on the json representation
        network_acl_prototype_network_acl_by_rules_model = NetworkACLPrototypeNetworkACLByRules.from_dict(
            network_acl_prototype_network_acl_by_rules_model_json)
        assert network_acl_prototype_network_acl_by_rules_model != False

        # Construct a model instance of NetworkACLPrototypeNetworkACLByRules by calling from_dict on the json representation
        network_acl_prototype_network_acl_by_rules_model_dict = NetworkACLPrototypeNetworkACLByRules.from_dict(
            network_acl_prototype_network_acl_by_rules_model_json).__dict__
        network_acl_prototype_network_acl_by_rules_model2 = NetworkACLPrototypeNetworkACLByRules(
            **network_acl_prototype_network_acl_by_rules_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_prototype_network_acl_by_rules_model == network_acl_prototype_network_acl_by_rules_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_prototype_network_acl_by_rules_model_json2 = network_acl_prototype_network_acl_by_rules_model.to_dict(
        )
        assert network_acl_prototype_network_acl_by_rules_model_json2 == network_acl_prototype_network_acl_by_rules_model_json


class TestNetworkACLPrototypeNetworkACLBySourceNetworkACL():
    """
    Test Class for NetworkACLPrototypeNetworkACLBySourceNetworkACL
    """

    def test_network_acl_prototype_network_acl_by_source_network_acl_serialization(
            self):
        """
        Test serialization/deserialization for NetworkACLPrototypeNetworkACLBySourceNetworkACL
        """

        # Construct dict forms of any model objects needed in order to build this model.

        vpc_identity_model = {}  # VPCIdentityById
        vpc_identity_model['id'] = 'cf7cd5a-2f30-4336-a495-6addc820cd61'

        resource_group_identity_model = {}  # ResourceGroupIdentityById
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        network_acl_identity_model = {}  # NetworkACLIdentityById
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        # Construct a json representation of a NetworkACLPrototypeNetworkACLBySourceNetworkACL model
        network_acl_prototype_network_acl_by_source_network_acl_model_json = {}
        network_acl_prototype_network_acl_by_source_network_acl_model_json[
            'name'] = 'my-network-acl'
        network_acl_prototype_network_acl_by_source_network_acl_model_json[
            'vpc'] = vpc_identity_model
        network_acl_prototype_network_acl_by_source_network_acl_model_json[
            'resource_group'] = resource_group_identity_model
        network_acl_prototype_network_acl_by_source_network_acl_model_json[
            'source_network_acl'] = network_acl_identity_model

        # Construct a model instance of NetworkACLPrototypeNetworkACLBySourceNetworkACL by calling from_dict on the json representation
        network_acl_prototype_network_acl_by_source_network_acl_model = NetworkACLPrototypeNetworkACLBySourceNetworkACL.from_dict(
            network_acl_prototype_network_acl_by_source_network_acl_model_json)
        assert network_acl_prototype_network_acl_by_source_network_acl_model != False

        # Construct a model instance of NetworkACLPrototypeNetworkACLBySourceNetworkACL by calling from_dict on the json representation
        network_acl_prototype_network_acl_by_source_network_acl_model_dict = NetworkACLPrototypeNetworkACLBySourceNetworkACL.from_dict(
            network_acl_prototype_network_acl_by_source_network_acl_model_json
        ).__dict__
        network_acl_prototype_network_acl_by_source_network_acl_model2 = NetworkACLPrototypeNetworkACLBySourceNetworkACL(
            **
            network_acl_prototype_network_acl_by_source_network_acl_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_prototype_network_acl_by_source_network_acl_model == network_acl_prototype_network_acl_by_source_network_acl_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_prototype_network_acl_by_source_network_acl_model_json2 = network_acl_prototype_network_acl_by_source_network_acl_model.to_dict(
        )
        assert network_acl_prototype_network_acl_by_source_network_acl_model_json2 == network_acl_prototype_network_acl_by_source_network_acl_model_json


class TestNetworkACLRuleIdentityByHref():
    """
    Test Class for NetworkACLRuleIdentityByHref
    """

    def test_network_acl_rule_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for NetworkACLRuleIdentityByHref
        """

        # Construct a json representation of a NetworkACLRuleIdentityByHref model
        network_acl_rule_identity_by_href_model_json = {}
        network_acl_rule_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'

        # Construct a model instance of NetworkACLRuleIdentityByHref by calling from_dict on the json representation
        network_acl_rule_identity_by_href_model = NetworkACLRuleIdentityByHref.from_dict(
            network_acl_rule_identity_by_href_model_json)
        assert network_acl_rule_identity_by_href_model != False

        # Construct a model instance of NetworkACLRuleIdentityByHref by calling from_dict on the json representation
        network_acl_rule_identity_by_href_model_dict = NetworkACLRuleIdentityByHref.from_dict(
            network_acl_rule_identity_by_href_model_json).__dict__
        network_acl_rule_identity_by_href_model2 = NetworkACLRuleIdentityByHref(
            **network_acl_rule_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_identity_by_href_model == network_acl_rule_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_identity_by_href_model_json2 = network_acl_rule_identity_by_href_model.to_dict(
        )
        assert network_acl_rule_identity_by_href_model_json2 == network_acl_rule_identity_by_href_model_json


class TestNetworkACLRuleIdentityById():
    """
    Test Class for NetworkACLRuleIdentityById
    """

    def test_network_acl_rule_identity_by_id_serialization(self):
        """
        Test serialization/deserialization for NetworkACLRuleIdentityById
        """

        # Construct a json representation of a NetworkACLRuleIdentityById model
        network_acl_rule_identity_by_id_model_json = {}
        network_acl_rule_identity_by_id_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'

        # Construct a model instance of NetworkACLRuleIdentityById by calling from_dict on the json representation
        network_acl_rule_identity_by_id_model = NetworkACLRuleIdentityById.from_dict(
            network_acl_rule_identity_by_id_model_json)
        assert network_acl_rule_identity_by_id_model != False

        # Construct a model instance of NetworkACLRuleIdentityById by calling from_dict on the json representation
        network_acl_rule_identity_by_id_model_dict = NetworkACLRuleIdentityById.from_dict(
            network_acl_rule_identity_by_id_model_json).__dict__
        network_acl_rule_identity_by_id_model2 = NetworkACLRuleIdentityById(
            **network_acl_rule_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_identity_by_id_model == network_acl_rule_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_identity_by_id_model_json2 = network_acl_rule_identity_by_id_model.to_dict(
        )
        assert network_acl_rule_identity_by_id_model_json2 == network_acl_rule_identity_by_id_model_json


class TestNetworkACLRuleItemNetworkACLRuleProtocolAll():
    """
    Test Class for NetworkACLRuleItemNetworkACLRuleProtocolAll
    """

    def test_network_acl_rule_item_network_acl_rule_protocol_all_serialization(
            self):
        """
        Test serialization/deserialization for NetworkACLRuleItemNetworkACLRuleProtocolAll
        """

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a json representation of a NetworkACLRuleItemNetworkACLRuleProtocolAll model
        network_acl_rule_item_network_acl_rule_protocol_all_model_json = {}
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'action'] = 'allow'
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'direction'] = 'inbound'
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'source'] = '192.168.3.0/24'
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'protocol'] = 'all'
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_item_network_acl_rule_protocol_all_model_json[
            'ip_version'] = 'ipv4'

        # Construct a model instance of NetworkACLRuleItemNetworkACLRuleProtocolAll by calling from_dict on the json representation
        network_acl_rule_item_network_acl_rule_protocol_all_model = NetworkACLRuleItemNetworkACLRuleProtocolAll.from_dict(
            network_acl_rule_item_network_acl_rule_protocol_all_model_json)
        assert network_acl_rule_item_network_acl_rule_protocol_all_model != False

        # Construct a model instance of NetworkACLRuleItemNetworkACLRuleProtocolAll by calling from_dict on the json representation
        network_acl_rule_item_network_acl_rule_protocol_all_model_dict = NetworkACLRuleItemNetworkACLRuleProtocolAll.from_dict(
            network_acl_rule_item_network_acl_rule_protocol_all_model_json
        ).__dict__
        network_acl_rule_item_network_acl_rule_protocol_all_model2 = NetworkACLRuleItemNetworkACLRuleProtocolAll(
            **network_acl_rule_item_network_acl_rule_protocol_all_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_item_network_acl_rule_protocol_all_model == network_acl_rule_item_network_acl_rule_protocol_all_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_item_network_acl_rule_protocol_all_model_json2 = network_acl_rule_item_network_acl_rule_protocol_all_model.to_dict(
        )
        assert network_acl_rule_item_network_acl_rule_protocol_all_model_json2 == network_acl_rule_item_network_acl_rule_protocol_all_model_json


class TestNetworkACLRuleItemNetworkACLRuleProtocolICMP():
    """
    Test Class for NetworkACLRuleItemNetworkACLRuleProtocolICMP
    """

    def test_network_acl_rule_item_network_acl_rule_protocol_icmp_serialization(
            self):
        """
        Test serialization/deserialization for NetworkACLRuleItemNetworkACLRuleProtocolICMP
        """

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a json representation of a NetworkACLRuleItemNetworkACLRuleProtocolICMP model
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json = {}
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'action'] = 'allow'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'direction'] = 'inbound'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'source'] = '192.168.3.0/24'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'protocol'] = 'icmp'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'ip_version'] = 'ipv4'
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'code'] = 0
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json[
            'type'] = 8

        # Construct a model instance of NetworkACLRuleItemNetworkACLRuleProtocolICMP by calling from_dict on the json representation
        network_acl_rule_item_network_acl_rule_protocol_icmp_model = NetworkACLRuleItemNetworkACLRuleProtocolICMP.from_dict(
            network_acl_rule_item_network_acl_rule_protocol_icmp_model_json)
        assert network_acl_rule_item_network_acl_rule_protocol_icmp_model != False

        # Construct a model instance of NetworkACLRuleItemNetworkACLRuleProtocolICMP by calling from_dict on the json representation
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_dict = NetworkACLRuleItemNetworkACLRuleProtocolICMP.from_dict(
            network_acl_rule_item_network_acl_rule_protocol_icmp_model_json
        ).__dict__
        network_acl_rule_item_network_acl_rule_protocol_icmp_model2 = NetworkACLRuleItemNetworkACLRuleProtocolICMP(
            **network_acl_rule_item_network_acl_rule_protocol_icmp_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_item_network_acl_rule_protocol_icmp_model == network_acl_rule_item_network_acl_rule_protocol_icmp_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_item_network_acl_rule_protocol_icmp_model_json2 = network_acl_rule_item_network_acl_rule_protocol_icmp_model.to_dict(
        )
        assert network_acl_rule_item_network_acl_rule_protocol_icmp_model_json2 == network_acl_rule_item_network_acl_rule_protocol_icmp_model_json


class TestNetworkACLRuleItemNetworkACLRuleProtocolTCPUDP():
    """
    Test Class for NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP
    """

    def test_network_acl_rule_item_network_acl_rule_protocol_tcpudp_serialization(
            self):
        """
        Test serialization/deserialization for NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP
        """

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a json representation of a NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP model
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json = {}
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'action'] = 'allow'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'direction'] = 'inbound'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'source'] = '192.168.3.0/24'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'protocol'] = 'udp'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'ip_version'] = 'ipv4'
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'destination_port_max'] = 22
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'destination_port_min'] = 22
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'source_port_max'] = 65535
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json[
            'source_port_min'] = 49152

        # Construct a model instance of NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP by calling from_dict on the json representation
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model = NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP.from_dict(
            network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json)
        assert network_acl_rule_item_network_acl_rule_protocol_tcpudp_model != False

        # Construct a model instance of NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP by calling from_dict on the json representation
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_dict = NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP.from_dict(
            network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json
        ).__dict__
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model2 = NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP(
            **network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_item_network_acl_rule_protocol_tcpudp_model == network_acl_rule_item_network_acl_rule_protocol_tcpudp_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json2 = network_acl_rule_item_network_acl_rule_protocol_tcpudp_model.to_dict(
        )
        assert network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json2 == network_acl_rule_item_network_acl_rule_protocol_tcpudp_model_json


class TestNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll():
    """
    Test Class for NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll
    """

    def test_network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_serialization(
            self):
        """
        Test serialization/deserialization for NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll
        """

        # Construct a json representation of a NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll model
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json = {}
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json[
            'action'] = 'allow'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json[
            'destination'] = '192.168.3.2/32'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json[
            'direction'] = 'inbound'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json[
            'source'] = '192.168.3.2/32'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json[
            'protocol'] = 'all'

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model = NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll.from_dict(
            network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json
        )
        assert network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model != False

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_dict = NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll.from_dict(
            network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json
        ).__dict__
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model2 = NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll(
            **
            network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_dict
        )

        # Verify the model instances are equivalent
        assert network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model == network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json2 = network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model.to_dict(
        )
        assert network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json2 == network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_all_model_json


class TestNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP():
    """
    Test Class for NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP
    """

    def test_network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_serialization(
            self):
        """
        Test serialization/deserialization for NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP
        """

        # Construct a json representation of a NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP model
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json = {}
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'action'] = 'allow'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'destination'] = '192.168.3.2/32'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'direction'] = 'inbound'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'source'] = '192.168.3.2/32'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'protocol'] = 'icmp'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'code'] = 0
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json[
            'type'] = 8

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model = NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP.from_dict(
            network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json
        )
        assert network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model != False

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_dict = NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP.from_dict(
            network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json
        ).__dict__
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model2 = NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMP(
            **
            network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_dict
        )

        # Verify the model instances are equivalent
        assert network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model == network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json2 = network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model.to_dict(
        )
        assert network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json2 == network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_icmp_model_json


class TestNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP(
):
    """
    Test Class for NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP
    """

    def test_network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_serialization(
            self):
        """
        Test serialization/deserialization for NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP
        """

        # Construct a json representation of a NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP model
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json = {}
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'action'] = 'allow'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'destination'] = '192.168.3.2/32'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'direction'] = 'inbound'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'source'] = '192.168.3.2/32'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'protocol'] = 'udp'
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'destination_port_max'] = 22
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'destination_port_min'] = 22
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'source_port_max'] = 65535
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json[
            'source_port_min'] = 49152

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model = NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP.from_dict(
            network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json
        )
        assert network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model != False

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_dict = NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP.from_dict(
            network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json
        ).__dict__
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model2 = NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDP(
            **
            network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_dict
        )

        # Verify the model instances are equivalent
        assert network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model == network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json2 = network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model.to_dict(
        )
        assert network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json2 == network_acl_rule_prototype_network_acl_context_network_acl_rule_protocol_tcpudp_model_json


class TestNetworkACLRulePrototypeNetworkACLRuleProtocolAll():
    """
    Test Class for NetworkACLRulePrototypeNetworkACLRuleProtocolAll
    """

    def test_network_acl_rule_prototype_network_acl_rule_protocol_all_serialization(
            self):
        """
        Test serialization/deserialization for NetworkACLRulePrototypeNetworkACLRuleProtocolAll
        """

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_identity_model = {}  # NetworkACLRuleIdentityById
        network_acl_rule_identity_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'

        # Construct a json representation of a NetworkACLRulePrototypeNetworkACLRuleProtocolAll model
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json = {}
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json[
            'action'] = 'allow'
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json[
            'destination'] = '192.168.3.2/32'
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json[
            'direction'] = 'inbound'
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json[
            'source'] = '192.168.3.2/32'
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json[
            'protocol'] = 'all'
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json[
            'before'] = network_acl_rule_identity_model

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLRuleProtocolAll by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_rule_protocol_all_model = NetworkACLRulePrototypeNetworkACLRuleProtocolAll.from_dict(
            network_acl_rule_prototype_network_acl_rule_protocol_all_model_json)
        assert network_acl_rule_prototype_network_acl_rule_protocol_all_model != False

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLRuleProtocolAll by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_dict = NetworkACLRulePrototypeNetworkACLRuleProtocolAll.from_dict(
            network_acl_rule_prototype_network_acl_rule_protocol_all_model_json
        ).__dict__
        network_acl_rule_prototype_network_acl_rule_protocol_all_model2 = NetworkACLRulePrototypeNetworkACLRuleProtocolAll(
            **
            network_acl_rule_prototype_network_acl_rule_protocol_all_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_prototype_network_acl_rule_protocol_all_model == network_acl_rule_prototype_network_acl_rule_protocol_all_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_prototype_network_acl_rule_protocol_all_model_json2 = network_acl_rule_prototype_network_acl_rule_protocol_all_model.to_dict(
        )
        assert network_acl_rule_prototype_network_acl_rule_protocol_all_model_json2 == network_acl_rule_prototype_network_acl_rule_protocol_all_model_json


class TestNetworkACLRulePrototypeNetworkACLRuleProtocolICMP():
    """
    Test Class for NetworkACLRulePrototypeNetworkACLRuleProtocolICMP
    """

    def test_network_acl_rule_prototype_network_acl_rule_protocol_icmp_serialization(
            self):
        """
        Test serialization/deserialization for NetworkACLRulePrototypeNetworkACLRuleProtocolICMP
        """

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_identity_model = {}  # NetworkACLRuleIdentityById
        network_acl_rule_identity_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'

        # Construct a json representation of a NetworkACLRulePrototypeNetworkACLRuleProtocolICMP model
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json = {}
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'action'] = 'allow'
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'destination'] = '192.168.3.2/32'
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'direction'] = 'inbound'
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'source'] = '192.168.3.2/32'
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'protocol'] = 'icmp'
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'before'] = network_acl_rule_identity_model
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'code'] = 0
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json[
            'type'] = 8

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLRuleProtocolICMP by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model = NetworkACLRulePrototypeNetworkACLRuleProtocolICMP.from_dict(
            network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json
        )
        assert network_acl_rule_prototype_network_acl_rule_protocol_icmp_model != False

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLRuleProtocolICMP by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_dict = NetworkACLRulePrototypeNetworkACLRuleProtocolICMP.from_dict(
            network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json
        ).__dict__
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model2 = NetworkACLRulePrototypeNetworkACLRuleProtocolICMP(
            **
            network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_dict
        )

        # Verify the model instances are equivalent
        assert network_acl_rule_prototype_network_acl_rule_protocol_icmp_model == network_acl_rule_prototype_network_acl_rule_protocol_icmp_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json2 = network_acl_rule_prototype_network_acl_rule_protocol_icmp_model.to_dict(
        )
        assert network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json2 == network_acl_rule_prototype_network_acl_rule_protocol_icmp_model_json


class TestNetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP():
    """
    Test Class for NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP
    """

    def test_network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_serialization(
            self):
        """
        Test serialization/deserialization for NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP
        """

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_identity_model = {}  # NetworkACLRuleIdentityById
        network_acl_rule_identity_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'

        # Construct a json representation of a NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP model
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json = {}
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'action'] = 'allow'
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'destination'] = '192.168.3.2/32'
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'direction'] = 'inbound'
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'source'] = '192.168.3.2/32'
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'protocol'] = 'udp'
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'before'] = network_acl_rule_identity_model
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'destination_port_max'] = 22
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'destination_port_min'] = 22
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'source_port_max'] = 65535
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json[
            'source_port_min'] = 49152

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model = NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP.from_dict(
            network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json
        )
        assert network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model != False

        # Construct a model instance of NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP by calling from_dict on the json representation
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_dict = NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP.from_dict(
            network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json
        ).__dict__
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model2 = NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDP(
            **
            network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_dict
        )

        # Verify the model instances are equivalent
        assert network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model == network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json2 = network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model.to_dict(
        )
        assert network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json2 == network_acl_rule_prototype_network_acl_rule_protocol_tcpudp_model_json


class TestNetworkACLRuleNetworkACLRuleProtocolAll():
    """
    Test Class for NetworkACLRuleNetworkACLRuleProtocolAll
    """

    def test_network_acl_rule_network_acl_rule_protocol_all_serialization(self):
        """
        Test serialization/deserialization for NetworkACLRuleNetworkACLRuleProtocolAll
        """

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a json representation of a NetworkACLRuleNetworkACLRuleProtocolAll model
        network_acl_rule_network_acl_rule_protocol_all_model_json = {}
        network_acl_rule_network_acl_rule_protocol_all_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_network_acl_rule_protocol_all_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_network_acl_rule_protocol_all_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_network_acl_rule_protocol_all_model_json[
            'action'] = 'allow'
        network_acl_rule_network_acl_rule_protocol_all_model_json[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_network_acl_rule_protocol_all_model_json[
            'direction'] = 'inbound'
        network_acl_rule_network_acl_rule_protocol_all_model_json[
            'source'] = '192.168.3.0/24'
        network_acl_rule_network_acl_rule_protocol_all_model_json[
            'protocol'] = 'all'
        network_acl_rule_network_acl_rule_protocol_all_model_json[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_network_acl_rule_protocol_all_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_network_acl_rule_protocol_all_model_json[
            'ip_version'] = 'ipv4'

        # Construct a model instance of NetworkACLRuleNetworkACLRuleProtocolAll by calling from_dict on the json representation
        network_acl_rule_network_acl_rule_protocol_all_model = NetworkACLRuleNetworkACLRuleProtocolAll.from_dict(
            network_acl_rule_network_acl_rule_protocol_all_model_json)
        assert network_acl_rule_network_acl_rule_protocol_all_model != False

        # Construct a model instance of NetworkACLRuleNetworkACLRuleProtocolAll by calling from_dict on the json representation
        network_acl_rule_network_acl_rule_protocol_all_model_dict = NetworkACLRuleNetworkACLRuleProtocolAll.from_dict(
            network_acl_rule_network_acl_rule_protocol_all_model_json).__dict__
        network_acl_rule_network_acl_rule_protocol_all_model2 = NetworkACLRuleNetworkACLRuleProtocolAll(
            **network_acl_rule_network_acl_rule_protocol_all_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_network_acl_rule_protocol_all_model == network_acl_rule_network_acl_rule_protocol_all_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_network_acl_rule_protocol_all_model_json2 = network_acl_rule_network_acl_rule_protocol_all_model.to_dict(
        )
        assert network_acl_rule_network_acl_rule_protocol_all_model_json2 == network_acl_rule_network_acl_rule_protocol_all_model_json


class TestNetworkACLRuleNetworkACLRuleProtocolICMP():
    """
    Test Class for NetworkACLRuleNetworkACLRuleProtocolICMP
    """

    def test_network_acl_rule_network_acl_rule_protocol_icmp_serialization(
            self):
        """
        Test serialization/deserialization for NetworkACLRuleNetworkACLRuleProtocolICMP
        """

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a json representation of a NetworkACLRuleNetworkACLRuleProtocolICMP model
        network_acl_rule_network_acl_rule_protocol_icmp_model_json = {}
        network_acl_rule_network_acl_rule_protocol_icmp_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_network_acl_rule_protocol_icmp_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_network_acl_rule_protocol_icmp_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_network_acl_rule_protocol_icmp_model_json[
            'action'] = 'allow'
        network_acl_rule_network_acl_rule_protocol_icmp_model_json[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_network_acl_rule_protocol_icmp_model_json[
            'direction'] = 'inbound'
        network_acl_rule_network_acl_rule_protocol_icmp_model_json[
            'source'] = '192.168.3.0/24'
        network_acl_rule_network_acl_rule_protocol_icmp_model_json[
            'protocol'] = 'icmp'
        network_acl_rule_network_acl_rule_protocol_icmp_model_json[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_network_acl_rule_protocol_icmp_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_network_acl_rule_protocol_icmp_model_json[
            'ip_version'] = 'ipv4'
        network_acl_rule_network_acl_rule_protocol_icmp_model_json['code'] = 0
        network_acl_rule_network_acl_rule_protocol_icmp_model_json['type'] = 8

        # Construct a model instance of NetworkACLRuleNetworkACLRuleProtocolICMP by calling from_dict on the json representation
        network_acl_rule_network_acl_rule_protocol_icmp_model = NetworkACLRuleNetworkACLRuleProtocolICMP.from_dict(
            network_acl_rule_network_acl_rule_protocol_icmp_model_json)
        assert network_acl_rule_network_acl_rule_protocol_icmp_model != False

        # Construct a model instance of NetworkACLRuleNetworkACLRuleProtocolICMP by calling from_dict on the json representation
        network_acl_rule_network_acl_rule_protocol_icmp_model_dict = NetworkACLRuleNetworkACLRuleProtocolICMP.from_dict(
            network_acl_rule_network_acl_rule_protocol_icmp_model_json).__dict__
        network_acl_rule_network_acl_rule_protocol_icmp_model2 = NetworkACLRuleNetworkACLRuleProtocolICMP(
            **network_acl_rule_network_acl_rule_protocol_icmp_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_network_acl_rule_protocol_icmp_model == network_acl_rule_network_acl_rule_protocol_icmp_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_network_acl_rule_protocol_icmp_model_json2 = network_acl_rule_network_acl_rule_protocol_icmp_model.to_dict(
        )
        assert network_acl_rule_network_acl_rule_protocol_icmp_model_json2 == network_acl_rule_network_acl_rule_protocol_icmp_model_json


class TestNetworkACLRuleNetworkACLRuleProtocolTCPUDP():
    """
    Test Class for NetworkACLRuleNetworkACLRuleProtocolTCPUDP
    """

    def test_network_acl_rule_network_acl_rule_protocol_tcpudp_serialization(
            self):
        """
        Test serialization/deserialization for NetworkACLRuleNetworkACLRuleProtocolTCPUDP
        """

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_rule_reference_model = {}  # NetworkACLRuleReference
        network_acl_rule_reference_model[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_reference_model['name'] = 'my-rule-1'

        # Construct a json representation of a NetworkACLRuleNetworkACLRuleProtocolTCPUDP model
        network_acl_rule_network_acl_rule_protocol_tcpudp_model_json = {}
        network_acl_rule_network_acl_rule_protocol_tcpudp_model_json[
            'id'] = '8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_network_acl_rule_protocol_tcpudp_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9'
        network_acl_rule_network_acl_rule_protocol_tcpudp_model_json[
            'name'] = 'my-rule-2'
        network_acl_rule_network_acl_rule_protocol_tcpudp_model_json[
            'action'] = 'allow'
        network_acl_rule_network_acl_rule_protocol_tcpudp_model_json[
            'destination'] = '192.168.3.0/24'
        network_acl_rule_network_acl_rule_protocol_tcpudp_model_json[
            'direction'] = 'inbound'
        network_acl_rule_network_acl_rule_protocol_tcpudp_model_json[
            'source'] = '192.168.3.0/24'
        network_acl_rule_network_acl_rule_protocol_tcpudp_model_json[
            'protocol'] = 'udp'
        network_acl_rule_network_acl_rule_protocol_tcpudp_model_json[
            'before'] = network_acl_rule_reference_model
        network_acl_rule_network_acl_rule_protocol_tcpudp_model_json[
            'created_at'] = '2020-01-28T18:40:40.123456Z'
        network_acl_rule_network_acl_rule_protocol_tcpudp_model_json[
            'ip_version'] = 'ipv4'
        network_acl_rule_network_acl_rule_protocol_tcpudp_model_json[
            'destination_port_max'] = 22
        network_acl_rule_network_acl_rule_protocol_tcpudp_model_json[
            'destination_port_min'] = 22
        network_acl_rule_network_acl_rule_protocol_tcpudp_model_json[
            'source_port_max'] = 65535
        network_acl_rule_network_acl_rule_protocol_tcpudp_model_json[
            'source_port_min'] = 49152

        # Construct a model instance of NetworkACLRuleNetworkACLRuleProtocolTCPUDP by calling from_dict on the json representation
        network_acl_rule_network_acl_rule_protocol_tcpudp_model = NetworkACLRuleNetworkACLRuleProtocolTCPUDP.from_dict(
            network_acl_rule_network_acl_rule_protocol_tcpudp_model_json)
        assert network_acl_rule_network_acl_rule_protocol_tcpudp_model != False

        # Construct a model instance of NetworkACLRuleNetworkACLRuleProtocolTCPUDP by calling from_dict on the json representation
        network_acl_rule_network_acl_rule_protocol_tcpudp_model_dict = NetworkACLRuleNetworkACLRuleProtocolTCPUDP.from_dict(
            network_acl_rule_network_acl_rule_protocol_tcpudp_model_json
        ).__dict__
        network_acl_rule_network_acl_rule_protocol_tcpudp_model2 = NetworkACLRuleNetworkACLRuleProtocolTCPUDP(
            **network_acl_rule_network_acl_rule_protocol_tcpudp_model_dict)

        # Verify the model instances are equivalent
        assert network_acl_rule_network_acl_rule_protocol_tcpudp_model == network_acl_rule_network_acl_rule_protocol_tcpudp_model2

        # Convert model instance back to dict and verify no loss of data
        network_acl_rule_network_acl_rule_protocol_tcpudp_model_json2 = network_acl_rule_network_acl_rule_protocol_tcpudp_model.to_dict(
        )
        assert network_acl_rule_network_acl_rule_protocol_tcpudp_model_json2 == network_acl_rule_network_acl_rule_protocol_tcpudp_model_json


class TestOperatingSystemIdentityByHref():
    """
    Test Class for OperatingSystemIdentityByHref
    """

    def test_operating_system_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for OperatingSystemIdentityByHref
        """

        # Construct a json representation of a OperatingSystemIdentityByHref model
        operating_system_identity_by_href_model_json = {}
        operating_system_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64'

        # Construct a model instance of OperatingSystemIdentityByHref by calling from_dict on the json representation
        operating_system_identity_by_href_model = OperatingSystemIdentityByHref.from_dict(
            operating_system_identity_by_href_model_json)
        assert operating_system_identity_by_href_model != False

        # Construct a model instance of OperatingSystemIdentityByHref by calling from_dict on the json representation
        operating_system_identity_by_href_model_dict = OperatingSystemIdentityByHref.from_dict(
            operating_system_identity_by_href_model_json).__dict__
        operating_system_identity_by_href_model2 = OperatingSystemIdentityByHref(
            **operating_system_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert operating_system_identity_by_href_model == operating_system_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        operating_system_identity_by_href_model_json2 = operating_system_identity_by_href_model.to_dict(
        )
        assert operating_system_identity_by_href_model_json2 == operating_system_identity_by_href_model_json


class TestOperatingSystemIdentityByName():
    """
    Test Class for OperatingSystemIdentityByName
    """

    def test_operating_system_identity_by_name_serialization(self):
        """
        Test serialization/deserialization for OperatingSystemIdentityByName
        """

        # Construct a json representation of a OperatingSystemIdentityByName model
        operating_system_identity_by_name_model_json = {}
        operating_system_identity_by_name_model_json['name'] = 'ubuntu-16-amd64'

        # Construct a model instance of OperatingSystemIdentityByName by calling from_dict on the json representation
        operating_system_identity_by_name_model = OperatingSystemIdentityByName.from_dict(
            operating_system_identity_by_name_model_json)
        assert operating_system_identity_by_name_model != False

        # Construct a model instance of OperatingSystemIdentityByName by calling from_dict on the json representation
        operating_system_identity_by_name_model_dict = OperatingSystemIdentityByName.from_dict(
            operating_system_identity_by_name_model_json).__dict__
        operating_system_identity_by_name_model2 = OperatingSystemIdentityByName(
            **operating_system_identity_by_name_model_dict)

        # Verify the model instances are equivalent
        assert operating_system_identity_by_name_model == operating_system_identity_by_name_model2

        # Convert model instance back to dict and verify no loss of data
        operating_system_identity_by_name_model_json2 = operating_system_identity_by_name_model.to_dict(
        )
        assert operating_system_identity_by_name_model_json2 == operating_system_identity_by_name_model_json


class TestPublicGatewayIdentityByCRN():
    """
    Test Class for PublicGatewayIdentityByCRN
    """

    def test_public_gateway_identity_by_crn_serialization(self):
        """
        Test serialization/deserialization for PublicGatewayIdentityByCRN
        """

        # Construct a json representation of a PublicGatewayIdentityByCRN model
        public_gateway_identity_by_crn_model_json = {}
        public_gateway_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Construct a model instance of PublicGatewayIdentityByCRN by calling from_dict on the json representation
        public_gateway_identity_by_crn_model = PublicGatewayIdentityByCRN.from_dict(
            public_gateway_identity_by_crn_model_json)
        assert public_gateway_identity_by_crn_model != False

        # Construct a model instance of PublicGatewayIdentityByCRN by calling from_dict on the json representation
        public_gateway_identity_by_crn_model_dict = PublicGatewayIdentityByCRN.from_dict(
            public_gateway_identity_by_crn_model_json).__dict__
        public_gateway_identity_by_crn_model2 = PublicGatewayIdentityByCRN(
            **public_gateway_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_identity_by_crn_model == public_gateway_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_identity_by_crn_model_json2 = public_gateway_identity_by_crn_model.to_dict(
        )
        assert public_gateway_identity_by_crn_model_json2 == public_gateway_identity_by_crn_model_json


class TestPublicGatewayIdentityByHref():
    """
    Test Class for PublicGatewayIdentityByHref
    """

    def test_public_gateway_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for PublicGatewayIdentityByHref
        """

        # Construct a json representation of a PublicGatewayIdentityByHref model
        public_gateway_identity_by_href_model_json = {}
        public_gateway_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Construct a model instance of PublicGatewayIdentityByHref by calling from_dict on the json representation
        public_gateway_identity_by_href_model = PublicGatewayIdentityByHref.from_dict(
            public_gateway_identity_by_href_model_json)
        assert public_gateway_identity_by_href_model != False

        # Construct a model instance of PublicGatewayIdentityByHref by calling from_dict on the json representation
        public_gateway_identity_by_href_model_dict = PublicGatewayIdentityByHref.from_dict(
            public_gateway_identity_by_href_model_json).__dict__
        public_gateway_identity_by_href_model2 = PublicGatewayIdentityByHref(
            **public_gateway_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_identity_by_href_model == public_gateway_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_identity_by_href_model_json2 = public_gateway_identity_by_href_model.to_dict(
        )
        assert public_gateway_identity_by_href_model_json2 == public_gateway_identity_by_href_model_json


class TestPublicGatewayIdentityById():
    """
    Test Class for PublicGatewayIdentityById
    """

    def test_public_gateway_identity_by_id_serialization(self):
        """
        Test serialization/deserialization for PublicGatewayIdentityById
        """

        # Construct a json representation of a PublicGatewayIdentityById model
        public_gateway_identity_by_id_model_json = {}
        public_gateway_identity_by_id_model_json[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        # Construct a model instance of PublicGatewayIdentityById by calling from_dict on the json representation
        public_gateway_identity_by_id_model = PublicGatewayIdentityById.from_dict(
            public_gateway_identity_by_id_model_json)
        assert public_gateway_identity_by_id_model != False

        # Construct a model instance of PublicGatewayIdentityById by calling from_dict on the json representation
        public_gateway_identity_by_id_model_dict = PublicGatewayIdentityById.from_dict(
            public_gateway_identity_by_id_model_json).__dict__
        public_gateway_identity_by_id_model2 = PublicGatewayIdentityById(
            **public_gateway_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert public_gateway_identity_by_id_model == public_gateway_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_identity_by_id_model_json2 = public_gateway_identity_by_id_model.to_dict(
        )
        assert public_gateway_identity_by_id_model_json2 == public_gateway_identity_by_id_model_json


class TestPublicGatewayPrototypeFloatingIpFloatingIPPrototypeTargetContext():
    """
    Test Class for PublicGatewayPrototypeFloatingIpFloatingIPPrototypeTargetContext
    """

    def test_public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_serialization(
            self):
        """
        Test serialization/deserialization for PublicGatewayPrototypeFloatingIpFloatingIPPrototypeTargetContext
        """

        # Construct dict forms of any model objects needed in order to build this model.

        resource_group_identity_model = {}  # ResourceGroupIdentityById
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a json representation of a PublicGatewayPrototypeFloatingIpFloatingIPPrototypeTargetContext model
        public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_json = {}
        public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_json[
            'name'] = 'my-floating-ip'
        public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_json[
            'resource_group'] = resource_group_identity_model

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPPrototypeTargetContext by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model = PublicGatewayPrototypeFloatingIpFloatingIPPrototypeTargetContext.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_json
        )
        assert public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model != False

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPPrototypeTargetContext by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_dict = PublicGatewayPrototypeFloatingIpFloatingIPPrototypeTargetContext.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_json
        ).__dict__
        public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model2 = PublicGatewayPrototypeFloatingIpFloatingIPPrototypeTargetContext(
            **
            public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_dict
        )

        # Verify the model instances are equivalent
        assert public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model == public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_json2 = public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model.to_dict(
        )
        assert public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_json2 == public_gateway_prototype_floating_ip_floating_ip_prototype_target_context_model_json


class TestResourceGroupIdentityById():
    """
    Test Class for ResourceGroupIdentityById
    """

    def test_resource_group_identity_by_id_serialization(self):
        """
        Test serialization/deserialization for ResourceGroupIdentityById
        """

        # Construct a json representation of a ResourceGroupIdentityById model
        resource_group_identity_by_id_model_json = {}
        resource_group_identity_by_id_model_json[
            'id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        # Construct a model instance of ResourceGroupIdentityById by calling from_dict on the json representation
        resource_group_identity_by_id_model = ResourceGroupIdentityById.from_dict(
            resource_group_identity_by_id_model_json)
        assert resource_group_identity_by_id_model != False

        # Construct a model instance of ResourceGroupIdentityById by calling from_dict on the json representation
        resource_group_identity_by_id_model_dict = ResourceGroupIdentityById.from_dict(
            resource_group_identity_by_id_model_json).__dict__
        resource_group_identity_by_id_model2 = ResourceGroupIdentityById(
            **resource_group_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert resource_group_identity_by_id_model == resource_group_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        resource_group_identity_by_id_model_json2 = resource_group_identity_by_id_model.to_dict(
        )
        assert resource_group_identity_by_id_model_json2 == resource_group_identity_by_id_model_json


class TestRouteNextHopIP():
    """
    Test Class for RouteNextHopIP
    """

    def test_route_next_hop_ip_serialization(self):
        """
        Test serialization/deserialization for RouteNextHopIP
        """

        # Construct a json representation of a RouteNextHopIP model
        route_next_hop_ip_model_json = {}
        route_next_hop_ip_model_json['address'] = '192.168.3.4'

        # Construct a model instance of RouteNextHopIP by calling from_dict on the json representation
        route_next_hop_ip_model = RouteNextHopIP.from_dict(
            route_next_hop_ip_model_json)
        assert route_next_hop_ip_model != False

        # Construct a model instance of RouteNextHopIP by calling from_dict on the json representation
        route_next_hop_ip_model_dict = RouteNextHopIP.from_dict(
            route_next_hop_ip_model_json).__dict__
        route_next_hop_ip_model2 = RouteNextHopIP(
            **route_next_hop_ip_model_dict)

        # Verify the model instances are equivalent
        assert route_next_hop_ip_model == route_next_hop_ip_model2

        # Convert model instance back to dict and verify no loss of data
        route_next_hop_ip_model_json2 = route_next_hop_ip_model.to_dict()
        assert route_next_hop_ip_model_json2 == route_next_hop_ip_model_json


class TestRouteNextHopPrototypeRouteNextHopIP():
    """
    Test Class for RouteNextHopPrototypeRouteNextHopIP
    """

    def test_route_next_hop_prototype_route_next_hop_ip_serialization(self):
        """
        Test serialization/deserialization for RouteNextHopPrototypeRouteNextHopIP
        """

        # Construct a json representation of a RouteNextHopPrototypeRouteNextHopIP model
        route_next_hop_prototype_route_next_hop_ip_model_json = {}
        route_next_hop_prototype_route_next_hop_ip_model_json[
            'address'] = '192.168.3.4'

        # Construct a model instance of RouteNextHopPrototypeRouteNextHopIP by calling from_dict on the json representation
        route_next_hop_prototype_route_next_hop_ip_model = RouteNextHopPrototypeRouteNextHopIP.from_dict(
            route_next_hop_prototype_route_next_hop_ip_model_json)
        assert route_next_hop_prototype_route_next_hop_ip_model != False

        # Construct a model instance of RouteNextHopPrototypeRouteNextHopIP by calling from_dict on the json representation
        route_next_hop_prototype_route_next_hop_ip_model_dict = RouteNextHopPrototypeRouteNextHopIP.from_dict(
            route_next_hop_prototype_route_next_hop_ip_model_json).__dict__
        route_next_hop_prototype_route_next_hop_ip_model2 = RouteNextHopPrototypeRouteNextHopIP(
            **route_next_hop_prototype_route_next_hop_ip_model_dict)

        # Verify the model instances are equivalent
        assert route_next_hop_prototype_route_next_hop_ip_model == route_next_hop_prototype_route_next_hop_ip_model2

        # Convert model instance back to dict and verify no loss of data
        route_next_hop_prototype_route_next_hop_ip_model_json2 = route_next_hop_prototype_route_next_hop_ip_model.to_dict(
        )
        assert route_next_hop_prototype_route_next_hop_ip_model_json2 == route_next_hop_prototype_route_next_hop_ip_model_json


class TestSecurityGroupIdentityByCRN():
    """
    Test Class for SecurityGroupIdentityByCRN
    """

    def test_security_group_identity_by_crn_serialization(self):
        """
        Test serialization/deserialization for SecurityGroupIdentityByCRN
        """

        # Construct a json representation of a SecurityGroupIdentityByCRN model
        security_group_identity_by_crn_model_json = {}
        security_group_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupIdentityByCRN by calling from_dict on the json representation
        security_group_identity_by_crn_model = SecurityGroupIdentityByCRN.from_dict(
            security_group_identity_by_crn_model_json)
        assert security_group_identity_by_crn_model != False

        # Construct a model instance of SecurityGroupIdentityByCRN by calling from_dict on the json representation
        security_group_identity_by_crn_model_dict = SecurityGroupIdentityByCRN.from_dict(
            security_group_identity_by_crn_model_json).__dict__
        security_group_identity_by_crn_model2 = SecurityGroupIdentityByCRN(
            **security_group_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert security_group_identity_by_crn_model == security_group_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_identity_by_crn_model_json2 = security_group_identity_by_crn_model.to_dict(
        )
        assert security_group_identity_by_crn_model_json2 == security_group_identity_by_crn_model_json


class TestSecurityGroupIdentityByHref():
    """
    Test Class for SecurityGroupIdentityByHref
    """

    def test_security_group_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for SecurityGroupIdentityByHref
        """

        # Construct a json representation of a SecurityGroupIdentityByHref model
        security_group_identity_by_href_model_json = {}
        security_group_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupIdentityByHref by calling from_dict on the json representation
        security_group_identity_by_href_model = SecurityGroupIdentityByHref.from_dict(
            security_group_identity_by_href_model_json)
        assert security_group_identity_by_href_model != False

        # Construct a model instance of SecurityGroupIdentityByHref by calling from_dict on the json representation
        security_group_identity_by_href_model_dict = SecurityGroupIdentityByHref.from_dict(
            security_group_identity_by_href_model_json).__dict__
        security_group_identity_by_href_model2 = SecurityGroupIdentityByHref(
            **security_group_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert security_group_identity_by_href_model == security_group_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_identity_by_href_model_json2 = security_group_identity_by_href_model.to_dict(
        )
        assert security_group_identity_by_href_model_json2 == security_group_identity_by_href_model_json


class TestSecurityGroupIdentityById():
    """
    Test Class for SecurityGroupIdentityById
    """

    def test_security_group_identity_by_id_serialization(self):
        """
        Test serialization/deserialization for SecurityGroupIdentityById
        """

        # Construct a json representation of a SecurityGroupIdentityById model
        security_group_identity_by_id_model_json = {}
        security_group_identity_by_id_model_json[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupIdentityById by calling from_dict on the json representation
        security_group_identity_by_id_model = SecurityGroupIdentityById.from_dict(
            security_group_identity_by_id_model_json)
        assert security_group_identity_by_id_model != False

        # Construct a model instance of SecurityGroupIdentityById by calling from_dict on the json representation
        security_group_identity_by_id_model_dict = SecurityGroupIdentityById.from_dict(
            security_group_identity_by_id_model_json).__dict__
        security_group_identity_by_id_model2 = SecurityGroupIdentityById(
            **security_group_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert security_group_identity_by_id_model == security_group_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_identity_by_id_model_json2 = security_group_identity_by_id_model.to_dict(
        )
        assert security_group_identity_by_id_model_json2 == security_group_identity_by_id_model_json


class TestSecurityGroupRulePatchRemoteCIDR():
    """
    Test Class for SecurityGroupRulePatchRemoteCIDR
    """

    def test_security_group_rule_patch_remote_cidr_serialization(self):
        """
        Test serialization/deserialization for SecurityGroupRulePatchRemoteCIDR
        """

        # Construct a json representation of a SecurityGroupRulePatchRemoteCIDR model
        security_group_rule_patch_remote_cidr_model_json = {}
        security_group_rule_patch_remote_cidr_model_json[
            'cidr_block'] = '192.168.3.0/24'

        # Construct a model instance of SecurityGroupRulePatchRemoteCIDR by calling from_dict on the json representation
        security_group_rule_patch_remote_cidr_model = SecurityGroupRulePatchRemoteCIDR.from_dict(
            security_group_rule_patch_remote_cidr_model_json)
        assert security_group_rule_patch_remote_cidr_model != False

        # Construct a model instance of SecurityGroupRulePatchRemoteCIDR by calling from_dict on the json representation
        security_group_rule_patch_remote_cidr_model_dict = SecurityGroupRulePatchRemoteCIDR.from_dict(
            security_group_rule_patch_remote_cidr_model_json).__dict__
        security_group_rule_patch_remote_cidr_model2 = SecurityGroupRulePatchRemoteCIDR(
            **security_group_rule_patch_remote_cidr_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_patch_remote_cidr_model == security_group_rule_patch_remote_cidr_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_patch_remote_cidr_model_json2 = security_group_rule_patch_remote_cidr_model.to_dict(
        )
        assert security_group_rule_patch_remote_cidr_model_json2 == security_group_rule_patch_remote_cidr_model_json


class TestSecurityGroupRulePatchRemoteIP():
    """
    Test Class for SecurityGroupRulePatchRemoteIP
    """

    def test_security_group_rule_patch_remote_ip_serialization(self):
        """
        Test serialization/deserialization for SecurityGroupRulePatchRemoteIP
        """

        # Construct a json representation of a SecurityGroupRulePatchRemoteIP model
        security_group_rule_patch_remote_ip_model_json = {}
        security_group_rule_patch_remote_ip_model_json[
            'address'] = '192.168.3.4'

        # Construct a model instance of SecurityGroupRulePatchRemoteIP by calling from_dict on the json representation
        security_group_rule_patch_remote_ip_model = SecurityGroupRulePatchRemoteIP.from_dict(
            security_group_rule_patch_remote_ip_model_json)
        assert security_group_rule_patch_remote_ip_model != False

        # Construct a model instance of SecurityGroupRulePatchRemoteIP by calling from_dict on the json representation
        security_group_rule_patch_remote_ip_model_dict = SecurityGroupRulePatchRemoteIP.from_dict(
            security_group_rule_patch_remote_ip_model_json).__dict__
        security_group_rule_patch_remote_ip_model2 = SecurityGroupRulePatchRemoteIP(
            **security_group_rule_patch_remote_ip_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_patch_remote_ip_model == security_group_rule_patch_remote_ip_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_patch_remote_ip_model_json2 = security_group_rule_patch_remote_ip_model.to_dict(
        )
        assert security_group_rule_patch_remote_ip_model_json2 == security_group_rule_patch_remote_ip_model_json


class TestSecurityGroupRulePrototypeRemoteCIDR():
    """
    Test Class for SecurityGroupRulePrototypeRemoteCIDR
    """

    def test_security_group_rule_prototype_remote_cidr_serialization(self):
        """
        Test serialization/deserialization for SecurityGroupRulePrototypeRemoteCIDR
        """

        # Construct a json representation of a SecurityGroupRulePrototypeRemoteCIDR model
        security_group_rule_prototype_remote_cidr_model_json = {}
        security_group_rule_prototype_remote_cidr_model_json[
            'cidr_block'] = '192.168.3.0/24'

        # Construct a model instance of SecurityGroupRulePrototypeRemoteCIDR by calling from_dict on the json representation
        security_group_rule_prototype_remote_cidr_model = SecurityGroupRulePrototypeRemoteCIDR.from_dict(
            security_group_rule_prototype_remote_cidr_model_json)
        assert security_group_rule_prototype_remote_cidr_model != False

        # Construct a model instance of SecurityGroupRulePrototypeRemoteCIDR by calling from_dict on the json representation
        security_group_rule_prototype_remote_cidr_model_dict = SecurityGroupRulePrototypeRemoteCIDR.from_dict(
            security_group_rule_prototype_remote_cidr_model_json).__dict__
        security_group_rule_prototype_remote_cidr_model2 = SecurityGroupRulePrototypeRemoteCIDR(
            **security_group_rule_prototype_remote_cidr_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_remote_cidr_model == security_group_rule_prototype_remote_cidr_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_remote_cidr_model_json2 = security_group_rule_prototype_remote_cidr_model.to_dict(
        )
        assert security_group_rule_prototype_remote_cidr_model_json2 == security_group_rule_prototype_remote_cidr_model_json


class TestSecurityGroupRulePrototypeRemoteIP():
    """
    Test Class for SecurityGroupRulePrototypeRemoteIP
    """

    def test_security_group_rule_prototype_remote_ip_serialization(self):
        """
        Test serialization/deserialization for SecurityGroupRulePrototypeRemoteIP
        """

        # Construct a json representation of a SecurityGroupRulePrototypeRemoteIP model
        security_group_rule_prototype_remote_ip_model_json = {}
        security_group_rule_prototype_remote_ip_model_json[
            'address'] = '192.168.3.4'

        # Construct a model instance of SecurityGroupRulePrototypeRemoteIP by calling from_dict on the json representation
        security_group_rule_prototype_remote_ip_model = SecurityGroupRulePrototypeRemoteIP.from_dict(
            security_group_rule_prototype_remote_ip_model_json)
        assert security_group_rule_prototype_remote_ip_model != False

        # Construct a model instance of SecurityGroupRulePrototypeRemoteIP by calling from_dict on the json representation
        security_group_rule_prototype_remote_ip_model_dict = SecurityGroupRulePrototypeRemoteIP.from_dict(
            security_group_rule_prototype_remote_ip_model_json).__dict__
        security_group_rule_prototype_remote_ip_model2 = SecurityGroupRulePrototypeRemoteIP(
            **security_group_rule_prototype_remote_ip_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_remote_ip_model == security_group_rule_prototype_remote_ip_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_remote_ip_model_json2 = security_group_rule_prototype_remote_ip_model.to_dict(
        )
        assert security_group_rule_prototype_remote_ip_model_json2 == security_group_rule_prototype_remote_ip_model_json


class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolAll():
    """
    Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll
    """

    def test_security_group_rule_prototype_security_group_rule_protocol_all_serialization(
            self):
        """
        Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll
        """

        # Construct dict forms of any model objects needed in order to build this model.

        security_group_rule_prototype_remote_model = {
        }  # SecurityGroupRulePrototypeRemoteIP
        security_group_rule_prototype_remote_model['address'] = '192.168.3.4'

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll model
        security_group_rule_prototype_security_group_rule_protocol_all_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_all_model_json[
            'direction'] = 'inbound'
        security_group_rule_prototype_security_group_rule_protocol_all_model_json[
            'ip_version'] = 'ipv4'
        security_group_rule_prototype_security_group_rule_protocol_all_model_json[
            'protocol'] = 'all'
        security_group_rule_prototype_security_group_rule_protocol_all_model_json[
            'remote'] = security_group_rule_prototype_remote_model

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_all_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_all_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_all_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_all_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_all_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_all_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll(
            **
            security_group_rule_prototype_security_group_rule_protocol_all_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_all_model == security_group_rule_prototype_security_group_rule_protocol_all_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_all_model_json2 = security_group_rule_prototype_security_group_rule_protocol_all_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_all_model_json2 == security_group_rule_prototype_security_group_rule_protocol_all_model_json


class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP():
    """
    Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP
    """

    def test_security_group_rule_prototype_security_group_rule_protocol_icmp_serialization(
            self):
        """
        Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP
        """

        # Construct dict forms of any model objects needed in order to build this model.

        security_group_rule_prototype_remote_model = {
        }  # SecurityGroupRulePrototypeRemoteIP
        security_group_rule_prototype_remote_model['address'] = '192.168.3.4'

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP model
        security_group_rule_prototype_security_group_rule_protocol_icmp_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_icmp_model_json[
            'direction'] = 'inbound'
        security_group_rule_prototype_security_group_rule_protocol_icmp_model_json[
            'ip_version'] = 'ipv4'
        security_group_rule_prototype_security_group_rule_protocol_icmp_model_json[
            'protocol'] = 'icmp'
        security_group_rule_prototype_security_group_rule_protocol_icmp_model_json[
            'remote'] = security_group_rule_prototype_remote_model
        security_group_rule_prototype_security_group_rule_protocol_icmp_model_json[
            'code'] = 0
        security_group_rule_prototype_security_group_rule_protocol_icmp_model_json[
            'type'] = 8

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_icmp_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_icmp_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_icmp_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_icmp_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_icmp_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP(
            **
            security_group_rule_prototype_security_group_rule_protocol_icmp_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_model == security_group_rule_prototype_security_group_rule_protocol_icmp_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_icmp_model_json2 = security_group_rule_prototype_security_group_rule_protocol_icmp_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_icmp_model_json2 == security_group_rule_prototype_security_group_rule_protocol_icmp_model_json


class TestSecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP():
    """
    Test Class for SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP
    """

    def test_security_group_rule_prototype_security_group_rule_protocol_tcpudp_serialization(
            self):
        """
        Test serialization/deserialization for SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP
        """

        # Construct dict forms of any model objects needed in order to build this model.

        security_group_rule_prototype_remote_model = {
        }  # SecurityGroupRulePrototypeRemoteIP
        security_group_rule_prototype_remote_model['address'] = '192.168.3.4'

        # Construct a json representation of a SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP model
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json = {}
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json[
            'direction'] = 'inbound'
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json[
            'ip_version'] = 'ipv4'
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json[
            'protocol'] = 'udp'
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json[
            'remote'] = security_group_rule_prototype_remote_model
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json[
            'port_max'] = 22
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json[
            'port_min'] = 22

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json
        )
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_model != False

        # Construct a model instance of SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP by calling from_dict on the json representation
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_dict = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP.from_dict(
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json
        ).__dict__
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model2 = SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP(
            **
            security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_model == security_group_rule_prototype_security_group_rule_protocol_tcpudp_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json2 = security_group_rule_prototype_security_group_rule_protocol_tcpudp_model.to_dict(
        )
        assert security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json2 == security_group_rule_prototype_security_group_rule_protocol_tcpudp_model_json


class TestSecurityGroupRuleRemoteCIDR():
    """
    Test Class for SecurityGroupRuleRemoteCIDR
    """

    def test_security_group_rule_remote_cidr_serialization(self):
        """
        Test serialization/deserialization for SecurityGroupRuleRemoteCIDR
        """

        # Construct a json representation of a SecurityGroupRuleRemoteCIDR model
        security_group_rule_remote_cidr_model_json = {}
        security_group_rule_remote_cidr_model_json[
            'cidr_block'] = '192.168.3.0/24'

        # Construct a model instance of SecurityGroupRuleRemoteCIDR by calling from_dict on the json representation
        security_group_rule_remote_cidr_model = SecurityGroupRuleRemoteCIDR.from_dict(
            security_group_rule_remote_cidr_model_json)
        assert security_group_rule_remote_cidr_model != False

        # Construct a model instance of SecurityGroupRuleRemoteCIDR by calling from_dict on the json representation
        security_group_rule_remote_cidr_model_dict = SecurityGroupRuleRemoteCIDR.from_dict(
            security_group_rule_remote_cidr_model_json).__dict__
        security_group_rule_remote_cidr_model2 = SecurityGroupRuleRemoteCIDR(
            **security_group_rule_remote_cidr_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_remote_cidr_model == security_group_rule_remote_cidr_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_remote_cidr_model_json2 = security_group_rule_remote_cidr_model.to_dict(
        )
        assert security_group_rule_remote_cidr_model_json2 == security_group_rule_remote_cidr_model_json


class TestSecurityGroupRuleRemoteIP():
    """
    Test Class for SecurityGroupRuleRemoteIP
    """

    def test_security_group_rule_remote_ip_serialization(self):
        """
        Test serialization/deserialization for SecurityGroupRuleRemoteIP
        """

        # Construct a json representation of a SecurityGroupRuleRemoteIP model
        security_group_rule_remote_ip_model_json = {}
        security_group_rule_remote_ip_model_json['address'] = '192.168.3.4'

        # Construct a model instance of SecurityGroupRuleRemoteIP by calling from_dict on the json representation
        security_group_rule_remote_ip_model = SecurityGroupRuleRemoteIP.from_dict(
            security_group_rule_remote_ip_model_json)
        assert security_group_rule_remote_ip_model != False

        # Construct a model instance of SecurityGroupRuleRemoteIP by calling from_dict on the json representation
        security_group_rule_remote_ip_model_dict = SecurityGroupRuleRemoteIP.from_dict(
            security_group_rule_remote_ip_model_json).__dict__
        security_group_rule_remote_ip_model2 = SecurityGroupRuleRemoteIP(
            **security_group_rule_remote_ip_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_remote_ip_model == security_group_rule_remote_ip_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_remote_ip_model_json2 = security_group_rule_remote_ip_model.to_dict(
        )
        assert security_group_rule_remote_ip_model_json2 == security_group_rule_remote_ip_model_json


class TestSecurityGroupRuleRemoteSecurityGroupReference():
    """
    Test Class for SecurityGroupRuleRemoteSecurityGroupReference
    """

    def test_security_group_rule_remote_security_group_reference_serialization(
            self):
        """
        Test serialization/deserialization for SecurityGroupRuleRemoteSecurityGroupReference
        """

        # Construct a json representation of a SecurityGroupRuleRemoteSecurityGroupReference model
        security_group_rule_remote_security_group_reference_model_json = {}
        security_group_rule_remote_security_group_reference_model_json[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_rule_remote_security_group_reference_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_rule_remote_security_group_reference_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'
        security_group_rule_remote_security_group_reference_model_json[
            'name'] = 'my-security-group'

        # Construct a model instance of SecurityGroupRuleRemoteSecurityGroupReference by calling from_dict on the json representation
        security_group_rule_remote_security_group_reference_model = SecurityGroupRuleRemoteSecurityGroupReference.from_dict(
            security_group_rule_remote_security_group_reference_model_json)
        assert security_group_rule_remote_security_group_reference_model != False

        # Construct a model instance of SecurityGroupRuleRemoteSecurityGroupReference by calling from_dict on the json representation
        security_group_rule_remote_security_group_reference_model_dict = SecurityGroupRuleRemoteSecurityGroupReference.from_dict(
            security_group_rule_remote_security_group_reference_model_json
        ).__dict__
        security_group_rule_remote_security_group_reference_model2 = SecurityGroupRuleRemoteSecurityGroupReference(
            **security_group_rule_remote_security_group_reference_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_remote_security_group_reference_model == security_group_rule_remote_security_group_reference_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_remote_security_group_reference_model_json2 = security_group_rule_remote_security_group_reference_model.to_dict(
        )
        assert security_group_rule_remote_security_group_reference_model_json2 == security_group_rule_remote_security_group_reference_model_json


class TestSecurityGroupRuleSecurityGroupRuleProtocolAll():
    """
    Test Class for SecurityGroupRuleSecurityGroupRuleProtocolAll
    """

    def test_security_group_rule_security_group_rule_protocol_all_serialization(
            self):
        """
        Test serialization/deserialization for SecurityGroupRuleSecurityGroupRuleProtocolAll
        """

        # Construct dict forms of any model objects needed in order to build this model.

        security_group_rule_remote_model = {}  # SecurityGroupRuleRemoteIP
        security_group_rule_remote_model['address'] = '192.168.3.4'

        # Construct a json representation of a SecurityGroupRuleSecurityGroupRuleProtocolAll model
        security_group_rule_security_group_rule_protocol_all_model_json = {}
        security_group_rule_security_group_rule_protocol_all_model_json[
            'id'] = '6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_security_group_rule_protocol_all_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_security_group_rule_protocol_all_model_json[
            'direction'] = 'inbound'
        security_group_rule_security_group_rule_protocol_all_model_json[
            'ip_version'] = 'ipv4'
        security_group_rule_security_group_rule_protocol_all_model_json[
            'protocol'] = 'all'
        security_group_rule_security_group_rule_protocol_all_model_json[
            'remote'] = security_group_rule_remote_model

        # Construct a model instance of SecurityGroupRuleSecurityGroupRuleProtocolAll by calling from_dict on the json representation
        security_group_rule_security_group_rule_protocol_all_model = SecurityGroupRuleSecurityGroupRuleProtocolAll.from_dict(
            security_group_rule_security_group_rule_protocol_all_model_json)
        assert security_group_rule_security_group_rule_protocol_all_model != False

        # Construct a model instance of SecurityGroupRuleSecurityGroupRuleProtocolAll by calling from_dict on the json representation
        security_group_rule_security_group_rule_protocol_all_model_dict = SecurityGroupRuleSecurityGroupRuleProtocolAll.from_dict(
            security_group_rule_security_group_rule_protocol_all_model_json
        ).__dict__
        security_group_rule_security_group_rule_protocol_all_model2 = SecurityGroupRuleSecurityGroupRuleProtocolAll(
            **security_group_rule_security_group_rule_protocol_all_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_security_group_rule_protocol_all_model == security_group_rule_security_group_rule_protocol_all_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_security_group_rule_protocol_all_model_json2 = security_group_rule_security_group_rule_protocol_all_model.to_dict(
        )
        assert security_group_rule_security_group_rule_protocol_all_model_json2 == security_group_rule_security_group_rule_protocol_all_model_json


class TestSecurityGroupRuleSecurityGroupRuleProtocolICMP():
    """
    Test Class for SecurityGroupRuleSecurityGroupRuleProtocolICMP
    """

    def test_security_group_rule_security_group_rule_protocol_icmp_serialization(
            self):
        """
        Test serialization/deserialization for SecurityGroupRuleSecurityGroupRuleProtocolICMP
        """

        # Construct dict forms of any model objects needed in order to build this model.

        security_group_rule_remote_model = {}  # SecurityGroupRuleRemoteIP
        security_group_rule_remote_model['address'] = '192.168.3.4'

        # Construct a json representation of a SecurityGroupRuleSecurityGroupRuleProtocolICMP model
        security_group_rule_security_group_rule_protocol_icmp_model_json = {}
        security_group_rule_security_group_rule_protocol_icmp_model_json[
            'id'] = '6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_security_group_rule_protocol_icmp_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_security_group_rule_protocol_icmp_model_json[
            'direction'] = 'inbound'
        security_group_rule_security_group_rule_protocol_icmp_model_json[
            'ip_version'] = 'ipv4'
        security_group_rule_security_group_rule_protocol_icmp_model_json[
            'protocol'] = 'icmp'
        security_group_rule_security_group_rule_protocol_icmp_model_json[
            'remote'] = security_group_rule_remote_model
        security_group_rule_security_group_rule_protocol_icmp_model_json[
            'code'] = 0
        security_group_rule_security_group_rule_protocol_icmp_model_json[
            'type'] = 8

        # Construct a model instance of SecurityGroupRuleSecurityGroupRuleProtocolICMP by calling from_dict on the json representation
        security_group_rule_security_group_rule_protocol_icmp_model = SecurityGroupRuleSecurityGroupRuleProtocolICMP.from_dict(
            security_group_rule_security_group_rule_protocol_icmp_model_json)
        assert security_group_rule_security_group_rule_protocol_icmp_model != False

        # Construct a model instance of SecurityGroupRuleSecurityGroupRuleProtocolICMP by calling from_dict on the json representation
        security_group_rule_security_group_rule_protocol_icmp_model_dict = SecurityGroupRuleSecurityGroupRuleProtocolICMP.from_dict(
            security_group_rule_security_group_rule_protocol_icmp_model_json
        ).__dict__
        security_group_rule_security_group_rule_protocol_icmp_model2 = SecurityGroupRuleSecurityGroupRuleProtocolICMP(
            **security_group_rule_security_group_rule_protocol_icmp_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_security_group_rule_protocol_icmp_model == security_group_rule_security_group_rule_protocol_icmp_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_security_group_rule_protocol_icmp_model_json2 = security_group_rule_security_group_rule_protocol_icmp_model.to_dict(
        )
        assert security_group_rule_security_group_rule_protocol_icmp_model_json2 == security_group_rule_security_group_rule_protocol_icmp_model_json


class TestSecurityGroupRuleSecurityGroupRuleProtocolTCPUDP():
    """
    Test Class for SecurityGroupRuleSecurityGroupRuleProtocolTCPUDP
    """

    def test_security_group_rule_security_group_rule_protocol_tcpudp_serialization(
            self):
        """
        Test serialization/deserialization for SecurityGroupRuleSecurityGroupRuleProtocolTCPUDP
        """

        # Construct dict forms of any model objects needed in order to build this model.

        security_group_rule_remote_model = {}  # SecurityGroupRuleRemoteIP
        security_group_rule_remote_model['address'] = '192.168.3.4'

        # Construct a json representation of a SecurityGroupRuleSecurityGroupRuleProtocolTCPUDP model
        security_group_rule_security_group_rule_protocol_tcpudp_model_json = {}
        security_group_rule_security_group_rule_protocol_tcpudp_model_json[
            'id'] = '6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_security_group_rule_protocol_tcpudp_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a'
        security_group_rule_security_group_rule_protocol_tcpudp_model_json[
            'direction'] = 'inbound'
        security_group_rule_security_group_rule_protocol_tcpudp_model_json[
            'ip_version'] = 'ipv4'
        security_group_rule_security_group_rule_protocol_tcpudp_model_json[
            'protocol'] = 'udp'
        security_group_rule_security_group_rule_protocol_tcpudp_model_json[
            'remote'] = security_group_rule_remote_model
        security_group_rule_security_group_rule_protocol_tcpudp_model_json[
            'port_max'] = 22
        security_group_rule_security_group_rule_protocol_tcpudp_model_json[
            'port_min'] = 22

        # Construct a model instance of SecurityGroupRuleSecurityGroupRuleProtocolTCPUDP by calling from_dict on the json representation
        security_group_rule_security_group_rule_protocol_tcpudp_model = SecurityGroupRuleSecurityGroupRuleProtocolTCPUDP.from_dict(
            security_group_rule_security_group_rule_protocol_tcpudp_model_json)
        assert security_group_rule_security_group_rule_protocol_tcpudp_model != False

        # Construct a model instance of SecurityGroupRuleSecurityGroupRuleProtocolTCPUDP by calling from_dict on the json representation
        security_group_rule_security_group_rule_protocol_tcpudp_model_dict = SecurityGroupRuleSecurityGroupRuleProtocolTCPUDP.from_dict(
            security_group_rule_security_group_rule_protocol_tcpudp_model_json
        ).__dict__
        security_group_rule_security_group_rule_protocol_tcpudp_model2 = SecurityGroupRuleSecurityGroupRuleProtocolTCPUDP(
            **
            security_group_rule_security_group_rule_protocol_tcpudp_model_dict)

        # Verify the model instances are equivalent
        assert security_group_rule_security_group_rule_protocol_tcpudp_model == security_group_rule_security_group_rule_protocol_tcpudp_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_security_group_rule_protocol_tcpudp_model_json2 = security_group_rule_security_group_rule_protocol_tcpudp_model.to_dict(
        )
        assert security_group_rule_security_group_rule_protocol_tcpudp_model_json2 == security_group_rule_security_group_rule_protocol_tcpudp_model_json


class TestSubnetIdentityByCRN():
    """
    Test Class for SubnetIdentityByCRN
    """

    def test_subnet_identity_by_crn_serialization(self):
        """
        Test serialization/deserialization for SubnetIdentityByCRN
        """

        # Construct a json representation of a SubnetIdentityByCRN model
        subnet_identity_by_crn_model_json = {}
        subnet_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a model instance of SubnetIdentityByCRN by calling from_dict on the json representation
        subnet_identity_by_crn_model = SubnetIdentityByCRN.from_dict(
            subnet_identity_by_crn_model_json)
        assert subnet_identity_by_crn_model != False

        # Construct a model instance of SubnetIdentityByCRN by calling from_dict on the json representation
        subnet_identity_by_crn_model_dict = SubnetIdentityByCRN.from_dict(
            subnet_identity_by_crn_model_json).__dict__
        subnet_identity_by_crn_model2 = SubnetIdentityByCRN(
            **subnet_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert subnet_identity_by_crn_model == subnet_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_identity_by_crn_model_json2 = subnet_identity_by_crn_model.to_dict(
        )
        assert subnet_identity_by_crn_model_json2 == subnet_identity_by_crn_model_json


class TestSubnetIdentityByHref():
    """
    Test Class for SubnetIdentityByHref
    """

    def test_subnet_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for SubnetIdentityByHref
        """

        # Construct a json representation of a SubnetIdentityByHref model
        subnet_identity_by_href_model_json = {}
        subnet_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a model instance of SubnetIdentityByHref by calling from_dict on the json representation
        subnet_identity_by_href_model = SubnetIdentityByHref.from_dict(
            subnet_identity_by_href_model_json)
        assert subnet_identity_by_href_model != False

        # Construct a model instance of SubnetIdentityByHref by calling from_dict on the json representation
        subnet_identity_by_href_model_dict = SubnetIdentityByHref.from_dict(
            subnet_identity_by_href_model_json).__dict__
        subnet_identity_by_href_model2 = SubnetIdentityByHref(
            **subnet_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert subnet_identity_by_href_model == subnet_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_identity_by_href_model_json2 = subnet_identity_by_href_model.to_dict(
        )
        assert subnet_identity_by_href_model_json2 == subnet_identity_by_href_model_json


class TestSubnetIdentityById():
    """
    Test Class for SubnetIdentityById
    """

    def test_subnet_identity_by_id_serialization(self):
        """
        Test serialization/deserialization for SubnetIdentityById
        """

        # Construct a json representation of a SubnetIdentityById model
        subnet_identity_by_id_model_json = {}
        subnet_identity_by_id_model_json[
            'id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a model instance of SubnetIdentityById by calling from_dict on the json representation
        subnet_identity_by_id_model = SubnetIdentityById.from_dict(
            subnet_identity_by_id_model_json)
        assert subnet_identity_by_id_model != False

        # Construct a model instance of SubnetIdentityById by calling from_dict on the json representation
        subnet_identity_by_id_model_dict = SubnetIdentityById.from_dict(
            subnet_identity_by_id_model_json).__dict__
        subnet_identity_by_id_model2 = SubnetIdentityById(
            **subnet_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert subnet_identity_by_id_model == subnet_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_identity_by_id_model_json2 = subnet_identity_by_id_model.to_dict(
        )
        assert subnet_identity_by_id_model_json2 == subnet_identity_by_id_model_json


class TestSubnetPrototypeSubnetByCIDR():
    """
    Test Class for SubnetPrototypeSubnetByCIDR
    """

    def test_subnet_prototype_subnet_by_cidr_serialization(self):
        """
        Test serialization/deserialization for SubnetPrototypeSubnetByCIDR
        """

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_identity_model = {}  # NetworkACLIdentityById
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        public_gateway_identity_model = {}  # PublicGatewayIdentityById
        public_gateway_identity_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        resource_group_identity_model = {}  # ResourceGroupIdentityById
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        vpc_identity_model = {}  # VPCIdentityById
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        zone_identity_model = {}  # ZoneIdentityByName
        zone_identity_model['name'] = 'us-south-1'

        # Construct a json representation of a SubnetPrototypeSubnetByCIDR model
        subnet_prototype_subnet_by_cidr_model_json = {}
        subnet_prototype_subnet_by_cidr_model_json['name'] = 'my-subnet'
        subnet_prototype_subnet_by_cidr_model_json[
            'network_acl'] = network_acl_identity_model
        subnet_prototype_subnet_by_cidr_model_json[
            'public_gateway'] = public_gateway_identity_model
        subnet_prototype_subnet_by_cidr_model_json['ip_version'] = 'ipv4'
        subnet_prototype_subnet_by_cidr_model_json[
            'resource_group'] = resource_group_identity_model
        subnet_prototype_subnet_by_cidr_model_json['vpc'] = vpc_identity_model
        subnet_prototype_subnet_by_cidr_model_json[
            'ipv4_cidr_block'] = '10.0.0.0/24'
        subnet_prototype_subnet_by_cidr_model_json['zone'] = zone_identity_model

        # Construct a model instance of SubnetPrototypeSubnetByCIDR by calling from_dict on the json representation
        subnet_prototype_subnet_by_cidr_model = SubnetPrototypeSubnetByCIDR.from_dict(
            subnet_prototype_subnet_by_cidr_model_json)
        assert subnet_prototype_subnet_by_cidr_model != False

        # Construct a model instance of SubnetPrototypeSubnetByCIDR by calling from_dict on the json representation
        subnet_prototype_subnet_by_cidr_model_dict = SubnetPrototypeSubnetByCIDR.from_dict(
            subnet_prototype_subnet_by_cidr_model_json).__dict__
        subnet_prototype_subnet_by_cidr_model2 = SubnetPrototypeSubnetByCIDR(
            **subnet_prototype_subnet_by_cidr_model_dict)

        # Verify the model instances are equivalent
        assert subnet_prototype_subnet_by_cidr_model == subnet_prototype_subnet_by_cidr_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_prototype_subnet_by_cidr_model_json2 = subnet_prototype_subnet_by_cidr_model.to_dict(
        )
        assert subnet_prototype_subnet_by_cidr_model_json2 == subnet_prototype_subnet_by_cidr_model_json


class TestSubnetPrototypeSubnetByTotalCount():
    """
    Test Class for SubnetPrototypeSubnetByTotalCount
    """

    def test_subnet_prototype_subnet_by_total_count_serialization(self):
        """
        Test serialization/deserialization for SubnetPrototypeSubnetByTotalCount
        """

        # Construct dict forms of any model objects needed in order to build this model.

        network_acl_identity_model = {}  # NetworkACLIdentityById
        network_acl_identity_model[
            'id'] = 'a4e28308-8ee7-46ab-8108-9f881f22bdbf'

        public_gateway_identity_model = {}  # PublicGatewayIdentityById
        public_gateway_identity_model[
            'id'] = 'dc5431ef-1fc6-4861-adc9-a59d077d1241'

        resource_group_identity_model = {}  # ResourceGroupIdentityById
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        vpc_identity_model = {}  # VPCIdentityById
        vpc_identity_model['id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        zone_identity_model = {}  # ZoneIdentityByName
        zone_identity_model['name'] = 'us-south-1'

        # Construct a json representation of a SubnetPrototypeSubnetByTotalCount model
        subnet_prototype_subnet_by_total_count_model_json = {}
        subnet_prototype_subnet_by_total_count_model_json['name'] = 'my-subnet'
        subnet_prototype_subnet_by_total_count_model_json[
            'network_acl'] = network_acl_identity_model
        subnet_prototype_subnet_by_total_count_model_json[
            'public_gateway'] = public_gateway_identity_model
        subnet_prototype_subnet_by_total_count_model_json['ip_version'] = 'ipv4'
        subnet_prototype_subnet_by_total_count_model_json[
            'resource_group'] = resource_group_identity_model
        subnet_prototype_subnet_by_total_count_model_json[
            'vpc'] = vpc_identity_model
        subnet_prototype_subnet_by_total_count_model_json[
            'total_ipv4_address_count'] = 256
        subnet_prototype_subnet_by_total_count_model_json[
            'zone'] = zone_identity_model

        # Construct a model instance of SubnetPrototypeSubnetByTotalCount by calling from_dict on the json representation
        subnet_prototype_subnet_by_total_count_model = SubnetPrototypeSubnetByTotalCount.from_dict(
            subnet_prototype_subnet_by_total_count_model_json)
        assert subnet_prototype_subnet_by_total_count_model != False

        # Construct a model instance of SubnetPrototypeSubnetByTotalCount by calling from_dict on the json representation
        subnet_prototype_subnet_by_total_count_model_dict = SubnetPrototypeSubnetByTotalCount.from_dict(
            subnet_prototype_subnet_by_total_count_model_json).__dict__
        subnet_prototype_subnet_by_total_count_model2 = SubnetPrototypeSubnetByTotalCount(
            **subnet_prototype_subnet_by_total_count_model_dict)

        # Verify the model instances are equivalent
        assert subnet_prototype_subnet_by_total_count_model == subnet_prototype_subnet_by_total_count_model2

        # Convert model instance back to dict and verify no loss of data
        subnet_prototype_subnet_by_total_count_model_json2 = subnet_prototype_subnet_by_total_count_model.to_dict(
        )
        assert subnet_prototype_subnet_by_total_count_model_json2 == subnet_prototype_subnet_by_total_count_model_json


class TestVPCIdentityByCRN():
    """
    Test Class for VPCIdentityByCRN
    """

    def test_vpc_identity_by_crn_serialization(self):
        """
        Test serialization/deserialization for VPCIdentityByCRN
        """

        # Construct a json representation of a VPCIdentityByCRN model
        vpc_identity_by_crn_model_json = {}
        vpc_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a model instance of VPCIdentityByCRN by calling from_dict on the json representation
        vpc_identity_by_crn_model = VPCIdentityByCRN.from_dict(
            vpc_identity_by_crn_model_json)
        assert vpc_identity_by_crn_model != False

        # Construct a model instance of VPCIdentityByCRN by calling from_dict on the json representation
        vpc_identity_by_crn_model_dict = VPCIdentityByCRN.from_dict(
            vpc_identity_by_crn_model_json).__dict__
        vpc_identity_by_crn_model2 = VPCIdentityByCRN(
            **vpc_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert vpc_identity_by_crn_model == vpc_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        vpc_identity_by_crn_model_json2 = vpc_identity_by_crn_model.to_dict()
        assert vpc_identity_by_crn_model_json2 == vpc_identity_by_crn_model_json


class TestVPCIdentityByHref():
    """
    Test Class for VPCIdentityByHref
    """

    def test_vpc_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for VPCIdentityByHref
        """

        # Construct a json representation of a VPCIdentityByHref model
        vpc_identity_by_href_model_json = {}
        vpc_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a model instance of VPCIdentityByHref by calling from_dict on the json representation
        vpc_identity_by_href_model = VPCIdentityByHref.from_dict(
            vpc_identity_by_href_model_json)
        assert vpc_identity_by_href_model != False

        # Construct a model instance of VPCIdentityByHref by calling from_dict on the json representation
        vpc_identity_by_href_model_dict = VPCIdentityByHref.from_dict(
            vpc_identity_by_href_model_json).__dict__
        vpc_identity_by_href_model2 = VPCIdentityByHref(
            **vpc_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert vpc_identity_by_href_model == vpc_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        vpc_identity_by_href_model_json2 = vpc_identity_by_href_model.to_dict()
        assert vpc_identity_by_href_model_json2 == vpc_identity_by_href_model_json


class TestVPCIdentityById():
    """
    Test Class for VPCIdentityById
    """

    def test_vpc_identity_by_id_serialization(self):
        """
        Test serialization/deserialization for VPCIdentityById
        """

        # Construct a json representation of a VPCIdentityById model
        vpc_identity_by_id_model_json = {}
        vpc_identity_by_id_model_json[
            'id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a model instance of VPCIdentityById by calling from_dict on the json representation
        vpc_identity_by_id_model = VPCIdentityById.from_dict(
            vpc_identity_by_id_model_json)
        assert vpc_identity_by_id_model != False

        # Construct a model instance of VPCIdentityById by calling from_dict on the json representation
        vpc_identity_by_id_model_dict = VPCIdentityById.from_dict(
            vpc_identity_by_id_model_json).__dict__
        vpc_identity_by_id_model2 = VPCIdentityById(
            **vpc_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert vpc_identity_by_id_model == vpc_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        vpc_identity_by_id_model_json2 = vpc_identity_by_id_model.to_dict()
        assert vpc_identity_by_id_model_json2 == vpc_identity_by_id_model_json


class TestVolumeIdentityByCRN():
    """
    Test Class for VolumeIdentityByCRN
    """

    def test_volume_identity_by_crn_serialization(self):
        """
        Test serialization/deserialization for VolumeIdentityByCRN
        """

        # Construct a json representation of a VolumeIdentityByCRN model
        volume_identity_by_crn_model_json = {}
        volume_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a model instance of VolumeIdentityByCRN by calling from_dict on the json representation
        volume_identity_by_crn_model = VolumeIdentityByCRN.from_dict(
            volume_identity_by_crn_model_json)
        assert volume_identity_by_crn_model != False

        # Construct a model instance of VolumeIdentityByCRN by calling from_dict on the json representation
        volume_identity_by_crn_model_dict = VolumeIdentityByCRN.from_dict(
            volume_identity_by_crn_model_json).__dict__
        volume_identity_by_crn_model2 = VolumeIdentityByCRN(
            **volume_identity_by_crn_model_dict)

        # Verify the model instances are equivalent
        assert volume_identity_by_crn_model == volume_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        volume_identity_by_crn_model_json2 = volume_identity_by_crn_model.to_dict(
        )
        assert volume_identity_by_crn_model_json2 == volume_identity_by_crn_model_json


class TestVolumeIdentityByHref():
    """
    Test Class for VolumeIdentityByHref
    """

    def test_volume_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for VolumeIdentityByHref
        """

        # Construct a json representation of a VolumeIdentityByHref model
        volume_identity_by_href_model_json = {}
        volume_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a model instance of VolumeIdentityByHref by calling from_dict on the json representation
        volume_identity_by_href_model = VolumeIdentityByHref.from_dict(
            volume_identity_by_href_model_json)
        assert volume_identity_by_href_model != False

        # Construct a model instance of VolumeIdentityByHref by calling from_dict on the json representation
        volume_identity_by_href_model_dict = VolumeIdentityByHref.from_dict(
            volume_identity_by_href_model_json).__dict__
        volume_identity_by_href_model2 = VolumeIdentityByHref(
            **volume_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert volume_identity_by_href_model == volume_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        volume_identity_by_href_model_json2 = volume_identity_by_href_model.to_dict(
        )
        assert volume_identity_by_href_model_json2 == volume_identity_by_href_model_json


class TestVolumeIdentityById():
    """
    Test Class for VolumeIdentityById
    """

    def test_volume_identity_by_id_serialization(self):
        """
        Test serialization/deserialization for VolumeIdentityById
        """

        # Construct a json representation of a VolumeIdentityById model
        volume_identity_by_id_model_json = {}
        volume_identity_by_id_model_json[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a model instance of VolumeIdentityById by calling from_dict on the json representation
        volume_identity_by_id_model = VolumeIdentityById.from_dict(
            volume_identity_by_id_model_json)
        assert volume_identity_by_id_model != False

        # Construct a model instance of VolumeIdentityById by calling from_dict on the json representation
        volume_identity_by_id_model_dict = VolumeIdentityById.from_dict(
            volume_identity_by_id_model_json).__dict__
        volume_identity_by_id_model2 = VolumeIdentityById(
            **volume_identity_by_id_model_dict)

        # Verify the model instances are equivalent
        assert volume_identity_by_id_model == volume_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        volume_identity_by_id_model_json2 = volume_identity_by_id_model.to_dict(
        )
        assert volume_identity_by_id_model_json2 == volume_identity_by_id_model_json


class TestVolumeProfileIdentityByHref():
    """
    Test Class for VolumeProfileIdentityByHref
    """

    def test_volume_profile_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for VolumeProfileIdentityByHref
        """

        # Construct a json representation of a VolumeProfileIdentityByHref model
        volume_profile_identity_by_href_model_json = {}
        volume_profile_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose'

        # Construct a model instance of VolumeProfileIdentityByHref by calling from_dict on the json representation
        volume_profile_identity_by_href_model = VolumeProfileIdentityByHref.from_dict(
            volume_profile_identity_by_href_model_json)
        assert volume_profile_identity_by_href_model != False

        # Construct a model instance of VolumeProfileIdentityByHref by calling from_dict on the json representation
        volume_profile_identity_by_href_model_dict = VolumeProfileIdentityByHref.from_dict(
            volume_profile_identity_by_href_model_json).__dict__
        volume_profile_identity_by_href_model2 = VolumeProfileIdentityByHref(
            **volume_profile_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert volume_profile_identity_by_href_model == volume_profile_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        volume_profile_identity_by_href_model_json2 = volume_profile_identity_by_href_model.to_dict(
        )
        assert volume_profile_identity_by_href_model_json2 == volume_profile_identity_by_href_model_json


class TestVolumeProfileIdentityByName():
    """
    Test Class for VolumeProfileIdentityByName
    """

    def test_volume_profile_identity_by_name_serialization(self):
        """
        Test serialization/deserialization for VolumeProfileIdentityByName
        """

        # Construct a json representation of a VolumeProfileIdentityByName model
        volume_profile_identity_by_name_model_json = {}
        volume_profile_identity_by_name_model_json['name'] = 'general-purpose'

        # Construct a model instance of VolumeProfileIdentityByName by calling from_dict on the json representation
        volume_profile_identity_by_name_model = VolumeProfileIdentityByName.from_dict(
            volume_profile_identity_by_name_model_json)
        assert volume_profile_identity_by_name_model != False

        # Construct a model instance of VolumeProfileIdentityByName by calling from_dict on the json representation
        volume_profile_identity_by_name_model_dict = VolumeProfileIdentityByName.from_dict(
            volume_profile_identity_by_name_model_json).__dict__
        volume_profile_identity_by_name_model2 = VolumeProfileIdentityByName(
            **volume_profile_identity_by_name_model_dict)

        # Verify the model instances are equivalent
        assert volume_profile_identity_by_name_model == volume_profile_identity_by_name_model2

        # Convert model instance back to dict and verify no loss of data
        volume_profile_identity_by_name_model_json2 = volume_profile_identity_by_name_model.to_dict(
        )
        assert volume_profile_identity_by_name_model_json2 == volume_profile_identity_by_name_model_json


class TestVolumePrototypeVolumeByCapacity():
    """
    Test Class for VolumePrototypeVolumeByCapacity
    """

    def test_volume_prototype_volume_by_capacity_serialization(self):
        """
        Test serialization/deserialization for VolumePrototypeVolumeByCapacity
        """

        # Construct dict forms of any model objects needed in order to build this model.

        volume_profile_identity_model = {}  # VolumeProfileIdentityByName
        volume_profile_identity_model['name'] = 'general-purpose'

        encryption_key_identity_model = {}  # EncryptionKeyIdentityByCRN
        encryption_key_identity_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        resource_group_identity_model = {}  # ResourceGroupIdentityById
        resource_group_identity_model['id'] = 'fee82deba12e4c0fb69c3b09d1f12345'

        zone_identity_model = {}  # ZoneIdentityByName
        zone_identity_model['name'] = 'us-south-1'

        # Construct a json representation of a VolumePrototypeVolumeByCapacity model
        volume_prototype_volume_by_capacity_model_json = {}
        volume_prototype_volume_by_capacity_model_json['name'] = 'my-volume'
        volume_prototype_volume_by_capacity_model_json[
            'profile'] = volume_profile_identity_model
        volume_prototype_volume_by_capacity_model_json[
            'encryption_key'] = encryption_key_identity_model
        volume_prototype_volume_by_capacity_model_json['iops'] = 10000
        volume_prototype_volume_by_capacity_model_json[
            'resource_group'] = resource_group_identity_model
        volume_prototype_volume_by_capacity_model_json[
            'zone'] = zone_identity_model
        volume_prototype_volume_by_capacity_model_json['capacity'] = 100

        # Construct a model instance of VolumePrototypeVolumeByCapacity by calling from_dict on the json representation
        volume_prototype_volume_by_capacity_model = VolumePrototypeVolumeByCapacity.from_dict(
            volume_prototype_volume_by_capacity_model_json)
        assert volume_prototype_volume_by_capacity_model != False

        # Construct a model instance of VolumePrototypeVolumeByCapacity by calling from_dict on the json representation
        volume_prototype_volume_by_capacity_model_dict = VolumePrototypeVolumeByCapacity.from_dict(
            volume_prototype_volume_by_capacity_model_json).__dict__
        volume_prototype_volume_by_capacity_model2 = VolumePrototypeVolumeByCapacity(
            **volume_prototype_volume_by_capacity_model_dict)

        # Verify the model instances are equivalent
        assert volume_prototype_volume_by_capacity_model == volume_prototype_volume_by_capacity_model2

        # Convert model instance back to dict and verify no loss of data
        volume_prototype_volume_by_capacity_model_json2 = volume_prototype_volume_by_capacity_model.to_dict(
        )
        assert volume_prototype_volume_by_capacity_model_json2 == volume_prototype_volume_by_capacity_model_json


class TestZoneIdentityByHref():
    """
    Test Class for ZoneIdentityByHref
    """

    def test_zone_identity_by_href_serialization(self):
        """
        Test serialization/deserialization for ZoneIdentityByHref
        """

        # Construct a json representation of a ZoneIdentityByHref model
        zone_identity_by_href_model_json = {}
        zone_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1'

        # Construct a model instance of ZoneIdentityByHref by calling from_dict on the json representation
        zone_identity_by_href_model = ZoneIdentityByHref.from_dict(
            zone_identity_by_href_model_json)
        assert zone_identity_by_href_model != False

        # Construct a model instance of ZoneIdentityByHref by calling from_dict on the json representation
        zone_identity_by_href_model_dict = ZoneIdentityByHref.from_dict(
            zone_identity_by_href_model_json).__dict__
        zone_identity_by_href_model2 = ZoneIdentityByHref(
            **zone_identity_by_href_model_dict)

        # Verify the model instances are equivalent
        assert zone_identity_by_href_model == zone_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        zone_identity_by_href_model_json2 = zone_identity_by_href_model.to_dict(
        )
        assert zone_identity_by_href_model_json2 == zone_identity_by_href_model_json


class TestZoneIdentityByName():
    """
    Test Class for ZoneIdentityByName
    """

    def test_zone_identity_by_name_serialization(self):
        """
        Test serialization/deserialization for ZoneIdentityByName
        """

        # Construct a json representation of a ZoneIdentityByName model
        zone_identity_by_name_model_json = {}
        zone_identity_by_name_model_json['name'] = 'us-south-1'

        # Construct a model instance of ZoneIdentityByName by calling from_dict on the json representation
        zone_identity_by_name_model = ZoneIdentityByName.from_dict(
            zone_identity_by_name_model_json)
        assert zone_identity_by_name_model != False

        # Construct a model instance of ZoneIdentityByName by calling from_dict on the json representation
        zone_identity_by_name_model_dict = ZoneIdentityByName.from_dict(
            zone_identity_by_name_model_json).__dict__
        zone_identity_by_name_model2 = ZoneIdentityByName(
            **zone_identity_by_name_model_dict)

        # Verify the model instances are equivalent
        assert zone_identity_by_name_model == zone_identity_by_name_model2

        # Convert model instance back to dict and verify no loss of data
        zone_identity_by_name_model_json2 = zone_identity_by_name_model.to_dict(
        )
        assert zone_identity_by_name_model_json2 == zone_identity_by_name_model_json


class TestFlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN(
):
    """
    Test Class for FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN
    """

    def test_flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_serialization(
            self):
        """
        Test serialization/deserialization for FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN
        """

        # Construct a json representation of a FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN model
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model_json = {}
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a model instance of FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN by calling from_dict on the json representation
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model = FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN.from_dict(
            flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model_json
        )
        assert flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN by calling from_dict on the json representation
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model_dict = FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN.from_dict(
            flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model_json
        ).__dict__
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model2 = FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByCRN(
            **
            flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model == flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model_json2 = flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model.to_dict(
        )
        assert flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model_json2 == flow_log_collector_prototype_target_instance_identity_instance_identity_by_crn_model_json


class TestFlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref(
):
    """
    Test Class for FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref
    """

    def test_flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_serialization(
            self):
        """
        Test serialization/deserialization for FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref
        """

        # Construct a json representation of a FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref model
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model_json = {}
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a model instance of FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref by calling from_dict on the json representation
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model = FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref.from_dict(
            flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model_json
        )
        assert flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref by calling from_dict on the json representation
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model_dict = FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref.from_dict(
            flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model_json
        ).__dict__
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model2 = FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityByHref(
            **
            flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model == flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model_json2 = flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model.to_dict(
        )
        assert flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model_json2 == flow_log_collector_prototype_target_instance_identity_instance_identity_by_href_model_json


class TestFlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityById():
    """
    Test Class for FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityById
    """

    def test_flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_serialization(
            self):
        """
        Test serialization/deserialization for FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityById
        """

        # Construct a json representation of a FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityById model
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model_json = {}
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model_json[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a model instance of FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityById by calling from_dict on the json representation
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model = FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityById.from_dict(
            flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model_json
        )
        assert flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityById by calling from_dict on the json representation
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model_dict = FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityById.from_dict(
            flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model_json
        ).__dict__
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model2 = FlowLogCollectorPrototypeTargetInstanceIdentityInstanceIdentityById(
            **
            flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model == flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model_json2 = flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model.to_dict(
        )
        assert flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model_json2 == flow_log_collector_prototype_target_instance_identity_instance_identity_by_id_model_json


class TestFlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByHref(
):
    """
    Test Class for FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByHref
    """

    def test_flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_href_serialization(
            self):
        """
        Test serialization/deserialization for FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByHref
        """

        # Construct a json representation of a FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByHref model
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_href_model_json = {}
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e'

        # Construct a model instance of FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByHref by calling from_dict on the json representation
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_href_model = FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByHref.from_dict(
            flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_href_model_json
        )
        assert flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_href_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByHref by calling from_dict on the json representation
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_href_model_dict = FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByHref.from_dict(
            flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_href_model_json
        ).__dict__
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_href_model2 = FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByHref(
            **
            flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_href_model == flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_href_model_json2 = flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_href_model.to_dict(
        )
        assert flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_href_model_json2 == flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_href_model_json


class TestFlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityById(
):
    """
    Test Class for FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityById
    """

    def test_flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_id_serialization(
            self):
        """
        Test serialization/deserialization for FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityById
        """

        # Construct a json representation of a FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityById model
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_id_model_json = {}
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_id_model_json[
            'id'] = '10c02d81-0ecb-4dc5-897d-28392913b81e'

        # Construct a model instance of FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityById by calling from_dict on the json representation
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_id_model = FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityById.from_dict(
            flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_id_model_json
        )
        assert flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_id_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityById by calling from_dict on the json representation
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_id_model_dict = FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityById.from_dict(
            flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_id_model_json
        ).__dict__
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_id_model2 = FlowLogCollectorPrototypeTargetNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityById(
            **
            flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_id_model == flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_id_model_json2 = flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_id_model.to_dict(
        )
        assert flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_id_model_json2 == flow_log_collector_prototype_target_network_interface_identity_network_interface_identity_network_interface_identity_by_id_model_json


class TestFlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN():
    """
    Test Class for FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN
    """

    def test_flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_serialization(
            self):
        """
        Test serialization/deserialization for FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN
        """

        # Construct a json representation of a FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN model
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model_json = {}
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a model instance of FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN by calling from_dict on the json representation
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model = FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN.from_dict(
            flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model_json
        )
        assert flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN by calling from_dict on the json representation
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model_dict = FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN.from_dict(
            flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model_json
        ).__dict__
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model2 = FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByCRN(
            **
            flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model == flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model_json2 = flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model.to_dict(
        )
        assert flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model_json2 == flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_crn_model_json


class TestFlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref():
    """
    Test Class for FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref
    """

    def test_flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_serialization(
            self):
        """
        Test serialization/deserialization for FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref
        """

        # Construct a json representation of a FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref model
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model_json = {}
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a model instance of FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref by calling from_dict on the json representation
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model = FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref.from_dict(
            flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model_json
        )
        assert flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref by calling from_dict on the json representation
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model_dict = FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref.from_dict(
            flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model_json
        ).__dict__
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model2 = FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityByHref(
            **
            flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model == flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model_json2 = flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model.to_dict(
        )
        assert flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model_json2 == flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_href_model_json


class TestFlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityById():
    """
    Test Class for FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityById
    """

    def test_flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_serialization(
            self):
        """
        Test serialization/deserialization for FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityById
        """

        # Construct a json representation of a FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityById model
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model_json = {}
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model_json[
            'id'] = '7ec86020-1c6e-4889-b3f0-a15f2e50f87e'

        # Construct a model instance of FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityById by calling from_dict on the json representation
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model = FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityById.from_dict(
            flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model_json
        )
        assert flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityById by calling from_dict on the json representation
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model_dict = FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityById.from_dict(
            flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model_json
        ).__dict__
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model2 = FlowLogCollectorPrototypeTargetSubnetIdentitySubnetIdentityById(
            **
            flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model == flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model_json2 = flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model.to_dict(
        )
        assert flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model_json2 == flow_log_collector_prototype_target_subnet_identity_subnet_identity_by_id_model_json


class TestFlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN():
    """
    Test Class for FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN
    """

    def test_flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_serialization(
            self):
        """
        Test serialization/deserialization for FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN
        """

        # Construct a json representation of a FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN model
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model_json = {}
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a model instance of FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN by calling from_dict on the json representation
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model = FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN.from_dict(
            flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model_json
        )
        assert flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN by calling from_dict on the json representation
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model_dict = FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN.from_dict(
            flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model_json
        ).__dict__
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model2 = FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByCRN(
            **
            flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model == flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model_json2 = flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model.to_dict(
        )
        assert flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model_json2 == flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_crn_model_json


class TestFlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref():
    """
    Test Class for FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref
    """

    def test_flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_serialization(
            self):
        """
        Test serialization/deserialization for FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref
        """

        # Construct a json representation of a FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref model
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model_json = {}
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a model instance of FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref by calling from_dict on the json representation
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model = FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref.from_dict(
            flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model_json
        )
        assert flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref by calling from_dict on the json representation
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model_dict = FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref.from_dict(
            flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model_json
        ).__dict__
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model2 = FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityByHref(
            **
            flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model == flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model_json2 = flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model.to_dict(
        )
        assert flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model_json2 == flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_href_model_json


class TestFlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityById():
    """
    Test Class for FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityById
    """

    def test_flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_serialization(
            self):
        """
        Test serialization/deserialization for FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityById
        """

        # Construct a json representation of a FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityById model
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model_json = {}
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model_json[
            'id'] = '4727d842-f94f-4a2d-824a-9bc9b02c523b'

        # Construct a model instance of FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityById by calling from_dict on the json representation
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model = FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityById.from_dict(
            flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model_json
        )
        assert flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model != False

        # Construct a model instance of FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityById by calling from_dict on the json representation
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model_dict = FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityById.from_dict(
            flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model_json
        ).__dict__
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model2 = FlowLogCollectorPrototypeTargetVPCIdentityVPCIdentityById(
            **
            flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model == flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model_json2 = flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model.to_dict(
        )
        assert flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model_json2 == flow_log_collector_prototype_target_vpc_identity_vpc_identity_by_id_model_json


class TestLoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref(
):
    """
    Test Class for LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref
    """

    def test_load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_serialization(
            self):
        """
        Test serialization/deserialization for LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref
        """

        # Construct a json representation of a LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref model
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json = {}
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a model instance of LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref by calling from_dict on the json representation
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model = LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref.from_dict(
            load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json
        )
        assert load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model != False

        # Construct a model instance of LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref by calling from_dict on the json representation
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_dict = LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref.from_dict(
            load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json
        ).__dict__
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model2 = LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref(
            **
            load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model == load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json2 = load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model.to_dict(
        )
        assert load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json2 == load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json


class TestLoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById(
):
    """
    Test Class for LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById
    """

    def test_load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_serialization(
            self):
        """
        Test serialization/deserialization for LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById
        """

        # Construct a json representation of a LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json = {}
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a model instance of LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById by calling from_dict on the json representation
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model = LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById.from_dict(
            load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json
        )
        assert load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model != False

        # Construct a model instance of LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById by calling from_dict on the json representation
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_dict = LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById.from_dict(
            load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json
        ).__dict__
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model2 = LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById(
            **
            load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model == load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json2 = load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model.to_dict(
        )
        assert load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json2 == load_balancer_listener_policy_patch_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json


class TestLoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref(
):
    """
    Test Class for LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref
    """

    def test_load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_serialization(
            self):
        """
        Test serialization/deserialization for LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref
        """

        # Construct a json representation of a LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref model
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json = {}
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a model instance of LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref by calling from_dict on the json representation
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model = LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref.from_dict(
            load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json
        )
        assert load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model != False

        # Construct a model instance of LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref by calling from_dict on the json representation
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_dict = LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref.from_dict(
            load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json
        ).__dict__
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model2 = LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref(
            **
            load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model == load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json2 = load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model.to_dict(
        )
        assert load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json2 == load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_href_model_json


class TestLoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById(
):
    """
    Test Class for LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById
    """

    def test_load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_serialization(
            self):
        """
        Test serialization/deserialization for LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById
        """

        # Construct a json representation of a LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json = {}
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json[
            'id'] = '70294e14-4e61-11e8-bcf4-0242ac110004'

        # Construct a model instance of LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById by calling from_dict on the json representation
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model = LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById.from_dict(
            load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json
        )
        assert load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model != False

        # Construct a model instance of LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById by calling from_dict on the json representation
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_dict = LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById.from_dict(
            load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json
        ).__dict__
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model2 = LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityById(
            **
            load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model == load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json2 = load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model.to_dict(
        )
        assert load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json2 == load_balancer_listener_policy_prototype_target_load_balancer_pool_identity_load_balancer_pool_identity_by_id_model_json


class TestLoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByCRN(
):
    """
    Test Class for LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByCRN
    """

    def test_load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_crn_serialization(
            self):
        """
        Test serialization/deserialization for LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByCRN
        """

        # Construct a json representation of a LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByCRN model
        load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_crn_model_json = {}
        load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a model instance of LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByCRN by calling from_dict on the json representation
        load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_crn_model = LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByCRN.from_dict(
            load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_crn_model_json
        )
        assert load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_crn_model != False

        # Construct a model instance of LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByCRN by calling from_dict on the json representation
        load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_crn_model_dict = LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByCRN.from_dict(
            load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_crn_model_json
        ).__dict__
        load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_crn_model2 = LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByCRN(
            **
            load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_crn_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_crn_model == load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_crn_model_json2 = load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_crn_model.to_dict(
        )
        assert load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_crn_model_json2 == load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_crn_model_json


class TestLoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByHref(
):
    """
    Test Class for LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByHref
    """

    def test_load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_href_serialization(
            self):
        """
        Test serialization/deserialization for LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByHref
        """

        # Construct a json representation of a LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByHref model
        load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_href_model_json = {}
        load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a model instance of LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByHref by calling from_dict on the json representation
        load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_href_model = LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByHref.from_dict(
            load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_href_model_json
        )
        assert load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_href_model != False

        # Construct a model instance of LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByHref by calling from_dict on the json representation
        load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_href_model_dict = LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByHref.from_dict(
            load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_href_model_json
        ).__dict__
        load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_href_model2 = LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByHref(
            **
            load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_href_model == load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_href_model_json2 = load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_href_model.to_dict(
        )
        assert load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_href_model_json2 == load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_href_model_json


class TestLoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById(
):
    """
    Test Class for LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById
    """

    def test_load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_id_serialization(
            self):
        """
        Test serialization/deserialization for LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById
        """

        # Construct a json representation of a LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
        load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_id_model_json = {}
        load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_id_model_json[
            'id'] = '1e09281b-f177-46fb-baf1-bc152b2e391a'

        # Construct a model instance of LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById by calling from_dict on the json representation
        load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_id_model = LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById.from_dict(
            load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_id_model_json
        )
        assert load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_id_model != False

        # Construct a model instance of LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById by calling from_dict on the json representation
        load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_id_model_dict = LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById.from_dict(
            load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_id_model_json
        ).__dict__
        load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_id_model2 = LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById(
            **
            load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_id_model == load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_id_model_json2 = load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_id_model.to_dict(
        )
        assert load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_id_model_json2 == load_balancer_pool_member_target_prototype_instance_identity_instance_identity_by_id_model_json


class TestPublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress(
):
    """
    Test Class for PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress
    """

    def test_public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_serialization(
            self):
        """
        Test serialization/deserialization for PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress
        """

        # Construct a json representation of a PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress model
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model_json = {}
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model_json[
            'address'] = '203.0.113.1'

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model_json
        )
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model != False

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model_dict = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model_json
        ).__dict__
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model2 = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByAddress(
            **
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model_dict
        )

        # Verify the model instances are equivalent
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model == public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model_json2 = public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model.to_dict(
        )
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model_json2 == public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_address_model_json


class TestPublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN(
):
    """
    Test Class for PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN
    """

    def test_public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_serialization(
            self):
        """
        Test serialization/deserialization for PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN
        """

        # Construct a json representation of a PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN model
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model_json = {}
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689'

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model_json
        )
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model != False

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model_dict = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model_json
        ).__dict__
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model2 = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByCRN(
            **
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model_dict
        )

        # Verify the model instances are equivalent
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model == public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model_json2 = public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model.to_dict(
        )
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model_json2 == public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_crn_model_json


class TestPublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref(
):
    """
    Test Class for PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref
    """

    def test_public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_serialization(
            self):
        """
        Test serialization/deserialization for PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref
        """

        # Construct a json representation of a PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref model
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model_json = {}
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689'

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model_json
        )
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model != False

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model_dict = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model_json
        ).__dict__
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model2 = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityByHref(
            **
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model == public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model_json2 = public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model.to_dict(
        )
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model_json2 == public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_href_model_json


class TestPublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById(
):
    """
    Test Class for PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById
    """

    def test_public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_serialization(
            self):
        """
        Test serialization/deserialization for PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById
        """

        # Construct a json representation of a PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById model
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model_json = {}
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model_json[
            'id'] = '39300233-9995-4806-89a5-3c1b6eb88689'

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model_json
        )
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model != False

        # Construct a model instance of PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById by calling from_dict on the json representation
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model_dict = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById.from_dict(
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model_json
        ).__dict__
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model2 = PublicGatewayPrototypeFloatingIpFloatingIPIdentityFloatingIPIdentityById(
            **
            public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model == public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model_json2 = public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model.to_dict(
        )
        assert public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model_json2 == public_gateway_prototype_floating_ip_floating_ip_identity_floating_ip_identity_by_id_model_json


class TestSecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN(
):
    """
    Test Class for SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN
    """

    def test_security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_serialization(
            self):
        """
        Test serialization/deserialization for SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN
        """

        # Construct a json representation of a SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN model
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model_json = {}
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN by calling from_dict on the json representation
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model = SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN.from_dict(
            security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model_json
        )
        assert security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model != False

        # Construct a model instance of SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN by calling from_dict on the json representation
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model_dict = SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN.from_dict(
            security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model_json
        ).__dict__
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model2 = SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN(
            **
            security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model == security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model_json2 = security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model.to_dict(
        )
        assert security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model_json2 == security_group_rule_patch_remote_security_group_identity_security_group_identity_by_crn_model_json


class TestSecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref(
):
    """
    Test Class for SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref
    """

    def test_security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_serialization(
            self):
        """
        Test serialization/deserialization for SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref
        """

        # Construct a json representation of a SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref model
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model_json = {}
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref by calling from_dict on the json representation
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model = SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref.from_dict(
            security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model_json
        )
        assert security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model != False

        # Construct a model instance of SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref by calling from_dict on the json representation
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model_dict = SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref.from_dict(
            security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model_json
        ).__dict__
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model2 = SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref(
            **
            security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model == security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model_json2 = security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model.to_dict(
        )
        assert security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model_json2 == security_group_rule_patch_remote_security_group_identity_security_group_identity_by_href_model_json


class TestSecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityById(
):
    """
    Test Class for SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityById
    """

    def test_security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_serialization(
            self):
        """
        Test serialization/deserialization for SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityById
        """

        # Construct a json representation of a SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityById model
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model_json = {}
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model_json[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityById by calling from_dict on the json representation
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model = SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityById.from_dict(
            security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model_json
        )
        assert security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model != False

        # Construct a model instance of SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityById by calling from_dict on the json representation
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model_dict = SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityById.from_dict(
            security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model_json
        ).__dict__
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model2 = SecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityById(
            **
            security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model == security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model_json2 = security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model.to_dict(
        )
        assert security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model_json2 == security_group_rule_patch_remote_security_group_identity_security_group_identity_by_id_model_json


class TestSecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN(
):
    """
    Test Class for SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN
    """

    def test_security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_serialization(
            self):
        """
        Test serialization/deserialization for SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN
        """

        # Construct a json representation of a SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN model
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model_json = {}
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN by calling from_dict on the json representation
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model = SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN.from_dict(
            security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model_json
        )
        assert security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model != False

        # Construct a model instance of SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN by calling from_dict on the json representation
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model_dict = SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN.from_dict(
            security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model_json
        ).__dict__
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model2 = SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN(
            **
            security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model == security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model_json2 = security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model.to_dict(
        )
        assert security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model_json2 == security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_crn_model_json


class TestSecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref(
):
    """
    Test Class for SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref
    """

    def test_security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_serialization(
            self):
        """
        Test serialization/deserialization for SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref
        """

        # Construct a json representation of a SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref model
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model_json = {}
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref by calling from_dict on the json representation
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model = SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref.from_dict(
            security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model_json
        )
        assert security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model != False

        # Construct a model instance of SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref by calling from_dict on the json representation
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model_dict = SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref.from_dict(
            security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model_json
        ).__dict__
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model2 = SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref(
            **
            security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model == security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model_json2 = security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model.to_dict(
        )
        assert security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model_json2 == security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_href_model_json


class TestSecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityById(
):
    """
    Test Class for SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityById
    """

    def test_security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_serialization(
            self):
        """
        Test serialization/deserialization for SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityById
        """

        # Construct a json representation of a SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityById model
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model_json = {}
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model_json[
            'id'] = 'be5df5ca-12a0-494b-907e-aa6ec2bfa271'

        # Construct a model instance of SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityById by calling from_dict on the json representation
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model = SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityById.from_dict(
            security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model_json
        )
        assert security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model != False

        # Construct a model instance of SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityById by calling from_dict on the json representation
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model_dict = SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityById.from_dict(
            security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model_json
        ).__dict__
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model2 = SecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityById(
            **
            security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model == security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model_json2 = security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model.to_dict(
        )
        assert security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model_json2 == security_group_rule_prototype_remote_security_group_identity_security_group_identity_by_id_model_json


class TestVolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN(
):
    """
    Test Class for VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN
    """

    def test_volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_serialization(
            self):
        """
        Test serialization/deserialization for VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN
        """

        # Construct a json representation of a VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN model
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model_json = {}
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model_json[
            'crn'] = 'crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model = VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN.from_dict(
            volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model_json
        )
        assert volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model != False

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model_dict = VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN.from_dict(
            volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model_json
        ).__dict__
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model2 = VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByCRN(
            **
            volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model_dict
        )

        # Verify the model instances are equivalent
        assert volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model == volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model_json2 = volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model.to_dict(
        )
        assert volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model_json2 == volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_crn_model_json


class TestVolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref(
):
    """
    Test Class for VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref
    """

    def test_volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_serialization(
            self):
        """
        Test serialization/deserialization for VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref
        """

        # Construct a json representation of a VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref model
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model_json = {}
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model_json[
            'href'] = 'https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model = VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref.from_dict(
            volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model_json
        )
        assert volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model != False

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model_dict = VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref.from_dict(
            volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model_json
        ).__dict__
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model2 = VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityByHref(
            **
            volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model_dict
        )

        # Verify the model instances are equivalent
        assert volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model == volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model_json2 = volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model.to_dict(
        )
        assert volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model_json2 == volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_href_model_json


class TestVolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById(
):
    """
    Test Class for VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById
    """

    def test_volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_serialization(
            self):
        """
        Test serialization/deserialization for VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById
        """

        # Construct a json representation of a VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById model
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model_json = {}
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model_json[
            'id'] = '1a6b7274-678d-4dfb-8981-c71dd9d4daa5'

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model = VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById.from_dict(
            volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model_json
        )
        assert volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model != False

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model_dict = VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById.from_dict(
            volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model_json
        ).__dict__
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model2 = VolumeAttachmentPrototypeInstanceContextVolumeVolumeIdentityVolumeIdentityById(
            **
            volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model_dict
        )

        # Verify the model instances are equivalent
        assert volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model == volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model_json2 = volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model.to_dict(
        )
        assert volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model_json2 == volume_attachment_prototype_instance_context_volume_volume_identity_volume_identity_by_id_model_json


class TestVolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity(
):
    """
    Test Class for VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity
    """

    def test_volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_serialization(
            self):
        """
        Test serialization/deserialization for VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity
        """

        # Construct dict forms of any model objects needed in order to build this model.

        volume_profile_identity_model = {}  # VolumeProfileIdentityByName
        volume_profile_identity_model['name'] = 'general-purpose'

        encryption_key_identity_model = {}  # EncryptionKeyIdentityByCRN
        encryption_key_identity_model[
            'crn'] = 'crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179'

        # Construct a json representation of a VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity model
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json = {}
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json[
            'name'] = 'my-volume'
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json[
            'profile'] = volume_profile_identity_model
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json[
            'encryption_key'] = encryption_key_identity_model
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json[
            'iops'] = 10000
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json[
            'capacity'] = 100

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model = VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity.from_dict(
            volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json
        )
        assert volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model != False

        # Construct a model instance of VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity by calling from_dict on the json representation
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_dict = VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity.from_dict(
            volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json
        ).__dict__
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model2 = VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity(
            **
            volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_dict
        )

        # Verify the model instances are equivalent
        assert volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model == volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model2

        # Convert model instance back to dict and verify no loss of data
        volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json2 = volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model.to_dict(
        )
        assert volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json2 == volume_attachment_prototype_instance_context_volume_volume_prototype_instance_context_volume_prototype_instance_context_volume_by_capacity_model_json


# endregion
##############################################################################
# End of Model Tests
##############################################################################
